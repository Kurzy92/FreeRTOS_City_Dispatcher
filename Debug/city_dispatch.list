
city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c840  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001800  0800ca10  0800ca10  0000da10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e210  0800e210  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e210  0800e210  0000f210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e218  0800e218  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e218  0800e218  0000f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e21c  0800e21c  0000f21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e220  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019ca0  200001dc  0800e3fc  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019e7c  0800e3fc  00010e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235b6  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c58  00000000  00000000  000337c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00038420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001440  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b88c  00000000  00000000  0003b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c01  00000000  00000000  00066b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010019b  00000000  00000000  00089715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001898b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f50  00000000  00000000  001898f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00191844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9f8 	.word	0x0800c9f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c9f8 	.word	0x0800c9f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <getTasksStatus>:
 *      Author: eyalk
 */
#include "data.h"


void getTasksStatus(void) {
 8000ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af04      	add	r7, sp, #16
	uint32_t ulNotificationValue;
	bool printedStatus = false;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]
	for(;;) {
		if(!btnFlag) {
 8000ee4:	4b47      	ldr	r3, [pc, #284]	@ (8001004 <getTasksStatus+0x12c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d008      	beq.n	8000f04 <getTasksStatus+0x2c>
			printedStatus = false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71fb      	strb	r3, [r7, #7]
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8000ef6:	463a      	mov	r2, r7
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	2100      	movs	r1, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f007 fc16 	bl	8008730 <xTaskNotifyWait>
		}
		taskENTER_CRITICAL();
 8000f04:	f008 fb10 	bl	8009528 <vPortEnterCritical>
		 * Ambulance tasks details
		 * Police Tasks details
		 * Fire Dep tasks details
		 * Corona tasks details
		 */
		if(!printedStatus) {
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d074      	beq.n	8000ffe <getTasksStatus+0x126>
			printf("\n\n"
 8000f14:	4b3c      	ldr	r3, [pc, #240]	@ (8001008 <getTasksStatus+0x130>)
 8000f16:	f993 3000 	ldrsb.w	r3, [r3]
 8000f1a:	461e      	mov	r6, r3
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <getTasksStatus+0x134>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4698      	mov	r8, r3
 8000f22:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <getTasksStatus+0x138>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fb2e 	bl	8000588 <__aeabi_f2d>
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	460d      	mov	r5, r1
 8000f30:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <getTasksStatus+0x13c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb27 	bl	8000588 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f42:	e9cd 4500 	strd	r4, r5, [sp]
 8000f46:	4642      	mov	r2, r8
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4833      	ldr	r0, [pc, #204]	@ (8001018 <getTasksStatus+0x140>)
 8000f4c:	f009 fbe2 	bl	800a714 <iprintf>
					"          Average task running time: %.3f\r\n",
					(int)current_running_tasks,
					(int)total_tasks_ran,
					total_tasks_time,
					average_task_time);
			fflush(stdout);
 8000f50:	4b32      	ldr	r3, [pc, #200]	@ (800101c <getTasksStatus+0x144>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f009 fb06 	bl	800a568 <fflush>
			printf("********* Ambulances Tasks Status Report *********\n"
 8000f5c:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <getTasksStatus+0x148>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f1c3 0204 	rsb	r2, r3, #4
 8000f64:	4b2e      	ldr	r3, [pc, #184]	@ (8001020 <getTasksStatus+0x148>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2104      	movs	r1, #4
 8000f6a:	482e      	ldr	r0, [pc, #184]	@ (8001024 <getTasksStatus+0x14c>)
 8000f6c:	f009 fbd2 	bl	800a714 <iprintf>
					"              Current occupied tasks: %d\r\n"
					"              current available tasks: %d\r\n",
					(int)AMBULANCE_TASKS,
					(int)(AMBULANCE_TASKS - available_amb_tasks),
					(int)available_amb_tasks);
			fflush(stdout);
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <getTasksStatus+0x144>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f009 faf6 	bl	800a568 <fflush>
			printf("*********** Police Tasks Status Report ***********\n"
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <getTasksStatus+0x150>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f1c3 0203 	rsb	r2, r3, #3
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <getTasksStatus+0x150>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4828      	ldr	r0, [pc, #160]	@ (800102c <getTasksStatus+0x154>)
 8000f8c:	f009 fbc2 	bl	800a714 <iprintf>
					"             Current occupied tasks: %d\r\n"
					"             current available tasks: %d\r\n",
					(int)POLICE_TASKS,
					(int)(POLICE_TASKS - available_police_tasks),
					(int)available_police_tasks);
			fflush(stdout);
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <getTasksStatus+0x144>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fae6 	bl	800a568 <fflush>
			printf("********** Fire Dep Tasks Status Report **********\n"
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <getTasksStatus+0x158>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	f1c3 0202 	rsb	r2, r3, #2
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <getTasksStatus+0x158>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4822      	ldr	r0, [pc, #136]	@ (8001034 <getTasksStatus+0x15c>)
 8000fac:	f009 fbb2 	bl	800a714 <iprintf>
					"              Current occupied tasks: %d\r\n"
					"              current available tasks: %d\r\n",
					(int)FIRE_TASKS,
					(int)(FIRE_TASKS - available_fire_tasks),
					(int)available_fire_tasks);
			fflush(stdout);
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <getTasksStatus+0x144>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f009 fad6 	bl	800a568 <fflush>
			printf("*********** Corona Tasks Status Report ************\n"
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <getTasksStatus+0x160>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f1c3 0204 	rsb	r2, r3, #4
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <getTasksStatus+0x160>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2104      	movs	r1, #4
 8000fca:	481c      	ldr	r0, [pc, #112]	@ (800103c <getTasksStatus+0x164>)
 8000fcc:	f009 fba2 	bl	800a714 <iprintf>
					"              Current occupied tasks: %d\r\n"
					"              current available tasks: %d\r\n\n\n",
					(int)CORONA_TASKS,
					(int)(CORONA_TASKS - available_corona_tasks),
					(int)available_corona_tasks);
			fflush(stdout);
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <getTasksStatus+0x144>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f009 fac6 	bl	800a568 <fflush>
			printedStatus = !printedStatus;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	71fb      	strb	r3, [r7, #7]
			btnFlag = false;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <getTasksStatus+0x12c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]

			//taskYIELD();
		}
		taskEXIT_CRITICAL();
 8000ffe:	f008 fac9 	bl	8009594 <vPortExitCritical>
		if(!btnFlag) {
 8001002:	e76f      	b.n	8000ee4 <getTasksStatus+0xc>
 8001004:	20000858 	.word	0x20000858
 8001008:	20000848 	.word	0x20000848
 800100c:	20000840 	.word	0x20000840
 8001010:	2000083c 	.word	0x2000083c
 8001014:	20000844 	.word	0x20000844
 8001018:	0800ca10 	.word	0x0800ca10
 800101c:	20000020 	.word	0x20000020
 8001020:	20000000 	.word	0x20000000
 8001024:	0800cae8 	.word	0x0800cae8
 8001028:	20000001 	.word	0x20000001
 800102c:	0800cb9c 	.word	0x0800cb9c
 8001030:	20000002 	.word	0x20000002
 8001034:	0800cc48 	.word	0x0800cc48
 8001038:	20000003 	.word	0x20000003
 800103c:	0800ccfc 	.word	0x0800ccfc

08001040 <vDispatcherCode>:
 * This function implements the dispatcher task, which waits for notifications
 * to process and route incoming dispatcher packets to the appropriate department queues.
 *
 * @param pvParameters Parameters passed to the task (expected to be `1`).
 */
void vDispatcherCode(void *pvParameters) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b0a0      	sub	sp, #128	@ 0x80
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00d      	beq.n	800106a <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001052:	b672      	cpsid	i
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	b662      	cpsie	i
 8001062:	67fb      	str	r3, [r7, #124]	@ 0x7c
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	e7fd      	b.n	8001066 <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;
	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	480e      	ldr	r0, [pc, #56]	@ (80010a8 <vDispatcherCode+0x68>)
 8001070:	f002 fa3e 	bl	80034f0 <HAL_GPIO_WritePin>
		//printf("Dispatcher Entered BLOCKED state! \r\n");
		//fflush(stdout);
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001074:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f007 fb56 	bl	8008730 <xTaskNotifyWait>
		//printf("Dispatcher in RUNNING state! \n \tPerforming a task! \r\n");
		//fflush(stdout);
		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <vDispatcherCode+0x6c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f107 010c 	add.w	r1, r7, #12
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	4618      	mov	r0, r3
 8001092:	f005 ff4b 	bl	8006f2c <xQueueReceive>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	d1e6      	bne.n	800106a <vDispatcherCode+0x2a>
			packetRouting(&new_packet);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f805 	bl	80010b0 <packetRouting>
	for(;;) {
 80010a6:	e7e0      	b.n	800106a <vDispatcherCode+0x2a>
 80010a8:	40020400 	.word	0x40020400
 80010ac:	200007d0 	.word	0x200007d0

080010b0 <packetRouting>:
 * This function sends the given dispatcher packet to the queue corresponding
 * to its department.
 *
 * @param new_packet Pointer to the DispatcherPacket to be routed.
 */
void packetRouting(DispatcherPacket* new_packet) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	switch(new_packet->department) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d82f      	bhi.n	8001120 <packetRouting+0x70>
 80010c0:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <packetRouting+0x18>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	080010eb 	.word	0x080010eb
 80010d0:	080010fd 	.word	0x080010fd
 80010d4:	0800110f 	.word	0x0800110f
		case AMBULANCE:
			xQueueSend(qAmbulance, new_packet, portMAX_DELAY);
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <packetRouting+0x78>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f005 fd74 	bl	8006bd0 <xQueueGenericSend>
			break;
 80010e8:	e01a      	b.n	8001120 <packetRouting+0x70>
		case POLICE:
			xQueueSend(qPolice, new_packet, portMAX_DELAY);
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <packetRouting+0x7c>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	f005 fd6b 	bl	8006bd0 <xQueueGenericSend>
			break;
 80010fa:	e011      	b.n	8001120 <packetRouting+0x70>
		case FIRE:
			xQueueSend(qFire, new_packet, portMAX_DELAY);
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <packetRouting+0x80>)
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	f04f 32ff 	mov.w	r2, #4294967295
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f005 fd62 	bl	8006bd0 <xQueueGenericSend>
			break;
 800110c:	e008      	b.n	8001120 <packetRouting+0x70>
		case CORONA:
			xQueueSend(qCorona, new_packet, portMAX_DELAY);
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <packetRouting+0x84>)
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	f005 fd59 	bl	8006bd0 <xQueueGenericSend>
			break;
 800111e:	bf00      	nop
	}
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200007c0 	.word	0x200007c0
 800112c:	200007c4 	.word	0x200007c4
 8001130:	200007c8 	.word	0x200007c8
 8001134:	200007cc 	.word	0x200007cc

08001138 <generateDispatcherMSG>:
 * This function generates a dispatcher message based on a random department and message.
 * It also sets the time required to handle the task in ticks.
 *
 * @param hDispPacket Pointer to the DispatcherPacket to be filled with generated data.
 */
void generateDispatcherMSG(DispatcherPacket* hDispPacket) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	DepartmentsEnum dep;
	uint8_t msgIdx = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
	uint16_t range = LONGEST_TASK_DURATION_IN_TICKS - SHORTEST_TASK_DURATION_IN_TICKS + 1;
 8001144:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 8001148:	81bb      	strh	r3, [r7, #12]

	// Generate Department
	uint32_t random_number = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	4866      	ldr	r0, [pc, #408]	@ (80012f0 <generateDispatcherMSG+0x1b8>)
 8001156:	f003 fc9d 	bl	8004a94 <HAL_RNG_GenerateRandomNumber>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d107      	bne.n	8001170 <generateDispatcherMSG+0x38>
	        dep = (random_number % 4);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	73fb      	strb	r3, [r7, #15]
	        hDispPacket->department = dep;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	701a      	strb	r2, [r3, #0]
	}

	// Pick a message and set counter
	switch(dep) {
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b03      	cmp	r3, #3
 8001174:	f200 80a0 	bhi.w	80012b8 <generateDispatcherMSG+0x180>
 8001178:	a201      	add	r2, pc, #4	@ (adr r2, 8001180 <generateDispatcherMSG+0x48>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	08001191 	.word	0x08001191
 8001184:	080011d5 	.word	0x080011d5
 8001188:	08001225 	.word	0x08001225
 800118c:	08001275 	.word	0x08001275
		case AMBULANCE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	4856      	ldr	r0, [pc, #344]	@ (80012f0 <generateDispatcherMSG+0x1b8>)
 8001198:	f003 fc7c 	bl	8004a94 <HAL_RNG_GenerateRandomNumber>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <generateDispatcherMSG+0x74>
				msgIdx = (uint8_t)(random_number % AMB_STRINGS_LEN);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vAMBstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1c58      	adds	r0, r3, #1
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2264      	movs	r2, #100	@ 0x64
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <generateDispatcherMSG+0x1bc>)
 80011ba:	4413      	add	r3, r2
 80011bc:	2263      	movs	r2, #99	@ 0x63
 80011be:	4619      	mov	r1, r3
 80011c0:	f009 fc2c 	bl	800aa1c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_amb_tasks;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4a      	ldr	r2, [pc, #296]	@ (80012f8 <generateDispatcherMSG+0x1c0>)
 80011d0:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 80011d2:	e072      	b.n	80012ba <generateDispatcherMSG+0x182>


		case POLICE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	4845      	ldr	r0, [pc, #276]	@ (80012f0 <generateDispatcherMSG+0x1b8>)
 80011dc:	f003 fc5a 	bl	8004a94 <HAL_RNG_GenerateRandomNumber>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10a      	bne.n	80011fc <generateDispatcherMSG+0xc4>
				msgIdx = (uint8_t)(random_number % POLICE_STRINGS_LEN);
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	4b44      	ldr	r3, [pc, #272]	@ (80012fc <generateDispatcherMSG+0x1c4>)
 80011ea:	fba3 2301 	umull	r2, r3, r3, r1
 80011ee:	089a      	lsrs	r2, r3, #2
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	1aca      	subs	r2, r1, r3
 80011f8:	4613      	mov	r3, r2
 80011fa:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vPOLstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1c58      	adds	r0, r3, #1
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2264      	movs	r2, #100	@ 0x64
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	4a3d      	ldr	r2, [pc, #244]	@ (8001300 <generateDispatcherMSG+0x1c8>)
 800120a:	4413      	add	r3, r2
 800120c:	2263      	movs	r2, #99	@ 0x63
 800120e:	4619      	mov	r1, r3
 8001210:	f009 fc04 	bl	800aa1c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_police_tasks;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a39      	ldr	r2, [pc, #228]	@ (8001304 <generateDispatcherMSG+0x1cc>)
 8001220:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001222:	e04a      	b.n	80012ba <generateDispatcherMSG+0x182>


		case FIRE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4619      	mov	r1, r3
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <generateDispatcherMSG+0x1b8>)
 800122c:	f003 fc32 	bl	8004a94 <HAL_RNG_GenerateRandomNumber>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10a      	bne.n	800124c <generateDispatcherMSG+0x114>
				msgIdx = (uint8_t)(random_number % FIRE_STRINGS_LEN);
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <generateDispatcherMSG+0x1d0>)
 800123a:	fba3 2301 	umull	r2, r3, r3, r1
 800123e:	085a      	lsrs	r2, r3, #1
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	1aca      	subs	r2, r1, r3
 8001248:	4613      	mov	r3, r2
 800124a:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vFIREstrings[msgIdx], MAX_MSG_LENGTH - 1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1c58      	adds	r0, r3, #1
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	2264      	movs	r2, #100	@ 0x64
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a2c      	ldr	r2, [pc, #176]	@ (800130c <generateDispatcherMSG+0x1d4>)
 800125a:	4413      	add	r3, r2
 800125c:	2263      	movs	r2, #99	@ 0x63
 800125e:	4619      	mov	r1, r3
 8001260:	f009 fbdc 	bl	800aa1c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_fire_tasks;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <generateDispatcherMSG+0x1d8>)
 8001270:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001272:	e022      	b.n	80012ba <generateDispatcherMSG+0x182>


		case CORONA:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4619      	mov	r1, r3
 800127a:	481d      	ldr	r0, [pc, #116]	@ (80012f0 <generateDispatcherMSG+0x1b8>)
 800127c:	f003 fc0a 	bl	8004a94 <HAL_RNG_GenerateRandomNumber>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d104      	bne.n	8001290 <generateDispatcherMSG+0x158>
				msgIdx = (uint8_t)(random_number % CORONA_STRINGS_LEN);
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vCORstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	1c58      	adds	r0, r3, #1
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	2264      	movs	r2, #100	@ 0x64
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <generateDispatcherMSG+0x1dc>)
 800129e:	4413      	add	r3, r2
 80012a0:	2263      	movs	r2, #99	@ 0x63
 80012a2:	4619      	mov	r1, r3
 80012a4:	f009 fbba 	bl	800aa1c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_corona_tasks;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a19      	ldr	r2, [pc, #100]	@ (8001318 <generateDispatcherMSG+0x1e0>)
 80012b4:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 80012b6:	e000      	b.n	80012ba <generateDispatcherMSG+0x182>


		default:
			break;
 80012b8:	bf00      	nop
	}

	// Pick handling time
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <generateDispatcherMSG+0x1b8>)
 80012c2:	f003 fbe7 	bl	8004a94 <HAL_RNG_GenerateRandomNumber>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <generateDispatcherMSG+0x1b0>
		hDispPacket->timeToHandleInTicks = (uint16_t)(random_number % range) +
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	89ba      	ldrh	r2, [r7, #12]
 80012d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012d4:	fb01 f202 	mul.w	r2, r1, r2
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
													SHORTEST_TASK_DURATION_IN_TICKS;
	}
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200001f8 	.word	0x200001f8
 80012f4:	0800d2a8 	.word	0x0800d2a8
 80012f8:	20000000 	.word	0x20000000
 80012fc:	cccccccd 	.word	0xcccccccd
 8001300:	0800d5c8 	.word	0x0800d5c8
 8001304:	20000001 	.word	0x20000001
 8001308:	38e38e39 	.word	0x38e38e39
 800130c:	0800d7bc 	.word	0x0800d7bc
 8001310:	20000002 	.word	0x20000002
 8001314:	0800db40 	.word	0x0800db40
 8001318:	20000003 	.word	0x20000003

0800131c <error_handling>:
 *      Author: eyalk
 */

#include "error_handling.h"

void error_handling(char* err_msg) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (err_msg != NULL) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01b      	beq.n	8001362 <error_handling+0x46>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <error_handling+0x8c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f04f 31ff 	mov.w	r1, #4294967295
 8001332:	4618      	mov	r0, r3
 8001334:	f005 fee2 	bl	80070fc <xQueueSemaphoreTake>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d12b      	bne.n	8001396 <error_handling+0x7a>
			printf("%s\r\n", err_msg);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	481a      	ldr	r0, [pc, #104]	@ (80013ac <error_handling+0x90>)
 8001342:	f009 f9e7 	bl	800a714 <iprintf>
			fflush(stdout);
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <error_handling+0x94>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4618      	mov	r0, r3
 800134e:	f009 f90b 	bl	800a568 <fflush>
			xSemaphoreGive(printfMutex);
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <error_handling+0x8c>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	f005 fc38 	bl	8006bd0 <xQueueGenericSend>
 8001360:	e019      	b.n	8001396 <error_handling+0x7a>
		}
	} else {
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <error_handling+0x8c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f04f 31ff 	mov.w	r1, #4294967295
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fec6 	bl	80070fc <xQueueSemaphoreTake>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10f      	bne.n	8001396 <error_handling+0x7a>
			printf("Unknown error");
 8001376:	480f      	ldr	r0, [pc, #60]	@ (80013b4 <error_handling+0x98>)
 8001378:	f009 f9cc 	bl	800a714 <iprintf>
			fflush(stdout);
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <error_handling+0x94>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4618      	mov	r0, r3
 8001384:	f009 f8f0 	bl	800a568 <fflush>
			xSemaphoreGive(printfMutex);
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <error_handling+0x8c>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	2300      	movs	r3, #0
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	f005 fc1d 	bl	8006bd0 <xQueueGenericSend>
		}
	}
	printf("Program Terminated. \r\n");
 8001396:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <error_handling+0x9c>)
 8001398:	f009 fa24 	bl	800a7e4 <puts>
	Error_Handler();
 800139c:	f001 fa50 	bl	8002840 <Error_Handler>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000838 	.word	0x20000838
 80013ac:	0800cdb0 	.word	0x0800cdb0
 80013b0:	20000020 	.word	0x20000020
 80013b4:	0800cdb8 	.word	0x0800cdb8
 80013b8:	0800cdc8 	.word	0x0800cdc8

080013bc <initTasks>:
#include "init.h"

/**
 * @brief Initialize and start the various system tasks.
 */
void initTasks(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af02      	add	r7, sp, #8
	/* AMBULANCE TASK INIT */
	if(initAmbTasks() == -1) {
 80013c2:	f000 f95f 	bl	8001684 <initAmbTasks>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d102      	bne.n	80013d4 <initTasks+0x18>
		error_handling("Ambulance tasks creation error!\r\n");
 80013ce:	4834      	ldr	r0, [pc, #208]	@ (80014a0 <initTasks+0xe4>)
 80013d0:	f7ff ffa4 	bl	800131c <error_handling>
	}

	/* POLICE TASK INIT */
	if(initPolTasks() == -1) {
 80013d4:	f000 f9d6 	bl	8001784 <initPolTasks>
 80013d8:	4603      	mov	r3, r0
 80013da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013de:	d102      	bne.n	80013e6 <initTasks+0x2a>
		error_handling("Police tasks creation error!\r\n");
 80013e0:	4830      	ldr	r0, [pc, #192]	@ (80014a4 <initTasks+0xe8>)
 80013e2:	f7ff ff9b 	bl	800131c <error_handling>
	}

	/* FIRE DEP TASK INIT */
	if(initFireTasks() == -1) {
 80013e6:	f000 fa4d 	bl	8001884 <initFireTasks>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d102      	bne.n	80013f8 <initTasks+0x3c>
		error_handling("Fire Dep tasks creation error!\r\n");
 80013f2:	482d      	ldr	r0, [pc, #180]	@ (80014a8 <initTasks+0xec>)
 80013f4:	f7ff ff92 	bl	800131c <error_handling>
	}

	/* CORONA TASK INIT */
	if(initCoronaTasks() == -1) {
 80013f8:	f000 fac4 	bl	8001984 <initCoronaTasks>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001402:	d102      	bne.n	800140a <initTasks+0x4e>
		error_handling("Corona tasks creation error!\r\n");
 8001404:	4829      	ldr	r0, [pc, #164]	@ (80014ac <initTasks+0xf0>)
 8001406:	f7ff ff89 	bl	800131c <error_handling>
	}

	vTaskDelay(100);
 800140a:	2064      	movs	r0, #100	@ 0x64
 800140c:	f006 fb1c 	bl	8007a48 <vTaskDelay>

	BaseType_t status = xTaskCreate((TaskFunction_t)vDispatcherCode,
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <initTasks+0xf4>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2330      	movs	r3, #48	@ 0x30
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800141e:	4925      	ldr	r1, [pc, #148]	@ (80014b4 <initTasks+0xf8>)
 8001420:	4825      	ldr	r0, [pc, #148]	@ (80014b8 <initTasks+0xfc>)
 8001422:	f006 f9b1 	bl	8007788 <xTaskCreate>
 8001426:	6078      	str	r0, [r7, #4]
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							DISPATCHER_TASK_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d002      	beq.n	8001434 <initTasks+0x78>
		error_handling("Dispatcher task creation error!\r\n");
 800142e:	4823      	ldr	r0, [pc, #140]	@ (80014bc <initTasks+0x100>)
 8001430:	f7ff ff74 	bl	800131c <error_handling>
	}

	status = xTaskCreate((TaskFunction_t)tasksManagerTask,
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <initTasks+0x104>)
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	232e      	movs	r3, #46	@ 0x2e
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001442:	4920      	ldr	r1, [pc, #128]	@ (80014c4 <initTasks+0x108>)
 8001444:	4820      	ldr	r0, [pc, #128]	@ (80014c8 <initTasks+0x10c>)
 8001446:	f006 f99f 	bl	8007788 <xTaskCreate>
 800144a:	6078      	str	r0, [r7, #4]
						"tasks_manager",
						TASKS_MEMORY_SIZE,
						(void*)1,
						MANAGER_TASK_PRIORITY,
						&vTasksManagerTask);
	if(status != pdTRUE) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d002      	beq.n	8001458 <initTasks+0x9c>
		error_handling("Task Manager task creation error!\r\n");
 8001452:	481e      	ldr	r0, [pc, #120]	@ (80014cc <initTasks+0x110>)
 8001454:	f7ff ff62 	bl	800131c <error_handling>
	}
	status = xTaskCreate((TaskFunction_t)getTasksStatus,
 8001458:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <initTasks+0x114>)
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	2331      	movs	r3, #49	@ 0x31
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	491b      	ldr	r1, [pc, #108]	@ (80014d4 <initTasks+0x118>)
 8001466:	481c      	ldr	r0, [pc, #112]	@ (80014d8 <initTasks+0x11c>)
 8001468:	f006 f98e 	bl	8007788 <xTaskCreate>
 800146c:	6078      	str	r0, [r7, #4]
						"get_data_task",
						configMINIMAL_STACK_SIZE,
						(void*)1,
						GET_DATA_TASK_PRIORITY,
						&vGetDataTask);
	if(status != pdTRUE) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d002      	beq.n	800147a <initTasks+0xbe>
		error_handling("Get Data task creation error!\r\n");
 8001474:	4819      	ldr	r0, [pc, #100]	@ (80014dc <initTasks+0x120>)
 8001476:	f7ff ff51 	bl	800131c <error_handling>
	}


	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800147a:	4819      	ldr	r0, [pc, #100]	@ (80014e0 <initTasks+0x124>)
 800147c:	f003 fc20 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <initTasks+0xd0>
		error_handling("Failed to start timer2!\r\n");
 8001486:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <initTasks+0x128>)
 8001488:	f7ff ff48 	bl	800131c <error_handling>
	}

	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 800148c:	463a      	mov	r2, r7
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	2100      	movs	r1, #0
 8001494:	2000      	movs	r0, #0
 8001496:	f007 f94b 	bl	8008730 <xTaskNotifyWait>
	for(;;) {
 800149a:	bf00      	nop
 800149c:	e7f6      	b.n	800148c <initTasks+0xd0>
 800149e:	bf00      	nop
 80014a0:	0800cde0 	.word	0x0800cde0
 80014a4:	0800ce04 	.word	0x0800ce04
 80014a8:	0800ce24 	.word	0x0800ce24
 80014ac:	0800ce48 	.word	0x0800ce48
 80014b0:	20000808 	.word	0x20000808
 80014b4:	0800ce68 	.word	0x0800ce68
 80014b8:	08001041 	.word	0x08001041
 80014bc:	0800ce78 	.word	0x0800ce78
 80014c0:	20000810 	.word	0x20000810
 80014c4:	0800ce9c 	.word	0x0800ce9c
 80014c8:	08001a85 	.word	0x08001a85
 80014cc:	0800ceac 	.word	0x0800ceac
 80014d0:	20000814 	.word	0x20000814
 80014d4:	0800ced0 	.word	0x0800ced0
 80014d8:	08000ed9 	.word	0x08000ed9
 80014dc:	0800cee0 	.word	0x0800cee0
 80014e0:	20000208 	.word	0x20000208
 80014e4:	0800cf00 	.word	0x0800cf00

080014e8 <initQueues>:
}

/**
 * @brief Initialize all required queues.
 */
void initQueues(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	qAmbulance = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80014ec:	2200      	movs	r2, #0
 80014ee:	216c      	movs	r1, #108	@ 0x6c
 80014f0:	200a      	movs	r0, #10
 80014f2:	f005 fad4 	bl	8006a9e <xQueueGenericCreate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <initQueues+0xa0>)
 80014fa:	6013      	str	r3, [r2, #0]
	if(qAmbulance == NULL) {
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <initQueues+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <initQueues+0x22>
		error_handling("Ambulance queue creation failed!\r\n");
 8001504:	4821      	ldr	r0, [pc, #132]	@ (800158c <initQueues+0xa4>)
 8001506:	f7ff ff09 	bl	800131c <error_handling>
	}
	qPolice = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 800150a:	2200      	movs	r2, #0
 800150c:	216c      	movs	r1, #108	@ 0x6c
 800150e:	200a      	movs	r0, #10
 8001510:	f005 fac5 	bl	8006a9e <xQueueGenericCreate>
 8001514:	4603      	mov	r3, r0
 8001516:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <initQueues+0xa8>)
 8001518:	6013      	str	r3, [r2, #0]
	if(qPolice == NULL) {
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <initQueues+0xa8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <initQueues+0x40>
		error_handling("Police queue creation failed!\r\n");
 8001522:	481c      	ldr	r0, [pc, #112]	@ (8001594 <initQueues+0xac>)
 8001524:	f7ff fefa 	bl	800131c <error_handling>
	}
	qFire = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8001528:	2200      	movs	r2, #0
 800152a:	216c      	movs	r1, #108	@ 0x6c
 800152c:	200a      	movs	r0, #10
 800152e:	f005 fab6 	bl	8006a9e <xQueueGenericCreate>
 8001532:	4603      	mov	r3, r0
 8001534:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <initQueues+0xb0>)
 8001536:	6013      	str	r3, [r2, #0]
	if(qFire == NULL) {
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <initQueues+0xb0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <initQueues+0x5e>
		error_handling("Fire Dep queue creation failed!\r\n");
 8001540:	4816      	ldr	r0, [pc, #88]	@ (800159c <initQueues+0xb4>)
 8001542:	f7ff feeb 	bl	800131c <error_handling>
	}
	qCorona = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8001546:	2200      	movs	r2, #0
 8001548:	216c      	movs	r1, #108	@ 0x6c
 800154a:	200a      	movs	r0, #10
 800154c:	f005 faa7 	bl	8006a9e <xQueueGenericCreate>
 8001550:	4603      	mov	r3, r0
 8001552:	4a13      	ldr	r2, [pc, #76]	@ (80015a0 <initQueues+0xb8>)
 8001554:	6013      	str	r3, [r2, #0]
	if(qCorona == NULL) {
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <initQueues+0xb8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <initQueues+0x7c>
		error_handling("Corona queue creation failed!\r\n");
 800155e:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <initQueues+0xbc>)
 8001560:	f7ff fedc 	bl	800131c <error_handling>
	}
	qDispatcher = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8001564:	2200      	movs	r2, #0
 8001566:	216c      	movs	r1, #108	@ 0x6c
 8001568:	200a      	movs	r0, #10
 800156a:	f005 fa98 	bl	8006a9e <xQueueGenericCreate>
 800156e:	4603      	mov	r3, r0
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <initQueues+0xc0>)
 8001572:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <initQueues+0xc0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <initQueues+0x9a>
		error_handling("Dispatcher queue creation failed!\r\n");
 800157c:	480b      	ldr	r0, [pc, #44]	@ (80015ac <initQueues+0xc4>)
 800157e:	f7ff fecd 	bl	800131c <error_handling>
	}
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200007c0 	.word	0x200007c0
 800158c:	0800cf1c 	.word	0x0800cf1c
 8001590:	200007c4 	.word	0x200007c4
 8001594:	0800cf40 	.word	0x0800cf40
 8001598:	200007c8 	.word	0x200007c8
 800159c:	0800cf60 	.word	0x0800cf60
 80015a0:	200007cc 	.word	0x200007cc
 80015a4:	0800cf84 	.word	0x0800cf84
 80015a8:	200007d0 	.word	0x200007d0
 80015ac:	0800cfa4 	.word	0x0800cfa4

080015b0 <initSemaphores>:


/**
 * @brief Initialize all required semaphores.
 */
void initSemaphores(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	printfMutex = xSemaphoreCreateMutex();
 80015b4:	2001      	movs	r0, #1
 80015b6:	f005 faf2 	bl	8006b9e <xQueueCreateMutex>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a25      	ldr	r2, [pc, #148]	@ (8001654 <initSemaphores+0xa4>)
 80015be:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 80015c0:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <initSemaphores+0xa4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <initSemaphores+0x1e>
		error_handling("Print mutex creation failed!\r\n");
 80015c8:	4823      	ldr	r0, [pc, #140]	@ (8001658 <initSemaphores+0xa8>)
 80015ca:	f7ff fea7 	bl	800131c <error_handling>
	}
	xTasksDataMutex = xSemaphoreCreateMutex();
 80015ce:	2001      	movs	r0, #1
 80015d0:	f005 fae5 	bl	8006b9e <xQueueCreateMutex>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a21      	ldr	r2, [pc, #132]	@ (800165c <initSemaphores+0xac>)
 80015d8:	6013      	str	r3, [r2, #0]
	if(xTasksDataMutex == NULL) {
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <initSemaphores+0xac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <initSemaphores+0x38>
		error_handling("Tasks data mutex creation failed!\r\n");
 80015e2:	481f      	ldr	r0, [pc, #124]	@ (8001660 <initSemaphores+0xb0>)
 80015e4:	f7ff fe9a 	bl	800131c <error_handling>
	}
	AmbTasksStatusMutex = xSemaphoreCreateMutex();
 80015e8:	2001      	movs	r0, #1
 80015ea:	f005 fad8 	bl	8006b9e <xQueueCreateMutex>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <initSemaphores+0xb4>)
 80015f2:	6013      	str	r3, [r2, #0]
	if(AmbTasksStatusMutex == NULL) {
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <initSemaphores+0xb4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <initSemaphores+0x52>
		error_handling("Ambulance tasks mutex creation failed!\r\n");
 80015fc:	481a      	ldr	r0, [pc, #104]	@ (8001668 <initSemaphores+0xb8>)
 80015fe:	f7ff fe8d 	bl	800131c <error_handling>
	}
	PolTasksStatusMutex = xSemaphoreCreateMutex();
 8001602:	2001      	movs	r0, #1
 8001604:	f005 facb 	bl	8006b9e <xQueueCreateMutex>
 8001608:	4603      	mov	r3, r0
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <initSemaphores+0xbc>)
 800160c:	6013      	str	r3, [r2, #0]
	if(PolTasksStatusMutex == NULL) {
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <initSemaphores+0xbc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <initSemaphores+0x6c>
		error_handling("Police tasks mutex creation failed!\r\n");
 8001616:	4816      	ldr	r0, [pc, #88]	@ (8001670 <initSemaphores+0xc0>)
 8001618:	f7ff fe80 	bl	800131c <error_handling>
	}
	FireTasksStatusMutex = xSemaphoreCreateMutex();
 800161c:	2001      	movs	r0, #1
 800161e:	f005 fabe 	bl	8006b9e <xQueueCreateMutex>
 8001622:	4603      	mov	r3, r0
 8001624:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <initSemaphores+0xc4>)
 8001626:	6013      	str	r3, [r2, #0]
	if(FireTasksStatusMutex == NULL) {
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <initSemaphores+0xc4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <initSemaphores+0x86>
		error_handling("Fire Dep tasks mutex creation failed!\r\n");
 8001630:	4811      	ldr	r0, [pc, #68]	@ (8001678 <initSemaphores+0xc8>)
 8001632:	f7ff fe73 	bl	800131c <error_handling>
	}
	CorTasksStatusMutex = xSemaphoreCreateMutex();
 8001636:	2001      	movs	r0, #1
 8001638:	f005 fab1 	bl	8006b9e <xQueueCreateMutex>
 800163c:	4603      	mov	r3, r0
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <initSemaphores+0xcc>)
 8001640:	6013      	str	r3, [r2, #0]
	if(CorTasksStatusMutex == NULL) {
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <initSemaphores+0xcc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <initSemaphores+0xa0>
		error_handling("Corona tasks mutex creation failed!\r\n");
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <initSemaphores+0xd0>)
 800164c:	f7ff fe66 	bl	800131c <error_handling>
	}
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000838 	.word	0x20000838
 8001658:	0800cfc8 	.word	0x0800cfc8
 800165c:	2000084c 	.word	0x2000084c
 8001660:	0800cfe8 	.word	0x0800cfe8
 8001664:	2000081c 	.word	0x2000081c
 8001668:	0800d00c 	.word	0x0800d00c
 800166c:	20000824 	.word	0x20000824
 8001670:	0800d038 	.word	0x0800d038
 8001674:	2000082c 	.word	0x2000082c
 8001678:	0800d060 	.word	0x0800d060
 800167c:	20000834 	.word	0x20000834
 8001680:	0800d088 	.word	0x0800d088

08001684 <initAmbTasks>:
/**
 * @brief Initialize and start Ambulance tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initAmbTasks(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af02      	add	r7, sp, #8
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e045      	b.n	800171c <initAmbTasks+0x98>
		taskInit_t* ambulance_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001690:	2014      	movs	r0, #20
 8001692:	f008 f879 	bl	8009788 <pvPortMalloc>
 8001696:	61b8      	str	r0, [r7, #24]
		configASSERT(ambulance_taskInit != NULL);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <initAmbTasks+0x36>
	__asm volatile
 800169e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016a2:	b672      	cpsid	i
 80016a4:	f383 8811 	msr	BASEPRI, r3
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	f3bf 8f4f 	dsb	sy
 80016b0:	b662      	cpsie	i
 80016b2:	613b      	str	r3, [r7, #16]
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	e7fd      	b.n	80016b6 <initAmbTasks+0x32>

		ambulance_taskInit->department = AMBULANCE;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
		ambulance_taskInit->taskIdentifier = i;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	705a      	strb	r2, [r3, #1]
		ambulance_taskInit->pQhandler = &qAmbulance;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	4a25      	ldr	r2, [pc, #148]	@ (8001760 <initAmbTasks+0xdc>)
 80016cc:	605a      	str	r2, [r3, #4]
		ambulance_taskInit->pSemHandler = &AmbTasksStatusMutex;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4a24      	ldr	r2, [pc, #144]	@ (8001764 <initAmbTasks+0xe0>)
 80016d2:	609a      	str	r2, [r3, #8]
		ambulance_taskInit->bTaskStatusArr = bAmbTasksStatus;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	4a24      	ldr	r2, [pc, #144]	@ (8001768 <initAmbTasks+0xe4>)
 80016d8:	60da      	str	r2, [r3, #12]
		ambulance_taskInit->numOfTasks = AMBULANCE_TASKS;
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2204      	movs	r2, #4
 80016de:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i);
 80016e0:	4638      	mov	r0, r7
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4a21      	ldr	r2, [pc, #132]	@ (800176c <initAmbTasks+0xe8>)
 80016e6:	2110      	movs	r1, #16
 80016e8:	f009 f884 	bl	800a7f4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001770 <initAmbTasks+0xec>)
 80016f2:	4413      	add	r3, r2
 80016f4:	4639      	mov	r1, r7
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	232f      	movs	r3, #47	@ 0x2f
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001702:	481c      	ldr	r0, [pc, #112]	@ (8001774 <initAmbTasks+0xf0>)
 8001704:	f006 f840 	bl	8007788 <xTaskCreate>
 8001708:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*)ambulance_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d002      	beq.n	8001716 <initAmbTasks+0x92>
	 		return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e020      	b.n	8001758 <initAmbTasks+0xd4>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b03      	cmp	r3, #3
 8001720:	ddb6      	ble.n	8001690 <initAmbTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <initAmbTasks+0xf4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 31ff 	mov.w	r1, #4294967295
 800172a:	4618      	mov	r0, r3
 800172c:	f005 fce6 	bl	80070fc <xQueueSemaphoreTake>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10f      	bne.n	8001756 <initAmbTasks+0xd2>
		printf("Started Ambulance Threads! \r\n");
 8001736:	4811      	ldr	r0, [pc, #68]	@ (800177c <initAmbTasks+0xf8>)
 8001738:	f009 f854 	bl	800a7e4 <puts>
		fflush(stdout);
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <initAmbTasks+0xfc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4618      	mov	r0, r3
 8001744:	f008 ff10 	bl	800a568 <fflush>
		xSemaphoreGive(printfMutex);
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <initAmbTasks+0xf4>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	f005 fa3d 	bl	8006bd0 <xQueueGenericSend>
	}
	return 0;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200007c0 	.word	0x200007c0
 8001764:	2000081c 	.word	0x2000081c
 8001768:	20000818 	.word	0x20000818
 800176c:	0800d0b0 	.word	0x0800d0b0
 8001770:	200007d4 	.word	0x200007d4
 8001774:	08001ce5 	.word	0x08001ce5
 8001778:	20000838 	.word	0x20000838
 800177c:	0800d0c0 	.word	0x0800d0c0
 8001780:	20000020 	.word	0x20000020

08001784 <initPolTasks>:
/**
 * @brief Initialize and start Police tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initPolTasks(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af02      	add	r7, sp, #8
	for(int i=0; i<POLICE_TASKS; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e045      	b.n	800181c <initPolTasks+0x98>
		taskInit_t* police_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001790:	2014      	movs	r0, #20
 8001792:	f007 fff9 	bl	8009788 <pvPortMalloc>
 8001796:	61b8      	str	r0, [r7, #24]
		configASSERT(police_taskInit != NULL);
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <initPolTasks+0x36>
	__asm volatile
 800179e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017a2:	b672      	cpsid	i
 80017a4:	f383 8811 	msr	BASEPRI, r3
 80017a8:	f3bf 8f6f 	isb	sy
 80017ac:	f3bf 8f4f 	dsb	sy
 80017b0:	b662      	cpsie	i
 80017b2:	613b      	str	r3, [r7, #16]
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	e7fd      	b.n	80017b6 <initPolTasks+0x32>

		police_taskInit->department = POLICE;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		police_taskInit->taskIdentifier = i;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	705a      	strb	r2, [r3, #1]
		police_taskInit->pQhandler = &qPolice;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <initPolTasks+0xdc>)
 80017cc:	605a      	str	r2, [r3, #4]
		police_taskInit->pSemHandler = &PolTasksStatusMutex;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <initPolTasks+0xe0>)
 80017d2:	609a      	str	r2, [r3, #8]
		police_taskInit->bTaskStatusArr = bPolTasksStatus;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	4a24      	ldr	r2, [pc, #144]	@ (8001868 <initPolTasks+0xe4>)
 80017d8:	60da      	str	r2, [r3, #12]
		police_taskInit->numOfTasks = POLICE_TASKS;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2203      	movs	r2, #3
 80017de:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i);
 80017e0:	4638      	mov	r0, r7
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4a21      	ldr	r2, [pc, #132]	@ (800186c <initPolTasks+0xe8>)
 80017e6:	2110      	movs	r1, #16
 80017e8:	f009 f804 	bl	800a7f4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <initPolTasks+0xec>)
 80017f2:	4413      	add	r3, r2
 80017f4:	4639      	mov	r1, r7
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	232f      	movs	r3, #47	@ 0x2f
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001802:	481c      	ldr	r0, [pc, #112]	@ (8001874 <initPolTasks+0xf0>)
 8001804:	f005 ffc0 	bl	8007788 <xTaskCreate>
 8001808:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) police_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d002      	beq.n	8001816 <initPolTasks+0x92>
	 		return -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	e020      	b.n	8001858 <initPolTasks+0xd4>
	for(int i=0; i<POLICE_TASKS; i++) {
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b02      	cmp	r3, #2
 8001820:	ddb6      	ble.n	8001790 <initPolTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <initPolTasks+0xf4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f04f 31ff 	mov.w	r1, #4294967295
 800182a:	4618      	mov	r0, r3
 800182c:	f005 fc66 	bl	80070fc <xQueueSemaphoreTake>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10f      	bne.n	8001856 <initPolTasks+0xd2>
		printf("Started Police Threads! \r\n");
 8001836:	4811      	ldr	r0, [pc, #68]	@ (800187c <initPolTasks+0xf8>)
 8001838:	f008 ffd4 	bl	800a7e4 <puts>
		fflush(stdout);
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <initPolTasks+0xfc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4618      	mov	r0, r3
 8001844:	f008 fe90 	bl	800a568 <fflush>
		xSemaphoreGive(printfMutex);
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <initPolTasks+0xf4>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	f005 f9bd 	bl	8006bd0 <xQueueGenericSend>
	}
	return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200007c4 	.word	0x200007c4
 8001864:	20000824 	.word	0x20000824
 8001868:	20000820 	.word	0x20000820
 800186c:	0800d0e0 	.word	0x0800d0e0
 8001870:	200007e4 	.word	0x200007e4
 8001874:	08001ce5 	.word	0x08001ce5
 8001878:	20000838 	.word	0x20000838
 800187c:	0800d0ec 	.word	0x0800d0ec
 8001880:	20000020 	.word	0x20000020

08001884 <initFireTasks>:
/**
 * @brief Initialize and start Fire Dep tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initFireTasks(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af02      	add	r7, sp, #8
	for(int i=0; i<FIRE_TASKS; i++) {
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e045      	b.n	800191c <initFireTasks+0x98>
		taskInit_t* fire_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001890:	2014      	movs	r0, #20
 8001892:	f007 ff79 	bl	8009788 <pvPortMalloc>
 8001896:	61b8      	str	r0, [r7, #24]
		configASSERT(fire_taskInit != NULL);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <initFireTasks+0x36>
	__asm volatile
 800189e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018a2:	b672      	cpsid	i
 80018a4:	f383 8811 	msr	BASEPRI, r3
 80018a8:	f3bf 8f6f 	isb	sy
 80018ac:	f3bf 8f4f 	dsb	sy
 80018b0:	b662      	cpsie	i
 80018b2:	613b      	str	r3, [r7, #16]
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <initFireTasks+0x32>

		fire_taskInit->department = FIRE;
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]
		fire_taskInit->taskIdentifier = i;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	705a      	strb	r2, [r3, #1]
		fire_taskInit->pQhandler = &qFire;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	4a25      	ldr	r2, [pc, #148]	@ (8001960 <initFireTasks+0xdc>)
 80018cc:	605a      	str	r2, [r3, #4]
		fire_taskInit->pSemHandler = &FireTasksStatusMutex;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <initFireTasks+0xe0>)
 80018d2:	609a      	str	r2, [r3, #8]
		fire_taskInit->bTaskStatusArr = bFireTasksStatus;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4a24      	ldr	r2, [pc, #144]	@ (8001968 <initFireTasks+0xe4>)
 80018d8:	60da      	str	r2, [r3, #12]
		fire_taskInit->numOfTasks = FIRE_TASKS;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2202      	movs	r2, #2
 80018de:	741a      	strb	r2, [r3, #16]
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i);
 80018e0:	4638      	mov	r0, r7
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4a21      	ldr	r2, [pc, #132]	@ (800196c <initFireTasks+0xe8>)
 80018e6:	2110      	movs	r1, #16
 80018e8:	f008 ff84 	bl	800a7f4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <initFireTasks+0xec>)
 80018f2:	4413      	add	r3, r2
 80018f4:	4639      	mov	r1, r7
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	232f      	movs	r3, #47	@ 0x2f
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001902:	481c      	ldr	r0, [pc, #112]	@ (8001974 <initFireTasks+0xf0>)
 8001904:	f005 ff40 	bl	8007788 <xTaskCreate>
 8001908:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) fire_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d002      	beq.n	8001916 <initFireTasks+0x92>
	 		return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	e020      	b.n	8001958 <initFireTasks+0xd4>
	for(int i=0; i<FIRE_TASKS; i++) {
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b01      	cmp	r3, #1
 8001920:	ddb6      	ble.n	8001890 <initFireTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <initFireTasks+0xf4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 31ff 	mov.w	r1, #4294967295
 800192a:	4618      	mov	r0, r3
 800192c:	f005 fbe6 	bl	80070fc <xQueueSemaphoreTake>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10f      	bne.n	8001956 <initFireTasks+0xd2>
		printf("Started Fire Dep Threads! \r\n");
 8001936:	4811      	ldr	r0, [pc, #68]	@ (800197c <initFireTasks+0xf8>)
 8001938:	f008 ff54 	bl	800a7e4 <puts>
		fflush(stdout);
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <initFireTasks+0xfc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f008 fe10 	bl	800a568 <fflush>
		xSemaphoreGive(printfMutex);
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <initFireTasks+0xf4>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	2300      	movs	r3, #0
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	f005 f93d 	bl	8006bd0 <xQueueGenericSend>
	}
	return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200007c8 	.word	0x200007c8
 8001964:	2000082c 	.word	0x2000082c
 8001968:	20000828 	.word	0x20000828
 800196c:	0800d108 	.word	0x0800d108
 8001970:	200007f0 	.word	0x200007f0
 8001974:	08001ce5 	.word	0x08001ce5
 8001978:	20000838 	.word	0x20000838
 800197c:	0800d110 	.word	0x0800d110
 8001980:	20000020 	.word	0x20000020

08001984 <initCoronaTasks>:
/**
 * @brief Initialize and start Corona tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initCoronaTasks(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af02      	add	r7, sp, #8
	for(int i=0; i<CORONA_TASKS; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	e045      	b.n	8001a1c <initCoronaTasks+0x98>
		taskInit_t* corona_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001990:	2014      	movs	r0, #20
 8001992:	f007 fef9 	bl	8009788 <pvPortMalloc>
 8001996:	61b8      	str	r0, [r7, #24]
		configASSERT(corona_taskInit != NULL);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <initCoronaTasks+0x36>
	__asm volatile
 800199e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019a2:	b672      	cpsid	i
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	f3bf 8f6f 	isb	sy
 80019ac:	f3bf 8f4f 	dsb	sy
 80019b0:	b662      	cpsie	i
 80019b2:	613b      	str	r3, [r7, #16]
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	e7fd      	b.n	80019b6 <initCoronaTasks+0x32>

		corona_taskInit->department = CORONA;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2203      	movs	r2, #3
 80019be:	701a      	strb	r2, [r3, #0]
		corona_taskInit->taskIdentifier = i;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	705a      	strb	r2, [r3, #1]
		corona_taskInit->pQhandler = &qCorona;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <initCoronaTasks+0xdc>)
 80019cc:	605a      	str	r2, [r3, #4]
		corona_taskInit->pSemHandler = &CorTasksStatusMutex;
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <initCoronaTasks+0xe0>)
 80019d2:	609a      	str	r2, [r3, #8]
		corona_taskInit->bTaskStatusArr = bCorTasksStatus;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <initCoronaTasks+0xe4>)
 80019d8:	60da      	str	r2, [r3, #12]
		corona_taskInit->numOfTasks = CORONA_TASKS;
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2204      	movs	r2, #4
 80019de:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i);
 80019e0:	4638      	mov	r0, r7
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <initCoronaTasks+0xe8>)
 80019e6:	2110      	movs	r1, #16
 80019e8:	f008 ff04 	bl	800a7f4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <initCoronaTasks+0xec>)
 80019f2:	4413      	add	r3, r2
 80019f4:	4639      	mov	r1, r7
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	232f      	movs	r3, #47	@ 0x2f
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a02:	481c      	ldr	r0, [pc, #112]	@ (8001a74 <initCoronaTasks+0xf0>)
 8001a04:	f005 fec0 	bl	8007788 <xTaskCreate>
 8001a08:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) corona_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d002      	beq.n	8001a16 <initCoronaTasks+0x92>
	 		return -1;
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	e020      	b.n	8001a58 <initCoronaTasks+0xd4>
	for(int i=0; i<CORONA_TASKS; i++) {
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	ddb6      	ble.n	8001990 <initCoronaTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <initCoronaTasks+0xf4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fb66 	bl	80070fc <xQueueSemaphoreTake>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10f      	bne.n	8001a56 <initCoronaTasks+0xd2>
		printf("Started Corona Threads! \r\n");
 8001a36:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <initCoronaTasks+0xf8>)
 8001a38:	f008 fed4 	bl	800a7e4 <puts>
		fflush(stdout);
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <initCoronaTasks+0xfc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f008 fd90 	bl	800a568 <fflush>
		xSemaphoreGive(printfMutex);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <initCoronaTasks+0xf4>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	f005 f8bd 	bl	8006bd0 <xQueueGenericSend>
	}
	return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200007cc 	.word	0x200007cc
 8001a64:	20000834 	.word	0x20000834
 8001a68:	20000830 	.word	0x20000830
 8001a6c:	0800d12c 	.word	0x0800d12c
 8001a70:	200007f8 	.word	0x200007f8
 8001a74:	08001ce5 	.word	0x08001ce5
 8001a78:	20000838 	.word	0x20000838
 8001a7c:	0800d138 	.word	0x0800d138
 8001a80:	20000020 	.word	0x20000020

08001a84 <tasksManagerTask>:
 * This function continuously checks for available tasks in the queues for
 * Ambulance, Police, Fire Department, and Corona services. If there are
 * available tasks and the current running tasks are below the maximum allowed,
 * it assigns tasks to the appropriate handlers.
 */
void tasksManagerTask(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
	uint32_t ulNotificationValue;
	int8_t newTaskIndex;
	for(;;) {
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001a8a:	4b82      	ldr	r3, [pc, #520]	@ (8001c94 <tasksManagerTask+0x210>)
 8001a8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	dd06      	ble.n	8001aa2 <tasksManagerTask+0x1e>
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, TASK_MANAGER_TICKS_TO_WAIT);
 8001a94:	463a      	mov	r2, r7
 8001a96:	2328      	movs	r3, #40	@ 0x28
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f006 fe48 	bl	8008730 <xTaskNotifyWait>
 8001aa0:	e7f3      	b.n	8001a8a <tasksManagerTask+0x6>
		} else {
			// Check if there are Ambulance tasks to perform
			if(uxQueueMessagesWaiting( qAmbulance ) > 0) {
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8001c98 <tasksManagerTask+0x214>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f005 fc40 	bl	800732c <uxQueueMessagesWaiting>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d033      	beq.n	8001b1a <tasksManagerTask+0x96>
				newTaskIndex = getAvailableAmbulanceTask();
 8001ab2:	f000 fa95 	bl	8001fe0 <getAvailableAmbulanceTask>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac2:	d02a      	beq.n	8001b1a <tasksManagerTask+0x96>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001ac4:	4b75      	ldr	r3, [pc, #468]	@ (8001c9c <tasksManagerTask+0x218>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 fb15 	bl	80070fc <xQueueSemaphoreTake>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d112      	bne.n	8001afe <tasksManagerTask+0x7a>
						printf("Ambulance handler number %d is now active\r\n", newTaskIndex);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4870      	ldr	r0, [pc, #448]	@ (8001ca0 <tasksManagerTask+0x21c>)
 8001ae0:	f008 fe18 	bl	800a714 <iprintf>
						fflush(stdout);
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca4 <tasksManagerTask+0x220>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f008 fd3c 	bl	800a568 <fflush>
						xSemaphoreGive(printfMutex);
 8001af0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c9c <tasksManagerTask+0x218>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	f005 f869 	bl	8006bd0 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_amb_tasks);
 8001afe:	486a      	ldr	r0, [pc, #424]	@ (8001ca8 <tasksManagerTask+0x224>)
 8001b00:	f000 fa0e 	bl	8001f20 <addCurrentRunningTask>
					xTaskNotify(vAmbulanceTasks[newTaskIndex], 0, eNoAction);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4a68      	ldr	r2, [pc, #416]	@ (8001cac <tasksManagerTask+0x228>)
 8001b0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	f006 fe6c 	bl	80087f0 <xTaskGenericNotify>
					continue;
 8001b18:	e0bb      	b.n	8001c92 <tasksManagerTask+0x20e>
				}
			}
			// Check if there are Police tasks to perform
			if(uxQueueMessagesWaiting( qPolice ) > 0) {
 8001b1a:	4b65      	ldr	r3, [pc, #404]	@ (8001cb0 <tasksManagerTask+0x22c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f005 fc04 	bl	800732c <uxQueueMessagesWaiting>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d033      	beq.n	8001b92 <tasksManagerTask+0x10e>
				newTaskIndex = getAvailablePoliceeTask();
 8001b2a:	f000 fa99 	bl	8002060 <getAvailablePoliceeTask>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d02a      	beq.n	8001b92 <tasksManagerTask+0x10e>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001b3c:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <tasksManagerTask+0x218>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 fad9 	bl	80070fc <xQueueSemaphoreTake>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d112      	bne.n	8001b76 <tasksManagerTask+0xf2>
						printf("Police handler number %d is now active\r\n", newTaskIndex);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4857      	ldr	r0, [pc, #348]	@ (8001cb4 <tasksManagerTask+0x230>)
 8001b58:	f008 fddc 	bl	800a714 <iprintf>
						fflush(stdout);
 8001b5c:	4b51      	ldr	r3, [pc, #324]	@ (8001ca4 <tasksManagerTask+0x220>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f008 fd00 	bl	800a568 <fflush>
						xSemaphoreGive(printfMutex);
 8001b68:	4b4c      	ldr	r3, [pc, #304]	@ (8001c9c <tasksManagerTask+0x218>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	f005 f82d 	bl	8006bd0 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_police_tasks);
 8001b76:	4850      	ldr	r0, [pc, #320]	@ (8001cb8 <tasksManagerTask+0x234>)
 8001b78:	f000 f9d2 	bl	8001f20 <addCurrentRunningTask>
					xTaskNotify(vPoliceTasks[newTaskIndex], 0, eNoAction);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4a4e      	ldr	r2, [pc, #312]	@ (8001cbc <tasksManagerTask+0x238>)
 8001b82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b86:	2300      	movs	r3, #0
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	f006 fe30 	bl	80087f0 <xTaskGenericNotify>
					continue;
 8001b90:	e07f      	b.n	8001c92 <tasksManagerTask+0x20e>
				}
			}

			// Check if there are Fire Dep tasks to perform
			if(uxQueueMessagesWaiting( qFire ) > 0) {
 8001b92:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc0 <tasksManagerTask+0x23c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 fbc8 	bl	800732c <uxQueueMessagesWaiting>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d033      	beq.n	8001c0a <tasksManagerTask+0x186>
				newTaskIndex = getAvailableFireTask();
 8001ba2:	f000 fa9d 	bl	80020e0 <getAvailableFireTask>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb2:	d02a      	beq.n	8001c0a <tasksManagerTask+0x186>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001bb4:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <tasksManagerTask+0x218>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fa9d 	bl	80070fc <xQueueSemaphoreTake>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d112      	bne.n	8001bee <tasksManagerTask+0x16a>
						printf("Fire dep handler number %d is now active\r\n", newTaskIndex);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	483d      	ldr	r0, [pc, #244]	@ (8001cc4 <tasksManagerTask+0x240>)
 8001bd0:	f008 fda0 	bl	800a714 <iprintf>
						fflush(stdout);
 8001bd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <tasksManagerTask+0x220>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f008 fcc4 	bl	800a568 <fflush>
						xSemaphoreGive(printfMutex);
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <tasksManagerTask+0x218>)
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	f004 fff1 	bl	8006bd0 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_fire_tasks);
 8001bee:	4836      	ldr	r0, [pc, #216]	@ (8001cc8 <tasksManagerTask+0x244>)
 8001bf0:	f000 f996 	bl	8001f20 <addCurrentRunningTask>
					xTaskNotify(vFireTasks[newTaskIndex], 0, eNoAction);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <tasksManagerTask+0x248>)
 8001bfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	f006 fdf4 	bl	80087f0 <xTaskGenericNotify>
					continue;
 8001c08:	e043      	b.n	8001c92 <tasksManagerTask+0x20e>
				}
			}

			// Check if there are Corona tasks to perform
			if(uxQueueMessagesWaiting( qCorona ) > 0) {
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <tasksManagerTask+0x24c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 fb8c 	bl	800732c <uxQueueMessagesWaiting>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d033      	beq.n	8001c82 <tasksManagerTask+0x1fe>
				newTaskIndex = getAvailableCoronaTask();
 8001c1a:	f000 faa1 	bl	8002160 <getAvailableCoronaTask>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d02a      	beq.n	8001c82 <tasksManagerTask+0x1fe>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <tasksManagerTask+0x218>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	4618      	mov	r0, r3
 8001c36:	f005 fa61 	bl	80070fc <xQueueSemaphoreTake>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d112      	bne.n	8001c66 <tasksManagerTask+0x1e2>
						printf("Corona handler number %d is now active\r\n", newTaskIndex);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4823      	ldr	r0, [pc, #140]	@ (8001cd4 <tasksManagerTask+0x250>)
 8001c48:	f008 fd64 	bl	800a714 <iprintf>
						fflush(stdout);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <tasksManagerTask+0x220>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f008 fc88 	bl	800a568 <fflush>
						xSemaphoreGive(printfMutex);
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <tasksManagerTask+0x218>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	f004 ffb5 	bl	8006bd0 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_corona_tasks);
 8001c66:	481c      	ldr	r0, [pc, #112]	@ (8001cd8 <tasksManagerTask+0x254>)
 8001c68:	f000 f95a 	bl	8001f20 <addCurrentRunningTask>
					xTaskNotify(vCoronaTasks[newTaskIndex], 0, eNoAction);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <tasksManagerTask+0x258>)
 8001c72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f006 fdb8 	bl	80087f0 <xTaskGenericNotify>
					continue;
 8001c80:	e007      	b.n	8001c92 <tasksManagerTask+0x20e>
				}
			}
			portYIELD();
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <tasksManagerTask+0x25c>)
 8001c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	f3bf 8f6f 	isb	sy
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001c92:	e6fa      	b.n	8001a8a <tasksManagerTask+0x6>
 8001c94:	20000848 	.word	0x20000848
 8001c98:	200007c0 	.word	0x200007c0
 8001c9c:	20000838 	.word	0x20000838
 8001ca0:	0800d154 	.word	0x0800d154
 8001ca4:	20000020 	.word	0x20000020
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	200007d4 	.word	0x200007d4
 8001cb0:	200007c4 	.word	0x200007c4
 8001cb4:	0800d180 	.word	0x0800d180
 8001cb8:	20000001 	.word	0x20000001
 8001cbc:	200007e4 	.word	0x200007e4
 8001cc0:	200007c8 	.word	0x200007c8
 8001cc4:	0800d1ac 	.word	0x0800d1ac
 8001cc8:	20000002 	.word	0x20000002
 8001ccc:	200007f0 	.word	0x200007f0
 8001cd0:	200007cc 	.word	0x200007cc
 8001cd4:	0800d1d8 	.word	0x0800d1d8
 8001cd8:	20000003 	.word	0x20000003
 8001cdc:	200007f8 	.word	0x200007f8
 8001ce0:	e000ed04 	.word	0xe000ed04

08001ce4 <vHandleCall>:
 * notifications indicating a new task to process, executes the task, and updates
 * the shared data with the results.
 *
 * @param pvParameters Pointer to the task initialization parameters.
 */
void vHandleCall(void* pvParameters) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0be      	sub	sp, #248	@ 0xf8
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifictionValue;
	TickType_t startTick, endTick, totalTicks;
	taskInit_t* pTaskInit = (taskInit_t*)pvParameters;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	DispatcherPacket new_packet = {0};
 8001cf2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001cf6:	226c      	movs	r2, #108	@ 0x6c
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f008 fe86 	bl	800aa0c <memset>

	char printMSG[100];
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8001d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d04:	781b      	ldrb	r3, [r3, #0]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <vHandleCall+0x54>
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8001d0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d00f      	beq.n	8001d34 <vHandleCall+0x50>
 8001d14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d008      	beq.n	8001d30 <vHandleCall+0x4c>
 8001d1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d101      	bne.n	8001d2c <vHandleCall+0x48>
 8001d28:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee8 <vHandleCall+0x204>)
 8001d2a:	e006      	b.n	8001d3a <vHandleCall+0x56>
 8001d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001eec <vHandleCall+0x208>)
 8001d2e:	e004      	b.n	8001d3a <vHandleCall+0x56>
 8001d30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <vHandleCall+0x20c>)
 8001d32:	e002      	b.n	8001d3a <vHandleCall+0x56>
 8001d34:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef4 <vHandleCall+0x210>)
 8001d36:	e000      	b.n	8001d3a <vHandleCall+0x56>
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8001d38:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef8 <vHandleCall+0x214>)
			, pTaskInit->taskIdentifier);
 8001d3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001d3e:	7852      	ldrb	r2, [r2, #1]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8001d40:	f107 000c 	add.w	r0, r7, #12
 8001d44:	9200      	str	r2, [sp, #0]
 8001d46:	4a6d      	ldr	r2, [pc, #436]	@ (8001efc <vHandleCall+0x218>)
 8001d48:	2164      	movs	r1, #100	@ 0x64
 8001d4a:	f008 fd53 	bl	800a7f4 <sniprintf>
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8001f00 <vHandleCall+0x21c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f04f 31ff 	mov.w	r1, #4294967295
 8001d56:	4618      	mov	r0, r3
 8001d58:	f005 f9d0 	bl	80070fc <xQueueSemaphoreTake>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d111      	bne.n	8001d86 <vHandleCall+0xa2>
		printf(printMSG);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4618      	mov	r0, r3
 8001d68:	f008 fcd4 	bl	800a714 <iprintf>
		fflush(stdout);
 8001d6c:	4b65      	ldr	r3, [pc, #404]	@ (8001f04 <vHandleCall+0x220>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f008 fbf8 	bl	800a568 <fflush>
		xSemaphoreGive(printfMutex);
 8001d78:	4b61      	ldr	r3, [pc, #388]	@ (8001f00 <vHandleCall+0x21c>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	f004 ff25 	bl	8006bd0 <xQueueGenericSend>
	}
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8001d86:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f006 fccd 	bl	8008730 <xTaskNotifyWait>

		startTick = xTaskGetTickCount();
 8001d96:	f005 ffcb 	bl	8007d30 <xTaskGetTickCount>
 8001d9a:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8

		if(!(xQueueReceive(*(pTaskInit->pQhandler), &new_packet, portMAX_DELAY) == pdTRUE)) {
 8001d9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 f8bc 	bl	8006f2c <xQueueReceive>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	f040 8094 	bne.w	8001ee4 <vHandleCall+0x200>
			continue;
		}

		// Wait for the job to get done.
		// TODO: Should vTaskDelayUntil be used?
		vTaskDelay(new_packet.timeToHandleInTicks);
 8001dbc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 fe41 	bl	8007a48 <vTaskDelay>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <vHandleCall+0x21c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f04f 31ff 	mov.w	r1, #4294967295
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 f994 	bl	80070fc <xQueueSemaphoreTake>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d113      	bne.n	8001e02 <vHandleCall+0x11e>
			printf("Handled task: %s \r\n", new_packet.message);
 8001dda:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001dde:	3301      	adds	r3, #1
 8001de0:	4619      	mov	r1, r3
 8001de2:	4849      	ldr	r0, [pc, #292]	@ (8001f08 <vHandleCall+0x224>)
 8001de4:	f008 fc96 	bl	800a714 <iprintf>
			fflush(stdout);
 8001de8:	4b46      	ldr	r3, [pc, #280]	@ (8001f04 <vHandleCall+0x220>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f008 fbba 	bl	800a568 <fflush>
			xSemaphoreGive(printfMutex);
 8001df4:	4b42      	ldr	r3, [pc, #264]	@ (8001f00 <vHandleCall+0x21c>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f004 fee7 	bl	8006bd0 <xQueueGenericSend>
		}

		// Update shared app data
		if(xTasksDataMutex != NULL) {
 8001e02:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <vHandleCall+0x228>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d040      	beq.n	8001e8c <vHandleCall+0x1a8>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <vHandleCall+0x228>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e12:	4618      	mov	r0, r3
 8001e14:	f005 f972 	bl	80070fc <xQueueSemaphoreTake>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d136      	bne.n	8001e8c <vHandleCall+0x1a8>
				total_tasks_ran++;
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f10 <vHandleCall+0x22c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a3a      	ldr	r2, [pc, #232]	@ (8001f10 <vHandleCall+0x22c>)
 8001e26:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 8001e28:	f005 ff82 	bl	8007d30 <xTaskGetTickCount>
 8001e2c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
				totalTicks = endTick - startTick;
 8001e30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
				total_tasks_time += (float)totalTicks / configTICK_RATE_HZ;
 8001e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001f14 <vHandleCall+0x230>
 8001e4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e52:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <vHandleCall+0x234>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <vHandleCall+0x234>)
 8001e5e:	edc3 7a00 	vstr	s15, [r3]
				average_task_time = (float)total_tasks_time/total_tasks_ran;
 8001e62:	4b2d      	ldr	r3, [pc, #180]	@ (8001f18 <vHandleCall+0x234>)
 8001e64:	edd3 6a00 	vldr	s13, [r3]
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <vHandleCall+0x22c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e78:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <vHandleCall+0x238>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
				 * TODO: Calculating the average_task_time in this task is a waste
				 * 		 of resources. Data calculation should be done in its own
				 * 		 lower priority task and only run when printing of data
				 * 		 is required.
				 */
				xSemaphoreGive(xTasksDataMutex);
 8001e7e:	4b23      	ldr	r3, [pc, #140]	@ (8001f0c <vHandleCall+0x228>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	f004 fea2 	bl	8006bd0 <xQueueGenericSend>
				 * The mutex couldn't be obtained. Code should never get here.
				 */
			}
		}
		// Indicate the task is now available for the next incoming packet.
		if(*pTaskInit->pSemHandler != NULL) {
 8001e8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f43f af76 	beq.w	8001d86 <vHandleCall+0xa2>
			if(xSemaphoreTake(*(pTaskInit->pSemHandler), portMAX_DELAY) ==  pdTRUE) {
 8001e9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 f928 	bl	80070fc <xQueueSemaphoreTake>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f47f af69 	bne.w	8001d86 <vHandleCall+0xa2>
				removeCurrentRunningTask(new_packet.available_tasks_counter);
 8001eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f861 	bl	8001f80 <removeCurrentRunningTask>
				pTaskInit->bTaskStatusArr[pTaskInit->taskIdentifier] = false;
 8001ebe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001ec8:	7852      	ldrb	r2, [r2, #1]
 8001eca:	4413      	add	r3, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(*(pTaskInit->pSemHandler));
 8001ed0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	f004 fe77 	bl	8006bd0 <xQueueGenericSend>
 8001ee2:	e750      	b.n	8001d86 <vHandleCall+0xa2>
			continue;
 8001ee4:	bf00      	nop
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8001ee6:	e74e      	b.n	8001d86 <vHandleCall+0xa2>
 8001ee8:	0800d204 	.word	0x0800d204
 8001eec:	0800d20c 	.word	0x0800d20c
 8001ef0:	0800d218 	.word	0x0800d218
 8001ef4:	0800d224 	.word	0x0800d224
 8001ef8:	0800d22c 	.word	0x0800d22c
 8001efc:	0800d238 	.word	0x0800d238
 8001f00:	20000838 	.word	0x20000838
 8001f04:	20000020 	.word	0x20000020
 8001f08:	0800d264 	.word	0x0800d264
 8001f0c:	2000084c 	.word	0x2000084c
 8001f10:	20000840 	.word	0x20000840
 8001f14:	447a0000 	.word	0x447a0000
 8001f18:	2000083c 	.word	0x2000083c
 8001f1c:	20000844 	.word	0x20000844

08001f20 <addCurrentRunningTask>:
 * @brief Increments the count of currently running tasks.
 *
 * This function safely increments the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void addCurrentRunningTask(uint8_t* avail_dep_tasks) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	if(xTasksDataMutex != NULL) {
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <addCurrentRunningTask+0x58>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01f      	beq.n	8001f70 <addCurrentRunningTask+0x50>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <addCurrentRunningTask+0x58>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f005 f8df 	bl	80070fc <xQueueSemaphoreTake>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d115      	bne.n	8001f70 <addCurrentRunningTask+0x50>
			current_running_tasks++;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <addCurrentRunningTask+0x5c>)
 8001f46:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	b25a      	sxtb	r2, r3
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <addCurrentRunningTask+0x5c>)
 8001f54:	701a      	strb	r2, [r3, #0]
			*(avail_dep_tasks)-=1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8001f62:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <addCurrentRunningTask+0x58>)
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	2300      	movs	r3, #0
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f004 fe30 	bl	8006bd0 <xQueueGenericSend>
		}
	}
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000084c 	.word	0x2000084c
 8001f7c:	20000848 	.word	0x20000848

08001f80 <removeCurrentRunningTask>:
 * @brief Decrements the count of currently running tasks.
 *
 * This function safely decrements the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void removeCurrentRunningTask(uint8_t* avail_dep_tasks) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	if(xTasksDataMutex != NULL) {
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <removeCurrentRunningTask+0x58>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01f      	beq.n	8001fd0 <removeCurrentRunningTask+0x50>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <removeCurrentRunningTask+0x58>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 f8af 	bl	80070fc <xQueueSemaphoreTake>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d115      	bne.n	8001fd0 <removeCurrentRunningTask+0x50>
			current_running_tasks--;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <removeCurrentRunningTask+0x5c>)
 8001fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	b25a      	sxtb	r2, r3
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <removeCurrentRunningTask+0x5c>)
 8001fb4:	701a      	strb	r2, [r3, #0]
			*(avail_dep_tasks)+=1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <removeCurrentRunningTask+0x58>)
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f004 fe00 	bl	8006bd0 <xQueueGenericSend>
		}
	}
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000084c 	.word	0x2000084c
 8001fdc:	20000848 	.word	0x20000848

08001fe0 <getAvailableAmbulanceTask>:
 * This function iterates through the ambulance task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available ambulance tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableAmbulanceTask(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(AmbTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <getAvailableAmbulanceTask+0x78>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 31ff 	mov.w	r1, #4294967295
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 f884 	bl	80070fc <xQueueSemaphoreTake>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d127      	bne.n	800204a <getAvailableAmbulanceTask+0x6a>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	e01a      	b.n	8002036 <getAvailableAmbulanceTask+0x56>
			if(bAmbTasksStatus[i] == false) {
 8002000:	4a16      	ldr	r2, [pc, #88]	@ (800205c <getAvailableAmbulanceTask+0x7c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <getAvailableAmbulanceTask+0x50>
				bAmbTasksStatus[i] = true;
 8002012:	4a12      	ldr	r2, [pc, #72]	@ (800205c <getAvailableAmbulanceTask+0x7c>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(AmbTasksStatusMutex);
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <getAvailableAmbulanceTask+0x78>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	2300      	movs	r3, #0
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	f004 fdd3 	bl	8006bd0 <xQueueGenericSend>
				return (int8_t)i;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	e00e      	b.n	800204e <getAvailableAmbulanceTask+0x6e>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b03      	cmp	r3, #3
 800203a:	dde1      	ble.n	8002000 <getAvailableAmbulanceTask+0x20>
			}
		}
		xSemaphoreGive(AmbTasksStatusMutex);
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <getAvailableAmbulanceTask+0x78>)
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	f004 fdc3 	bl	8006bd0 <xQueueGenericSend>
	}
	return -1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000081c 	.word	0x2000081c
 800205c:	20000818 	.word	0x20000818

08002060 <getAvailablePoliceeTask>:
 * This function iterates through the police task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available police tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailablePoliceeTask(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(PolTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <getAvailablePoliceeTask+0x78>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f04f 31ff 	mov.w	r1, #4294967295
 800206e:	4618      	mov	r0, r3
 8002070:	f005 f844 	bl	80070fc <xQueueSemaphoreTake>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d127      	bne.n	80020ca <getAvailablePoliceeTask+0x6a>
		for(int i = 0; i < POLICE_TASKS; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	e01a      	b.n	80020b6 <getAvailablePoliceeTask+0x56>
			if(bPolTasksStatus[i] == false) {
 8002080:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <getAvailablePoliceeTask+0x7c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00e      	beq.n	80020b0 <getAvailablePoliceeTask+0x50>
				bPolTasksStatus[i] = true;
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <getAvailablePoliceeTask+0x7c>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(PolTasksStatusMutex);
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <getAvailablePoliceeTask+0x78>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	2300      	movs	r3, #0
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	f004 fd93 	bl	8006bd0 <xQueueGenericSend>
				return (int8_t)i;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	e00e      	b.n	80020ce <getAvailablePoliceeTask+0x6e>
		for(int i = 0; i < POLICE_TASKS; i++) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	dde1      	ble.n	8002080 <getAvailablePoliceeTask+0x20>
			}
		}
		xSemaphoreGive(PolTasksStatusMutex);
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <getAvailablePoliceeTask+0x78>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	2300      	movs	r3, #0
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	f004 fd83 	bl	8006bd0 <xQueueGenericSend>
	}
	return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000824 	.word	0x20000824
 80020dc:	20000820 	.word	0x20000820

080020e0 <getAvailableFireTask>:
 * This function iterates through the fire department task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available fire department tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableFireTask(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(FireTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <getAvailableFireTask+0x78>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f04f 31ff 	mov.w	r1, #4294967295
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 f804 	bl	80070fc <xQueueSemaphoreTake>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d127      	bne.n	800214a <getAvailableFireTask+0x6a>
		for(int i = 0; i < FIRE_TASKS; i++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e01a      	b.n	8002136 <getAvailableFireTask+0x56>
			if(bFireTasksStatus[i] == false) {
 8002100:	4a16      	ldr	r2, [pc, #88]	@ (800215c <getAvailableFireTask+0x7c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00e      	beq.n	8002130 <getAvailableFireTask+0x50>
				bFireTasksStatus[i] = true;
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <getAvailableFireTask+0x7c>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(FireTasksStatusMutex);
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <getAvailableFireTask+0x78>)
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	2300      	movs	r3, #0
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	f004 fd53 	bl	8006bd0 <xQueueGenericSend>
				return (int8_t)i;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	b25b      	sxtb	r3, r3
 800212e:	e00e      	b.n	800214e <getAvailableFireTask+0x6e>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b01      	cmp	r3, #1
 800213a:	dde1      	ble.n	8002100 <getAvailableFireTask+0x20>
			}
		}
		xSemaphoreGive(FireTasksStatusMutex);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <getAvailableFireTask+0x78>)
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	2300      	movs	r3, #0
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	f004 fd43 	bl	8006bd0 <xQueueGenericSend>
	}
	return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000082c 	.word	0x2000082c
 800215c:	20000828 	.word	0x20000828

08002160 <getAvailableCoronaTask>:
 * This function iterates through the corona task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available corona tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableCoronaTask(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(CorTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8002166:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <getAvailableCoronaTask+0x78>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f04f 31ff 	mov.w	r1, #4294967295
 800216e:	4618      	mov	r0, r3
 8002170:	f004 ffc4 	bl	80070fc <xQueueSemaphoreTake>
 8002174:	4603      	mov	r3, r0
 8002176:	2b01      	cmp	r3, #1
 8002178:	d127      	bne.n	80021ca <getAvailableCoronaTask+0x6a>
		for(int i = 0; i < CORONA_TASKS; i++) {
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e01a      	b.n	80021b6 <getAvailableCoronaTask+0x56>
			if(bCorTasksStatus[i] == false) {
 8002180:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <getAvailableCoronaTask+0x7c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <getAvailableCoronaTask+0x50>
				bCorTasksStatus[i] = true;
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <getAvailableCoronaTask+0x7c>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(CorTasksStatusMutex);
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <getAvailableCoronaTask+0x78>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	f004 fd13 	bl	8006bd0 <xQueueGenericSend>
				return (int8_t)i;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	e00e      	b.n	80021ce <getAvailableCoronaTask+0x6e>
		for(int i = 0; i < CORONA_TASKS; i++) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	dde1      	ble.n	8002180 <getAvailableCoronaTask+0x20>
			}
		}
		xSemaphoreGive(CorTasksStatusMutex);
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <getAvailableCoronaTask+0x78>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	f004 fd03 	bl	8006bd0 <xQueueGenericSend>
	}
	return -1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000834 	.word	0x20000834
 80021dc:	20000830 	.word	0x20000830

080021e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e6:	f000 fe8c 	bl	8002f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ea:	f000 f847 	bl	800227c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ee:	f000 f971 	bl	80024d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80021f2:	f000 f911 	bl	8002418 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80021f6:	f000 f93f 	bl	8002478 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80021fa:	f000 f8ab 	bl	8002354 <MX_RNG_Init>
  MX_TIM2_Init();
 80021fe:	f000 f8bd 	bl	800237c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002202:	f004 f933 	bl	800646c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <main+0x84>)
 8002208:	2100      	movs	r1, #0
 800220a:	4817      	ldr	r0, [pc, #92]	@ (8002268 <main+0x88>)
 800220c:	f004 f998 	bl	8006540 <osThreadNew>
 8002210:	4603      	mov	r3, r0
 8002212:	4a16      	ldr	r2, [pc, #88]	@ (800226c <main+0x8c>)
 8002214:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initQueues();
 8002216:	f7ff f967 	bl	80014e8 <initQueues>
  initSemaphores();
 800221a:	f7ff f9c9 	bl	80015b0 <initSemaphores>
//		  	  	  	  	  	  	 pdMS_TO_TICKS(50),
//								 pdFALSE,
//								 (void*)0,
//								 DebounceTimerCallback);
  BaseType_t status;
  status = xTaskCreate((TaskFunction_t)initTasks,
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <main+0x90>)
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	2338      	movs	r3, #56	@ 0x38
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	4912      	ldr	r1, [pc, #72]	@ (8002274 <main+0x94>)
 800222c:	4812      	ldr	r0, [pc, #72]	@ (8002278 <main+0x98>)
 800222e:	f005 faab 	bl	8007788 <xTaskCreate>
 8002232:	6078      	str	r0, [r7, #4]
		  "init_task",
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);
  configASSERT(status ==  pdTRUE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d00d      	beq.n	8002256 <main+0x76>
	__asm volatile
 800223a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223e:	b672      	cpsid	i
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	b662      	cpsie	i
 800224e:	603b      	str	r3, [r7, #0]
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	e7fd      	b.n	8002252 <main+0x72>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 8002256:	f005 fc2f 	bl	8007ab8 <vTaskStartScheduler>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800225a:	f004 f93b 	bl	80064d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800225e:	bf00      	nop
 8002260:	e7fd      	b.n	800225e <main+0x7e>
 8002262:	bf00      	nop
 8002264:	0800de60 	.word	0x0800de60
 8002268:	08002781 	.word	0x08002781
 800226c:	200007bc 	.word	0x200007bc
 8002270:	2000080c 	.word	0x2000080c
 8002274:	0800d284 	.word	0x0800d284
 8002278:	080013bd 	.word	0x080013bd

0800227c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b094      	sub	sp, #80	@ 0x50
 8002280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	f107 0320 	add.w	r3, r7, #32
 8002286:	2230      	movs	r2, #48	@ 0x30
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f008 fbbe 	bl	800aa0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <SystemClock_Config+0xd0>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	4a29      	ldr	r2, [pc, #164]	@ (800234c <SystemClock_Config+0xd0>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ac:	4b27      	ldr	r3, [pc, #156]	@ (800234c <SystemClock_Config+0xd0>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <SystemClock_Config+0xd4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <SystemClock_Config+0xd4>)
 80022be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <SystemClock_Config+0xd4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022da:	2302      	movs	r3, #2
 80022dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022e4:	2304      	movs	r3, #4
 80022e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022e8:	23d8      	movs	r3, #216	@ 0xd8
 80022ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ec:	2302      	movs	r3, #2
 80022ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80022f0:	2309      	movs	r3, #9
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fab5 	bl	8003868 <HAL_RCC_OscConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002304:	f000 fa9c 	bl	8002840 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002308:	f001 fa5e 	bl	80037c8 <HAL_PWREx_EnableOverDrive>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002312:	f000 fa95 	bl	8002840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002316:	230f      	movs	r3, #15
 8002318:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231a:	2302      	movs	r3, #2
 800231c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002322:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800232c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	2107      	movs	r1, #7
 8002334:	4618      	mov	r0, r3
 8002336:	f001 fd3b 	bl	8003db0 <HAL_RCC_ClockConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002340:	f000 fa7e 	bl	8002840 <Error_Handler>
  }
}
 8002344:	bf00      	nop
 8002346:	3750      	adds	r7, #80	@ 0x50
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000

08002354 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <MX_RNG_Init+0x20>)
 800235a:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <MX_RNG_Init+0x24>)
 800235c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	@ (8002374 <MX_RNG_Init+0x20>)
 8002360:	f002 fb6e 	bl	8004a40 <HAL_RNG_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800236a:	f000 fa69 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200001f8 	.word	0x200001f8
 8002378:	50060800 	.word	0x50060800

0800237c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800239a:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <MX_TIM2_Init+0x98>)
 800239c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER_SET;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023a4:	f240 221b 	movw	r2, #539	@ 0x21b
 80023a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD_SET;
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023b2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80023b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023c4:	4813      	ldr	r0, [pc, #76]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023c6:	f002 fc24 	bl	8004c12 <HAL_TIM_Base_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80023d0:	f000 fa36 	bl	8002840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4619      	mov	r1, r3
 80023e0:	480c      	ldr	r0, [pc, #48]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023e2:	f002 fded 	bl	8004fc0 <HAL_TIM_ConfigClockSource>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023ec:	f000 fa28 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_TIM2_Init+0x98>)
 80023fe:	f003 f817 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002408:	f000 fa1a 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000208 	.word	0x20000208

08002418 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 800241e:	4a15      	ldr	r2, [pc, #84]	@ (8002474 <MX_USART3_UART_Init+0x5c>)
 8002420:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 8002424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002428:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002436:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 800243e:	220c      	movs	r2, #12
 8002440:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	@ (8002470 <MX_USART3_UART_Init+0x58>)
 800245c:	f003 f894 	bl	8005588 <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002466:	f000 f9eb 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000254 	.word	0x20000254
 8002474:	40004800 	.word	0x40004800

08002478 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800247e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002482:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002486:	2206      	movs	r2, #6
 8002488:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800248c:	2202      	movs	r2, #2
 800248e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002498:	2202      	movs	r2, #2
 800249a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800249e:	2201      	movs	r2, #1
 80024a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024a8:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024bc:	f001 f84a 	bl	8003554 <HAL_PCD_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024c6:	f000 f9bb 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200002dc 	.word	0x200002dc

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	@ 0x30
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <MX_GPIO_Init+0x1c8>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a6b      	ldr	r2, [pc, #428]	@ (800269c <MX_GPIO_Init+0x1c8>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b69      	ldr	r3, [pc, #420]	@ (800269c <MX_GPIO_Init+0x1c8>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002502:	4b66      	ldr	r3, [pc, #408]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a65      	ldr	r2, [pc, #404]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b60      	ldr	r3, [pc, #384]	@ (800269c <MX_GPIO_Init+0x1c8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a5f      	ldr	r2, [pc, #380]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b5d      	ldr	r3, [pc, #372]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	4b5a      	ldr	r3, [pc, #360]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a59      	ldr	r2, [pc, #356]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b57      	ldr	r3, [pc, #348]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800254a:	4b54      	ldr	r3, [pc, #336]	@ (800269c <MX_GPIO_Init+0x1c8>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a53      	ldr	r2, [pc, #332]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002550:	f043 0308 	orr.w	r3, r3, #8
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b51      	ldr	r3, [pc, #324]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002562:	4b4e      	ldr	r3, [pc, #312]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a4d      	ldr	r2, [pc, #308]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <MX_GPIO_Init+0x1c8>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002580:	4847      	ldr	r0, [pc, #284]	@ (80026a0 <MX_GPIO_Init+0x1cc>)
 8002582:	f000 ffb5 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	2140      	movs	r1, #64	@ 0x40
 800258a:	4846      	ldr	r0, [pc, #280]	@ (80026a4 <MX_GPIO_Init+0x1d0>)
 800258c:	f000 ffb0 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002596:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800259a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4840      	ldr	r0, [pc, #256]	@ (80026a8 <MX_GPIO_Init+0x1d4>)
 80025a8:	f000 fdde 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025ac:	2332      	movs	r3, #50	@ 0x32
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025bc:	230b      	movs	r3, #11
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4838      	ldr	r0, [pc, #224]	@ (80026a8 <MX_GPIO_Init+0x1d4>)
 80025c8:	f000 fdce 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025cc:	2386      	movs	r3, #134	@ 0x86
 80025ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025dc:	230b      	movs	r3, #11
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4831      	ldr	r0, [pc, #196]	@ (80026ac <MX_GPIO_Init+0x1d8>)
 80025e8:	f000 fdbe 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025ec:	f244 0381 	movw	r3, #16513	@ 0x4081
 80025f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	4826      	ldr	r0, [pc, #152]	@ (80026a0 <MX_GPIO_Init+0x1cc>)
 8002606:	f000 fdaf 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800260a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800260e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800261c:	230b      	movs	r3, #11
 800261e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	481e      	ldr	r0, [pc, #120]	@ (80026a0 <MX_GPIO_Init+0x1cc>)
 8002628:	f000 fd9e 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800262c:	2340      	movs	r3, #64	@ 0x40
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002630:	2301      	movs	r3, #1
 8002632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4818      	ldr	r0, [pc, #96]	@ (80026a4 <MX_GPIO_Init+0x1d0>)
 8002644:	f000 fd90 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	4619      	mov	r1, r3
 800265a:	4812      	ldr	r0, [pc, #72]	@ (80026a4 <MX_GPIO_Init+0x1d0>)
 800265c:	f000 fd84 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002660:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002672:	230b      	movs	r3, #11
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	4619      	mov	r1, r3
 800267c:	4809      	ldr	r0, [pc, #36]	@ (80026a4 <MX_GPIO_Init+0x1d0>)
 800267e:	f000 fd73 	bl	8003168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2105      	movs	r1, #5
 8002686:	2028      	movs	r0, #40	@ 0x28
 8002688:	f000 fd44 	bl	8003114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800268c:	2028      	movs	r0, #40	@ 0x28
 800268e:	f000 fd5d 	bl	800314c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002692:	bf00      	nop
 8002694:	3730      	adds	r7, #48	@ 0x30
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020000 	.word	0x40020000

080026b0 <HAL_GPIO_EXTI_Callback>:
        // Notify the task if the button is still pressed
        xTaskNotify(vGetDataTask, 0x00, eNoAction);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026c0:	d14d      	bne.n	800275e <HAL_GPIO_EXTI_Callback+0xae>
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 80026c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026c6:	4828      	ldr	r0, [pc, #160]	@ (8002768 <HAL_GPIO_EXTI_Callback+0xb8>)
 80026c8:	f000 fefa 	bl	80034c0 <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_GPIO_EXTI_Callback+0x2e>
			btnTickStart = xTaskGetTickCountFromISR();
 80026d2:	f005 fb3d 	bl	8007d50 <xTaskGetTickCountFromISR>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_GPIO_EXTI_Callback+0xbc>)
 80026da:	6013      	str	r3, [r2, #0]
				}
			}
			btnTickStart = btnTickEnd = 0;
		}
	}
}
 80026dc:	e03f      	b.n	800275e <HAL_GPIO_EXTI_Callback+0xae>
			if(btnTickStart != 0) {
 80026de:	4b23      	ldr	r3, [pc, #140]	@ (800276c <HAL_GPIO_EXTI_Callback+0xbc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d034      	beq.n	8002750 <HAL_GPIO_EXTI_Callback+0xa0>
				btnTickEnd = xTaskGetTickCountFromISR();
 80026e6:	f005 fb33 	bl	8007d50 <xTaskGetTickCountFromISR>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a20      	ldr	r2, [pc, #128]	@ (8002770 <HAL_GPIO_EXTI_Callback+0xc0>)
 80026ee:	6013      	str	r3, [r2, #0]
				if(btnTickEnd - btnTickStart > 50) {
 80026f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <HAL_GPIO_EXTI_Callback+0xc0>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_GPIO_EXTI_Callback+0xbc>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b32      	cmp	r3, #50	@ 0x32
 80026fc:	d928      	bls.n	8002750 <HAL_GPIO_EXTI_Callback+0xa0>
					BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
					btnFlag = !btnFlag;
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_GPIO_EXTI_Callback+0xc4>)
 800271e:	701a      	strb	r2, [r3, #0]
					xTaskNotifyFromISR(vGetDataTask, 0x00, eNoAction,
 8002720:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2300      	movs	r3, #0
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	f006 f926 	bl	8008980 <xTaskGenericNotifyFromISR>
					if(xHigherPriorityTaskWoken == pdTRUE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10a      	bne.n	8002750 <HAL_GPIO_EXTI_Callback+0xa0>
								portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_GPIO_EXTI_Callback+0xa0>
 8002740:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_GPIO_EXTI_Callback+0xcc>)
 8002742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	f3bf 8f6f 	isb	sy
			btnTickStart = btnTickEnd = 0;
 8002750:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_GPIO_EXTI_Callback+0xbc>)
 800275c:	6013      	str	r3, [r2, #0]
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020800 	.word	0x40020800
 800276c:	20000850 	.word	0x20000850
 8002770:	20000854 	.word	0x20000854
 8002774:	20000858 	.word	0x20000858
 8002778:	20000814 	.word	0x20000814
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002788:	2001      	movs	r0, #1
 800278a:	f003 ff7f 	bl	800668c <osDelay>
 800278e:	e7fb      	b.n	8002788 <StartDefaultTask+0x8>

08002790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0a2      	sub	sp, #136	@ 0x88
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a0:	d13a      	bne.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x88>
		DispatcherPacket new_packet;
		generateDispatcherMSG(&new_packet);
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fcc6 	bl	8001138 <generateDispatcherMSG>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	67bb      	str	r3, [r7, #120]	@ 0x78
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 fdda 	bl	800736e <uxQueueMessagesWaitingFromISR>
 80027ba:	67f8      	str	r0, [r7, #124]	@ 0x7c
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
		if( qItems != TASKS_QUEUE_SIZE) {
 80027bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027be:	2b0a      	cmp	r3, #10
 80027c0:	d012      	beq.n	80027e8 <HAL_TIM_PeriodElapsedCallback+0x58>
			xQueueSendFromISR(qDispatcher, &new_packet, NULL);
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f107 010c 	add.w	r1, r7, #12
 80027ca:	2300      	movs	r3, #0
 80027cc:	2200      	movs	r2, #0
 80027ce:	f004 fb09 	bl	8006de4 <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2300      	movs	r3, #0
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	f006 f8cd 	bl	8008980 <xTaskGenericNotifyFromISR>
 80027e6:	e009      	b.n	80027fc <HAL_TIM_PeriodElapsedCallback+0x6c>
			//printf("Added to queue! \r\n");
			//fflush(stdout);
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2300      	movs	r3, #0
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	f006 f8c2 	bl	8008980 <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 80027fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10a      	bne.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x88>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_PeriodElapsedCallback+0x88>
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800280a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	f3bf 8f6f 	isb	sy
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_TIM_PeriodElapsedCallback+0x96>
    HAL_IncTick();
 8002822:	f000 fb7b 	bl	8002f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002826:	bf00      	nop
 8002828:	3780      	adds	r7, #128	@ 0x80
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200007d0 	.word	0x200007d0
 8002834:	20000808 	.word	0x20000808
 8002838:	e000ed04 	.word	0xe000ed04
 800283c:	40001000 	.word	0x40001000

08002840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  vTaskEndScheduler();
 8002848:	f005 f9aa 	bl	8007ba0 <vTaskEndScheduler>
	  return;
 800284c:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_MspInit+0x70>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a19      	ldr	r2, [pc, #100]	@ (80028c0 <HAL_MspInit+0x70>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_MspInit+0x70>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_MspInit+0x70>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <HAL_MspInit+0x70>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	6453      	str	r3, [r2, #68]	@ 0x44
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_MspInit+0x70>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	210f      	movs	r1, #15
 800288a:	f06f 0001 	mvn.w	r0, #1
 800288e:	f000 fc41 	bl	8003114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1  , 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2104      	movs	r1, #4
 8002896:	2050      	movs	r0, #80	@ 0x50
 8002898:	f000 fc3c 	bl	8003114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800289c:	2050      	movs	r0, #80	@ 0x50
 800289e:	f000 fc55 	bl	800314c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2104      	movs	r1, #4
 80028a6:	201c      	movs	r0, #28
 80028a8:	f000 fc34 	bl	8003114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028ac:	201c      	movs	r0, #28
 80028ae:	f000 fc4d 	bl	800314c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b2:	2003      	movs	r0, #3
 80028b4:	f000 fc23 	bl	80030fe <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b0a4      	sub	sp, #144	@ 0x90
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	2284      	movs	r2, #132	@ 0x84
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f008 f899 	bl	800aa0c <memset>
  if(hrng->Instance==RNG)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_RNG_MspInit+0x70>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d123      	bne.n	800292c <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80028e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 fcb3 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002900:	f7ff ff9e 	bl	8002840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <HAL_RNG_MspInit+0x74>)
 8002906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002908:	4a0b      	ldr	r2, [pc, #44]	@ (8002938 <HAL_RNG_MspInit+0x74>)
 800290a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RNG_MspInit+0x74>)
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	210f      	movs	r1, #15
 8002920:	2050      	movs	r0, #80	@ 0x50
 8002922:	f000 fbf7 	bl	8003114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8002926:	2050      	movs	r0, #80	@ 0x50
 8002928:	f000 fc10 	bl	800314c <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800292c:	bf00      	nop
 800292e:	3790      	adds	r7, #144	@ 0x90
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	50060800 	.word	0x50060800
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294c:	d113      	bne.n	8002976 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_TIM_Base_MspInit+0x44>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_TIM_Base_MspInit+0x44>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_TIM_Base_MspInit+0x44>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	210a      	movs	r1, #10
 800296a:	201c      	movs	r0, #28
 800296c:	f000 fbd2 	bl	8003114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002970:	201c      	movs	r0, #28
 8002972:	f000 fbeb 	bl	800314c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0aa      	sub	sp, #168	@ 0xa8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	2284      	movs	r2, #132	@ 0x84
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f008 f831 	bl	800aa0c <memset>
  if(huart->Instance==USART3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <HAL_UART_MspInit+0xb4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d13c      	bne.n	8002a2e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029ba:	2300      	movs	r3, #0
 80029bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fc4c 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029ce:	f7ff ff37 	bl	8002840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029d2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029de:	4b17      	ldr	r3, [pc, #92]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a13      	ldr	r2, [pc, #76]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029f0:	f043 0308 	orr.w	r3, r3, #8
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a22:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <HAL_UART_MspInit+0xbc>)
 8002a2a:	f000 fb9d 	bl	8003168 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002a2e:	bf00      	nop
 8002a30:	37a8      	adds	r7, #168	@ 0xa8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40004800 	.word	0x40004800
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020c00 	.word	0x40020c00

08002a44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0ac      	sub	sp, #176	@ 0xb0
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a5c:	f107 0318 	add.w	r3, r7, #24
 8002a60:	2284      	movs	r2, #132	@ 0x84
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f007 ffd1 	bl	800aa0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a72:	d159      	bne.n	8002b28 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a80:	f107 0318 	add.w	r3, r7, #24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 fbeb 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002a90:	f7ff fed6 	bl	8002840 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa0:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002aac:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ac6:	230a      	movs	r3, #10
 8002ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4818      	ldr	r0, [pc, #96]	@ (8002b34 <HAL_PCD_MspInit+0xf0>)
 8002ad4:	f000 fb48 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002aec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002af0:	4619      	mov	r1, r3
 8002af2:	4810      	ldr	r0, [pc, #64]	@ (8002b34 <HAL_PCD_MspInit+0xf0>)
 8002af4:	f000 fb38 	bl	8003168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002af8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b02:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	4a06      	ldr	r2, [pc, #24]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <HAL_PCD_MspInit+0xec>)
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002b28:	bf00      	nop
 8002b2a:	37b0      	adds	r7, #176	@ 0xb0
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000

08002b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	@ 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b48:	4b33      	ldr	r3, [pc, #204]	@ (8002c18 <HAL_InitTick+0xe0>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a32      	ldr	r2, [pc, #200]	@ (8002c18 <HAL_InitTick+0xe0>)
 8002b4e:	f043 0310 	orr.w	r3, r3, #16
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b54:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_InitTick+0xe0>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b60:	f107 0210 	add.w	r2, r7, #16
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fb46 	bl	80041fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f001 fb17 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8002b7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002b80:	e004      	b.n	8002b8c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b82:	f001 fb13 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8002b86:	4603      	mov	r3, r0
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <HAL_InitTick+0xe4>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	0c9b      	lsrs	r3, r3, #18
 8002b96:	3b01      	subs	r3, #1
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002b9c:	4a21      	ldr	r2, [pc, #132]	@ (8002c24 <HAL_InitTick+0xec>)
 8002b9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002ba2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ba6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bba:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002bc0:	4817      	ldr	r0, [pc, #92]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002bc2:	f002 f826 	bl	8004c12 <HAL_TIM_Base_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11b      	bne.n	8002c0c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002bd4:	4812      	ldr	r0, [pc, #72]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002bd6:	f002 f873 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002be8:	2036      	movs	r0, #54	@ 0x36
 8002bea:	f000 faaf 	bl	800314c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d808      	bhi.n	8002c06 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	2036      	movs	r0, #54	@ 0x36
 8002bfa:	f000 fa8b 	bl	8003114 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e002      	b.n	8002c0c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3738      	adds	r7, #56	@ 0x38
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	431bde83 	.word	0x431bde83
 8002c20:	2000085c 	.word	0x2000085c
 8002c24:	40001000 	.word	0x40001000
 8002c28:	20000008 	.word	0x20000008

08002c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <NMI_Handler+0x4>

08002c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <HardFault_Handler+0x4>

08002c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <MemManage_Handler+0x4>

08002c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <BusFault_Handler+0x4>

08002c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <UsageFault_Handler+0x4>

08002c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <TIM2_IRQHandler+0x10>)
 8002c6a:	f002 f8a1 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000208 	.word	0x20000208

08002c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002c7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c80:	f000 fc50 	bl	8003524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <TIM6_DAC_IRQHandler+0x10>)
 8002c8e:	f002 f88f 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000085c 	.word	0x2000085c

08002c9c <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <RNG_IRQHandler+0x10>)
 8002ca2:	f001 ff4d 	bl	8004b40 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200001f8 	.word	0x200001f8

08002cb0 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8002cba:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <ITM_SendChar+0x48>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf8 <ITM_SendChar+0x48>)
 8002cc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <ITM_SendChar+0x4c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a0c      	ldr	r2, [pc, #48]	@ (8002cfc <ITM_SendChar+0x4c>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002cd2:	bf00      	nop
 8002cd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f8      	beq.n	8002cd4 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8002ce2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000edfc 	.word	0xe000edfc
 8002cfc:	e0000e00 	.word	0xe0000e00

08002d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_kill>:

int _kill(int pid, int sig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d1a:	f007 ff33 	bl	800ab84 <__errno>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2216      	movs	r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
  return -1;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_exit>:

void _exit (int status)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe7 	bl	8002d10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <_exit+0x12>

08002d46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e00a      	b.n	8002d6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d58:	f3af 8000 	nop.w
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	60ba      	str	r2, [r7, #8]
 8002d64:	b2ca      	uxtb	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	dbf0      	blt.n	8002d58 <_read+0x12>
  }

  return len;
 8002d76:	687b      	ldr	r3, [r7, #4]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e009      	b.n	8002da6 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	60ba      	str	r2, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff88 	bl	8002cb0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3301      	adds	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dbf1      	blt.n	8002d92 <_write+0x12>
  }
  return len;
 8002dae:	687b      	ldr	r3, [r7, #4]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_close>:

int _close(int file)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002de0:	605a      	str	r2, [r3, #4]
  return 0;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_isatty>:

int _isatty(int file)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <_sbrk+0x5c>)
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <_sbrk+0x60>)
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <_sbrk+0x64>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	@ (8002e88 <_sbrk+0x68>)
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e50:	f007 fe98 	bl	800ab84 <__errno>
 8002e54:	4603      	mov	r3, r0
 8002e56:	220c      	movs	r2, #12
 8002e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	e009      	b.n	8002e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e66:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	4a05      	ldr	r2, [pc, #20]	@ (8002e84 <_sbrk+0x64>)
 8002e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20050000 	.word	0x20050000
 8002e80:	00000400 	.word	0x00000400
 8002e84:	200008a8 	.word	0x200008a8
 8002e88:	20019e80 	.word	0x20019e80

08002e8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <SystemInit+0x20>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <SystemInit+0x20>)
 8002e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ee8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eb4:	f7ff ffea 	bl	8002e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb8:	480c      	ldr	r0, [pc, #48]	@ (8002eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eba:	490d      	ldr	r1, [pc, #52]	@ (8002ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8002efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f007 fe57 	bl	800ab90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7ff f97d 	bl	80021e0 <main>
  bx  lr    
 8002ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ee8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ef4:	0800e220 	.word	0x0800e220
  ldr r2, =_sbss
 8002ef8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002efc:	20019e7c 	.word	0x20019e7c

08002f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC_IRQHandler>

08002f02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f06:	2003      	movs	r0, #3
 8002f08:	f000 f8f9 	bl	80030fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0c:	200f      	movs	r0, #15
 8002f0e:	f7ff fe13 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f12:	f7ff fc9d 	bl	8002850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_IncTick+0x20>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_IncTick+0x24>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_IncTick+0x24>)
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000000c 	.word	0x2000000c
 8002f40:	200008ac 	.word	0x200008ac

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <HAL_GetTick+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	200008ac 	.word	0x200008ac

08002f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff ffee 	bl	8002f44 <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d005      	beq.n	8002f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <HAL_Delay+0x44>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f82:	bf00      	nop
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d8f7      	bhi.n	8002f84 <HAL_Delay+0x28>
  {
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fd2:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	60d3      	str	r3, [r2, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00
 8002fe8:	05fa0000 	.word	0x05fa0000

08002fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 0307 	and.w	r3, r3, #7
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	2b00      	cmp	r3, #0
 8003018:	db0b      	blt.n	8003032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4907      	ldr	r1, [pc, #28]	@ (8003040 <__NVIC_EnableIRQ+0x38>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2001      	movs	r0, #1
 800302a:	fa00 f202 	lsl.w	r2, r0, r2
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000e100 	.word	0xe000e100

08003044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	db0a      	blt.n	800306e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	490c      	ldr	r1, [pc, #48]	@ (8003090 <__NVIC_SetPriority+0x4c>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	440b      	add	r3, r1
 8003068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800306c:	e00a      	b.n	8003084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4908      	ldr	r1, [pc, #32]	@ (8003094 <__NVIC_SetPriority+0x50>)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3b04      	subs	r3, #4
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	440b      	add	r3, r1
 8003082:	761a      	strb	r2, [r3, #24]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000e100 	.word	0xe000e100
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	@ 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf28      	it	cs
 80030b6:	2304      	movcs	r3, #4
 80030b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3304      	adds	r3, #4
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <NVIC_EncodePriority+0x30>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3b03      	subs	r3, #3
 80030c6:	e000      	b.n	80030ca <NVIC_EncodePriority+0x32>
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	401a      	ands	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	4313      	orrs	r3, r2
         );
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	@ 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ff4c 	bl	8002fa4 <__NVIC_SetPriorityGrouping>
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003126:	f7ff ff61 	bl	8002fec <__NVIC_GetPriorityGrouping>
 800312a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	6978      	ldr	r0, [r7, #20]
 8003132:	f7ff ffb1 	bl	8003098 <NVIC_EncodePriority>
 8003136:	4602      	mov	r2, r0
 8003138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff80 	bl	8003044 <__NVIC_SetPriority>
}
 8003144:	bf00      	nop
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff54 	bl	8003008 <__NVIC_EnableIRQ>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	@ 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e175      	b.n	8003474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003188:	2201      	movs	r2, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	f040 8164 	bne.w	800346e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d005      	beq.n	80031be <HAL_GPIO_Init+0x56>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d130      	bne.n	8003220 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f4:	2201      	movs	r2, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 0201 	and.w	r2, r3, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b03      	cmp	r3, #3
 800322a:	d017      	beq.n	800325c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d123      	bne.n	80032b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	08da      	lsrs	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	69b9      	ldr	r1, [r7, #24]
 80032ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80be 	beq.w	800346e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	4b66      	ldr	r3, [pc, #408]	@ (800348c <HAL_GPIO_Init+0x324>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	4a65      	ldr	r2, [pc, #404]	@ (800348c <HAL_GPIO_Init+0x324>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80032fe:	4b63      	ldr	r3, [pc, #396]	@ (800348c <HAL_GPIO_Init+0x324>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800330a:	4a61      	ldr	r2, [pc, #388]	@ (8003490 <HAL_GPIO_Init+0x328>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a58      	ldr	r2, [pc, #352]	@ (8003494 <HAL_GPIO_Init+0x32c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d037      	beq.n	80033a6 <HAL_GPIO_Init+0x23e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a57      	ldr	r2, [pc, #348]	@ (8003498 <HAL_GPIO_Init+0x330>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d031      	beq.n	80033a2 <HAL_GPIO_Init+0x23a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a56      	ldr	r2, [pc, #344]	@ (800349c <HAL_GPIO_Init+0x334>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02b      	beq.n	800339e <HAL_GPIO_Init+0x236>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a55      	ldr	r2, [pc, #340]	@ (80034a0 <HAL_GPIO_Init+0x338>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d025      	beq.n	800339a <HAL_GPIO_Init+0x232>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a54      	ldr	r2, [pc, #336]	@ (80034a4 <HAL_GPIO_Init+0x33c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01f      	beq.n	8003396 <HAL_GPIO_Init+0x22e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a53      	ldr	r2, [pc, #332]	@ (80034a8 <HAL_GPIO_Init+0x340>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x22a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_GPIO_Init+0x344>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x226>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a51      	ldr	r2, [pc, #324]	@ (80034b0 <HAL_GPIO_Init+0x348>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x222>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a50      	ldr	r2, [pc, #320]	@ (80034b4 <HAL_GPIO_Init+0x34c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x21e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4f      	ldr	r2, [pc, #316]	@ (80034b8 <HAL_GPIO_Init+0x350>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x21a>
 800337e:	2309      	movs	r3, #9
 8003380:	e012      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003382:	230a      	movs	r3, #10
 8003384:	e010      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003386:	2308      	movs	r3, #8
 8003388:	e00e      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800338a:	2307      	movs	r3, #7
 800338c:	e00c      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800338e:	2306      	movs	r3, #6
 8003390:	e00a      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003392:	2305      	movs	r3, #5
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 8003396:	2304      	movs	r3, #4
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x240>
 80033a6:	2300      	movs	r3, #0
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033b8:	4935      	ldr	r1, [pc, #212]	@ (8003490 <HAL_GPIO_Init+0x328>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c6:	4b3d      	ldr	r3, [pc, #244]	@ (80034bc <HAL_GPIO_Init+0x354>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ea:	4a34      	ldr	r2, [pc, #208]	@ (80034bc <HAL_GPIO_Init+0x354>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f0:	4b32      	ldr	r3, [pc, #200]	@ (80034bc <HAL_GPIO_Init+0x354>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003414:	4a29      	ldr	r2, [pc, #164]	@ (80034bc <HAL_GPIO_Init+0x354>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800341a:	4b28      	ldr	r3, [pc, #160]	@ (80034bc <HAL_GPIO_Init+0x354>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343e:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_GPIO_Init+0x354>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_GPIO_Init+0x354>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <HAL_GPIO_Init+0x354>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f67f ae86 	bls.w	8003188 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40021400 	.word	0x40021400
 80034ac:	40021800 	.word	0x40021800
 80034b0:	40021c00 	.word	0x40021c00
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40022400 	.word	0x40022400
 80034bc:	40013c00 	.word	0x40013c00

080034c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e001      	b.n	80034e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	041a      	lsls	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353a:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f8b4 	bl	80026b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e108      	b.n	8003778 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fa5f 	bl	8002a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2203      	movs	r2, #3
 800358a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003594:	d102      	bne.n	800359c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fcc7 	bl	8005f34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7c1a      	ldrb	r2, [r3, #16]
 80035ae:	f88d 2000 	strb.w	r2, [sp]
 80035b2:	3304      	adds	r3, #4
 80035b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b6:	f002 fc63 	bl	8005e80 <USB_CoreInit>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0d5      	b.n	8003778 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 fcbf 	bl	8005f56 <USB_SetCurrentMode>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0c6      	b.n	8003778 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e04a      	b.n	8003686 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3315      	adds	r3, #21
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3314      	adds	r3, #20
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	b298      	uxth	r0, r3
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	332e      	adds	r3, #46	@ 0x2e
 800362c:	4602      	mov	r2, r0
 800362e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3318      	adds	r3, #24
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	331c      	adds	r3, #28
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3320      	adds	r3, #32
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3324      	adds	r3, #36	@ 0x24
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	3301      	adds	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	791b      	ldrb	r3, [r3, #4]
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	429a      	cmp	r2, r3
 800368e:	d3af      	bcc.n	80035f0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e044      	b.n	8003720 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	3301      	adds	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	791b      	ldrb	r3, [r3, #4]
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	429a      	cmp	r2, r3
 8003728:	d3b5      	bcc.n	8003696 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7c1a      	ldrb	r2, [r3, #16]
 8003732:	f88d 2000 	strb.w	r2, [sp]
 8003736:	3304      	adds	r3, #4
 8003738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800373a:	f002 fc59 	bl	8005ff0 <USB_DevInit>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e013      	b.n	8003778 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7b1b      	ldrb	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f80a 	bl	8003780 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fe14 	bl	800639e <USB_DevDisconnect>

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ae:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	10000003 	.word	0x10000003

080037c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b23      	ldr	r3, [pc, #140]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x98>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	4a22      	ldr	r2, [pc, #136]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x98>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_PWREx_EnableOverDrive+0x98>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f6:	f7ff fba5 	bl	8002f44 <HAL_GetTick>
 80037fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037fc:	e009      	b.n	8003812 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037fe:	f7ff fba1 	bl	8002f44 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800380c:	d901      	bls.n	8003812 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e022      	b.n	8003858 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003812:	4b14      	ldr	r3, [pc, #80]	@ (8003864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381e:	d1ee      	bne.n	80037fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003820:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0f      	ldr	r2, [pc, #60]	@ (8003864 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800382a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800382c:	f7ff fb8a 	bl	8002f44 <HAL_GetTick>
 8003830:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003832:	e009      	b.n	8003848 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003834:	f7ff fb86 	bl	8002f44 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003842:	d901      	bls.n	8003848 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e007      	b.n	8003858 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003848:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_PWREx_EnableOverDrive+0x9c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003854:	d1ee      	bne.n	8003834 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	40007000 	.word	0x40007000

08003868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e291      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8087 	beq.w	800399a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800388c:	4b96      	ldr	r3, [pc, #600]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b04      	cmp	r3, #4
 8003896:	d00c      	beq.n	80038b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003898:	4b93      	ldr	r3, [pc, #588]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d112      	bne.n	80038ca <HAL_RCC_OscConfig+0x62>
 80038a4:	4b90      	ldr	r3, [pc, #576]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b0:	d10b      	bne.n	80038ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d06c      	beq.n	8003998 <HAL_RCC_OscConfig+0x130>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d168      	bne.n	8003998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e26b      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x7a>
 80038d4:	4b84      	ldr	r3, [pc, #528]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a83      	ldr	r2, [pc, #524]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	e02e      	b.n	8003940 <HAL_RCC_OscConfig+0xd8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x9c>
 80038ea:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7e      	ldr	r2, [pc, #504]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80038fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e01d      	b.n	8003940 <HAL_RCC_OscConfig+0xd8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0xc0>
 800390e:	4b76      	ldr	r3, [pc, #472]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a75      	ldr	r2, [pc, #468]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003914:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b73      	ldr	r3, [pc, #460]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a72      	ldr	r2, [pc, #456]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0xd8>
 8003928:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800392e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6b      	ldr	r2, [pc, #428]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800393a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7ff fafc 	bl	8002f44 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003950:	f7ff faf8 	bl	8002f44 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	@ 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e21f      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b61      	ldr	r3, [pc, #388]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e014      	b.n	800399a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7ff fae8 	bl	8002f44 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003978:	f7ff fae4 	bl	8002f44 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e20b      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	4b57      	ldr	r3, [pc, #348]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x110>
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d069      	beq.n	8003a7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a6:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d11c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x190>
 80039be:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_RCC_OscConfig+0x17a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e1df      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e2:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	493d      	ldr	r1, [pc, #244]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	e040      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d023      	beq.n	8003a48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a00:	4b39      	ldr	r3, [pc, #228]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a38      	ldr	r2, [pc, #224]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7ff fa9a 	bl	8002f44 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a14:	f7ff fa96 	bl	8002f44 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1bd      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b30      	ldr	r3, [pc, #192]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4929      	ldr	r1, [pc, #164]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
 8003a46:	e018      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a48:	4b27      	ldr	r3, [pc, #156]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a26      	ldr	r2, [pc, #152]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7ff fa76 	bl	8002f44 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5c:	f7ff fa72 	bl	8002f44 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e199      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d038      	beq.n	8003af8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d019      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a92:	4a15      	ldr	r2, [pc, #84]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7ff fa53 	bl	8002f44 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7ff fa4f 	bl	8002f44 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e176      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x23a>
 8003ac0:	e01a      	b.n	8003af8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac6:	4a08      	ldr	r2, [pc, #32]	@ (8003ae8 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7ff fa39 	bl	8002f44 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7ff fa35 	bl	8002f44 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d903      	bls.n	8003aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e15c      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
 8003ae8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	4b91      	ldr	r3, [pc, #580]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1ee      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a4 	beq.w	8003c4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b06:	4b8b      	ldr	r3, [pc, #556]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	4a87      	ldr	r2, [pc, #540]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1e:	4b85      	ldr	r3, [pc, #532]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b2e:	4b82      	ldr	r3, [pc, #520]	@ (8003d38 <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d118      	bne.n	8003b6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d38 <HAL_RCC_OscConfig+0x4d0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d38 <HAL_RCC_OscConfig+0x4d0>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7ff f9fd 	bl	8002f44 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7ff f9f9 	bl	8002f44 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	@ 0x64
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e120      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b60:	4b75      	ldr	r3, [pc, #468]	@ (8003d38 <HAL_RCC_OscConfig+0x4d0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x31a>
 8003b74:	4b6f      	ldr	r3, [pc, #444]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4a6e      	ldr	r2, [pc, #440]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b80:	e02d      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x33c>
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	4a69      	ldr	r2, [pc, #420]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b96:	4b67      	ldr	r3, [pc, #412]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a66      	ldr	r2, [pc, #408]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	e01c      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x35e>
 8003bac:	4b61      	ldr	r3, [pc, #388]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb0:	4a60      	ldr	r2, [pc, #384]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc4:	e00b      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a5a      	ldr	r2, [pc, #360]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd2:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d015      	beq.n	8003c12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be6:	f7ff f9ad 	bl	8002f44 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7ff f9a9 	bl	8002f44 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0ce      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ee      	beq.n	8003bee <HAL_RCC_OscConfig+0x386>
 8003c10:	e014      	b.n	8003c3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c12:	f7ff f997 	bl	8002f44 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7ff f993 	bl	8002f44 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	4b40      	ldr	r3, [pc, #256]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ee      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c42:	4b3c      	ldr	r3, [pc, #240]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a3b      	ldr	r2, [pc, #236]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80a4 	beq.w	8003da0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c58:	4b36      	ldr	r3, [pc, #216]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d06b      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d149      	bne.n	8003d00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b31      	ldr	r3, [pc, #196]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a30      	ldr	r2, [pc, #192]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7ff f964 	bl	8002f44 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7ff f960 	bl	8002f44 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e087      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	4b28      	ldr	r3, [pc, #160]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	041b      	lsls	r3, r3, #16
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7ff f934 	bl	8002f44 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7ff f930 	bl	8002f44 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e057      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x478>
 8003cfe:	e04f      	b.n	8003da0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0b      	ldr	r2, [pc, #44]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7ff f91a 	bl	8002f44 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7ff f916 	bl	8002f44 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e03d      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4ac>
 8003d32:	e035      	b.n	8003da0 <HAL_RCC_OscConfig+0x538>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x544>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d028      	beq.n	8003d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d121      	bne.n	8003d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d11a      	bne.n	8003d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d111      	bne.n	8003d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	3b01      	subs	r3, #1
 8003d86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0d0      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d910      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b67      	ldr	r3, [pc, #412]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 020f 	bic.w	r2, r3, #15
 8003dde:	4965      	ldr	r1, [pc, #404]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a58      	ldr	r2, [pc, #352]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d040      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d115      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e073      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e06b      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4936      	ldr	r1, [pc, #216]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7ff f84e 	bl	8002f44 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7ff f84a 	bl	8002f44 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e053      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d210      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 020f 	bic.w	r2, r3, #15
 8003eea:	4922      	ldr	r1, [pc, #136]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	@ (8003f7c <HAL_RCC_ClockConfig+0x1cc>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_ClockConfig+0x1d0>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_ClockConfig+0x1d4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fde8 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023c00 	.word	0x40023c00
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	0800de84 	.word	0x0800de84
 8003f80:	20000004 	.word	0x20000004
 8003f84:	20000008 	.word	0x20000008

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b094      	sub	sp, #80	@ 0x50
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f94:	2300      	movs	r3, #0
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f98:	2300      	movs	r3, #0
 8003f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa0:	4b79      	ldr	r3, [pc, #484]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d00d      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	f200 80e1 	bhi.w	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fba:	e0db      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b73      	ldr	r3, [pc, #460]	@ (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc0:	e0db      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc2:	4b73      	ldr	r3, [pc, #460]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc6:	e0d8      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b6a      	ldr	r3, [pc, #424]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	0159      	lsls	r1, r3, #5
 8004008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400c:	0150      	lsls	r0, r2, #5
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4621      	mov	r1, r4
 8004014:	1a51      	subs	r1, r2, r1
 8004016:	6139      	str	r1, [r7, #16]
 8004018:	4629      	mov	r1, r5
 800401a:	eb63 0301 	sbc.w	r3, r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	018b      	lsls	r3, r1, #6
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004036:	4651      	mov	r1, sl
 8004038:	018a      	lsls	r2, r1, #6
 800403a:	4651      	mov	r1, sl
 800403c:	ebb2 0801 	subs.w	r8, r2, r1
 8004040:	4659      	mov	r1, fp
 8004042:	eb63 0901 	sbc.w	r9, r3, r1
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405a:	4690      	mov	r8, r2
 800405c:	4699      	mov	r9, r3
 800405e:	4623      	mov	r3, r4
 8004060:	eb18 0303 	adds.w	r3, r8, r3
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	462b      	mov	r3, r5
 8004068:	eb49 0303 	adc.w	r3, r9, r3
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800407a:	4629      	mov	r1, r5
 800407c:	024b      	lsls	r3, r1, #9
 800407e:	4621      	mov	r1, r4
 8004080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004084:	4621      	mov	r1, r4
 8004086:	024a      	lsls	r2, r1, #9
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408e:	2200      	movs	r2, #0
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004098:	f7fc fda6 	bl	8000be8 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a4:	e058      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	4611      	mov	r1, r2
 80040b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	2300      	movs	r3, #0
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0159      	lsls	r1, r3, #5
 80040ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d2:	0150      	lsls	r0, r2, #5
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4641      	mov	r1, r8
 80040da:	ebb2 0a01 	subs.w	sl, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f8:	ebb2 040a 	subs.w	r4, r2, sl
 80040fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	00eb      	lsls	r3, r5, #3
 800410a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410e:	00e2      	lsls	r2, r4, #3
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	4643      	mov	r3, r8
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	464b      	mov	r3, r9
 800411c:	eb45 0303 	adc.w	r3, r5, r3
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412e:	4629      	mov	r1, r5
 8004130:	028b      	lsls	r3, r1, #10
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004138:	4621      	mov	r1, r4
 800413a:	028a      	lsls	r2, r1, #10
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	61fa      	str	r2, [r7, #28]
 8004148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414c:	f7fc fd4c 	bl	8000be8 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	3301      	adds	r3, #1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800416a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004172:	e002      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800417c:	4618      	mov	r0, r3
 800417e:	3750      	adds	r7, #80	@ 0x50
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200

08004194 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000004 	.word	0x20000004

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff0 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	0800de94 	.word	0x0800de94

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d8:	f7ff ffdc 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0b5b      	lsrs	r3, r3, #13
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	0800de94 	.word	0x0800de94

080041fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	220f      	movs	r2, #15
 800420a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800420c:	4b12      	ldr	r3, [pc, #72]	@ (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0203 	and.w	r2, r3, #3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004218:	4b0f      	ldr	r3, [pc, #60]	@ (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004224:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004230:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	08db      	lsrs	r3, r3, #3
 8004236:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800423e:	4b07      	ldr	r3, [pc, #28]	@ (800425c <HAL_RCC_GetClockConfig+0x60>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 020f 	and.w	r2, r3, #15
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40023c00 	.word	0x40023c00

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004288:	4b69      	ldr	r3, [pc, #420]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a68      	ldr	r2, [pc, #416]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	4b66      	ldr	r3, [pc, #408]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429c:	4964      	ldr	r1, [pc, #400]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	4959      	ldr	r1, [pc, #356]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	494a      	ldr	r1, [pc, #296]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 808b 	beq.w	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	4a39      	ldr	r2, [pc, #228]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004350:	4b37      	ldr	r3, [pc, #220]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800435c:	4b35      	ldr	r3, [pc, #212]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a34      	ldr	r2, [pc, #208]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fe fdec 	bl	8002f44 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fe fde8 	bl	8002f44 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e357      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004382:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438e:	4b28      	ldr	r3, [pc, #160]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004396:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d035      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d02e      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ac:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ce:	4a18      	ldr	r2, [pc, #96]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043d4:	4b16      	ldr	r3, [pc, #88]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d114      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe fdb0 	bl	8002f44 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	e00a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fe fdac 	bl	8002f44 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e319      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ee      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004416:	d111      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004424:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004426:	400b      	ands	r3, r1
 8004428:	4901      	ldr	r1, [pc, #4]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
 800442e:	e00b      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	0ffffcff 	.word	0x0ffffcff
 800443c:	4baa      	ldr	r3, [pc, #680]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4aa9      	ldr	r2, [pc, #676]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004442:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	4ba7      	ldr	r3, [pc, #668]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	49a4      	ldr	r1, [pc, #656]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004456:	4313      	orrs	r3, r2
 8004458:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004466:	4ba0      	ldr	r3, [pc, #640]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800446c:	4a9e      	ldr	r2, [pc, #632]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004472:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004476:	4b9c      	ldr	r3, [pc, #624]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004478:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	4999      	ldr	r1, [pc, #612]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004494:	4b94      	ldr	r3, [pc, #592]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a2:	4991      	ldr	r1, [pc, #580]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b6:	4b8c      	ldr	r3, [pc, #560]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044c4:	4988      	ldr	r1, [pc, #544]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d8:	4b83      	ldr	r3, [pc, #524]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e6:	4980      	ldr	r1, [pc, #512]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044fa:	4b7b      	ldr	r3, [pc, #492]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004500:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004508:	4977      	ldr	r1, [pc, #476]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451c:	4b72      	ldr	r3, [pc, #456]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	496f      	ldr	r1, [pc, #444]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453e:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004544:	f023 020c 	bic.w	r2, r3, #12
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454c:	4966      	ldr	r1, [pc, #408]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456e:	495e      	ldr	r1, [pc, #376]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004582:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004588:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004590:	4955      	ldr	r1, [pc, #340]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a4:	4b50      	ldr	r3, [pc, #320]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	494d      	ldr	r1, [pc, #308]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045c6:	4b48      	ldr	r3, [pc, #288]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d4:	4944      	ldr	r1, [pc, #272]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045e8:	4b3f      	ldr	r3, [pc, #252]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f6:	493c      	ldr	r1, [pc, #240]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800460a:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004610:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004618:	4933      	ldr	r1, [pc, #204]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800462c:	4b2e      	ldr	r3, [pc, #184]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004632:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800463a:	492b      	ldr	r1, [pc, #172]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800464e:	4b26      	ldr	r3, [pc, #152]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004654:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800465c:	4922      	ldr	r1, [pc, #136]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004694:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469c:	4912      	ldr	r1, [pc, #72]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046b0:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046c0:	4909      	ldr	r1, [pc, #36]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d006      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80d9 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046dc:	4b02      	ldr	r3, [pc, #8]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a01      	ldr	r2, [pc, #4]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046e6:	e001      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ee:	f7fe fc29 	bl	8002f44 <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046f6:	f7fe fc25 	bl	8002f44 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b64      	cmp	r3, #100	@ 0x64
 8004702:	d901      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e194      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004708:	4b6c      	ldr	r3, [pc, #432]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d021      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004728:	4b64      	ldr	r3, [pc, #400]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800472e:	0c1b      	lsrs	r3, r3, #16
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004736:	4b61      	ldr	r3, [pc, #388]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473c:	0e1b      	lsrs	r3, r3, #24
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	019a      	lsls	r2, r3, #6
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	071b      	lsls	r3, r3, #28
 800475c:	4957      	ldr	r1, [pc, #348]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02e      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478e:	d129      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004790:	4b4a      	ldr	r3, [pc, #296]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800479e:	4b47      	ldr	r3, [pc, #284]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a4:	0f1b      	lsrs	r3, r3, #28
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	019a      	lsls	r2, r3, #6
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	431a      	orrs	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	071b      	lsls	r3, r3, #28
 80047c4:	493d      	ldr	r1, [pc, #244]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047cc:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047d2:	f023 021f 	bic.w	r2, r3, #31
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	3b01      	subs	r3, #1
 80047dc:	4937      	ldr	r1, [pc, #220]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01d      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047f0:	4b32      	ldr	r3, [pc, #200]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f6:	0e1b      	lsrs	r3, r3, #24
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047fe:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004804:	0f1b      	lsrs	r3, r3, #28
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	019a      	lsls	r2, r3, #6
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	431a      	orrs	r2, r3
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4925      	ldr	r1, [pc, #148]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	019a      	lsls	r2, r3, #6
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	071b      	lsls	r3, r3, #28
 8004854:	4919      	ldr	r1, [pc, #100]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004862:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fe fb6c 	bl	8002f44 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004870:	f7fe fb68 	bl	8002f44 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	@ 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0d7      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b01      	cmp	r3, #1
 8004892:	f040 80cd 	bne.w	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004896:	4b09      	ldr	r3, [pc, #36]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a08      	ldr	r2, [pc, #32]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fe fb4f 	bl	8002f44 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048aa:	f7fe fb4b 	bl	8002f44 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b64      	cmp	r3, #100	@ 0x64
 80048b6:	d903      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0ba      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048c0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048cc:	d0ed      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d02e      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d12a      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048f6:	4b51      	ldr	r3, [pc, #324]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004904:	4b4d      	ldr	r3, [pc, #308]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490a:	0f1b      	lsrs	r3, r3, #28
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	019a      	lsls	r2, r3, #6
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	071b      	lsls	r3, r3, #28
 800492a:	4944      	ldr	r1, [pc, #272]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004932:	4b42      	ldr	r3, [pc, #264]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004938:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	493d      	ldr	r1, [pc, #244]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d022      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800495c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004960:	d11d      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004962:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004970:	4b32      	ldr	r3, [pc, #200]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	0f1b      	lsrs	r3, r3, #28
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	4929      	ldr	r1, [pc, #164]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d028      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049aa:	4b24      	ldr	r3, [pc, #144]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049b8:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	019a      	lsls	r2, r3, #6
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	431a      	orrs	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	071b      	lsls	r3, r3, #28
 80049de:	4917      	ldr	r1, [pc, #92]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	4911      	ldr	r1, [pc, #68]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049fc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0e      	ldr	r2, [pc, #56]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fe fa9c 	bl	8002f44 <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a10:	f7fe fa98 	bl	8002f44 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	@ 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e007      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a2e:	d1ef      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800

08004a40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e01c      	b.n	8004a8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	795b      	ldrb	r3, [r3, #5]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fd ff2e 	bl	80028c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0204 	orr.w	r2, r2, #4
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	791b      	ldrb	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_RNG_GenerateRandomNumber+0x1a>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e044      	b.n	8004b38 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	795b      	ldrb	r3, [r3, #5]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d133      	bne.n	8004b26 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac4:	f7fe fa3e 	bl	8002f44 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004aca:	e018      	b.n	8004afe <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004acc:	f7fe fa3a 	bl	8002f44 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d911      	bls.n	8004afe <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00a      	beq.n	8004afe <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e01c      	b.n	8004b38 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d1df      	bne.n	8004acc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	715a      	strb	r2, [r3, #5]
 8004b24:	e004      	b.n	8004b30 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	711a      	strb	r2, [r3, #4]

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2210      	movs	r2, #16
 8004b62:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004b64:	2301      	movs	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	e009      	b.n	8004b7e <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2208      	movs	r2, #8
 8004b78:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10b      	bne.n	8004b9c <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2204      	movs	r2, #4
 8004b88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f837 	bl	8004bfe <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8004b98:	605a      	str	r2, [r3, #4]

    return;
 8004b9a:	e022      	b.n	8004be2 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01d      	beq.n	8004be2 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0208 	bic.w	r2, r2, #8
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	795b      	ldrb	r3, [r3, #5]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00b      	beq.n	8004be2 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f803 	bl	8004be8 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e049      	b.n	8004cb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fd fe7f 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f000 faa7 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e054      	b.n	8004d82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	@ (8004d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d022      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d02:	d01d      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a22      	ldr	r2, [pc, #136]	@ (8004d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d018      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a21      	ldr	r2, [pc, #132]	@ (8004d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1e      	ldr	r2, [pc, #120]	@ (8004da0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIM_Base_Start_IT+0x80>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d115      	bne.n	8004d6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	4b19      	ldr	r3, [pc, #100]	@ (8004dac <HAL_TIM_Base_Start_IT+0xec>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b06      	cmp	r3, #6
 8004d50:	d015      	beq.n	8004d7e <HAL_TIM_Base_Start_IT+0xbe>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d58:	d011      	beq.n	8004d7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6a:	e008      	b.n	8004d7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40001800 	.word	0x40001800
 8004dac:	00010007 	.word	0x00010007

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0202 	mvn.w	r2, #2
 8004de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9b4 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9a6 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9b7 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0204 	mvn.w	r2, #4
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f98e 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f980 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f991 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0208 	mvn.w	r2, #8
 8004e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2204      	movs	r2, #4
 8004e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f968 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f95a 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f96b 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d020      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0210 	mvn.w	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f942 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f934 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f945 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0201 	mvn.w	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fd fc3a 	bl	8002790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00c      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb0b 	bl	8005560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb03 	bl	8005574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00c      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8ff 	bl	8005190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f06f 0220 	mvn.w	r2, #32
 8004fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 facb 	bl	800554c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_ConfigClockSource+0x1c>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e0b4      	b.n	8005146 <HAL_TIM_ConfigClockSource+0x186>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	4b56      	ldr	r3, [pc, #344]	@ (8005150 <HAL_TIM_ConfigClockSource+0x190>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005014:	d03e      	beq.n	8005094 <HAL_TIM_ConfigClockSource+0xd4>
 8005016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501a:	f200 8087 	bhi.w	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005022:	f000 8086 	beq.w	8005132 <HAL_TIM_ConfigClockSource+0x172>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502a:	d87f      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b70      	cmp	r3, #112	@ 0x70
 800502e:	d01a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xa6>
 8005030:	2b70      	cmp	r3, #112	@ 0x70
 8005032:	d87b      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b60      	cmp	r3, #96	@ 0x60
 8005036:	d050      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x11a>
 8005038:	2b60      	cmp	r3, #96	@ 0x60
 800503a:	d877      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b50      	cmp	r3, #80	@ 0x50
 800503e:	d03c      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xfa>
 8005040:	2b50      	cmp	r3, #80	@ 0x50
 8005042:	d873      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b40      	cmp	r3, #64	@ 0x40
 8005046:	d058      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x13a>
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d86f      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b30      	cmp	r3, #48	@ 0x30
 800504e:	d064      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d86b      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d060      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d867      	bhi.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05c      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	2b10      	cmp	r3, #16
 8005062:	d05a      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	e062      	b.n	800512c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005076:	f000 f9bb 	bl	80053f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	609a      	str	r2, [r3, #8]
      break;
 8005092:	e04f      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a4:	f000 f9a4 	bl	80053f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050b6:	609a      	str	r2, [r3, #8]
      break;
 80050b8:	e03c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 f918 	bl	80052fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2150      	movs	r1, #80	@ 0x50
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f971 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 80050d8:	e02c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 f937 	bl	800535a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2160      	movs	r1, #96	@ 0x60
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f961 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 80050f8:	e01c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	461a      	mov	r2, r3
 8005108:	f000 f8f8 	bl	80052fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2140      	movs	r1, #64	@ 0x40
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f951 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 8005118:	e00c      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f000 f948 	bl	80053ba <TIM_ITRx_SetConfig>
      break;
 800512a:	e003      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
      break;
 8005130:	e000      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	fffeff88 	.word	0xfffeff88

08005154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a46      	ldr	r2, [pc, #280]	@ (80052d0 <TIM_Base_SetConfig+0x12c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a43      	ldr	r2, [pc, #268]	@ (80052d4 <TIM_Base_SetConfig+0x130>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a42      	ldr	r2, [pc, #264]	@ (80052d8 <TIM_Base_SetConfig+0x134>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a41      	ldr	r2, [pc, #260]	@ (80052dc <TIM_Base_SetConfig+0x138>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a40      	ldr	r2, [pc, #256]	@ (80052e0 <TIM_Base_SetConfig+0x13c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a35      	ldr	r2, [pc, #212]	@ (80052d0 <TIM_Base_SetConfig+0x12c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d02b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005204:	d027      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a32      	ldr	r2, [pc, #200]	@ (80052d4 <TIM_Base_SetConfig+0x130>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d023      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a31      	ldr	r2, [pc, #196]	@ (80052d8 <TIM_Base_SetConfig+0x134>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a30      	ldr	r2, [pc, #192]	@ (80052dc <TIM_Base_SetConfig+0x138>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2f      	ldr	r2, [pc, #188]	@ (80052e0 <TIM_Base_SetConfig+0x13c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d017      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2e      	ldr	r2, [pc, #184]	@ (80052e4 <TIM_Base_SetConfig+0x140>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2d      	ldr	r2, [pc, #180]	@ (80052e8 <TIM_Base_SetConfig+0x144>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2c      	ldr	r2, [pc, #176]	@ (80052ec <TIM_Base_SetConfig+0x148>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2b      	ldr	r2, [pc, #172]	@ (80052f0 <TIM_Base_SetConfig+0x14c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2a      	ldr	r2, [pc, #168]	@ (80052f4 <TIM_Base_SetConfig+0x150>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a29      	ldr	r2, [pc, #164]	@ (80052f8 <TIM_Base_SetConfig+0x154>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a10      	ldr	r2, [pc, #64]	@ (80052d0 <TIM_Base_SetConfig+0x12c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <TIM_Base_SetConfig+0x13c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	611a      	str	r2, [r3, #16]
  }
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	40001800 	.word	0x40001800
 80052f4:	40001c00 	.word	0x40001c00
 80052f8:	40002000 	.word	0x40002000

080052fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 030a 	bic.w	r3, r3, #10
 8005338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f023 0210 	bic.w	r2, r3, #16
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005396:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f043 0307 	orr.w	r3, r3, #7
 80053dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800540a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	431a      	orrs	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005444:	2302      	movs	r3, #2
 8005446:	e06d      	b.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2f      	ldr	r2, [pc, #188]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a20      	ldr	r2, [pc, #128]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ba:	d01d      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a16      	ldr	r2, [pc, #88]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a15      	ldr	r2, [pc, #84]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10c      	bne.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	4313      	orrs	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e040      	b.n	800561c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fd f9ea 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	@ 0x24
 80055b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa8c 	bl	8005aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f825 	bl	8005624 <UART_SetConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e01b      	b.n	800561c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fb0b 	bl	8005c30 <UART_CheckIdleState>
 800561a:	4603      	mov	r3, r0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4ba6      	ldr	r3, [pc, #664]	@ (80058e8 <UART_SetConfig+0x2c4>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6979      	ldr	r1, [r7, #20]
 8005658:	430b      	orrs	r3, r1
 800565a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	430a      	orrs	r2, r1
 8005694:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a94      	ldr	r2, [pc, #592]	@ (80058ec <UART_SetConfig+0x2c8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d120      	bne.n	80056e2 <UART_SetConfig+0xbe>
 80056a0:	4b93      	ldr	r3, [pc, #588]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d816      	bhi.n	80056dc <UART_SetConfig+0xb8>
 80056ae:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <UART_SetConfig+0x90>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056cb 	.word	0x080056cb
 80056c0:	080056d7 	.word	0x080056d7
 80056c4:	2301      	movs	r3, #1
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e150      	b.n	800596c <UART_SetConfig+0x348>
 80056ca:	2302      	movs	r3, #2
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e14d      	b.n	800596c <UART_SetConfig+0x348>
 80056d0:	2304      	movs	r3, #4
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e14a      	b.n	800596c <UART_SetConfig+0x348>
 80056d6:	2308      	movs	r3, #8
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e147      	b.n	800596c <UART_SetConfig+0x348>
 80056dc:	2310      	movs	r3, #16
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e144      	b.n	800596c <UART_SetConfig+0x348>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a83      	ldr	r2, [pc, #524]	@ (80058f4 <UART_SetConfig+0x2d0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d132      	bne.n	8005752 <UART_SetConfig+0x12e>
 80056ec:	4b80      	ldr	r3, [pc, #512]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b0c      	cmp	r3, #12
 80056f8:	d828      	bhi.n	800574c <UART_SetConfig+0x128>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <UART_SetConfig+0xdc>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005735 	.word	0x08005735
 8005704:	0800574d 	.word	0x0800574d
 8005708:	0800574d 	.word	0x0800574d
 800570c:	0800574d 	.word	0x0800574d
 8005710:	08005741 	.word	0x08005741
 8005714:	0800574d 	.word	0x0800574d
 8005718:	0800574d 	.word	0x0800574d
 800571c:	0800574d 	.word	0x0800574d
 8005720:	0800573b 	.word	0x0800573b
 8005724:	0800574d 	.word	0x0800574d
 8005728:	0800574d 	.word	0x0800574d
 800572c:	0800574d 	.word	0x0800574d
 8005730:	08005747 	.word	0x08005747
 8005734:	2300      	movs	r3, #0
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e118      	b.n	800596c <UART_SetConfig+0x348>
 800573a:	2302      	movs	r3, #2
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e115      	b.n	800596c <UART_SetConfig+0x348>
 8005740:	2304      	movs	r3, #4
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e112      	b.n	800596c <UART_SetConfig+0x348>
 8005746:	2308      	movs	r3, #8
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e10f      	b.n	800596c <UART_SetConfig+0x348>
 800574c:	2310      	movs	r3, #16
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e10c      	b.n	800596c <UART_SetConfig+0x348>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a68      	ldr	r2, [pc, #416]	@ (80058f8 <UART_SetConfig+0x2d4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d120      	bne.n	800579e <UART_SetConfig+0x17a>
 800575c:	4b64      	ldr	r3, [pc, #400]	@ (80058f0 <UART_SetConfig+0x2cc>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005766:	2b30      	cmp	r3, #48	@ 0x30
 8005768:	d013      	beq.n	8005792 <UART_SetConfig+0x16e>
 800576a:	2b30      	cmp	r3, #48	@ 0x30
 800576c:	d814      	bhi.n	8005798 <UART_SetConfig+0x174>
 800576e:	2b20      	cmp	r3, #32
 8005770:	d009      	beq.n	8005786 <UART_SetConfig+0x162>
 8005772:	2b20      	cmp	r3, #32
 8005774:	d810      	bhi.n	8005798 <UART_SetConfig+0x174>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <UART_SetConfig+0x15c>
 800577a:	2b10      	cmp	r3, #16
 800577c:	d006      	beq.n	800578c <UART_SetConfig+0x168>
 800577e:	e00b      	b.n	8005798 <UART_SetConfig+0x174>
 8005780:	2300      	movs	r3, #0
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e0f2      	b.n	800596c <UART_SetConfig+0x348>
 8005786:	2302      	movs	r3, #2
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e0ef      	b.n	800596c <UART_SetConfig+0x348>
 800578c:	2304      	movs	r3, #4
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e0ec      	b.n	800596c <UART_SetConfig+0x348>
 8005792:	2308      	movs	r3, #8
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e0e9      	b.n	800596c <UART_SetConfig+0x348>
 8005798:	2310      	movs	r3, #16
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e0e6      	b.n	800596c <UART_SetConfig+0x348>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a56      	ldr	r2, [pc, #344]	@ (80058fc <UART_SetConfig+0x2d8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d120      	bne.n	80057ea <UART_SetConfig+0x1c6>
 80057a8:	4b51      	ldr	r3, [pc, #324]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b4:	d013      	beq.n	80057de <UART_SetConfig+0x1ba>
 80057b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b8:	d814      	bhi.n	80057e4 <UART_SetConfig+0x1c0>
 80057ba:	2b80      	cmp	r3, #128	@ 0x80
 80057bc:	d009      	beq.n	80057d2 <UART_SetConfig+0x1ae>
 80057be:	2b80      	cmp	r3, #128	@ 0x80
 80057c0:	d810      	bhi.n	80057e4 <UART_SetConfig+0x1c0>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <UART_SetConfig+0x1a8>
 80057c6:	2b40      	cmp	r3, #64	@ 0x40
 80057c8:	d006      	beq.n	80057d8 <UART_SetConfig+0x1b4>
 80057ca:	e00b      	b.n	80057e4 <UART_SetConfig+0x1c0>
 80057cc:	2300      	movs	r3, #0
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e0cc      	b.n	800596c <UART_SetConfig+0x348>
 80057d2:	2302      	movs	r3, #2
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e0c9      	b.n	800596c <UART_SetConfig+0x348>
 80057d8:	2304      	movs	r3, #4
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e0c6      	b.n	800596c <UART_SetConfig+0x348>
 80057de:	2308      	movs	r3, #8
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e0c3      	b.n	800596c <UART_SetConfig+0x348>
 80057e4:	2310      	movs	r3, #16
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e0c0      	b.n	800596c <UART_SetConfig+0x348>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a44      	ldr	r2, [pc, #272]	@ (8005900 <UART_SetConfig+0x2dc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d125      	bne.n	8005840 <UART_SetConfig+0x21c>
 80057f4:	4b3e      	ldr	r3, [pc, #248]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005802:	d017      	beq.n	8005834 <UART_SetConfig+0x210>
 8005804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005808:	d817      	bhi.n	800583a <UART_SetConfig+0x216>
 800580a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800580e:	d00b      	beq.n	8005828 <UART_SetConfig+0x204>
 8005810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005814:	d811      	bhi.n	800583a <UART_SetConfig+0x216>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <UART_SetConfig+0x1fe>
 800581a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800581e:	d006      	beq.n	800582e <UART_SetConfig+0x20a>
 8005820:	e00b      	b.n	800583a <UART_SetConfig+0x216>
 8005822:	2300      	movs	r3, #0
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e0a1      	b.n	800596c <UART_SetConfig+0x348>
 8005828:	2302      	movs	r3, #2
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e09e      	b.n	800596c <UART_SetConfig+0x348>
 800582e:	2304      	movs	r3, #4
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e09b      	b.n	800596c <UART_SetConfig+0x348>
 8005834:	2308      	movs	r3, #8
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e098      	b.n	800596c <UART_SetConfig+0x348>
 800583a:	2310      	movs	r3, #16
 800583c:	77fb      	strb	r3, [r7, #31]
 800583e:	e095      	b.n	800596c <UART_SetConfig+0x348>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2f      	ldr	r2, [pc, #188]	@ (8005904 <UART_SetConfig+0x2e0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d125      	bne.n	8005896 <UART_SetConfig+0x272>
 800584a:	4b29      	ldr	r3, [pc, #164]	@ (80058f0 <UART_SetConfig+0x2cc>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005850:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005854:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005858:	d017      	beq.n	800588a <UART_SetConfig+0x266>
 800585a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800585e:	d817      	bhi.n	8005890 <UART_SetConfig+0x26c>
 8005860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005864:	d00b      	beq.n	800587e <UART_SetConfig+0x25a>
 8005866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800586a:	d811      	bhi.n	8005890 <UART_SetConfig+0x26c>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <UART_SetConfig+0x254>
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005874:	d006      	beq.n	8005884 <UART_SetConfig+0x260>
 8005876:	e00b      	b.n	8005890 <UART_SetConfig+0x26c>
 8005878:	2301      	movs	r3, #1
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e076      	b.n	800596c <UART_SetConfig+0x348>
 800587e:	2302      	movs	r3, #2
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e073      	b.n	800596c <UART_SetConfig+0x348>
 8005884:	2304      	movs	r3, #4
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e070      	b.n	800596c <UART_SetConfig+0x348>
 800588a:	2308      	movs	r3, #8
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e06d      	b.n	800596c <UART_SetConfig+0x348>
 8005890:	2310      	movs	r3, #16
 8005892:	77fb      	strb	r3, [r7, #31]
 8005894:	e06a      	b.n	800596c <UART_SetConfig+0x348>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1b      	ldr	r2, [pc, #108]	@ (8005908 <UART_SetConfig+0x2e4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d138      	bne.n	8005912 <UART_SetConfig+0x2ee>
 80058a0:	4b13      	ldr	r3, [pc, #76]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80058aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058ae:	d017      	beq.n	80058e0 <UART_SetConfig+0x2bc>
 80058b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058b4:	d82a      	bhi.n	800590c <UART_SetConfig+0x2e8>
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ba:	d00b      	beq.n	80058d4 <UART_SetConfig+0x2b0>
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c0:	d824      	bhi.n	800590c <UART_SetConfig+0x2e8>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <UART_SetConfig+0x2aa>
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ca:	d006      	beq.n	80058da <UART_SetConfig+0x2b6>
 80058cc:	e01e      	b.n	800590c <UART_SetConfig+0x2e8>
 80058ce:	2300      	movs	r3, #0
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e04b      	b.n	800596c <UART_SetConfig+0x348>
 80058d4:	2302      	movs	r3, #2
 80058d6:	77fb      	strb	r3, [r7, #31]
 80058d8:	e048      	b.n	800596c <UART_SetConfig+0x348>
 80058da:	2304      	movs	r3, #4
 80058dc:	77fb      	strb	r3, [r7, #31]
 80058de:	e045      	b.n	800596c <UART_SetConfig+0x348>
 80058e0:	2308      	movs	r3, #8
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e042      	b.n	800596c <UART_SetConfig+0x348>
 80058e6:	bf00      	nop
 80058e8:	efff69f3 	.word	0xefff69f3
 80058ec:	40011000 	.word	0x40011000
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40004800 	.word	0x40004800
 80058fc:	40004c00 	.word	0x40004c00
 8005900:	40005000 	.word	0x40005000
 8005904:	40011400 	.word	0x40011400
 8005908:	40007800 	.word	0x40007800
 800590c:	2310      	movs	r3, #16
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	e02c      	b.n	800596c <UART_SetConfig+0x348>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a72      	ldr	r2, [pc, #456]	@ (8005ae0 <UART_SetConfig+0x4bc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d125      	bne.n	8005968 <UART_SetConfig+0x344>
 800591c:	4b71      	ldr	r3, [pc, #452]	@ (8005ae4 <UART_SetConfig+0x4c0>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005922:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005926:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800592a:	d017      	beq.n	800595c <UART_SetConfig+0x338>
 800592c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005930:	d817      	bhi.n	8005962 <UART_SetConfig+0x33e>
 8005932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005936:	d00b      	beq.n	8005950 <UART_SetConfig+0x32c>
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593c:	d811      	bhi.n	8005962 <UART_SetConfig+0x33e>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <UART_SetConfig+0x326>
 8005942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005946:	d006      	beq.n	8005956 <UART_SetConfig+0x332>
 8005948:	e00b      	b.n	8005962 <UART_SetConfig+0x33e>
 800594a:	2300      	movs	r3, #0
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e00d      	b.n	800596c <UART_SetConfig+0x348>
 8005950:	2302      	movs	r3, #2
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e00a      	b.n	800596c <UART_SetConfig+0x348>
 8005956:	2304      	movs	r3, #4
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e007      	b.n	800596c <UART_SetConfig+0x348>
 800595c:	2308      	movs	r3, #8
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e004      	b.n	800596c <UART_SetConfig+0x348>
 8005962:	2310      	movs	r3, #16
 8005964:	77fb      	strb	r3, [r7, #31]
 8005966:	e001      	b.n	800596c <UART_SetConfig+0x348>
 8005968:	2310      	movs	r3, #16
 800596a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005974:	d15b      	bne.n	8005a2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005976:	7ffb      	ldrb	r3, [r7, #31]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d828      	bhi.n	80059ce <UART_SetConfig+0x3aa>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <UART_SetConfig+0x360>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059b9 	.word	0x080059b9
 8005990:	080059cf 	.word	0x080059cf
 8005994:	080059bf 	.word	0x080059bf
 8005998:	080059cf 	.word	0x080059cf
 800599c:	080059cf 	.word	0x080059cf
 80059a0:	080059cf 	.word	0x080059cf
 80059a4:	080059c7 	.word	0x080059c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a8:	f7fe fc00 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 80059ac:	61b8      	str	r0, [r7, #24]
        break;
 80059ae:	e013      	b.n	80059d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b0:	f7fe fc10 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 80059b4:	61b8      	str	r0, [r7, #24]
        break;
 80059b6:	e00f      	b.n	80059d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b8:	4b4b      	ldr	r3, [pc, #300]	@ (8005ae8 <UART_SetConfig+0x4c4>)
 80059ba:	61bb      	str	r3, [r7, #24]
        break;
 80059bc:	e00c      	b.n	80059d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059be:	f7fe fae3 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 80059c2:	61b8      	str	r0, [r7, #24]
        break;
 80059c4:	e008      	b.n	80059d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ca:	61bb      	str	r3, [r7, #24]
        break;
 80059cc:	e004      	b.n	80059d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	77bb      	strb	r3, [r7, #30]
        break;
 80059d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d074      	beq.n	8005ac8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	005a      	lsls	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	d916      	bls.n	8005a28 <UART_SetConfig+0x404>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a00:	d212      	bcs.n	8005a28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f023 030f 	bic.w	r3, r3, #15
 8005a0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	89fb      	ldrh	r3, [r7, #14]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	89fa      	ldrh	r2, [r7, #14]
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	e04f      	b.n	8005ac8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	77bb      	strb	r3, [r7, #30]
 8005a2c:	e04c      	b.n	8005ac8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a2e:	7ffb      	ldrb	r3, [r7, #31]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d828      	bhi.n	8005a86 <UART_SetConfig+0x462>
 8005a34:	a201      	add	r2, pc, #4	@ (adr r2, 8005a3c <UART_SetConfig+0x418>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	08005a87 	.word	0x08005a87
 8005a4c:	08005a77 	.word	0x08005a77
 8005a50:	08005a87 	.word	0x08005a87
 8005a54:	08005a87 	.word	0x08005a87
 8005a58:	08005a87 	.word	0x08005a87
 8005a5c:	08005a7f 	.word	0x08005a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a60:	f7fe fba4 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8005a64:	61b8      	str	r0, [r7, #24]
        break;
 8005a66:	e013      	b.n	8005a90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a68:	f7fe fbb4 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 8005a6c:	61b8      	str	r0, [r7, #24]
        break;
 8005a6e:	e00f      	b.n	8005a90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae8 <UART_SetConfig+0x4c4>)
 8005a72:	61bb      	str	r3, [r7, #24]
        break;
 8005a74:	e00c      	b.n	8005a90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a76:	f7fe fa87 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005a7a:	61b8      	str	r0, [r7, #24]
        break;
 8005a7c:	e008      	b.n	8005a90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a82:	61bb      	str	r3, [r7, #24]
        break;
 8005a84:	e004      	b.n	8005a90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a8e:	bf00      	nop
    }

    if (pclk != 0U)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d018      	beq.n	8005ac8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	085a      	lsrs	r2, r3, #1
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	441a      	add	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b0f      	cmp	r3, #15
 8005aae:	d909      	bls.n	8005ac4 <UART_SetConfig+0x4a0>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab6:	d205      	bcs.n	8005ac4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	e001      	b.n	8005ac8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ad4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40007c00 	.word	0x40007c00
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	00f42400 	.word	0x00f42400

08005aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bea:	d10a      	bne.n	8005c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08c      	sub	sp, #48	@ 0x30
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c40:	f7fd f980 	bl	8002f44 <HAL_GetTick>
 8005c44:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d12e      	bne.n	8005cb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f83b 	bl	8005cde <UART_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d021      	beq.n	8005cb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c82:	623b      	str	r3, [r7, #32]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e6      	bne.n	8005c6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e011      	b.n	8005cd6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3728      	adds	r7, #40	@ 0x28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cee:	e04f      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d04b      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf8:	f7fd f924 	bl	8002f44 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e04e      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d037      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b80      	cmp	r3, #128	@ 0x80
 8005d24:	d034      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b40      	cmp	r3, #64	@ 0x40
 8005d2a:	d031      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d110      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2208      	movs	r2, #8
 8005d40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f838 	bl	8005db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2208      	movs	r2, #8
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e029      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d6a:	d111      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f81e 	bl	8005db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e00f      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d0a0      	beq.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b095      	sub	sp, #84	@ 0x54
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d118      	bne.n	8005e60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f023 0310 	bic.w	r3, r3, #16
 8005e42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6979      	ldr	r1, [r7, #20]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e74:	bf00      	nop
 8005e76:	3754      	adds	r7, #84	@ 0x54
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e80:	b084      	sub	sp, #16
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	f107 001c 	add.w	r0, r7, #28
 8005e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d121      	bne.n	8005ede <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	4b21      	ldr	r3, [pc, #132]	@ (8005f30 <USB_CoreInit+0xb0>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d105      	bne.n	8005ed2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa92 	bl	80063fc <USB_CoreReset>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e010      	b.n	8005f00 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa86 	bl	80063fc <USB_CoreReset>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005f00:	7fbb      	ldrb	r3, [r7, #30]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10b      	bne.n	8005f1e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f043 0206 	orr.w	r2, r3, #6
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2a:	b004      	add	sp, #16
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	ffbdffbf 	.word	0xffbdffbf

08005f34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f023 0201 	bic.w	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d115      	bne.n	8005fa4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f84:	200a      	movs	r0, #10
 8005f86:	f7fc ffe9 	bl	8002f5c <HAL_Delay>
      ms += 10U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	330a      	adds	r3, #10
 8005f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa25 	bl	80063e0 <USB_GetMode>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d01e      	beq.n	8005fda <USB_SetCurrentMode+0x84>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fa0:	d9f0      	bls.n	8005f84 <USB_SetCurrentMode+0x2e>
 8005fa2:	e01a      	b.n	8005fda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d115      	bne.n	8005fd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	f7fc ffd0 	bl	8002f5c <HAL_Delay>
      ms += 10U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	330a      	adds	r3, #10
 8005fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa0c 	bl	80063e0 <USB_GetMode>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <USB_SetCurrentMode+0x84>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fd2:	d9f0      	bls.n	8005fb6 <USB_SetCurrentMode+0x60>
 8005fd4:	e001      	b.n	8005fda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e005      	b.n	8005fe6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fde:	d101      	bne.n	8005fe4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	e009      	b.n	8006024 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3340      	adds	r3, #64	@ 0x40
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3301      	adds	r3, #1
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b0e      	cmp	r3, #14
 8006028:	d9f2      	bls.n	8006010 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800602a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11c      	bne.n	800606c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e005      	b.n	8006078 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800607e:	461a      	mov	r2, r3
 8006080:	2300      	movs	r3, #0
 8006082:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006084:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006088:	2b01      	cmp	r3, #1
 800608a:	d10d      	bne.n	80060a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800608c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006094:	2100      	movs	r1, #0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f968 	bl	800636c <USB_SetDevSpeed>
 800609c:	e008      	b.n	80060b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f963 	bl	800636c <USB_SetDevSpeed>
 80060a6:	e003      	b.n	80060b0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060a8:	2103      	movs	r1, #3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f95e 	bl	800636c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060b0:	2110      	movs	r1, #16
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8fa 	bl	80062ac <USB_FlushTxFifo>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f924 	bl	8006310 <USB_FlushRxFifo>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d8:	461a      	mov	r2, r3
 80060da:	2300      	movs	r3, #0
 80060dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e4:	461a      	mov	r2, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	e043      	b.n	8006184 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800610e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006112:	d118      	bne.n	8006146 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006126:	461a      	mov	r2, r3
 8006128:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	e013      	b.n	8006158 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	461a      	mov	r2, r3
 800613e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e008      	b.n	8006158 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006152:	461a      	mov	r2, r3
 8006154:	2300      	movs	r3, #0
 8006156:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006176:	461a      	mov	r2, r3
 8006178:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800617c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3301      	adds	r3, #1
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006188:	461a      	mov	r2, r3
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4293      	cmp	r3, r2
 800618e:	d3b5      	bcc.n	80060fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	e043      	b.n	800621e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ac:	d118      	bne.n	80061e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c0:	461a      	mov	r2, r3
 80061c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	e013      	b.n	80061f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	461a      	mov	r2, r3
 80061d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e008      	b.n	80061f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	2300      	movs	r3, #0
 80061f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fe:	461a      	mov	r2, r3
 8006200:	2300      	movs	r3, #0
 8006202:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006210:	461a      	mov	r2, r3
 8006212:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006216:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	3301      	adds	r3, #1
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006222:	461a      	mov	r2, r3
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4293      	cmp	r3, r2
 8006228:	d3b5      	bcc.n	8006196 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800623c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800624a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800624c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006250:	2b00      	cmp	r3, #0
 8006252:	d105      	bne.n	8006260 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f043 0210 	orr.w	r2, r3, #16
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	4b0f      	ldr	r3, [pc, #60]	@ (80062a4 <USB_DevInit+0x2b4>)
 8006266:	4313      	orrs	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800626c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f043 0208 	orr.w	r2, r3, #8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006280:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <USB_DevInit+0x2b8>)
 800628e:	4313      	orrs	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a0:	b004      	add	sp, #16
 80062a2:	4770      	bx	lr
 80062a4:	803c3800 	.word	0x803c3800
 80062a8:	40000004 	.word	0x40000004

080062ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062c6:	d901      	bls.n	80062cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e01b      	b.n	8006304 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	daf2      	bge.n	80062ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	019b      	lsls	r3, r3, #6
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062f0:	d901      	bls.n	80062f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e006      	b.n	8006304 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d0f0      	beq.n	80062e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006328:	d901      	bls.n	800632e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e018      	b.n	8006360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	daf2      	bge.n	800631c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2210      	movs	r2, #16
 800633e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800634c:	d901      	bls.n	8006352 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e006      	b.n	8006360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b10      	cmp	r3, #16
 800635c:	d0f0      	beq.n	8006340 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063b8:	f023 0303 	bic.w	r3, r3, #3
 80063bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063cc:	f043 0302 	orr.w	r3, r3, #2
 80063d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f003 0301 	and.w	r3, r3, #1
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3301      	adds	r3, #1
 800640c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006414:	d901      	bls.n	800641a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e01b      	b.n	8006452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	daf2      	bge.n	8006408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800643e:	d901      	bls.n	8006444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b01      	cmp	r3, #1
 800644e:	d0f0      	beq.n	8006432 <USB_CoreReset+0x36>

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800645e:	b480      	push	{r7}
 8006460:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006472:	f3ef 8305 	mrs	r3, IPSR
 8006476:	60bb      	str	r3, [r7, #8]
  return(result);
 8006478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647e:	f3ef 8310 	mrs	r3, PRIMASK
 8006482:	607b      	str	r3, [r7, #4]
  return(result);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800648a:	f3ef 8311 	mrs	r3, BASEPRI
 800648e:	603b      	str	r3, [r7, #0]
  return(result);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <osKernelInitialize+0x3a>
 8006496:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <osKernelInitialize+0x64>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d103      	bne.n	80064a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800649e:	f06f 0305 	mvn.w	r3, #5
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e00c      	b.n	80064c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064a6:	4b0a      	ldr	r3, [pc, #40]	@ (80064d0 <osKernelInitialize+0x64>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064ae:	4b08      	ldr	r3, [pc, #32]	@ (80064d0 <osKernelInitialize+0x64>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e002      	b.n	80064c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064c0:	68fb      	ldr	r3, [r7, #12]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	200008b0 	.word	0x200008b0

080064d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064da:	f3ef 8305 	mrs	r3, IPSR
 80064de:	60bb      	str	r3, [r7, #8]
  return(result);
 80064e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10f      	bne.n	8006506 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ea:	607b      	str	r3, [r7, #4]
  return(result);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064f2:	f3ef 8311 	mrs	r3, BASEPRI
 80064f6:	603b      	str	r3, [r7, #0]
  return(result);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <osKernelStart+0x3a>
 80064fe:	4b0f      	ldr	r3, [pc, #60]	@ (800653c <osKernelStart+0x68>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d103      	bne.n	800650e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006506:	f06f 0305 	mvn.w	r3, #5
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e010      	b.n	8006530 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800650e:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <osKernelStart+0x68>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d109      	bne.n	800652a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006516:	f7ff ffa2 	bl	800645e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800651a:	4b08      	ldr	r3, [pc, #32]	@ (800653c <osKernelStart+0x68>)
 800651c:	2202      	movs	r2, #2
 800651e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006520:	f001 faca 	bl	8007ab8 <vTaskStartScheduler>
      stat = osOK;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e002      	b.n	8006530 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200008b0 	.word	0x200008b0

08006540 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b090      	sub	sp, #64	@ 0x40
 8006544:	af04      	add	r7, sp, #16
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006550:	f3ef 8305 	mrs	r3, IPSR
 8006554:	61fb      	str	r3, [r7, #28]
  return(result);
 8006556:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 808f 	bne.w	800667c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655e:	f3ef 8310 	mrs	r3, PRIMASK
 8006562:	61bb      	str	r3, [r7, #24]
  return(result);
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800656a:	f3ef 8311 	mrs	r3, BASEPRI
 800656e:	617b      	str	r3, [r7, #20]
  return(result);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <osThreadNew+0x3e>
 8006576:	4b44      	ldr	r3, [pc, #272]	@ (8006688 <osThreadNew+0x148>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d07e      	beq.n	800667c <osThreadNew+0x13c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d07b      	beq.n	800667c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006588:	2318      	movs	r3, #24
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8006590:	f04f 33ff 	mov.w	r3, #4294967295
 8006594:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d045      	beq.n	8006628 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <osThreadNew+0x6a>
        name = attr->name;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <osThreadNew+0x90>
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	2b38      	cmp	r3, #56	@ 0x38
 80065c2:	d805      	bhi.n	80065d0 <osThreadNew+0x90>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <osThreadNew+0x94>
        return (NULL);
 80065d0:	2300      	movs	r3, #0
 80065d2:	e054      	b.n	800667e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	089b      	lsrs	r3, r3, #2
 80065e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00e      	beq.n	800660a <osThreadNew+0xca>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	2ba7      	cmp	r3, #167	@ 0xa7
 80065f2:	d90a      	bls.n	800660a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <osThreadNew+0xca>
        mem = 1;
 8006604:	2301      	movs	r3, #1
 8006606:	623b      	str	r3, [r7, #32]
 8006608:	e010      	b.n	800662c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10c      	bne.n	800662c <osThreadNew+0xec>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <osThreadNew+0xec>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <osThreadNew+0xec>
          mem = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	e001      	b.n	800662c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d110      	bne.n	8006654 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800663a:	9202      	str	r2, [sp, #8]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f001 f837 	bl	80076bc <xTaskCreateStatic>
 800664e:	4603      	mov	r3, r0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e013      	b.n	800667c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d110      	bne.n	800667c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	b29a      	uxth	r2, r3
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 f88b 	bl	8007788 <xTaskCreate>
 8006672:	4603      	mov	r3, r0
 8006674:	2b01      	cmp	r3, #1
 8006676:	d001      	beq.n	800667c <osThreadNew+0x13c>
          hTask = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800667c:	693b      	ldr	r3, [r7, #16]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3730      	adds	r7, #48	@ 0x30
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200008b0 	.word	0x200008b0

0800668c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006694:	f3ef 8305 	mrs	r3, IPSR
 8006698:	613b      	str	r3, [r7, #16]
  return(result);
 800669a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10f      	bne.n	80066c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a0:	f3ef 8310 	mrs	r3, PRIMASK
 80066a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066ac:	f3ef 8311 	mrs	r3, BASEPRI
 80066b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <osDelay+0x3c>
 80066b8:	4b0a      	ldr	r3, [pc, #40]	@ (80066e4 <osDelay+0x58>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d103      	bne.n	80066c8 <osDelay+0x3c>
    stat = osErrorISR;
 80066c0:	f06f 0305 	mvn.w	r3, #5
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e007      	b.n	80066d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f9b8 	bl	8007a48 <vTaskDelay>
    }
  }

  return (stat);
 80066d8:	697b      	ldr	r3, [r7, #20]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200008b0 	.word	0x200008b0

080066e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a07      	ldr	r2, [pc, #28]	@ (8006714 <vApplicationGetIdleTaskMemory+0x2c>)
 80066f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a06      	ldr	r2, [pc, #24]	@ (8006718 <vApplicationGetIdleTaskMemory+0x30>)
 80066fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2280      	movs	r2, #128	@ 0x80
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	200008b4 	.word	0x200008b4
 8006718:	2000095c 	.word	0x2000095c

0800671c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a07      	ldr	r2, [pc, #28]	@ (8006748 <vApplicationGetTimerTaskMemory+0x2c>)
 800672c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4a06      	ldr	r2, [pc, #24]	@ (800674c <vApplicationGetTimerTaskMemory+0x30>)
 8006732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800673a:	601a      	str	r2, [r3, #0]
}
 800673c:	bf00      	nop
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000b5c 	.word	0x20000b5c
 800674c:	20000c04 	.word	0x20000c04

08006750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f103 0208 	add.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f103 0208 	add.w	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f103 0208 	add.w	r2, r3, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d103      	bne.n	8006812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e00c      	b.n	800682c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3308      	adds	r3, #8
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e002      	b.n	8006820 <vListInsert+0x2e>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d2f6      	bcs.n	800681a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6892      	ldr	r2, [r2, #8]
 800687a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6852      	ldr	r2, [r2, #4]
 8006884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d103      	bne.n	8006898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1e5a      	subs	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10d      	bne.n	80068e8 <xQueueGenericReset+0x30>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	b672      	cpsid	i
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	b662      	cpsie	i
 80068e0:	60bb      	str	r3, [r7, #8]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80068e8:	f002 fe1e 	bl	8009528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	441a      	add	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	3b01      	subs	r3, #1
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	441a      	add	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	@ 0xff
 800692c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	22ff      	movs	r2, #255	@ 0xff
 8006934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d114      	bne.n	8006968 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01a      	beq.n	800697c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3310      	adds	r3, #16
 800694a:	4618      	mov	r0, r3
 800694c:	f001 fb8c 	bl	8008068 <xTaskRemoveFromEventList>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d012      	beq.n	800697c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <xQueueGenericReset+0xd4>)
 8006958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	e009      	b.n	800697c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3310      	adds	r3, #16
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff feef 	bl	8006750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3324      	adds	r3, #36	@ 0x24
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff feea 	bl	8006750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800697c:	f002 fe0a 	bl	8009594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006980:	2301      	movs	r3, #1
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08e      	sub	sp, #56	@ 0x38
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	b672      	cpsid	i
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	b662      	cpsie	i
 80069b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10d      	bne.n	80069e2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	b672      	cpsid	i
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	b662      	cpsie	i
 80069da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	e7fd      	b.n	80069de <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <xQueueGenericCreateStatic+0x5e>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <xQueueGenericCreateStatic+0x62>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueGenericCreateStatic+0x64>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	b672      	cpsid	i
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	b662      	cpsie	i
 8006a0c:	623b      	str	r3, [r7, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <xQueueGenericCreateStatic+0x90>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <xQueueGenericCreateStatic+0x94>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <xQueueGenericCreateStatic+0x96>
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2e:	b672      	cpsid	i
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	b662      	cpsie	i
 8006a3e:	61fb      	str	r3, [r7, #28]
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	e7fd      	b.n	8006a42 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a46:	2350      	movs	r3, #80	@ 0x50
 8006a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b50      	cmp	r3, #80	@ 0x50
 8006a4e:	d00d      	beq.n	8006a6c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	61bb      	str	r3, [r7, #24]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00d      	beq.n	8006a94 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f848 	bl	8006b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3730      	adds	r7, #48	@ 0x30
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b08a      	sub	sp, #40	@ 0x28
 8006aa2:	af02      	add	r7, sp, #8
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10d      	bne.n	8006ace <xQueueGenericCreate+0x30>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	b672      	cpsid	i
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	b662      	cpsie	i
 8006ac6:	613b      	str	r3, [r7, #16]
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	e7fd      	b.n	8006aca <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	e004      	b.n	8006ae4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3350      	adds	r3, #80	@ 0x50
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f002 fe4d 	bl	8009788 <pvPortMalloc>
 8006aee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d011      	beq.n	8006b1a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	3350      	adds	r3, #80	@ 0x50
 8006afe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b08:	79fa      	ldrb	r2, [r7, #7]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f805 	bl	8006b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b52:	2101      	movs	r1, #1
 8006b54:	69b8      	ldr	r0, [r7, #24]
 8006b56:	f7ff feaf 	bl	80068b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00e      	beq.n	8006b96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f81d 	bl	8006bd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6939      	ldr	r1, [r7, #16]
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f7ff ff71 	bl	8006a9e <xQueueGenericCreate>
 8006bbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff ffd3 	bl	8006b6a <prvInitialiseMutex>

		return xNewQueue;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	@ 0x38
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bde:	2300      	movs	r3, #0
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <xQueueGenericSend+0x38>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	b672      	cpsid	i
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	b662      	cpsie	i
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <xQueueGenericSend+0x46>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <xQueueGenericSend+0x4a>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <xQueueGenericSend+0x4c>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <xQueueGenericSend+0x6c>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	b672      	cpsid	i
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	b662      	cpsie	i
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d103      	bne.n	8006c4a <xQueueGenericSend+0x7a>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericSend+0x7e>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericSend+0x80>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10d      	bne.n	8006c70 <xQueueGenericSend+0xa0>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c58:	b672      	cpsid	i
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	b662      	cpsie	i
 8006c68:	623b      	str	r3, [r7, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	e7fd      	b.n	8006c6c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c70:	f001 fbc8 	bl	8008404 <xTaskGetSchedulerState>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <xQueueGenericSend+0xb0>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <xQueueGenericSend+0xb4>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <xQueueGenericSend+0xb6>
 8006c84:	2300      	movs	r3, #0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10d      	bne.n	8006ca6 <xQueueGenericSend+0xd6>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8e:	b672      	cpsid	i
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	b662      	cpsie	i
 8006c9e:	61fb      	str	r3, [r7, #28]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ca6:	f002 fc3f 	bl	8009528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d302      	bcc.n	8006cbc <xQueueGenericSend+0xec>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d129      	bne.n	8006d10 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cc2:	f000 fb8d 	bl	80073e0 <prvCopyDataToQueue>
 8006cc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d010      	beq.n	8006cf2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	3324      	adds	r3, #36	@ 0x24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 f9c7 	bl	8008068 <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d013      	beq.n	8006d08 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8006de0 <xQueueGenericSend+0x210>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	e00a      	b.n	8006d08 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cf8:	4b39      	ldr	r3, [pc, #228]	@ (8006de0 <xQueueGenericSend+0x210>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d08:	f002 fc44 	bl	8009594 <vPortExitCritical>
				return pdPASS;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e063      	b.n	8006dd8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d16:	f002 fc3d 	bl	8009594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e05c      	b.n	8006dd8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 fa03 	bl	8008134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d32:	f002 fc2f 	bl	8009594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d36:	f000 ff4d 	bl	8007bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d3a:	f002 fbf5 	bl	8009528 <vPortEnterCritical>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d103      	bne.n	8006d54 <xQueueGenericSend+0x184>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d103      	bne.n	8006d6a <xQueueGenericSend+0x19a>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d6a:	f002 fc13 	bl	8009594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d6e:	1d3a      	adds	r2, r7, #4
 8006d70:	f107 0314 	add.w	r3, r7, #20
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 f9f2 	bl	8008160 <xTaskCheckForTimeOut>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d124      	bne.n	8006dcc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d84:	f000 fc24 	bl	80075d0 <prvIsQueueFull>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	3310      	adds	r3, #16
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 f910 	bl	8007fbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d9e:	f000 fbaf 	bl	8007500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006da2:	f000 ff25 	bl	8007bf0 <xTaskResumeAll>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f47f af7c 	bne.w	8006ca6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006dae:	4b0c      	ldr	r3, [pc, #48]	@ (8006de0 <xQueueGenericSend+0x210>)
 8006db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	e772      	b.n	8006ca6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dc2:	f000 fb9d 	bl	8007500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dc6:	f000 ff13 	bl	8007bf0 <xTaskResumeAll>
 8006dca:	e76c      	b.n	8006ca6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dce:	f000 fb97 	bl	8007500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dd2:	f000 ff0d 	bl	8007bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3738      	adds	r7, #56	@ 0x38
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08e      	sub	sp, #56	@ 0x38
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10d      	bne.n	8006e18 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	b672      	cpsid	i
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	b662      	cpsie	i
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <xQueueGenericSendFromISR+0x42>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <xQueueGenericSendFromISR+0x46>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <xQueueGenericSendFromISR+0x48>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10d      	bne.n	8006e4c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	b672      	cpsid	i
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	b662      	cpsie	i
 8006e44:	623b      	str	r3, [r7, #32]
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d103      	bne.n	8006e5a <xQueueGenericSendFromISR+0x76>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <xQueueGenericSendFromISR+0x7a>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <xQueueGenericSendFromISR+0x7c>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10d      	bne.n	8006e80 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	b672      	cpsid	i
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	b662      	cpsie	i
 8006e78:	61fb      	str	r3, [r7, #28]
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e80:	f002 fc3c 	bl	80096fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e84:	f3ef 8211 	mrs	r2, BASEPRI
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	b672      	cpsid	i
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	b662      	cpsie	i
 8006e9c:	61ba      	str	r2, [r7, #24]
 8006e9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <xQueueGenericSendFromISR+0xd2>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d12c      	bne.n	8006f10 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ec6:	f000 fa8b 	bl	80073e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d112      	bne.n	8006efa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d016      	beq.n	8006f0a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	3324      	adds	r3, #36	@ 0x24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 f8c1 	bl	8008068 <xTaskRemoveFromEventList>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00e      	beq.n	8006f0a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e007      	b.n	8006f0a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006efa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006efe:	3301      	adds	r3, #1
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	b25a      	sxtb	r2, r3
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006f0e:	e001      	b.n	8006f14 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3738      	adds	r7, #56	@ 0x38
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08c      	sub	sp, #48	@ 0x30
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10d      	bne.n	8006f62 <xQueueReceive+0x36>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	b672      	cpsid	i
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	b662      	cpsie	i
 8006f5a:	623b      	str	r3, [r7, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <xQueueReceive+0x44>
 8006f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <xQueueReceive+0x48>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <xQueueReceive+0x4a>
 8006f74:	2300      	movs	r3, #0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <xQueueReceive+0x6a>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	b672      	cpsid	i
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	b662      	cpsie	i
 8006f8e:	61fb      	str	r3, [r7, #28]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f96:	f001 fa35 	bl	8008404 <xTaskGetSchedulerState>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <xQueueReceive+0x7a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <xQueueReceive+0x7e>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <xQueueReceive+0x80>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10d      	bne.n	8006fcc <xQueueReceive+0xa0>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	b672      	cpsid	i
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	b662      	cpsie	i
 8006fc4:	61bb      	str	r3, [r7, #24]
}
 8006fc6:	bf00      	nop
 8006fc8:	bf00      	nop
 8006fca:	e7fd      	b.n	8006fc8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fcc:	f002 faac 	bl	8009528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01f      	beq.n	800701c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fe0:	f000 fa68 	bl	80074b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	1e5a      	subs	r2, r3, #1
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00f      	beq.n	8007014 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff6:	3310      	adds	r3, #16
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f835 	bl	8008068 <xTaskRemoveFromEventList>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007004:	4b3c      	ldr	r3, [pc, #240]	@ (80070f8 <xQueueReceive+0x1cc>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007014:	f002 fabe 	bl	8009594 <vPortExitCritical>
				return pdPASS;
 8007018:	2301      	movs	r3, #1
 800701a:	e069      	b.n	80070f0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007022:	f002 fab7 	bl	8009594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007026:	2300      	movs	r3, #0
 8007028:	e062      	b.n	80070f0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007030:	f107 0310 	add.w	r3, r7, #16
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f87d 	bl	8008134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800703e:	f002 faa9 	bl	8009594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007042:	f000 fdc7 	bl	8007bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007046:	f002 fa6f 	bl	8009528 <vPortEnterCritical>
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007050:	b25b      	sxtb	r3, r3
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d103      	bne.n	8007060 <xQueueReceive+0x134>
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007066:	b25b      	sxtb	r3, r3
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d103      	bne.n	8007076 <xQueueReceive+0x14a>
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007076:	f002 fa8d 	bl	8009594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707a:	1d3a      	adds	r2, r7, #4
 800707c:	f107 0310 	add.w	r3, r7, #16
 8007080:	4611      	mov	r1, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f86c 	bl	8008160 <xTaskCheckForTimeOut>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d123      	bne.n	80070d6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800708e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007090:	f000 fa88 	bl	80075a4 <prvIsQueueEmpty>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d017      	beq.n	80070ca <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	3324      	adds	r3, #36	@ 0x24
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 ff8a 	bl	8007fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070aa:	f000 fa29 	bl	8007500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070ae:	f000 fd9f 	bl	8007bf0 <xTaskResumeAll>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d189      	bne.n	8006fcc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80070b8:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <xQueueReceive+0x1cc>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	e780      	b.n	8006fcc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070cc:	f000 fa18 	bl	8007500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d0:	f000 fd8e 	bl	8007bf0 <xTaskResumeAll>
 80070d4:	e77a      	b.n	8006fcc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070d8:	f000 fa12 	bl	8007500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070dc:	f000 fd88 	bl	8007bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070e2:	f000 fa5f 	bl	80075a4 <prvIsQueueEmpty>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f43f af6f 	beq.w	8006fcc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3730      	adds	r7, #48	@ 0x30
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	@ 0x38
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007106:	2300      	movs	r3, #0
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10d      	bne.n	8007134 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711c:	b672      	cpsid	i
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	b662      	cpsie	i
 800712c:	623b      	str	r3, [r7, #32]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00d      	beq.n	8007158 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	b672      	cpsid	i
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	b662      	cpsie	i
 8007150:	61fb      	str	r3, [r7, #28]
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007158:	f001 f954 	bl	8008404 <xTaskGetSchedulerState>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <xQueueSemaphoreTake+0x6c>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <xQueueSemaphoreTake+0x70>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <xQueueSemaphoreTake+0x72>
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10d      	bne.n	800718e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	b672      	cpsid	i
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	b662      	cpsie	i
 8007186:	61bb      	str	r3, [r7, #24]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800718e:	f002 f9cb 	bl	8009528 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d024      	beq.n	80071e8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	1e5a      	subs	r2, r3, #1
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80071ae:	f001 faab 	bl	8008708 <pvTaskIncrementMutexHeldCount>
 80071b2:	4602      	mov	r2, r0
 80071b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00f      	beq.n	80071e0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c2:	3310      	adds	r3, #16
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 ff4f 	bl	8008068 <xTaskRemoveFromEventList>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b55      	ldr	r3, [pc, #340]	@ (8007328 <xQueueSemaphoreTake+0x22c>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071e0:	f002 f9d8 	bl	8009594 <vPortExitCritical>
				return pdPASS;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e09a      	b.n	800731e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d114      	bne.n	8007218 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	b672      	cpsid	i
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	b662      	cpsie	i
 8007208:	617b      	str	r3, [r7, #20]
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	e7fd      	b.n	800720c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007210:	f002 f9c0 	bl	8009594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007214:	2300      	movs	r3, #0
 8007216:	e082      	b.n	800731e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800721e:	f107 030c 	add.w	r3, r7, #12
 8007222:	4618      	mov	r0, r3
 8007224:	f000 ff86 	bl	8008134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800722c:	f002 f9b2 	bl	8009594 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007230:	f000 fcd0 	bl	8007bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007234:	f002 f978 	bl	8009528 <vPortEnterCritical>
 8007238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800723e:	b25b      	sxtb	r3, r3
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d103      	bne.n	800724e <xQueueSemaphoreTake+0x152>
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007254:	b25b      	sxtb	r3, r3
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d103      	bne.n	8007264 <xQueueSemaphoreTake+0x168>
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007264:	f002 f996 	bl	8009594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007268:	463a      	mov	r2, r7
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	4611      	mov	r1, r2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 ff75 	bl	8008160 <xTaskCheckForTimeOut>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d132      	bne.n	80072e2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800727c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800727e:	f000 f991 	bl	80075a4 <prvIsQueueEmpty>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d026      	beq.n	80072d6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d109      	bne.n	80072a4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007290:	f002 f94a 	bl	8009528 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f8d1 	bl	8008440 <xTaskPriorityInherit>
 800729e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80072a0:	f002 f978 	bl	8009594 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	3324      	adds	r3, #36	@ 0x24
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	4611      	mov	r1, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fe85 	bl	8007fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072b4:	f000 f924 	bl	8007500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072b8:	f000 fc9a 	bl	8007bf0 <xTaskResumeAll>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f47f af65 	bne.w	800718e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80072c4:	4b18      	ldr	r3, [pc, #96]	@ (8007328 <xQueueSemaphoreTake+0x22c>)
 80072c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	e75b      	b.n	800718e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072d8:	f000 f912 	bl	8007500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072dc:	f000 fc88 	bl	8007bf0 <xTaskResumeAll>
 80072e0:	e755      	b.n	800718e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072e4:	f000 f90c 	bl	8007500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072e8:	f000 fc82 	bl	8007bf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072ee:	f000 f959 	bl	80075a4 <prvIsQueueEmpty>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f43f af4a 	beq.w	800718e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007300:	f002 f912 	bl	8009528 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007306:	f000 f853 	bl	80073b0 <prvGetDisinheritPriorityAfterTimeout>
 800730a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f970 	bl	80085f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007318:	f002 f93c 	bl	8009594 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800731c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800731e:	4618      	mov	r0, r3
 8007320:	3738      	adds	r7, #56	@ 0x38
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10d      	bne.n	8007356 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	b672      	cpsid	i
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	b662      	cpsie	i
 800734e:	60bb      	str	r3, [r7, #8]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007356:	f002 f8e7 	bl	8009528 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007360:	f002 f918 	bl	8009594 <vPortExitCritical>

	return uxReturn;
 8007364:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800736e:	b480      	push	{r7}
 8007370:	b087      	sub	sp, #28
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10d      	bne.n	800739c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	b672      	cpsid	i
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	b662      	cpsie	i
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80073a2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e001      	b.n	80073d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073d2:	68fb      	ldr	r3, [r7, #12]
	}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d14d      	bne.n	80074a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f880 	bl	8008510 <xTaskPriorityDisinherit>
 8007410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	e043      	b.n	80074a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d119      	bne.n	8007454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6858      	ldr	r0, [r3, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	461a      	mov	r2, r3
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	f003 fbd7 	bl	800abde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007438:	441a      	add	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	d32b      	bcc.n	80074a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	e026      	b.n	80074a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68d8      	ldr	r0, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745c:	461a      	mov	r2, r3
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	f003 fbbd 	bl	800abde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	425b      	negs	r3, r3
 800746e:	441a      	add	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d207      	bcs.n	8007490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007488:	425b      	negs	r3, r3
 800748a:	441a      	add	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d105      	bne.n	80074a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3b01      	subs	r3, #1
 80074a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80074aa:	697b      	ldr	r3, [r7, #20]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d303      	bcc.n	80074e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	461a      	mov	r2, r3
 80074f2:	6838      	ldr	r0, [r7, #0]
 80074f4:	f003 fb73 	bl	800abde <memcpy>
	}
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007508:	f002 f80e 	bl	8009528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007514:	e011      	b.n	800753a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d012      	beq.n	8007544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	@ 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fda0 	bl	8008068 <xTaskRemoveFromEventList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800752e:	f000 fe7f 	bl	8008230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	3b01      	subs	r3, #1
 8007536:	b2db      	uxtb	r3, r3
 8007538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800753a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dce9      	bgt.n	8007516 <prvUnlockQueue+0x16>
 8007542:	e000      	b.n	8007546 <prvUnlockQueue+0x46>
					break;
 8007544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	22ff      	movs	r2, #255	@ 0xff
 800754a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800754e:	f002 f821 	bl	8009594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007552:	f001 ffe9 	bl	8009528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800755c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800755e:	e011      	b.n	8007584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d012      	beq.n	800758e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3310      	adds	r3, #16
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fd7b 	bl	8008068 <xTaskRemoveFromEventList>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007578:	f000 fe5a 	bl	8008230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	3b01      	subs	r3, #1
 8007580:	b2db      	uxtb	r3, r3
 8007582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dce9      	bgt.n	8007560 <prvUnlockQueue+0x60>
 800758c:	e000      	b.n	8007590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800758e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	22ff      	movs	r2, #255	@ 0xff
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007598:	f001 fffc 	bl	8009594 <vPortExitCritical>
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075ac:	f001 ffbc 	bl	8009528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075b8:	2301      	movs	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	e001      	b.n	80075c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075c2:	f001 ffe7 	bl	8009594 <vPortExitCritical>

	return xReturn;
 80075c6:	68fb      	ldr	r3, [r7, #12]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075d8:	f001 ffa6 	bl	8009528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d102      	bne.n	80075ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e001      	b.n	80075f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075f2:	f001 ffcf 	bl	8009594 <vPortExitCritical>

	return xReturn;
 80075f6:	68fb      	ldr	r3, [r7, #12]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e014      	b.n	800763a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007610:	4a0f      	ldr	r2, [pc, #60]	@ (8007650 <vQueueAddToRegistry+0x50>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800761c:	490c      	ldr	r1, [pc, #48]	@ (8007650 <vQueueAddToRegistry+0x50>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007626:	4a0a      	ldr	r2, [pc, #40]	@ (8007650 <vQueueAddToRegistry+0x50>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	4413      	add	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007632:	e006      	b.n	8007642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b07      	cmp	r3, #7
 800763e:	d9e7      	bls.n	8007610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20001004 	.word	0x20001004

08007654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007664:	f001 ff60 	bl	8009528 <vPortEnterCritical>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800766e:	b25b      	sxtb	r3, r3
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d103      	bne.n	800767e <vQueueWaitForMessageRestricted+0x2a>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007684:	b25b      	sxtb	r3, r3
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d103      	bne.n	8007694 <vQueueWaitForMessageRestricted+0x40>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007694:	f001 ff7e 	bl	8009594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	3324      	adds	r3, #36	@ 0x24
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fcaf 	bl	800800c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076ae:	6978      	ldr	r0, [r7, #20]
 80076b0:	f7ff ff26 	bl	8007500 <prvUnlockQueue>
	}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08e      	sub	sp, #56	@ 0x38
 80076c0:	af04      	add	r7, sp, #16
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10d      	bne.n	80076ec <xTaskCreateStatic+0x30>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	623b      	str	r3, [r7, #32]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <xTaskCreateStatic+0x52>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	b672      	cpsid	i
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	b662      	cpsie	i
 8007706:	61fb      	str	r3, [r7, #28]
}
 8007708:	bf00      	nop
 800770a:	bf00      	nop
 800770c:	e7fd      	b.n	800770a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800770e:	23a8      	movs	r3, #168	@ 0xa8
 8007710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2ba8      	cmp	r3, #168	@ 0xa8
 8007716:	d00d      	beq.n	8007734 <xTaskCreateStatic+0x78>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	b672      	cpsid	i
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	b662      	cpsie	i
 800772c:	61bb      	str	r3, [r7, #24]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007734:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01e      	beq.n	800777a <xTaskCreateStatic+0xbe>
 800773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01b      	beq.n	800777a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	2202      	movs	r2, #2
 8007750:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007754:	2300      	movs	r3, #0
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	9302      	str	r3, [sp, #8]
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f851 	bl	8007814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007774:	f000 f8f8 	bl	8007968 <prvAddNewTaskToReadyList>
 8007778:	e001      	b.n	800777e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800777e:	697b      	ldr	r3, [r7, #20]
	}
 8007780:	4618      	mov	r0, r3
 8007782:	3728      	adds	r7, #40	@ 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	@ 0x30
 800778c:	af04      	add	r7, sp, #16
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fff3 	bl	8009788 <pvPortMalloc>
 80077a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077aa:	20a8      	movs	r0, #168	@ 0xa8
 80077ac:	f001 ffec 	bl	8009788 <pvPortMalloc>
 80077b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80077be:	e005      	b.n	80077cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077c0:	6978      	ldr	r0, [r7, #20]
 80077c2:	f002 f8af 	bl	8009924 <vPortFree>
 80077c6:	e001      	b.n	80077cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d017      	beq.n	8007802 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	2300      	movs	r3, #0
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f80f 	bl	8007814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077f6:	69f8      	ldr	r0, [r7, #28]
 80077f8:	f000 f8b6 	bl	8007968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077fc:	2301      	movs	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	e002      	b.n	8007808 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007802:	f04f 33ff 	mov.w	r3, #4294967295
 8007806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007808:	69bb      	ldr	r3, [r7, #24]
	}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	461a      	mov	r2, r3
 800782c:	21a5      	movs	r1, #165	@ 0xa5
 800782e:	f003 f8ed 	bl	800aa0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800783c:	440b      	add	r3, r1
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	617b      	str	r3, [r7, #20]
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01f      	beq.n	80078b8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e012      	b.n	80078a4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	3334      	adds	r3, #52	@ 0x34
 800788e:	460a      	mov	r2, r1
 8007890:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d006      	beq.n	80078ac <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d9e9      	bls.n	800787e <prvInitialiseNewTask+0x6a>
 80078aa:	e000      	b.n	80078ae <prvInitialiseNewTask+0x9a>
			{
				break;
 80078ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078b6:	e003      	b.n	80078c0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	2b37      	cmp	r3, #55	@ 0x37
 80078c4:	d901      	bls.n	80078ca <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078c6:	2337      	movs	r3, #55	@ 0x37
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	2200      	movs	r2, #0
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe ff55 	bl	8006790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	3318      	adds	r3, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe ff50 	bl	8006790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	2200      	movs	r2, #0
 8007912:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	3354      	adds	r3, #84	@ 0x54
 800791a:	224c      	movs	r2, #76	@ 0x4c
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f003 f874 	bl	800aa0c <memset>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	4a0d      	ldr	r2, [pc, #52]	@ (800795c <prvInitialiseNewTask+0x148>)
 8007928:	659a      	str	r2, [r3, #88]	@ 0x58
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <prvInitialiseNewTask+0x14c>)
 800792e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	4a0c      	ldr	r2, [pc, #48]	@ (8007964 <prvInitialiseNewTask+0x150>)
 8007934:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	68f9      	ldr	r1, [r7, #12]
 800793a:	69b8      	ldr	r0, [r7, #24]
 800793c:	f001 fcca 	bl	80092d4 <pxPortInitialiseStack>
 8007940:	4602      	mov	r2, r0
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007952:	bf00      	nop
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20019d30 	.word	0x20019d30
 8007960:	20019d98 	.word	0x20019d98
 8007964:	20019e00 	.word	0x20019e00

08007968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007970:	f001 fdda 	bl	8009528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007974:	4b2d      	ldr	r3, [pc, #180]	@ (8007a2c <prvAddNewTaskToReadyList+0xc4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	4a2c      	ldr	r2, [pc, #176]	@ (8007a2c <prvAddNewTaskToReadyList+0xc4>)
 800797c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800797e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007986:	4a2a      	ldr	r2, [pc, #168]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800798c:	4b27      	ldr	r3, [pc, #156]	@ (8007a2c <prvAddNewTaskToReadyList+0xc4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d110      	bne.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007994:	f000 fc70 	bl	8008278 <prvInitialiseTaskLists>
 8007998:	e00d      	b.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800799a:	4b26      	ldr	r3, [pc, #152]	@ (8007a34 <prvAddNewTaskToReadyList+0xcc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079a2:	4b23      	ldr	r3, [pc, #140]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d802      	bhi.n	80079b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079b6:	4b20      	ldr	r3, [pc, #128]	@ (8007a38 <prvAddNewTaskToReadyList+0xd0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007a38 <prvAddNewTaskToReadyList+0xd0>)
 80079be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a38 <prvAddNewTaskToReadyList+0xd0>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079cc:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <prvAddNewTaskToReadyList+0xd4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d903      	bls.n	80079dc <prvAddNewTaskToReadyList+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	4a18      	ldr	r2, [pc, #96]	@ (8007a3c <prvAddNewTaskToReadyList+0xd4>)
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4a15      	ldr	r2, [pc, #84]	@ (8007a40 <prvAddNewTaskToReadyList+0xd8>)
 80079ea:	441a      	add	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7fe fed9 	bl	80067aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 fdcc 	bl	8009594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <prvAddNewTaskToReadyList+0xcc>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a04:	4b0a      	ldr	r3, [pc, #40]	@ (8007a30 <prvAddNewTaskToReadyList+0xc8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d207      	bcs.n	8007a22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <prvAddNewTaskToReadyList+0xdc>)
 8007a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20001518 	.word	0x20001518
 8007a30:	20001044 	.word	0x20001044
 8007a34:	20001524 	.word	0x20001524
 8007a38:	20001534 	.word	0x20001534
 8007a3c:	20001520 	.word	0x20001520
 8007a40:	20001048 	.word	0x20001048
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01a      	beq.n	8007a90 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a5a:	4b15      	ldr	r3, [pc, #84]	@ (8007ab0 <vTaskDelay+0x68>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <vTaskDelay+0x36>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	60bb      	str	r3, [r7, #8]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007a7e:	f000 f8a9 	bl	8007bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f869 	bl	8008b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a8a:	f000 f8b1 	bl	8007bf0 <xTaskResumeAll>
 8007a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007a96:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <vTaskDelay+0x6c>)
 8007a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20001540 	.word	0x20001540
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	@ 0x28
 8007abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ac6:	463a      	mov	r2, r7
 8007ac8:	1d39      	adds	r1, r7, #4
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fe0a 	bl	80066e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	9202      	str	r2, [sp, #8]
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	460a      	mov	r2, r1
 8007ae6:	4926      	ldr	r1, [pc, #152]	@ (8007b80 <vTaskStartScheduler+0xc8>)
 8007ae8:	4826      	ldr	r0, [pc, #152]	@ (8007b84 <vTaskStartScheduler+0xcc>)
 8007aea:	f7ff fde7 	bl	80076bc <xTaskCreateStatic>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4a25      	ldr	r2, [pc, #148]	@ (8007b88 <vTaskStartScheduler+0xd0>)
 8007af2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007af4:	4b24      	ldr	r3, [pc, #144]	@ (8007b88 <vTaskStartScheduler+0xd0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007afc:	2301      	movs	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	e001      	b.n	8007b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d102      	bne.n	8007b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b0c:	f001 f87a 	bl	8008c04 <xTimerCreateTimerTask>
 8007b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d11d      	bne.n	8007b54 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b30:	4b16      	ldr	r3, [pc, #88]	@ (8007b8c <vTaskStartScheduler+0xd4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3354      	adds	r3, #84	@ 0x54
 8007b36:	4a16      	ldr	r2, [pc, #88]	@ (8007b90 <vTaskStartScheduler+0xd8>)
 8007b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b3a:	4b16      	ldr	r3, [pc, #88]	@ (8007b94 <vTaskStartScheduler+0xdc>)
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <vTaskStartScheduler+0xe0>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b48:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <vTaskStartScheduler+0xe4>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b4e:	f001 fc4f 	bl	80093f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b52:	e011      	b.n	8007b78 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d10d      	bne.n	8007b78 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	60fb      	str	r3, [r7, #12]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <vTaskStartScheduler+0xbc>
}
 8007b78:	bf00      	nop
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	0800d290 	.word	0x0800d290
 8007b84:	08008249 	.word	0x08008249
 8007b88:	2000153c 	.word	0x2000153c
 8007b8c:	20001044 	.word	0x20001044
 8007b90:	20000020 	.word	0x20000020
 8007b94:	20001538 	.word	0x20001538
 8007b98:	20001524 	.word	0x20001524
 8007b9c:	2000151c 	.word	0x2000151c

08007ba0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	b672      	cpsid	i
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	b662      	cpsie	i
 8007bba:	607b      	str	r3, [r7, #4]
}
 8007bbc:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8007bbe:	4b04      	ldr	r3, [pc, #16]	@ (8007bd0 <vTaskEndScheduler+0x30>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8007bc4:	f001 fc92 	bl	80094ec <vPortEndScheduler>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20001524 	.word	0x20001524

08007bd4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007bd8:	4b04      	ldr	r3, [pc, #16]	@ (8007bec <vTaskSuspendAll+0x18>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	4a03      	ldr	r2, [pc, #12]	@ (8007bec <vTaskSuspendAll+0x18>)
 8007be0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007be2:	bf00      	nop
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20001540 	.word	0x20001540

08007bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bfe:	4b43      	ldr	r3, [pc, #268]	@ (8007d0c <xTaskResumeAll+0x11c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <xTaskResumeAll+0x32>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	b672      	cpsid	i
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	b662      	cpsie	i
 8007c1a:	603b      	str	r3, [r7, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c22:	f001 fc81 	bl	8009528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c26:	4b39      	ldr	r3, [pc, #228]	@ (8007d0c <xTaskResumeAll+0x11c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	4a37      	ldr	r2, [pc, #220]	@ (8007d0c <xTaskResumeAll+0x11c>)
 8007c2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c30:	4b36      	ldr	r3, [pc, #216]	@ (8007d0c <xTaskResumeAll+0x11c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d162      	bne.n	8007cfe <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c38:	4b35      	ldr	r3, [pc, #212]	@ (8007d10 <xTaskResumeAll+0x120>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d05e      	beq.n	8007cfe <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c40:	e02f      	b.n	8007ca2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c42:	4b34      	ldr	r3, [pc, #208]	@ (8007d14 <xTaskResumeAll+0x124>)
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3318      	adds	r3, #24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fe08 	bl	8006864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fe03 	bl	8006864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c62:	4b2d      	ldr	r3, [pc, #180]	@ (8007d18 <xTaskResumeAll+0x128>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d903      	bls.n	8007c72 <xTaskResumeAll+0x82>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d18 <xTaskResumeAll+0x128>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a27      	ldr	r2, [pc, #156]	@ (8007d1c <xTaskResumeAll+0x12c>)
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe fd8e 	bl	80067aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c92:	4b23      	ldr	r3, [pc, #140]	@ (8007d20 <xTaskResumeAll+0x130>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d302      	bcc.n	8007ca2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007c9c:	4b21      	ldr	r3, [pc, #132]	@ (8007d24 <xTaskResumeAll+0x134>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d14 <xTaskResumeAll+0x124>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1cb      	bne.n	8007c42 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cb0:	f000 fb88 	bl	80083c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d28 <xTaskResumeAll+0x138>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d010      	beq.n	8007ce2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cc0:	f000 f858 	bl	8007d74 <xTaskIncrementTick>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007cca:	4b16      	ldr	r3, [pc, #88]	@ (8007d24 <xTaskResumeAll+0x134>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f1      	bne.n	8007cc0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <xTaskResumeAll+0x138>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <xTaskResumeAll+0x134>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cee:	4b0f      	ldr	r3, [pc, #60]	@ (8007d2c <xTaskResumeAll+0x13c>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cfe:	f001 fc49 	bl	8009594 <vPortExitCritical>

	return xAlreadyYielded;
 8007d02:	68bb      	ldr	r3, [r7, #8]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20001540 	.word	0x20001540
 8007d10:	20001518 	.word	0x20001518
 8007d14:	200014d8 	.word	0x200014d8
 8007d18:	20001520 	.word	0x20001520
 8007d1c:	20001048 	.word	0x20001048
 8007d20:	20001044 	.word	0x20001044
 8007d24:	2000152c 	.word	0x2000152c
 8007d28:	20001528 	.word	0x20001528
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d36:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <xTaskGetTickCount+0x1c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d3c:	687b      	ldr	r3, [r7, #4]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	2000151c 	.word	0x2000151c

08007d50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d56:	f001 fcd1 	bl	80096fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007d5e:	4b04      	ldr	r3, [pc, #16]	@ (8007d70 <xTaskGetTickCountFromISR+0x20>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d64:	683b      	ldr	r3, [r7, #0]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000151c 	.word	0x2000151c

08007d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7e:	4b50      	ldr	r3, [pc, #320]	@ (8007ec0 <xTaskIncrementTick+0x14c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 808c 	bne.w	8007ea0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d88:	4b4e      	ldr	r3, [pc, #312]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d90:	4a4c      	ldr	r2, [pc, #304]	@ (8007ec4 <xTaskIncrementTick+0x150>)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d123      	bne.n	8007de4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00d      	beq.n	8007dc2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	603b      	str	r3, [r7, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <xTaskIncrementTick+0x4a>
 8007dc2:	4b41      	ldr	r3, [pc, #260]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	4b40      	ldr	r3, [pc, #256]	@ (8007ecc <xTaskIncrementTick+0x158>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8007ecc <xTaskIncrementTick+0x158>)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ed0 <xTaskIncrementTick+0x15c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed0 <xTaskIncrementTick+0x15c>)
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	f000 faf0 	bl	80083c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007de4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ed4 <xTaskIncrementTick+0x160>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d349      	bcc.n	8007e82 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dee:	4b36      	ldr	r3, [pc, #216]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df8:	4b36      	ldr	r3, [pc, #216]	@ (8007ed4 <xTaskIncrementTick+0x160>)
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfe:	601a      	str	r2, [r3, #0]
					break;
 8007e00:	e03f      	b.n	8007e82 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e02:	4b31      	ldr	r3, [pc, #196]	@ (8007ec8 <xTaskIncrementTick+0x154>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d203      	bcs.n	8007e22 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ed4 <xTaskIncrementTick+0x160>)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e20:	e02f      	b.n	8007e82 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fd1c 	bl	8006864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3318      	adds	r3, #24
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fd13 	bl	8006864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e42:	4b25      	ldr	r3, [pc, #148]	@ (8007ed8 <xTaskIncrementTick+0x164>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d903      	bls.n	8007e52 <xTaskIncrementTick+0xde>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	4a22      	ldr	r2, [pc, #136]	@ (8007ed8 <xTaskIncrementTick+0x164>)
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007edc <xTaskIncrementTick+0x168>)
 8007e60:	441a      	add	r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fe fc9e 	bl	80067aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee0 <xTaskIncrementTick+0x16c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d3b8      	bcc.n	8007dee <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e80:	e7b5      	b.n	8007dee <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e82:	4b17      	ldr	r3, [pc, #92]	@ (8007ee0 <xTaskIncrementTick+0x16c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e88:	4914      	ldr	r1, [pc, #80]	@ (8007edc <xTaskIncrementTick+0x168>)
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d907      	bls.n	8007eaa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e004      	b.n	8007eaa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ea0:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <xTaskIncrementTick+0x170>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ee4 <xTaskIncrementTick+0x170>)
 8007ea8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <xTaskIncrementTick+0x174>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007eb6:	697b      	ldr	r3, [r7, #20]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20001540 	.word	0x20001540
 8007ec4:	2000151c 	.word	0x2000151c
 8007ec8:	200014d0 	.word	0x200014d0
 8007ecc:	200014d4 	.word	0x200014d4
 8007ed0:	20001530 	.word	0x20001530
 8007ed4:	20001538 	.word	0x20001538
 8007ed8:	20001520 	.word	0x20001520
 8007edc:	20001048 	.word	0x20001048
 8007ee0:	20001044 	.word	0x20001044
 8007ee4:	20001528 	.word	0x20001528
 8007ee8:	2000152c 	.word	0x2000152c

08007eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8007fa4 <vTaskSwitchContext+0xb8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007efa:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa8 <vTaskSwitchContext+0xbc>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f00:	e049      	b.n	8007f96 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007f02:	4b29      	ldr	r3, [pc, #164]	@ (8007fa8 <vTaskSwitchContext+0xbc>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f08:	4b28      	ldr	r3, [pc, #160]	@ (8007fac <vTaskSwitchContext+0xc0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	e013      	b.n	8007f38 <vTaskSwitchContext+0x4c>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <vTaskSwitchContext+0x46>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	b672      	cpsid	i
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	b662      	cpsie	i
 8007f2a:	607b      	str	r3, [r7, #4]
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	e7fd      	b.n	8007f2e <vTaskSwitchContext+0x42>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	491d      	ldr	r1, [pc, #116]	@ (8007fb0 <vTaskSwitchContext+0xc4>)
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0e1      	beq.n	8007f10 <vTaskSwitchContext+0x24>
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4a16      	ldr	r2, [pc, #88]	@ (8007fb0 <vTaskSwitchContext+0xc4>)
 8007f58:	4413      	add	r3, r2
 8007f5a:	60bb      	str	r3, [r7, #8]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d104      	bne.n	8007f7c <vTaskSwitchContext+0x90>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	605a      	str	r2, [r3, #4]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb4 <vTaskSwitchContext+0xc8>)
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	4a09      	ldr	r2, [pc, #36]	@ (8007fac <vTaskSwitchContext+0xc0>)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f8c:	4b09      	ldr	r3, [pc, #36]	@ (8007fb4 <vTaskSwitchContext+0xc8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3354      	adds	r3, #84	@ 0x54
 8007f92:	4a09      	ldr	r2, [pc, #36]	@ (8007fb8 <vTaskSwitchContext+0xcc>)
 8007f94:	6013      	str	r3, [r2, #0]
}
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20001540 	.word	0x20001540
 8007fa8:	2000152c 	.word	0x2000152c
 8007fac:	20001520 	.word	0x20001520
 8007fb0:	20001048 	.word	0x20001048
 8007fb4:	20001044 	.word	0x20001044
 8007fb8:	20000020 	.word	0x20000020

08007fbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10d      	bne.n	8007fe8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	b672      	cpsid	i
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	b662      	cpsie	i
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fe8:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <vTaskPlaceOnEventList+0x4c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3318      	adds	r3, #24
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe fbfe 	bl	80067f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	6838      	ldr	r0, [r7, #0]
 8007ffa:	f000 fdaf 	bl	8008b5c <prvAddCurrentTaskToDelayedList>
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20001044 	.word	0x20001044

0800800c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	b672      	cpsid	i
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	b662      	cpsie	i
 8008032:	617b      	str	r3, [r7, #20]
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800803a:	4b0a      	ldr	r3, [pc, #40]	@ (8008064 <vTaskPlaceOnEventListRestricted+0x58>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3318      	adds	r3, #24
 8008040:	4619      	mov	r1, r3
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7fe fbb1 	bl	80067aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800804e:	f04f 33ff 	mov.w	r3, #4294967295
 8008052:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	f000 fd80 	bl	8008b5c <prvAddCurrentTaskToDelayedList>
	}
 800805c:	bf00      	nop
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20001044 	.word	0x20001044

08008068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10d      	bne.n	800809a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	b672      	cpsid	i
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	b662      	cpsie	i
 8008092:	60fb      	str	r3, [r7, #12]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	3318      	adds	r3, #24
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe fbe0 	bl	8006864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080a4:	4b1d      	ldr	r3, [pc, #116]	@ (800811c <xTaskRemoveFromEventList+0xb4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d11d      	bne.n	80080e8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fbd7 	bl	8006864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ba:	4b19      	ldr	r3, [pc, #100]	@ (8008120 <xTaskRemoveFromEventList+0xb8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d903      	bls.n	80080ca <xTaskRemoveFromEventList+0x62>
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	4a16      	ldr	r2, [pc, #88]	@ (8008120 <xTaskRemoveFromEventList+0xb8>)
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4a13      	ldr	r2, [pc, #76]	@ (8008124 <xTaskRemoveFromEventList+0xbc>)
 80080d8:	441a      	add	r2, r3
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fe fb62 	bl	80067aa <vListInsertEnd>
 80080e6:	e005      	b.n	80080f4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3318      	adds	r3, #24
 80080ec:	4619      	mov	r1, r3
 80080ee:	480e      	ldr	r0, [pc, #56]	@ (8008128 <xTaskRemoveFromEventList+0xc0>)
 80080f0:	f7fe fb5b 	bl	80067aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f8:	4b0c      	ldr	r3, [pc, #48]	@ (800812c <xTaskRemoveFromEventList+0xc4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	429a      	cmp	r2, r3
 8008100:	d905      	bls.n	800810e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008102:	2301      	movs	r3, #1
 8008104:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008106:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <xTaskRemoveFromEventList+0xc8>)
 8008108:	2201      	movs	r2, #1
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	e001      	b.n	8008112 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008112:	697b      	ldr	r3, [r7, #20]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20001540 	.word	0x20001540
 8008120:	20001520 	.word	0x20001520
 8008124:	20001048 	.word	0x20001048
 8008128:	200014d8 	.word	0x200014d8
 800812c:	20001044 	.word	0x20001044
 8008130:	2000152c 	.word	0x2000152c

08008134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800813c:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <vTaskInternalSetTimeOutState+0x24>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008144:	4b05      	ldr	r3, [pc, #20]	@ (800815c <vTaskInternalSetTimeOutState+0x28>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	605a      	str	r2, [r3, #4]
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	20001530 	.word	0x20001530
 800815c:	2000151c 	.word	0x2000151c

08008160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10d      	bne.n	800818c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	b672      	cpsid	i
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	b662      	cpsie	i
 8008184:	613b      	str	r3, [r7, #16]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10d      	bne.n	80081ae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80081ae:	f001 f9bb 	bl	8009528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008228 <xTaskCheckForTimeOut+0xc8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ca:	d102      	bne.n	80081d2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e023      	b.n	800821a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	4b15      	ldr	r3, [pc, #84]	@ (800822c <xTaskCheckForTimeOut+0xcc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d007      	beq.n	80081ee <xTaskCheckForTimeOut+0x8e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d302      	bcc.n	80081ee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	e015      	b.n	800821a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d20b      	bcs.n	8008210 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff ff95 	bl	8008134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	e004      	b.n	800821a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008216:	2301      	movs	r3, #1
 8008218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800821a:	f001 f9bb 	bl	8009594 <vPortExitCritical>

	return xReturn;
 800821e:	69fb      	ldr	r3, [r7, #28]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	2000151c 	.word	0x2000151c
 800822c:	20001530 	.word	0x20001530

08008230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008234:	4b03      	ldr	r3, [pc, #12]	@ (8008244 <vTaskMissedYield+0x14>)
 8008236:	2201      	movs	r2, #1
 8008238:	601a      	str	r2, [r3, #0]
}
 800823a:	bf00      	nop
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	2000152c 	.word	0x2000152c

08008248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008250:	f000 f852 	bl	80082f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008254:	4b06      	ldr	r3, [pc, #24]	@ (8008270 <prvIdleTask+0x28>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d9f9      	bls.n	8008250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800825c:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <prvIdleTask+0x2c>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800826c:	e7f0      	b.n	8008250 <prvIdleTask+0x8>
 800826e:	bf00      	nop
 8008270:	20001048 	.word	0x20001048
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	e00c      	b.n	800829e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4a12      	ldr	r2, [pc, #72]	@ (80082d8 <prvInitialiseTaskLists+0x60>)
 8008290:	4413      	add	r3, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fa5c 	bl	8006750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3301      	adds	r3, #1
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b37      	cmp	r3, #55	@ 0x37
 80082a2:	d9ef      	bls.n	8008284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082a4:	480d      	ldr	r0, [pc, #52]	@ (80082dc <prvInitialiseTaskLists+0x64>)
 80082a6:	f7fe fa53 	bl	8006750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082aa:	480d      	ldr	r0, [pc, #52]	@ (80082e0 <prvInitialiseTaskLists+0x68>)
 80082ac:	f7fe fa50 	bl	8006750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082b0:	480c      	ldr	r0, [pc, #48]	@ (80082e4 <prvInitialiseTaskLists+0x6c>)
 80082b2:	f7fe fa4d 	bl	8006750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082b6:	480c      	ldr	r0, [pc, #48]	@ (80082e8 <prvInitialiseTaskLists+0x70>)
 80082b8:	f7fe fa4a 	bl	8006750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082bc:	480b      	ldr	r0, [pc, #44]	@ (80082ec <prvInitialiseTaskLists+0x74>)
 80082be:	f7fe fa47 	bl	8006750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082c2:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <prvInitialiseTaskLists+0x78>)
 80082c4:	4a05      	ldr	r2, [pc, #20]	@ (80082dc <prvInitialiseTaskLists+0x64>)
 80082c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082c8:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <prvInitialiseTaskLists+0x7c>)
 80082ca:	4a05      	ldr	r2, [pc, #20]	@ (80082e0 <prvInitialiseTaskLists+0x68>)
 80082cc:	601a      	str	r2, [r3, #0]
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20001048 	.word	0x20001048
 80082dc:	200014a8 	.word	0x200014a8
 80082e0:	200014bc 	.word	0x200014bc
 80082e4:	200014d8 	.word	0x200014d8
 80082e8:	200014ec 	.word	0x200014ec
 80082ec:	20001504 	.word	0x20001504
 80082f0:	200014d0 	.word	0x200014d0
 80082f4:	200014d4 	.word	0x200014d4

080082f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082fe:	e019      	b.n	8008334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008300:	f001 f912 	bl	8009528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008304:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <prvCheckTasksWaitingTermination+0x50>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe faa7 	bl	8006864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008316:	4b0d      	ldr	r3, [pc, #52]	@ (800834c <prvCheckTasksWaitingTermination+0x54>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3b01      	subs	r3, #1
 800831c:	4a0b      	ldr	r2, [pc, #44]	@ (800834c <prvCheckTasksWaitingTermination+0x54>)
 800831e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008320:	4b0b      	ldr	r3, [pc, #44]	@ (8008350 <prvCheckTasksWaitingTermination+0x58>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	4a0a      	ldr	r2, [pc, #40]	@ (8008350 <prvCheckTasksWaitingTermination+0x58>)
 8008328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800832a:	f001 f933 	bl	8009594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f810 	bl	8008354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008334:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <prvCheckTasksWaitingTermination+0x58>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e1      	bne.n	8008300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200014ec 	.word	0x200014ec
 800834c:	20001518 	.word	0x20001518
 8008350:	20001500 	.word	0x20001500

08008354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3354      	adds	r3, #84	@ 0x54
 8008360:	4618      	mov	r0, r3
 8008362:	f002 fb83 	bl	800aa6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800836c:	2b00      	cmp	r3, #0
 800836e:	d108      	bne.n	8008382 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fad5 	bl	8009924 <vPortFree>
				vPortFree( pxTCB );
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fad2 	bl	8009924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008380:	e01b      	b.n	80083ba <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008388:	2b01      	cmp	r3, #1
 800838a:	d103      	bne.n	8008394 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 fac9 	bl	8009924 <vPortFree>
	}
 8008392:	e012      	b.n	80083ba <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800839a:	2b02      	cmp	r3, #2
 800839c:	d00d      	beq.n	80083ba <prvDeleteTCB+0x66>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	b672      	cpsid	i
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	b662      	cpsie	i
 80083b2:	60fb      	str	r3, [r7, #12]
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	e7fd      	b.n	80083b6 <prvDeleteTCB+0x62>
	}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ca:	4b0c      	ldr	r3, [pc, #48]	@ (80083fc <prvResetNextTaskUnblockTime+0x38>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008400 <prvResetNextTaskUnblockTime+0x3c>)
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083dc:	e008      	b.n	80083f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083de:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <prvResetNextTaskUnblockTime+0x38>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4a04      	ldr	r2, [pc, #16]	@ (8008400 <prvResetNextTaskUnblockTime+0x3c>)
 80083ee:	6013      	str	r3, [r2, #0]
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	200014d0 	.word	0x200014d0
 8008400:	20001538 	.word	0x20001538

08008404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800840a:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <xTaskGetSchedulerState+0x34>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008412:	2301      	movs	r3, #1
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	e008      	b.n	800842a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008418:	4b08      	ldr	r3, [pc, #32]	@ (800843c <xTaskGetSchedulerState+0x38>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008420:	2302      	movs	r3, #2
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	e001      	b.n	800842a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800842a:	687b      	ldr	r3, [r7, #4]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	20001524 	.word	0x20001524
 800843c:	20001540 	.word	0x20001540

08008440 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d051      	beq.n	80084fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845a:	4b2a      	ldr	r3, [pc, #168]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	429a      	cmp	r2, r3
 8008462:	d241      	bcs.n	80084e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	db06      	blt.n	800847a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846c:	4b25      	ldr	r3, [pc, #148]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6959      	ldr	r1, [r3, #20]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4a1f      	ldr	r2, [pc, #124]	@ (8008508 <xTaskPriorityInherit+0xc8>)
 800848c:	4413      	add	r3, r2
 800848e:	4299      	cmp	r1, r3
 8008490:	d122      	bne.n	80084d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3304      	adds	r3, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe f9e4 	bl	8006864 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800849c:	4b19      	ldr	r3, [pc, #100]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	4b18      	ldr	r3, [pc, #96]	@ (800850c <xTaskPriorityInherit+0xcc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <xTaskPriorityInherit+0x7a>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b6:	4a15      	ldr	r2, [pc, #84]	@ (800850c <xTaskPriorityInherit+0xcc>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a10      	ldr	r2, [pc, #64]	@ (8008508 <xTaskPriorityInherit+0xc8>)
 80084c8:	441a      	add	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe f96a 	bl	80067aa <vListInsertEnd>
 80084d6:	e004      	b.n	80084e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80084e2:	2301      	movs	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	e008      	b.n	80084fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <xTaskPriorityInherit+0xc4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d201      	bcs.n	80084fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084f6:	2301      	movs	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084fa:	68fb      	ldr	r3, [r7, #12]
	}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20001044 	.word	0x20001044
 8008508:	20001048 	.word	0x20001048
 800850c:	20001520 	.word	0x20001520

08008510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d05c      	beq.n	80085e0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008526:	4b31      	ldr	r3, [pc, #196]	@ (80085ec <xTaskPriorityDisinherit+0xdc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d00d      	beq.n	800854c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10d      	bne.n	8008570 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	60bb      	str	r3, [r7, #8]
}
 800856a:	bf00      	nop
 800856c:	bf00      	nop
 800856e:	e7fd      	b.n	800856c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008582:	429a      	cmp	r2, r3
 8008584:	d02c      	beq.n	80085e0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858a:	2b00      	cmp	r3, #0
 800858c:	d128      	bne.n	80085e0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3304      	adds	r3, #4
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe f966 	bl	8006864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b0:	4b0f      	ldr	r3, [pc, #60]	@ (80085f0 <xTaskPriorityDisinherit+0xe0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d903      	bls.n	80085c0 <xTaskPriorityDisinherit+0xb0>
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	4a0c      	ldr	r2, [pc, #48]	@ (80085f0 <xTaskPriorityDisinherit+0xe0>)
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4a09      	ldr	r2, [pc, #36]	@ (80085f4 <xTaskPriorityDisinherit+0xe4>)
 80085ce:	441a      	add	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f7fe f8e7 	bl	80067aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085e0:	697b      	ldr	r3, [r7, #20]
	}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20001044 	.word	0x20001044
 80085f0:	20001520 	.word	0x20001520
 80085f4:	20001048 	.word	0x20001048

080085f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008606:	2301      	movs	r3, #1
 8008608:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d070      	beq.n	80086f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10d      	bne.n	8008634 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861c:	b672      	cpsid	i
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	b662      	cpsie	i
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d902      	bls.n	8008644 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	e002      	b.n	800864a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008648:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	429a      	cmp	r2, r3
 8008652:	d04e      	beq.n	80086f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	429a      	cmp	r2, r3
 800865c:	d149      	bne.n	80086f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800865e:	4b27      	ldr	r3, [pc, #156]	@ (80086fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	d10d      	bne.n	8008684 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	b672      	cpsid	i
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	b662      	cpsie	i
 800867c:	60bb      	str	r3, [r7, #8]
}
 800867e:	bf00      	nop
 8008680:	bf00      	nop
 8008682:	e7fd      	b.n	8008680 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008688:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	db04      	blt.n	80086a2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	6959      	ldr	r1, [r3, #20]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a13      	ldr	r2, [pc, #76]	@ (8008700 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80086b2:	4413      	add	r3, r2
 80086b4:	4299      	cmp	r1, r3
 80086b6:	d11c      	bne.n	80086f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe f8d1 	bl	8006864 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d903      	bls.n	80086d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008704 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4a07      	ldr	r2, [pc, #28]	@ (8008700 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80086e4:	441a      	add	r2, r3
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	3304      	adds	r3, #4
 80086ea:	4619      	mov	r1, r3
 80086ec:	4610      	mov	r0, r2
 80086ee:	f7fe f85c 	bl	80067aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086f2:	bf00      	nop
 80086f4:	3720      	adds	r7, #32
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20001044 	.word	0x20001044
 8008700:	20001048 	.word	0x20001048
 8008704:	20001520 	.word	0x20001520

08008708 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <pvTaskIncrementMutexHeldCount+0x24>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008714:	4b05      	ldr	r3, [pc, #20]	@ (800872c <pvTaskIncrementMutexHeldCount+0x24>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800871a:	3201      	adds	r2, #1
 800871c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800871e:	4b03      	ldr	r3, [pc, #12]	@ (800872c <pvTaskIncrementMutexHeldCount+0x24>)
 8008720:	681b      	ldr	r3, [r3, #0]
	}
 8008722:	4618      	mov	r0, r3
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	20001044 	.word	0x20001044

08008730 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800873e:	f000 fef3 	bl	8009528 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008742:	4b29      	ldr	r3, [pc, #164]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d01c      	beq.n	800878a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008750:	4b25      	ldr	r3, [pc, #148]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	43d2      	mvns	r2, r2
 800875c:	400a      	ands	r2, r1
 800875e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008762:	4b21      	ldr	r3, [pc, #132]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008772:	2101      	movs	r1, #1
 8008774:	6838      	ldr	r0, [r7, #0]
 8008776:	f000 f9f1 	bl	8008b5c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800877a:	4b1c      	ldr	r3, [pc, #112]	@ (80087ec <xTaskNotifyWait+0xbc>)
 800877c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800878a:	f000 ff03 	bl	8009594 <vPortExitCritical>

		taskENTER_CRITICAL();
 800878e:	f000 fecb 	bl	8009528 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008798:	4b13      	ldr	r3, [pc, #76]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80087a4:	4b10      	ldr	r3, [pc, #64]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d002      	beq.n	80087b8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	e00a      	b.n	80087ce <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80087b8:	4b0b      	ldr	r3, [pc, #44]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	43d2      	mvns	r2, r2
 80087c4:	400a      	ands	r2, r1
 80087c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087ce:	4b06      	ldr	r3, [pc, #24]	@ (80087e8 <xTaskNotifyWait+0xb8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80087d8:	f000 fedc 	bl	8009594 <vPortExitCritical>

		return xReturn;
 80087dc:	697b      	ldr	r3, [r7, #20]
	}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20001044 	.word	0x20001044
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	@ 0x28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	4613      	mov	r3, r2
 80087fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008800:	2301      	movs	r3, #1
 8008802:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10d      	bne.n	8008826 <xTaskGenericNotify+0x36>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	b672      	cpsid	i
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	b662      	cpsie	i
 800881e:	61bb      	str	r3, [r7, #24]
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800882a:	f000 fe7d 	bl	8009528 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008844:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	2202      	movs	r2, #2
 800884a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	2b04      	cmp	r3, #4
 8008852:	d82e      	bhi.n	80088b2 <xTaskGenericNotify+0xc2>
 8008854:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <xTaskGenericNotify+0x6c>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	080088db 	.word	0x080088db
 8008860:	08008871 	.word	0x08008871
 8008864:	08008883 	.word	0x08008883
 8008868:	08008893 	.word	0x08008893
 800886c:	0800889d 	.word	0x0800889d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	431a      	orrs	r2, r3
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008880:	e02e      	b.n	80088e0 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008890:	e026      	b.n	80088e0 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800889a:	e021      	b.n	80088e0 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800889c:	7ffb      	ldrb	r3, [r7, #31]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d004      	beq.n	80088ac <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80088aa:	e019      	b.n	80088e0 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80088b0:	e016      	b.n	80088e0 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088bc:	d00f      	beq.n	80088de <xTaskGenericNotify+0xee>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	b672      	cpsid	i
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	b662      	cpsie	i
 80088d2:	617b      	str	r3, [r7, #20]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <xTaskGenericNotify+0xe6>
					break;
 80088da:	bf00      	nop
 80088dc:	e000      	b.n	80088e0 <xTaskGenericNotify+0xf0>

					break;
 80088de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80088e0:	7ffb      	ldrb	r3, [r7, #31]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d13d      	bne.n	8008962 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd ffba 	bl	8006864 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008970 <xTaskGenericNotify+0x180>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d903      	bls.n	8008904 <xTaskGenericNotify+0x114>
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008900:	4a1b      	ldr	r2, [pc, #108]	@ (8008970 <xTaskGenericNotify+0x180>)
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4a18      	ldr	r2, [pc, #96]	@ (8008974 <xTaskGenericNotify+0x184>)
 8008912:	441a      	add	r2, r3
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	3304      	adds	r3, #4
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f7fd ff45 	bl	80067aa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00d      	beq.n	8008944 <xTaskGenericNotify+0x154>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892c:	b672      	cpsid	i
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	b662      	cpsie	i
 800893c:	613b      	str	r3, [r7, #16]
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	e7fd      	b.n	8008940 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008948:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <xTaskGenericNotify+0x188>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	429a      	cmp	r2, r3
 8008950:	d907      	bls.n	8008962 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008952:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <xTaskGenericNotify+0x18c>)
 8008954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008962:	f000 fe17 	bl	8009594 <vPortExitCritical>

		return xReturn;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008968:	4618      	mov	r0, r3
 800896a:	3728      	adds	r7, #40	@ 0x28
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20001520 	.word	0x20001520
 8008974:	20001048 	.word	0x20001048
 8008978:	20001044 	.word	0x20001044
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08e      	sub	sp, #56	@ 0x38
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008990:	2301      	movs	r3, #1
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10d      	bne.n	80089b6 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	b672      	cpsid	i
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	b662      	cpsie	i
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b6:	f000 fea1 	bl	80096fc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80089be:	f3ef 8211 	mrs	r2, BASEPRI
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	b672      	cpsid	i
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	b662      	cpsie	i
 80089d6:	623a      	str	r2, [r7, #32]
 80089d8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80089da:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80089f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d82e      	bhi.n	8008a64 <xTaskGenericNotifyFromISR+0xe4>
 8008a06:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <xTaskGenericNotifyFromISR+0x8c>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a8d 	.word	0x08008a8d
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a33 	.word	0x08008a33
 8008a18:	08008a43 	.word	0x08008a43
 8008a1c:	08008a4d 	.word	0x08008a4d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008a30:	e02f      	b.n	8008a92 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008a40:	e027      	b.n	8008a92 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008a4a:	e022      	b.n	8008a92 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d004      	beq.n	8008a5e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008a5c:	e019      	b.n	8008a92 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008a62:	e016      	b.n	8008a92 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d00f      	beq.n	8008a90 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	b672      	cpsid	i
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	b662      	cpsie	i
 8008a84:	61bb      	str	r3, [r7, #24]
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	e7fd      	b.n	8008a88 <xTaskGenericNotifyFromISR+0x108>
					break;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <xTaskGenericNotifyFromISR+0x112>
					break;
 8008a90:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d149      	bne.n	8008b2e <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00d      	beq.n	8008abe <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	b672      	cpsid	i
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	b662      	cpsie	i
 8008ab6:	617b      	str	r3, [r7, #20]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008abe:	4b21      	ldr	r3, [pc, #132]	@ (8008b44 <xTaskGenericNotifyFromISR+0x1c4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d11d      	bne.n	8008b02 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fd feca 	bl	8006864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b48 <xTaskGenericNotifyFromISR+0x1c8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d903      	bls.n	8008ae4 <xTaskGenericNotifyFromISR+0x164>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae0:	4a19      	ldr	r2, [pc, #100]	@ (8008b48 <xTaskGenericNotifyFromISR+0x1c8>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4a16      	ldr	r2, [pc, #88]	@ (8008b4c <xTaskGenericNotifyFromISR+0x1cc>)
 8008af2:	441a      	add	r2, r3
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f7fd fe55 	bl	80067aa <vListInsertEnd>
 8008b00:	e005      	b.n	8008b0e <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	3318      	adds	r3, #24
 8008b06:	4619      	mov	r1, r3
 8008b08:	4811      	ldr	r0, [pc, #68]	@ (8008b50 <xTaskGenericNotifyFromISR+0x1d0>)
 8008b0a:	f7fd fe4e 	bl	80067aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b12:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <xTaskGenericNotifyFromISR+0x1d4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d908      	bls.n	8008b2e <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008b28:	4b0b      	ldr	r3, [pc, #44]	@ (8008b58 <xTaskGenericNotifyFromISR+0x1d8>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f383 8811 	msr	BASEPRI, r3
}
 8008b38:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3738      	adds	r7, #56	@ 0x38
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20001540 	.word	0x20001540
 8008b48:	20001520 	.word	0x20001520
 8008b4c:	20001048 	.word	0x20001048
 8008b50:	200014d8 	.word	0x200014d8
 8008b54:	20001044 	.word	0x20001044
 8008b58:	2000152c 	.word	0x2000152c

08008b5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b66:	4b21      	ldr	r3, [pc, #132]	@ (8008bec <prvAddCurrentTaskToDelayedList+0x90>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b6c:	4b20      	ldr	r3, [pc, #128]	@ (8008bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fd fe76 	bl	8006864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d10a      	bne.n	8008b96 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b86:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4819      	ldr	r0, [pc, #100]	@ (8008bf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b90:	f7fd fe0b 	bl	80067aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b94:	e026      	b.n	8008be4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b9e:	4b14      	ldr	r3, [pc, #80]	@ (8008bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d209      	bcs.n	8008bc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bae:	4b12      	ldr	r3, [pc, #72]	@ (8008bf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f7fd fe19 	bl	80067f2 <vListInsert>
}
 8008bc0:	e010      	b.n	8008be4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f7fd fe0f 	bl	80067f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d202      	bcs.n	8008be4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bde:	4a08      	ldr	r2, [pc, #32]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6013      	str	r3, [r2, #0]
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	2000151c 	.word	0x2000151c
 8008bf0:	20001044 	.word	0x20001044
 8008bf4:	20001504 	.word	0x20001504
 8008bf8:	200014d4 	.word	0x200014d4
 8008bfc:	200014d0 	.word	0x200014d0
 8008c00:	20001538 	.word	0x20001538

08008c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	@ 0x28
 8008c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c0e:	f000 fb21 	bl	8009254 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c12:	4b1e      	ldr	r3, [pc, #120]	@ (8008c8c <xTimerCreateTimerTask+0x88>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d021      	beq.n	8008c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c22:	1d3a      	adds	r2, r7, #4
 8008c24:	f107 0108 	add.w	r1, r7, #8
 8008c28:	f107 030c 	add.w	r3, r7, #12
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fd fd75 	bl	800671c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	9202      	str	r2, [sp, #8]
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	460a      	mov	r2, r1
 8008c44:	4912      	ldr	r1, [pc, #72]	@ (8008c90 <xTimerCreateTimerTask+0x8c>)
 8008c46:	4813      	ldr	r0, [pc, #76]	@ (8008c94 <xTimerCreateTimerTask+0x90>)
 8008c48:	f7fe fd38 	bl	80076bc <xTaskCreateStatic>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4a12      	ldr	r2, [pc, #72]	@ (8008c98 <xTimerCreateTimerTask+0x94>)
 8008c50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c52:	4b11      	ldr	r3, [pc, #68]	@ (8008c98 <xTimerCreateTimerTask+0x94>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	b672      	cpsid	i
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	b662      	cpsie	i
 8008c78:	613b      	str	r3, [r7, #16]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008c80:	697b      	ldr	r3, [r7, #20]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20001574 	.word	0x20001574
 8008c90:	0800d298 	.word	0x0800d298
 8008c94:	08008ddd 	.word	0x08008ddd
 8008c98:	20001578 	.word	0x20001578

08008c9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08a      	sub	sp, #40	@ 0x28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <xTimerGenericCommand+0x34>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	b672      	cpsid	i
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	b662      	cpsie	i
 8008cc8:	623b      	str	r3, [r7, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	bf00      	nop
 8008cce:	e7fd      	b.n	8008ccc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cd0:	4b19      	ldr	r3, [pc, #100]	@ (8008d38 <xTimerGenericCommand+0x9c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d02a      	beq.n	8008d2e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	dc18      	bgt.n	8008d1c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cea:	f7ff fb8b 	bl	8008404 <xTaskGetSchedulerState>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d109      	bne.n	8008d08 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cf4:	4b10      	ldr	r3, [pc, #64]	@ (8008d38 <xTimerGenericCommand+0x9c>)
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	f107 0110 	add.w	r1, r7, #16
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d00:	f7fd ff66 	bl	8006bd0 <xQueueGenericSend>
 8008d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d06:	e012      	b.n	8008d2e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d08:	4b0b      	ldr	r3, [pc, #44]	@ (8008d38 <xTimerGenericCommand+0x9c>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	f107 0110 	add.w	r1, r7, #16
 8008d10:	2300      	movs	r3, #0
 8008d12:	2200      	movs	r2, #0
 8008d14:	f7fd ff5c 	bl	8006bd0 <xQueueGenericSend>
 8008d18:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d1a:	e008      	b.n	8008d2e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d1c:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <xTimerGenericCommand+0x9c>)
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	f107 0110 	add.w	r1, r7, #16
 8008d24:	2300      	movs	r3, #0
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	f7fe f85c 	bl	8006de4 <xQueueGenericSendFromISR>
 8008d2c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3728      	adds	r7, #40	@ 0x28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20001574 	.word	0x20001574

08008d3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d46:	4b24      	ldr	r3, [pc, #144]	@ (8008dd8 <prvProcessExpiredTimer+0x9c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	3304      	adds	r3, #4
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fd fd85 	bl	8006864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d025      	beq.n	8008db4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	18d1      	adds	r1, r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	6978      	ldr	r0, [r7, #20]
 8008d76:	f000 f8d7 	bl	8008f28 <prvInsertTimerInActiveList>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d022      	beq.n	8008dc6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d80:	2300      	movs	r3, #0
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	2300      	movs	r3, #0
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6978      	ldr	r0, [r7, #20]
 8008d8c:	f7ff ff86 	bl	8008c9c <xTimerGenericCommand>
 8008d90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d116      	bne.n	8008dc6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	b672      	cpsid	i
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	b662      	cpsie	i
 8008dac:	60fb      	str	r3, [r7, #12]
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	e7fd      	b.n	8008db0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	6978      	ldr	r0, [r7, #20]
 8008dcc:	4798      	blx	r3
}
 8008dce:	bf00      	nop
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2000156c 	.word	0x2000156c

08008ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f859 	bl	8008ea0 <prvGetNextExpireTime>
 8008dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4619      	mov	r1, r3
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 f805 	bl	8008e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dfa:	f000 f8d7 	bl	8008fac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dfe:	bf00      	nop
 8008e00:	e7f0      	b.n	8008de4 <prvTimerTask+0x8>
	...

08008e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e0e:	f7fe fee1 	bl	8007bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f866 	bl	8008ee8 <prvSampleTimeNow>
 8008e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d130      	bne.n	8008e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10a      	bne.n	8008e40 <prvProcessTimerOrBlockTask+0x3c>
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d806      	bhi.n	8008e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e32:	f7fe fedd 	bl	8007bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff7f 	bl	8008d3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e3e:	e024      	b.n	8008e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d008      	beq.n	8008e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e46:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <prvProcessTimerOrBlockTask+0x90>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <prvProcessTimerOrBlockTask+0x50>
 8008e50:	2301      	movs	r3, #1
 8008e52:	e000      	b.n	8008e56 <prvProcessTimerOrBlockTask+0x52>
 8008e54:	2300      	movs	r3, #0
 8008e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e58:	4b0f      	ldr	r3, [pc, #60]	@ (8008e98 <prvProcessTimerOrBlockTask+0x94>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7fe fbf5 	bl	8007654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e6a:	f7fe fec1 	bl	8007bf0 <xTaskResumeAll>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e74:	4b09      	ldr	r3, [pc, #36]	@ (8008e9c <prvProcessTimerOrBlockTask+0x98>)
 8008e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	f3bf 8f6f 	isb	sy
}
 8008e84:	e001      	b.n	8008e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e86:	f7fe feb3 	bl	8007bf0 <xTaskResumeAll>
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20001570 	.word	0x20001570
 8008e98:	20001574 	.word	0x20001574
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <prvGetNextExpireTime+0x44>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <prvGetNextExpireTime+0x16>
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	e000      	b.n	8008eb8 <prvGetNextExpireTime+0x18>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d105      	bne.n	8008ed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec4:	4b07      	ldr	r3, [pc, #28]	@ (8008ee4 <prvGetNextExpireTime+0x44>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e001      	b.n	8008ed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	2000156c 	.word	0x2000156c

08008ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ef0:	f7fe ff1e 	bl	8007d30 <xTaskGetTickCount>
 8008ef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f24 <prvSampleTimeNow+0x3c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d205      	bcs.n	8008f0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f00:	f000 f940 	bl	8009184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e002      	b.n	8008f12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f12:	4a04      	ldr	r2, [pc, #16]	@ (8008f24 <prvSampleTimeNow+0x3c>)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	2000157c 	.word	0x2000157c

08008f28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d812      	bhi.n	8008f74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d302      	bcc.n	8008f62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e01b      	b.n	8008f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f62:	4b10      	ldr	r3, [pc, #64]	@ (8008fa4 <prvInsertTimerInActiveList+0x7c>)
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	f7fd fc40 	bl	80067f2 <vListInsert>
 8008f72:	e012      	b.n	8008f9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d206      	bcs.n	8008f8a <prvInsertTimerInActiveList+0x62>
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d302      	bcc.n	8008f8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f84:	2301      	movs	r3, #1
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e007      	b.n	8008f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f8a:	4b07      	ldr	r3, [pc, #28]	@ (8008fa8 <prvInsertTimerInActiveList+0x80>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4619      	mov	r1, r3
 8008f94:	4610      	mov	r0, r2
 8008f96:	f7fd fc2c 	bl	80067f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f9a:	697b      	ldr	r3, [r7, #20]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20001570 	.word	0x20001570
 8008fa8:	2000156c 	.word	0x2000156c

08008fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08e      	sub	sp, #56	@ 0x38
 8008fb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fb2:	e0d4      	b.n	800915e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da1b      	bge.n	8008ff2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10d      	bne.n	8008fe2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	b672      	cpsid	i
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	b662      	cpsie	i
 8008fda:	61fb      	str	r3, [r7, #28]
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	e7fd      	b.n	8008fde <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe8:	6850      	ldr	r0, [r2, #4]
 8008fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fec:	6892      	ldr	r2, [r2, #8]
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f2c0 80b2 	blt.w	800915e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	3304      	adds	r3, #4
 800900a:	4618      	mov	r0, r3
 800900c:	f7fd fc2a 	bl	8006864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009010:	463b      	mov	r3, r7
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ff68 	bl	8008ee8 <prvSampleTimeNow>
 8009018:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b09      	cmp	r3, #9
 800901e:	f200 809b 	bhi.w	8009158 <prvProcessReceivedCommands+0x1ac>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <prvProcessReceivedCommands+0x7c>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009051 	.word	0x08009051
 800902c:	08009051 	.word	0x08009051
 8009030:	08009051 	.word	0x08009051
 8009034:	080090cb 	.word	0x080090cb
 8009038:	080090df 	.word	0x080090df
 800903c:	0800912f 	.word	0x0800912f
 8009040:	08009051 	.word	0x08009051
 8009044:	08009051 	.word	0x08009051
 8009048:	080090cb 	.word	0x080090cb
 800904c:	080090df 	.word	0x080090df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	18d1      	adds	r1, r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009070:	f7ff ff5a 	bl	8008f28 <prvInsertTimerInActiveList>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d070      	beq.n	800915c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d065      	beq.n	800915c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	441a      	add	r2, r3
 8009098:	2300      	movs	r3, #0
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	2300      	movs	r3, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090a2:	f7ff fdfb 	bl	8008c9c <xTimerGenericCommand>
 80090a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d156      	bne.n	800915c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	b672      	cpsid	i
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	b662      	cpsie	i
 80090c2:	61bb      	str	r3, [r7, #24]
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop
 80090c8:	e7fd      	b.n	80090c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090dc:	e03f      	b.n	800915e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e4:	f043 0301 	orr.w	r3, r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10d      	bne.n	800911a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	b672      	cpsid	i
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	b662      	cpsie	i
 8009112:	617b      	str	r3, [r7, #20]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800911a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	18d1      	adds	r1, r2, r3
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009128:	f7ff fefe 	bl	8008f28 <prvInsertTimerInActiveList>
					break;
 800912c:	e017      	b.n	800915e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d103      	bne.n	8009144 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800913c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800913e:	f000 fbf1 	bl	8009924 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009142:	e00c      	b.n	800915e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800914a:	f023 0301 	bic.w	r3, r3, #1
 800914e:	b2da      	uxtb	r2, r3
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009156:	e002      	b.n	800915e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009158:	bf00      	nop
 800915a:	e000      	b.n	800915e <prvProcessReceivedCommands+0x1b2>
					break;
 800915c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800915e:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <prvProcessReceivedCommands+0x1d4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	1d39      	adds	r1, r7, #4
 8009164:	2200      	movs	r2, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f7fd fee0 	bl	8006f2c <xQueueReceive>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	f47f af20 	bne.w	8008fb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	3730      	adds	r7, #48	@ 0x30
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20001574 	.word	0x20001574

08009184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800918a:	e04b      	b.n	8009224 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800918c:	4b2f      	ldr	r3, [pc, #188]	@ (800924c <prvSwitchTimerLists+0xc8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009196:	4b2d      	ldr	r3, [pc, #180]	@ (800924c <prvSwitchTimerLists+0xc8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fd fb5d 	bl	8006864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d031      	beq.n	8009224 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d90e      	bls.n	80091f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091de:	4b1b      	ldr	r3, [pc, #108]	@ (800924c <prvSwitchTimerLists+0xc8>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd fb02 	bl	80067f2 <vListInsert>
 80091ee:	e019      	b.n	8009224 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091f0:	2300      	movs	r3, #0
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	2100      	movs	r1, #0
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff fd4e 	bl	8008c9c <xTimerGenericCommand>
 8009200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10d      	bne.n	8009224 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	b672      	cpsid	i
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	b662      	cpsie	i
 800921c:	603b      	str	r3, [r7, #0]
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	e7fd      	b.n	8009220 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009224:	4b09      	ldr	r3, [pc, #36]	@ (800924c <prvSwitchTimerLists+0xc8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1ae      	bne.n	800918c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800922e:	4b07      	ldr	r3, [pc, #28]	@ (800924c <prvSwitchTimerLists+0xc8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009234:	4b06      	ldr	r3, [pc, #24]	@ (8009250 <prvSwitchTimerLists+0xcc>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a04      	ldr	r2, [pc, #16]	@ (800924c <prvSwitchTimerLists+0xc8>)
 800923a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800923c:	4a04      	ldr	r2, [pc, #16]	@ (8009250 <prvSwitchTimerLists+0xcc>)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6013      	str	r3, [r2, #0]
}
 8009242:	bf00      	nop
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	2000156c 	.word	0x2000156c
 8009250:	20001570 	.word	0x20001570

08009254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800925a:	f000 f965 	bl	8009528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800925e:	4b15      	ldr	r3, [pc, #84]	@ (80092b4 <prvCheckForValidListAndQueue+0x60>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d120      	bne.n	80092a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009266:	4814      	ldr	r0, [pc, #80]	@ (80092b8 <prvCheckForValidListAndQueue+0x64>)
 8009268:	f7fd fa72 	bl	8006750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800926c:	4813      	ldr	r0, [pc, #76]	@ (80092bc <prvCheckForValidListAndQueue+0x68>)
 800926e:	f7fd fa6f 	bl	8006750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009272:	4b13      	ldr	r3, [pc, #76]	@ (80092c0 <prvCheckForValidListAndQueue+0x6c>)
 8009274:	4a10      	ldr	r2, [pc, #64]	@ (80092b8 <prvCheckForValidListAndQueue+0x64>)
 8009276:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009278:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <prvCheckForValidListAndQueue+0x70>)
 800927a:	4a10      	ldr	r2, [pc, #64]	@ (80092bc <prvCheckForValidListAndQueue+0x68>)
 800927c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800927e:	2300      	movs	r3, #0
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	4b11      	ldr	r3, [pc, #68]	@ (80092c8 <prvCheckForValidListAndQueue+0x74>)
 8009284:	4a11      	ldr	r2, [pc, #68]	@ (80092cc <prvCheckForValidListAndQueue+0x78>)
 8009286:	2110      	movs	r1, #16
 8009288:	200a      	movs	r0, #10
 800928a:	f7fd fb81 	bl	8006990 <xQueueGenericCreateStatic>
 800928e:	4603      	mov	r3, r0
 8009290:	4a08      	ldr	r2, [pc, #32]	@ (80092b4 <prvCheckForValidListAndQueue+0x60>)
 8009292:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009294:	4b07      	ldr	r3, [pc, #28]	@ (80092b4 <prvCheckForValidListAndQueue+0x60>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800929c:	4b05      	ldr	r3, [pc, #20]	@ (80092b4 <prvCheckForValidListAndQueue+0x60>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	490b      	ldr	r1, [pc, #44]	@ (80092d0 <prvCheckForValidListAndQueue+0x7c>)
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe f9ac 	bl	8007600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092a8:	f000 f974 	bl	8009594 <vPortExitCritical>
}
 80092ac:	bf00      	nop
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20001574 	.word	0x20001574
 80092b8:	20001544 	.word	0x20001544
 80092bc:	20001558 	.word	0x20001558
 80092c0:	2000156c 	.word	0x2000156c
 80092c4:	20001570 	.word	0x20001570
 80092c8:	20001620 	.word	0x20001620
 80092cc:	20001580 	.word	0x20001580
 80092d0:	0800d2a0 	.word	0x0800d2a0

080092d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3b04      	subs	r3, #4
 80092e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80092ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3b04      	subs	r3, #4
 80092f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f023 0201 	bic.w	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3b04      	subs	r3, #4
 8009302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009304:	4a0c      	ldr	r2, [pc, #48]	@ (8009338 <pxPortInitialiseStack+0x64>)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3b14      	subs	r3, #20
 800930e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3b04      	subs	r3, #4
 800931a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f06f 0202 	mvn.w	r2, #2
 8009322:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3b20      	subs	r3, #32
 8009328:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800932a:	68fb      	ldr	r3, [r7, #12]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	0800933d 	.word	0x0800933d

0800933c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009346:	4b15      	ldr	r3, [pc, #84]	@ (800939c <prvTaskExitError+0x60>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934e:	d00d      	beq.n	800936c <prvTaskExitError+0x30>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009354:	b672      	cpsid	i
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	b662      	cpsie	i
 8009364:	60fb      	str	r3, [r7, #12]
}
 8009366:	bf00      	nop
 8009368:	bf00      	nop
 800936a:	e7fd      	b.n	8009368 <prvTaskExitError+0x2c>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	b672      	cpsid	i
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	b662      	cpsie	i
 8009380:	60bb      	str	r3, [r7, #8]
}
 8009382:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009384:	bf00      	nop
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0fc      	beq.n	8009386 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000010 	.word	0x20000010

080093a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093a0:	4b07      	ldr	r3, [pc, #28]	@ (80093c0 <pxCurrentTCBConst2>)
 80093a2:	6819      	ldr	r1, [r3, #0]
 80093a4:	6808      	ldr	r0, [r1, #0]
 80093a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093aa:	f380 8809 	msr	PSP, r0
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f04f 0000 	mov.w	r0, #0
 80093b6:	f380 8811 	msr	BASEPRI, r0
 80093ba:	4770      	bx	lr
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst2>:
 80093c0:	20001044 	.word	0x20001044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093c8:	4808      	ldr	r0, [pc, #32]	@ (80093ec <prvPortStartFirstTask+0x24>)
 80093ca:	6800      	ldr	r0, [r0, #0]
 80093cc:	6800      	ldr	r0, [r0, #0]
 80093ce:	f380 8808 	msr	MSP, r0
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8814 	msr	CONTROL, r0
 80093da:	b662      	cpsie	i
 80093dc:	b661      	cpsie	f
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	df00      	svc	0
 80093e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ea:	bf00      	nop
 80093ec:	e000ed08 	.word	0xe000ed08

080093f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093f6:	4b37      	ldr	r3, [pc, #220]	@ (80094d4 <xPortStartScheduler+0xe4>)
 80093f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	22ff      	movs	r2, #255	@ 0xff
 8009406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009418:	b2da      	uxtb	r2, r3
 800941a:	4b2f      	ldr	r3, [pc, #188]	@ (80094d8 <xPortStartScheduler+0xe8>)
 800941c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800941e:	4b2f      	ldr	r3, [pc, #188]	@ (80094dc <xPortStartScheduler+0xec>)
 8009420:	2207      	movs	r2, #7
 8009422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009424:	e009      	b.n	800943a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009426:	4b2d      	ldr	r3, [pc, #180]	@ (80094dc <xPortStartScheduler+0xec>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3b01      	subs	r3, #1
 800942c:	4a2b      	ldr	r2, [pc, #172]	@ (80094dc <xPortStartScheduler+0xec>)
 800942e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	b2db      	uxtb	r3, r3
 8009438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009442:	2b80      	cmp	r3, #128	@ 0x80
 8009444:	d0ef      	beq.n	8009426 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009446:	4b25      	ldr	r3, [pc, #148]	@ (80094dc <xPortStartScheduler+0xec>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f1c3 0307 	rsb	r3, r3, #7
 800944e:	2b04      	cmp	r3, #4
 8009450:	d00d      	beq.n	800946e <xPortStartScheduler+0x7e>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009456:	b672      	cpsid	i
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	b662      	cpsie	i
 8009466:	60bb      	str	r3, [r7, #8]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800946e:	4b1b      	ldr	r3, [pc, #108]	@ (80094dc <xPortStartScheduler+0xec>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	4a19      	ldr	r2, [pc, #100]	@ (80094dc <xPortStartScheduler+0xec>)
 8009476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009478:	4b18      	ldr	r3, [pc, #96]	@ (80094dc <xPortStartScheduler+0xec>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009480:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <xPortStartScheduler+0xec>)
 8009482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800948c:	4b14      	ldr	r3, [pc, #80]	@ (80094e0 <xPortStartScheduler+0xf0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a13      	ldr	r2, [pc, #76]	@ (80094e0 <xPortStartScheduler+0xf0>)
 8009492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009498:	4b11      	ldr	r3, [pc, #68]	@ (80094e0 <xPortStartScheduler+0xf0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a10      	ldr	r2, [pc, #64]	@ (80094e0 <xPortStartScheduler+0xf0>)
 800949e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80094a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094a4:	f000 f8fc 	bl	80096a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094a8:	4b0e      	ldr	r3, [pc, #56]	@ (80094e4 <xPortStartScheduler+0xf4>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094ae:	f000 f91b 	bl	80096e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <xPortStartScheduler+0xf8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a0c      	ldr	r2, [pc, #48]	@ (80094e8 <xPortStartScheduler+0xf8>)
 80094b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80094bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094be:	f7ff ff83 	bl	80093c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094c2:	f7fe fd13 	bl	8007eec <vTaskSwitchContext>
	prvTaskExitError();
 80094c6:	f7ff ff39 	bl	800933c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	e000e400 	.word	0xe000e400
 80094d8:	20001670 	.word	0x20001670
 80094dc:	20001674 	.word	0x20001674
 80094e0:	e000ed20 	.word	0xe000ed20
 80094e4:	20000010 	.word	0x20000010
 80094e8:	e000ef34 	.word	0xe000ef34

080094ec <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 80094f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <vPortEndScheduler+0x38>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094fa:	d00d      	beq.n	8009518 <vPortEndScheduler+0x2c>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	b672      	cpsid	i
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	b662      	cpsie	i
 8009510:	607b      	str	r3, [r7, #4]
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	e7fd      	b.n	8009514 <vPortEndScheduler+0x28>
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	20000010 	.word	0x20000010

08009528 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	b672      	cpsid	i
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	b662      	cpsie	i
 8009542:	607b      	str	r3, [r7, #4]
}
 8009544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009546:	4b11      	ldr	r3, [pc, #68]	@ (800958c <vPortEnterCritical+0x64>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	4a0f      	ldr	r2, [pc, #60]	@ (800958c <vPortEnterCritical+0x64>)
 800954e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009550:	4b0e      	ldr	r3, [pc, #56]	@ (800958c <vPortEnterCritical+0x64>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d112      	bne.n	800957e <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009558:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <vPortEnterCritical+0x68>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00d      	beq.n	800957e <vPortEnterCritical+0x56>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009566:	b672      	cpsid	i
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	b662      	cpsie	i
 8009576:	603b      	str	r3, [r7, #0]
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <vPortEnterCritical+0x52>
	}
}
 800957e:	bf00      	nop
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	20000010 	.word	0x20000010
 8009590:	e000ed04 	.word	0xe000ed04

08009594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800959a:	4b13      	ldr	r3, [pc, #76]	@ (80095e8 <vPortExitCritical+0x54>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10d      	bne.n	80095be <vPortExitCritical+0x2a>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	b672      	cpsid	i
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	b662      	cpsie	i
 80095b6:	607b      	str	r3, [r7, #4]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80095be:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <vPortExitCritical+0x54>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	4a08      	ldr	r2, [pc, #32]	@ (80095e8 <vPortExitCritical+0x54>)
 80095c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <vPortExitCritical+0x54>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d105      	bne.n	80095dc <vPortExitCritical+0x48>
 80095d0:	2300      	movs	r3, #0
 80095d2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f383 8811 	msr	BASEPRI, r3
}
 80095da:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	20000010 	.word	0x20000010
 80095ec:	00000000 	.word	0x00000000

080095f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095f0:	f3ef 8009 	mrs	r0, PSP
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <pxCurrentTCBConst>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	f01e 0f10 	tst.w	lr, #16
 8009600:	bf08      	it	eq
 8009602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	6010      	str	r0, [r2, #0]
 800960c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009614:	b672      	cpsid	i
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	b662      	cpsie	i
 8009624:	f7fe fc62 	bl	8007eec <vTaskSwitchContext>
 8009628:	f04f 0000 	mov.w	r0, #0
 800962c:	f380 8811 	msr	BASEPRI, r0
 8009630:	bc09      	pop	{r0, r3}
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	6808      	ldr	r0, [r1, #0]
 8009636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f01e 0f10 	tst.w	lr, #16
 800963e:	bf08      	it	eq
 8009640:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009644:	f380 8809 	msr	PSP, r0
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop

08009650 <pxCurrentTCBConst>:
 8009650:	20001044 	.word	0x20001044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop

08009658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	b672      	cpsid	i
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	b662      	cpsie	i
 8009672:	607b      	str	r3, [r7, #4]
}
 8009674:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009676:	f7fe fb7d 	bl	8007d74 <xTaskIncrementTick>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009680:	4b06      	ldr	r3, [pc, #24]	@ (800969c <SysTick_Handler+0x44>)
 8009682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	2300      	movs	r3, #0
 800968a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	f383 8811 	msr	BASEPRI, r3
}
 8009692:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096a4:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <vPortSetupTimerInterrupt+0x34>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096aa:	4b0b      	ldr	r3, [pc, #44]	@ (80096d8 <vPortSetupTimerInterrupt+0x38>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096b0:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <vPortSetupTimerInterrupt+0x3c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a0a      	ldr	r2, [pc, #40]	@ (80096e0 <vPortSetupTimerInterrupt+0x40>)
 80096b6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ba:	099b      	lsrs	r3, r3, #6
 80096bc:	4a09      	ldr	r2, [pc, #36]	@ (80096e4 <vPortSetupTimerInterrupt+0x44>)
 80096be:	3b01      	subs	r3, #1
 80096c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096c2:	4b04      	ldr	r3, [pc, #16]	@ (80096d4 <vPortSetupTimerInterrupt+0x34>)
 80096c4:	2207      	movs	r2, #7
 80096c6:	601a      	str	r2, [r3, #0]
}
 80096c8:	bf00      	nop
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	e000e010 	.word	0xe000e010
 80096d8:	e000e018 	.word	0xe000e018
 80096dc:	20000004 	.word	0x20000004
 80096e0:	10624dd3 	.word	0x10624dd3
 80096e4:	e000e014 	.word	0xe000e014

080096e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80096f8 <vPortEnableVFP+0x10>
 80096ec:	6801      	ldr	r1, [r0, #0]
 80096ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80096f2:	6001      	str	r1, [r0, #0]
 80096f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096f6:	bf00      	nop
 80096f8:	e000ed88 	.word	0xe000ed88

080096fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009702:	f3ef 8305 	mrs	r3, IPSR
 8009706:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b0f      	cmp	r3, #15
 800970c:	d917      	bls.n	800973e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800970e:	4a1a      	ldr	r2, [pc, #104]	@ (8009778 <vPortValidateInterruptPriority+0x7c>)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009718:	4b18      	ldr	r3, [pc, #96]	@ (800977c <vPortValidateInterruptPriority+0x80>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	7afa      	ldrb	r2, [r7, #11]
 800971e:	429a      	cmp	r2, r3
 8009720:	d20d      	bcs.n	800973e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	b672      	cpsid	i
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	b662      	cpsie	i
 8009736:	607b      	str	r3, [r7, #4]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800973e:	4b10      	ldr	r3, [pc, #64]	@ (8009780 <vPortValidateInterruptPriority+0x84>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009746:	4b0f      	ldr	r3, [pc, #60]	@ (8009784 <vPortValidateInterruptPriority+0x88>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d90d      	bls.n	800976a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	603b      	str	r3, [r7, #0]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <vPortValidateInterruptPriority+0x6a>
	}
 800976a:	bf00      	nop
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	e000e3f0 	.word	0xe000e3f0
 800977c:	20001670 	.word	0x20001670
 8009780:	e000ed0c 	.word	0xe000ed0c
 8009784:	20001674 	.word	0x20001674

08009788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	@ 0x28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009790:	2300      	movs	r3, #0
 8009792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009794:	f7fe fa1e 	bl	8007bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009798:	4b5d      	ldr	r3, [pc, #372]	@ (8009910 <pvPortMalloc+0x188>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097a0:	f000 f920 	bl	80099e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009914 <pvPortMalloc+0x18c>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 8094 	bne.w	80098da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80097b8:	2208      	movs	r2, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d017      	beq.n	80097fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f023 0307 	bic.w	r3, r3, #7
 80097d0:	3308      	adds	r3, #8
 80097d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <pvPortMalloc+0x72>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	b672      	cpsid	i
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	b662      	cpsie	i
 80097f2:	617b      	str	r3, [r7, #20]
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	e7fd      	b.n	80097f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d06c      	beq.n	80098da <pvPortMalloc+0x152>
 8009800:	4b45      	ldr	r3, [pc, #276]	@ (8009918 <pvPortMalloc+0x190>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	429a      	cmp	r2, r3
 8009808:	d867      	bhi.n	80098da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800980a:	4b44      	ldr	r3, [pc, #272]	@ (800991c <pvPortMalloc+0x194>)
 800980c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800980e:	4b43      	ldr	r3, [pc, #268]	@ (800991c <pvPortMalloc+0x194>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009814:	e004      	b.n	8009820 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	d903      	bls.n	8009832 <pvPortMalloc+0xaa>
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1f1      	bne.n	8009816 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009832:	4b37      	ldr	r3, [pc, #220]	@ (8009910 <pvPortMalloc+0x188>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009838:	429a      	cmp	r2, r3
 800983a:	d04e      	beq.n	80098da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2208      	movs	r2, #8
 8009842:	4413      	add	r3, r2
 8009844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	1ad2      	subs	r2, r2, r3
 8009856:	2308      	movs	r3, #8
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	429a      	cmp	r2, r3
 800985c:	d922      	bls.n	80098a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800985e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4413      	add	r3, r2
 8009864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00d      	beq.n	800988c <pvPortMalloc+0x104>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009874:	b672      	cpsid	i
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	b662      	cpsie	i
 8009884:	613b      	str	r3, [r7, #16]
}
 8009886:	bf00      	nop
 8009888:	bf00      	nop
 800988a:	e7fd      	b.n	8009888 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800988c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	1ad2      	subs	r2, r2, r3
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800989e:	69b8      	ldr	r0, [r7, #24]
 80098a0:	f000 f904 	bl	8009aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009918 <pvPortMalloc+0x190>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009918 <pvPortMalloc+0x190>)
 80098b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098b2:	4b19      	ldr	r3, [pc, #100]	@ (8009918 <pvPortMalloc+0x190>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009920 <pvPortMalloc+0x198>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d203      	bcs.n	80098c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098be:	4b16      	ldr	r3, [pc, #88]	@ (8009918 <pvPortMalloc+0x190>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a17      	ldr	r2, [pc, #92]	@ (8009920 <pvPortMalloc+0x198>)
 80098c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	4b12      	ldr	r3, [pc, #72]	@ (8009914 <pvPortMalloc+0x18c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098da:	f7fe f989 	bl	8007bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00d      	beq.n	8009904 <pvPortMalloc+0x17c>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ec:	b672      	cpsid	i
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	b662      	cpsie	i
 80098fc:	60fb      	str	r3, [r7, #12]
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	e7fd      	b.n	8009900 <pvPortMalloc+0x178>
	return pvReturn;
 8009904:	69fb      	ldr	r3, [r7, #28]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3728      	adds	r7, #40	@ 0x28
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20019d20 	.word	0x20019d20
 8009914:	20019d2c 	.word	0x20019d2c
 8009918:	20019d24 	.word	0x20019d24
 800991c:	20019d18 	.word	0x20019d18
 8009920:	20019d28 	.word	0x20019d28

08009924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d04e      	beq.n	80099d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009936:	2308      	movs	r3, #8
 8009938:	425b      	negs	r3, r3
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4413      	add	r3, r2
 800993e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	4b24      	ldr	r3, [pc, #144]	@ (80099dc <vPortFree+0xb8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4013      	ands	r3, r2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10d      	bne.n	800996e <vPortFree+0x4a>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009956:	b672      	cpsid	i
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	b662      	cpsie	i
 8009966:	60fb      	str	r3, [r7, #12]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <vPortFree+0x6e>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997a:	b672      	cpsid	i
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	b662      	cpsie	i
 800998a:	60bb      	str	r3, [r7, #8]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4b11      	ldr	r3, [pc, #68]	@ (80099dc <vPortFree+0xb8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4013      	ands	r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d019      	beq.n	80099d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d115      	bne.n	80099d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0b      	ldr	r3, [pc, #44]	@ (80099dc <vPortFree+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b8:	f7fe f90c 	bl	8007bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <vPortFree+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	4a06      	ldr	r2, [pc, #24]	@ (80099e0 <vPortFree+0xbc>)
 80099c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f86e 	bl	8009aac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80099d0:	f7fe f90e 	bl	8007bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099d4:	bf00      	nop
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20019d2c 	.word	0x20019d2c
 80099e0:	20019d24 	.word	0x20019d24

080099e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099ea:	4b29      	ldr	r3, [pc, #164]	@ (8009a90 <prvHeapInit+0xac>)
 80099ec:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099ee:	4b29      	ldr	r3, [pc, #164]	@ (8009a94 <prvHeapInit+0xb0>)
 80099f0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00c      	beq.n	8009a16 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3307      	adds	r3, #7
 8009a00:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f023 0307 	bic.w	r3, r3, #7
 8009a08:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	4a20      	ldr	r2, [pc, #128]	@ (8009a94 <prvHeapInit+0xb0>)
 8009a12:	4413      	add	r3, r2
 8009a14:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a98 <prvHeapInit+0xb4>)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a20:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <prvHeapInit+0xb4>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a2e:	2208      	movs	r2, #8
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	1a9b      	subs	r3, r3, r2
 8009a34:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f023 0307 	bic.w	r3, r3, #7
 8009a3c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a16      	ldr	r2, [pc, #88]	@ (8009a9c <prvHeapInit+0xb8>)
 8009a42:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a44:	4b15      	ldr	r3, [pc, #84]	@ (8009a9c <prvHeapInit+0xb8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a4c:	4b13      	ldr	r3, [pc, #76]	@ (8009a9c <prvHeapInit+0xb8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	1ad2      	subs	r2, r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a62:	4b0e      	ldr	r3, [pc, #56]	@ (8009a9c <prvHeapInit+0xb8>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa0 <prvHeapInit+0xbc>)
 8009a70:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	4a0b      	ldr	r2, [pc, #44]	@ (8009aa4 <prvHeapInit+0xc0>)
 8009a78:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa8 <prvHeapInit+0xc4>)
 8009a7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a80:	601a      	str	r2, [r3, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	000186a0 	.word	0x000186a0
 8009a94:	20001678 	.word	0x20001678
 8009a98:	20019d18 	.word	0x20019d18
 8009a9c:	20019d20 	.word	0x20019d20
 8009aa0:	20019d28 	.word	0x20019d28
 8009aa4:	20019d24 	.word	0x20019d24
 8009aa8:	20019d2c 	.word	0x20019d2c

08009aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ab4:	4b28      	ldr	r3, [pc, #160]	@ (8009b58 <prvInsertBlockIntoFreeList+0xac>)
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e002      	b.n	8009ac0 <prvInsertBlockIntoFreeList+0x14>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d8f7      	bhi.n	8009aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d108      	bne.n	8009aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	441a      	add	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	441a      	add	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d118      	bne.n	8009b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4b15      	ldr	r3, [pc, #84]	@ (8009b5c <prvInsertBlockIntoFreeList+0xb0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d00d      	beq.n	8009b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	441a      	add	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e008      	b.n	8009b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <prvInsertBlockIntoFreeList+0xb0>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	e003      	b.n	8009b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d002      	beq.n	8009b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20019d18 	.word	0x20019d18
 8009b5c:	20019d20 	.word	0x20019d20

08009b60 <__cvt>:
 8009b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	ec57 6b10 	vmov	r6, r7, d0
 8009b68:	2f00      	cmp	r7, #0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	463b      	mov	r3, r7
 8009b70:	bfbb      	ittet	lt
 8009b72:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b76:	461f      	movlt	r7, r3
 8009b78:	2300      	movge	r3, #0
 8009b7a:	232d      	movlt	r3, #45	@ 0x2d
 8009b7c:	700b      	strb	r3, [r1, #0]
 8009b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b80:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b84:	4691      	mov	r9, r2
 8009b86:	f023 0820 	bic.w	r8, r3, #32
 8009b8a:	bfbc      	itt	lt
 8009b8c:	4632      	movlt	r2, r6
 8009b8e:	4616      	movlt	r6, r2
 8009b90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b94:	d005      	beq.n	8009ba2 <__cvt+0x42>
 8009b96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b9a:	d100      	bne.n	8009b9e <__cvt+0x3e>
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	2102      	movs	r1, #2
 8009ba0:	e000      	b.n	8009ba4 <__cvt+0x44>
 8009ba2:	2103      	movs	r1, #3
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	ab02      	add	r3, sp, #8
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	ec47 6b10 	vmov	d0, r6, r7
 8009bb0:	4653      	mov	r3, sl
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	f001 f8ac 	bl	800ad10 <_dtoa_r>
 8009bb8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	d119      	bne.n	8009bf4 <__cvt+0x94>
 8009bc0:	f019 0f01 	tst.w	r9, #1
 8009bc4:	d00e      	beq.n	8009be4 <__cvt+0x84>
 8009bc6:	eb00 0904 	add.w	r9, r0, r4
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	f7f6 ff99 	bl	8000b08 <__aeabi_dcmpeq>
 8009bd6:	b108      	cbz	r0, 8009bdc <__cvt+0x7c>
 8009bd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bdc:	2230      	movs	r2, #48	@ 0x30
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	454b      	cmp	r3, r9
 8009be2:	d31e      	bcc.n	8009c22 <__cvt+0xc2>
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009be8:	1b5b      	subs	r3, r3, r5
 8009bea:	4628      	mov	r0, r5
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	b004      	add	sp, #16
 8009bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bf8:	eb00 0904 	add.w	r9, r0, r4
 8009bfc:	d1e5      	bne.n	8009bca <__cvt+0x6a>
 8009bfe:	7803      	ldrb	r3, [r0, #0]
 8009c00:	2b30      	cmp	r3, #48	@ 0x30
 8009c02:	d10a      	bne.n	8009c1a <__cvt+0xba>
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 ff7c 	bl	8000b08 <__aeabi_dcmpeq>
 8009c10:	b918      	cbnz	r0, 8009c1a <__cvt+0xba>
 8009c12:	f1c4 0401 	rsb	r4, r4, #1
 8009c16:	f8ca 4000 	str.w	r4, [sl]
 8009c1a:	f8da 3000 	ldr.w	r3, [sl]
 8009c1e:	4499      	add	r9, r3
 8009c20:	e7d3      	b.n	8009bca <__cvt+0x6a>
 8009c22:	1c59      	adds	r1, r3, #1
 8009c24:	9103      	str	r1, [sp, #12]
 8009c26:	701a      	strb	r2, [r3, #0]
 8009c28:	e7d9      	b.n	8009bde <__cvt+0x7e>

08009c2a <__exponent>:
 8009c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	bfba      	itte	lt
 8009c30:	4249      	neglt	r1, r1
 8009c32:	232d      	movlt	r3, #45	@ 0x2d
 8009c34:	232b      	movge	r3, #43	@ 0x2b
 8009c36:	2909      	cmp	r1, #9
 8009c38:	7002      	strb	r2, [r0, #0]
 8009c3a:	7043      	strb	r3, [r0, #1]
 8009c3c:	dd29      	ble.n	8009c92 <__exponent+0x68>
 8009c3e:	f10d 0307 	add.w	r3, sp, #7
 8009c42:	461d      	mov	r5, r3
 8009c44:	270a      	movs	r7, #10
 8009c46:	461a      	mov	r2, r3
 8009c48:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c4c:	fb07 1416 	mls	r4, r7, r6, r1
 8009c50:	3430      	adds	r4, #48	@ 0x30
 8009c52:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c56:	460c      	mov	r4, r1
 8009c58:	2c63      	cmp	r4, #99	@ 0x63
 8009c5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c5e:	4631      	mov	r1, r6
 8009c60:	dcf1      	bgt.n	8009c46 <__exponent+0x1c>
 8009c62:	3130      	adds	r1, #48	@ 0x30
 8009c64:	1e94      	subs	r4, r2, #2
 8009c66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c6a:	1c41      	adds	r1, r0, #1
 8009c6c:	4623      	mov	r3, r4
 8009c6e:	42ab      	cmp	r3, r5
 8009c70:	d30a      	bcc.n	8009c88 <__exponent+0x5e>
 8009c72:	f10d 0309 	add.w	r3, sp, #9
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	42ac      	cmp	r4, r5
 8009c7a:	bf88      	it	hi
 8009c7c:	2300      	movhi	r3, #0
 8009c7e:	3302      	adds	r3, #2
 8009c80:	4403      	add	r3, r0
 8009c82:	1a18      	subs	r0, r3, r0
 8009c84:	b003      	add	sp, #12
 8009c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c88:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c90:	e7ed      	b.n	8009c6e <__exponent+0x44>
 8009c92:	2330      	movs	r3, #48	@ 0x30
 8009c94:	3130      	adds	r1, #48	@ 0x30
 8009c96:	7083      	strb	r3, [r0, #2]
 8009c98:	70c1      	strb	r1, [r0, #3]
 8009c9a:	1d03      	adds	r3, r0, #4
 8009c9c:	e7f1      	b.n	8009c82 <__exponent+0x58>
	...

08009ca0 <_printf_float>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	b08d      	sub	sp, #52	@ 0x34
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009cac:	4616      	mov	r6, r2
 8009cae:	461f      	mov	r7, r3
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	f000 fec7 	bl	800aa44 <_localeconv_r>
 8009cb6:	6803      	ldr	r3, [r0, #0]
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f6 faf8 	bl	80002b0 <strlen>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc8:	9005      	str	r0, [sp, #20]
 8009cca:	3307      	adds	r3, #7
 8009ccc:	f023 0307 	bic.w	r3, r3, #7
 8009cd0:	f103 0208 	add.w	r2, r3, #8
 8009cd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009cd8:	f8d4 b000 	ldr.w	fp, [r4]
 8009cdc:	f8c8 2000 	str.w	r2, [r8]
 8009ce0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ce4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ce8:	9307      	str	r3, [sp, #28]
 8009cea:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf6:	4b9c      	ldr	r3, [pc, #624]	@ (8009f68 <_printf_float+0x2c8>)
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfc:	f7f6 ff36 	bl	8000b6c <__aeabi_dcmpun>
 8009d00:	bb70      	cbnz	r0, 8009d60 <_printf_float+0xc0>
 8009d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d06:	4b98      	ldr	r3, [pc, #608]	@ (8009f68 <_printf_float+0x2c8>)
 8009d08:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0c:	f7f6 ff10 	bl	8000b30 <__aeabi_dcmple>
 8009d10:	bb30      	cbnz	r0, 8009d60 <_printf_float+0xc0>
 8009d12:	2200      	movs	r2, #0
 8009d14:	2300      	movs	r3, #0
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 feff 	bl	8000b1c <__aeabi_dcmplt>
 8009d1e:	b110      	cbz	r0, 8009d26 <_printf_float+0x86>
 8009d20:	232d      	movs	r3, #45	@ 0x2d
 8009d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d26:	4a91      	ldr	r2, [pc, #580]	@ (8009f6c <_printf_float+0x2cc>)
 8009d28:	4b91      	ldr	r3, [pc, #580]	@ (8009f70 <_printf_float+0x2d0>)
 8009d2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d2e:	bf94      	ite	ls
 8009d30:	4690      	movls	r8, r2
 8009d32:	4698      	movhi	r8, r3
 8009d34:	2303      	movs	r3, #3
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	f02b 0304 	bic.w	r3, fp, #4
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	f04f 0900 	mov.w	r9, #0
 8009d42:	9700      	str	r7, [sp, #0]
 8009d44:	4633      	mov	r3, r6
 8009d46:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f9d2 	bl	800a0f4 <_printf_common>
 8009d50:	3001      	adds	r0, #1
 8009d52:	f040 808d 	bne.w	8009e70 <_printf_float+0x1d0>
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	b00d      	add	sp, #52	@ 0x34
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	4642      	mov	r2, r8
 8009d62:	464b      	mov	r3, r9
 8009d64:	4640      	mov	r0, r8
 8009d66:	4649      	mov	r1, r9
 8009d68:	f7f6 ff00 	bl	8000b6c <__aeabi_dcmpun>
 8009d6c:	b140      	cbz	r0, 8009d80 <_printf_float+0xe0>
 8009d6e:	464b      	mov	r3, r9
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfbc      	itt	lt
 8009d74:	232d      	movlt	r3, #45	@ 0x2d
 8009d76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8009f74 <_printf_float+0x2d4>)
 8009d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8009f78 <_printf_float+0x2d8>)
 8009d7e:	e7d4      	b.n	8009d2a <_printf_float+0x8a>
 8009d80:	6863      	ldr	r3, [r4, #4]
 8009d82:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d86:	9206      	str	r2, [sp, #24]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	d13b      	bne.n	8009e04 <_printf_float+0x164>
 8009d8c:	2306      	movs	r3, #6
 8009d8e:	6063      	str	r3, [r4, #4]
 8009d90:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d94:	2300      	movs	r3, #0
 8009d96:	6022      	str	r2, [r4, #0]
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d9c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009da0:	ab09      	add	r3, sp, #36	@ 0x24
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	ec49 8b10 	vmov	d0, r8, r9
 8009daa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009dae:	4628      	mov	r0, r5
 8009db0:	f7ff fed6 	bl	8009b60 <__cvt>
 8009db4:	9b06      	ldr	r3, [sp, #24]
 8009db6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009db8:	2b47      	cmp	r3, #71	@ 0x47
 8009dba:	4680      	mov	r8, r0
 8009dbc:	d129      	bne.n	8009e12 <_printf_float+0x172>
 8009dbe:	1cc8      	adds	r0, r1, #3
 8009dc0:	db02      	blt.n	8009dc8 <_printf_float+0x128>
 8009dc2:	6863      	ldr	r3, [r4, #4]
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	dd41      	ble.n	8009e4c <_printf_float+0x1ac>
 8009dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8009dcc:	fa5f fa8a 	uxtb.w	sl, sl
 8009dd0:	3901      	subs	r1, #1
 8009dd2:	4652      	mov	r2, sl
 8009dd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009dd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8009dda:	f7ff ff26 	bl	8009c2a <__exponent>
 8009dde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009de0:	1813      	adds	r3, r2, r0
 8009de2:	2a01      	cmp	r2, #1
 8009de4:	4681      	mov	r9, r0
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	dc02      	bgt.n	8009df0 <_printf_float+0x150>
 8009dea:	6822      	ldr	r2, [r4, #0]
 8009dec:	07d2      	lsls	r2, r2, #31
 8009dee:	d501      	bpl.n	8009df4 <_printf_float+0x154>
 8009df0:	3301      	adds	r3, #1
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0a2      	beq.n	8009d42 <_printf_float+0xa2>
 8009dfc:	232d      	movs	r3, #45	@ 0x2d
 8009dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e02:	e79e      	b.n	8009d42 <_printf_float+0xa2>
 8009e04:	9a06      	ldr	r2, [sp, #24]
 8009e06:	2a47      	cmp	r2, #71	@ 0x47
 8009e08:	d1c2      	bne.n	8009d90 <_printf_float+0xf0>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1c0      	bne.n	8009d90 <_printf_float+0xf0>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e7bd      	b.n	8009d8e <_printf_float+0xee>
 8009e12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e16:	d9db      	bls.n	8009dd0 <_printf_float+0x130>
 8009e18:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e1c:	d118      	bne.n	8009e50 <_printf_float+0x1b0>
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	6863      	ldr	r3, [r4, #4]
 8009e22:	dd0b      	ble.n	8009e3c <_printf_float+0x19c>
 8009e24:	6121      	str	r1, [r4, #16]
 8009e26:	b913      	cbnz	r3, 8009e2e <_printf_float+0x18e>
 8009e28:	6822      	ldr	r2, [r4, #0]
 8009e2a:	07d0      	lsls	r0, r2, #31
 8009e2c:	d502      	bpl.n	8009e34 <_printf_float+0x194>
 8009e2e:	3301      	adds	r3, #1
 8009e30:	440b      	add	r3, r1
 8009e32:	6123      	str	r3, [r4, #16]
 8009e34:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e36:	f04f 0900 	mov.w	r9, #0
 8009e3a:	e7db      	b.n	8009df4 <_printf_float+0x154>
 8009e3c:	b913      	cbnz	r3, 8009e44 <_printf_float+0x1a4>
 8009e3e:	6822      	ldr	r2, [r4, #0]
 8009e40:	07d2      	lsls	r2, r2, #31
 8009e42:	d501      	bpl.n	8009e48 <_printf_float+0x1a8>
 8009e44:	3302      	adds	r3, #2
 8009e46:	e7f4      	b.n	8009e32 <_printf_float+0x192>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e7f2      	b.n	8009e32 <_printf_float+0x192>
 8009e4c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e52:	4299      	cmp	r1, r3
 8009e54:	db05      	blt.n	8009e62 <_printf_float+0x1c2>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	6121      	str	r1, [r4, #16]
 8009e5a:	07d8      	lsls	r0, r3, #31
 8009e5c:	d5ea      	bpl.n	8009e34 <_printf_float+0x194>
 8009e5e:	1c4b      	adds	r3, r1, #1
 8009e60:	e7e7      	b.n	8009e32 <_printf_float+0x192>
 8009e62:	2900      	cmp	r1, #0
 8009e64:	bfd4      	ite	le
 8009e66:	f1c1 0202 	rsble	r2, r1, #2
 8009e6a:	2201      	movgt	r2, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	e7e0      	b.n	8009e32 <_printf_float+0x192>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	055a      	lsls	r2, r3, #21
 8009e74:	d407      	bmi.n	8009e86 <_printf_float+0x1e6>
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	4642      	mov	r2, r8
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b8      	blx	r7
 8009e80:	3001      	adds	r0, #1
 8009e82:	d12b      	bne.n	8009edc <_printf_float+0x23c>
 8009e84:	e767      	b.n	8009d56 <_printf_float+0xb6>
 8009e86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e8a:	f240 80dd 	bls.w	800a048 <_printf_float+0x3a8>
 8009e8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e92:	2200      	movs	r2, #0
 8009e94:	2300      	movs	r3, #0
 8009e96:	f7f6 fe37 	bl	8000b08 <__aeabi_dcmpeq>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d033      	beq.n	8009f06 <_printf_float+0x266>
 8009e9e:	4a37      	ldr	r2, [pc, #220]	@ (8009f7c <_printf_float+0x2dc>)
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f af54 	beq.w	8009d56 <_printf_float+0xb6>
 8009eae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009eb2:	4543      	cmp	r3, r8
 8009eb4:	db02      	blt.n	8009ebc <_printf_float+0x21c>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	07d8      	lsls	r0, r3, #31
 8009eba:	d50f      	bpl.n	8009edc <_printf_float+0x23c>
 8009ebc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f af45 	beq.w	8009d56 <_printf_float+0xb6>
 8009ecc:	f04f 0900 	mov.w	r9, #0
 8009ed0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ed4:	f104 0a1a 	add.w	sl, r4, #26
 8009ed8:	45c8      	cmp	r8, r9
 8009eda:	dc09      	bgt.n	8009ef0 <_printf_float+0x250>
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	079b      	lsls	r3, r3, #30
 8009ee0:	f100 8103 	bmi.w	800a0ea <_printf_float+0x44a>
 8009ee4:	68e0      	ldr	r0, [r4, #12]
 8009ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee8:	4298      	cmp	r0, r3
 8009eea:	bfb8      	it	lt
 8009eec:	4618      	movlt	r0, r3
 8009eee:	e734      	b.n	8009d5a <_printf_float+0xba>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f af2b 	beq.w	8009d56 <_printf_float+0xb6>
 8009f00:	f109 0901 	add.w	r9, r9, #1
 8009f04:	e7e8      	b.n	8009ed8 <_printf_float+0x238>
 8009f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	dc39      	bgt.n	8009f80 <_printf_float+0x2e0>
 8009f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8009f7c <_printf_float+0x2dc>)
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4631      	mov	r1, r6
 8009f12:	4628      	mov	r0, r5
 8009f14:	47b8      	blx	r7
 8009f16:	3001      	adds	r0, #1
 8009f18:	f43f af1d 	beq.w	8009d56 <_printf_float+0xb6>
 8009f1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f20:	ea59 0303 	orrs.w	r3, r9, r3
 8009f24:	d102      	bne.n	8009f2c <_printf_float+0x28c>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	07d9      	lsls	r1, r3, #31
 8009f2a:	d5d7      	bpl.n	8009edc <_printf_float+0x23c>
 8009f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f af0d 	beq.w	8009d56 <_printf_float+0xb6>
 8009f3c:	f04f 0a00 	mov.w	sl, #0
 8009f40:	f104 0b1a 	add.w	fp, r4, #26
 8009f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f46:	425b      	negs	r3, r3
 8009f48:	4553      	cmp	r3, sl
 8009f4a:	dc01      	bgt.n	8009f50 <_printf_float+0x2b0>
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	e793      	b.n	8009e78 <_printf_float+0x1d8>
 8009f50:	2301      	movs	r3, #1
 8009f52:	465a      	mov	r2, fp
 8009f54:	4631      	mov	r1, r6
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f43f aefb 	beq.w	8009d56 <_printf_float+0xb6>
 8009f60:	f10a 0a01 	add.w	sl, sl, #1
 8009f64:	e7ee      	b.n	8009f44 <_printf_float+0x2a4>
 8009f66:	bf00      	nop
 8009f68:	7fefffff 	.word	0x7fefffff
 8009f6c:	0800de9c 	.word	0x0800de9c
 8009f70:	0800dea0 	.word	0x0800dea0
 8009f74:	0800dea4 	.word	0x0800dea4
 8009f78:	0800dea8 	.word	0x0800dea8
 8009f7c:	0800deac 	.word	0x0800deac
 8009f80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f86:	4553      	cmp	r3, sl
 8009f88:	bfa8      	it	ge
 8009f8a:	4653      	movge	r3, sl
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	4699      	mov	r9, r3
 8009f90:	dc36      	bgt.n	800a000 <_printf_float+0x360>
 8009f92:	f04f 0b00 	mov.w	fp, #0
 8009f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f9a:	f104 021a 	add.w	r2, r4, #26
 8009f9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fa0:	9306      	str	r3, [sp, #24]
 8009fa2:	eba3 0309 	sub.w	r3, r3, r9
 8009fa6:	455b      	cmp	r3, fp
 8009fa8:	dc31      	bgt.n	800a00e <_printf_float+0x36e>
 8009faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fac:	459a      	cmp	sl, r3
 8009fae:	dc3a      	bgt.n	800a026 <_printf_float+0x386>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	07da      	lsls	r2, r3, #31
 8009fb4:	d437      	bmi.n	800a026 <_printf_float+0x386>
 8009fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb8:	ebaa 0903 	sub.w	r9, sl, r3
 8009fbc:	9b06      	ldr	r3, [sp, #24]
 8009fbe:	ebaa 0303 	sub.w	r3, sl, r3
 8009fc2:	4599      	cmp	r9, r3
 8009fc4:	bfa8      	it	ge
 8009fc6:	4699      	movge	r9, r3
 8009fc8:	f1b9 0f00 	cmp.w	r9, #0
 8009fcc:	dc33      	bgt.n	800a036 <_printf_float+0x396>
 8009fce:	f04f 0800 	mov.w	r8, #0
 8009fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fd6:	f104 0b1a 	add.w	fp, r4, #26
 8009fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fdc:	ebaa 0303 	sub.w	r3, sl, r3
 8009fe0:	eba3 0309 	sub.w	r3, r3, r9
 8009fe4:	4543      	cmp	r3, r8
 8009fe6:	f77f af79 	ble.w	8009edc <_printf_float+0x23c>
 8009fea:	2301      	movs	r3, #1
 8009fec:	465a      	mov	r2, fp
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	47b8      	blx	r7
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	f43f aeae 	beq.w	8009d56 <_printf_float+0xb6>
 8009ffa:	f108 0801 	add.w	r8, r8, #1
 8009ffe:	e7ec      	b.n	8009fda <_printf_float+0x33a>
 800a000:	4642      	mov	r2, r8
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	d1c2      	bne.n	8009f92 <_printf_float+0x2f2>
 800a00c:	e6a3      	b.n	8009d56 <_printf_float+0xb6>
 800a00e:	2301      	movs	r3, #1
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	9206      	str	r2, [sp, #24]
 800a016:	47b8      	blx	r7
 800a018:	3001      	adds	r0, #1
 800a01a:	f43f ae9c 	beq.w	8009d56 <_printf_float+0xb6>
 800a01e:	9a06      	ldr	r2, [sp, #24]
 800a020:	f10b 0b01 	add.w	fp, fp, #1
 800a024:	e7bb      	b.n	8009f9e <_printf_float+0x2fe>
 800a026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	d1c0      	bne.n	8009fb6 <_printf_float+0x316>
 800a034:	e68f      	b.n	8009d56 <_printf_float+0xb6>
 800a036:	9a06      	ldr	r2, [sp, #24]
 800a038:	464b      	mov	r3, r9
 800a03a:	4442      	add	r2, r8
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	d1c3      	bne.n	8009fce <_printf_float+0x32e>
 800a046:	e686      	b.n	8009d56 <_printf_float+0xb6>
 800a048:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a04c:	f1ba 0f01 	cmp.w	sl, #1
 800a050:	dc01      	bgt.n	800a056 <_printf_float+0x3b6>
 800a052:	07db      	lsls	r3, r3, #31
 800a054:	d536      	bpl.n	800a0c4 <_printf_float+0x424>
 800a056:	2301      	movs	r3, #1
 800a058:	4642      	mov	r2, r8
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	f43f ae78 	beq.w	8009d56 <_printf_float+0xb6>
 800a066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a06a:	4631      	mov	r1, r6
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	f43f ae70 	beq.w	8009d56 <_printf_float+0xb6>
 800a076:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a082:	f7f6 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 800a086:	b9c0      	cbnz	r0, 800a0ba <_printf_float+0x41a>
 800a088:	4653      	mov	r3, sl
 800a08a:	f108 0201 	add.w	r2, r8, #1
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	47b8      	blx	r7
 800a094:	3001      	adds	r0, #1
 800a096:	d10c      	bne.n	800a0b2 <_printf_float+0x412>
 800a098:	e65d      	b.n	8009d56 <_printf_float+0xb6>
 800a09a:	2301      	movs	r3, #1
 800a09c:	465a      	mov	r2, fp
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	47b8      	blx	r7
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	f43f ae56 	beq.w	8009d56 <_printf_float+0xb6>
 800a0aa:	f108 0801 	add.w	r8, r8, #1
 800a0ae:	45d0      	cmp	r8, sl
 800a0b0:	dbf3      	blt.n	800a09a <_printf_float+0x3fa>
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0b8:	e6df      	b.n	8009e7a <_printf_float+0x1da>
 800a0ba:	f04f 0800 	mov.w	r8, #0
 800a0be:	f104 0b1a 	add.w	fp, r4, #26
 800a0c2:	e7f4      	b.n	800a0ae <_printf_float+0x40e>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	e7e1      	b.n	800a08e <_printf_float+0x3ee>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	464a      	mov	r2, r9
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae3e 	beq.w	8009d56 <_printf_float+0xb6>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	68e3      	ldr	r3, [r4, #12]
 800a0e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0e2:	1a5b      	subs	r3, r3, r1
 800a0e4:	4543      	cmp	r3, r8
 800a0e6:	dcf0      	bgt.n	800a0ca <_printf_float+0x42a>
 800a0e8:	e6fc      	b.n	8009ee4 <_printf_float+0x244>
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	f104 0919 	add.w	r9, r4, #25
 800a0f2:	e7f4      	b.n	800a0de <_printf_float+0x43e>

0800a0f4 <_printf_common>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	4616      	mov	r6, r2
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	688a      	ldr	r2, [r1, #8]
 800a0fe:	690b      	ldr	r3, [r1, #16]
 800a100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a104:	4293      	cmp	r3, r2
 800a106:	bfb8      	it	lt
 800a108:	4613      	movlt	r3, r2
 800a10a:	6033      	str	r3, [r6, #0]
 800a10c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a110:	4607      	mov	r7, r0
 800a112:	460c      	mov	r4, r1
 800a114:	b10a      	cbz	r2, 800a11a <_printf_common+0x26>
 800a116:	3301      	adds	r3, #1
 800a118:	6033      	str	r3, [r6, #0]
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	0699      	lsls	r1, r3, #26
 800a11e:	bf42      	ittt	mi
 800a120:	6833      	ldrmi	r3, [r6, #0]
 800a122:	3302      	addmi	r3, #2
 800a124:	6033      	strmi	r3, [r6, #0]
 800a126:	6825      	ldr	r5, [r4, #0]
 800a128:	f015 0506 	ands.w	r5, r5, #6
 800a12c:	d106      	bne.n	800a13c <_printf_common+0x48>
 800a12e:	f104 0a19 	add.w	sl, r4, #25
 800a132:	68e3      	ldr	r3, [r4, #12]
 800a134:	6832      	ldr	r2, [r6, #0]
 800a136:	1a9b      	subs	r3, r3, r2
 800a138:	42ab      	cmp	r3, r5
 800a13a:	dc26      	bgt.n	800a18a <_printf_common+0x96>
 800a13c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a140:	6822      	ldr	r2, [r4, #0]
 800a142:	3b00      	subs	r3, #0
 800a144:	bf18      	it	ne
 800a146:	2301      	movne	r3, #1
 800a148:	0692      	lsls	r2, r2, #26
 800a14a:	d42b      	bmi.n	800a1a4 <_printf_common+0xb0>
 800a14c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a150:	4641      	mov	r1, r8
 800a152:	4638      	mov	r0, r7
 800a154:	47c8      	blx	r9
 800a156:	3001      	adds	r0, #1
 800a158:	d01e      	beq.n	800a198 <_printf_common+0xa4>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	6922      	ldr	r2, [r4, #16]
 800a15e:	f003 0306 	and.w	r3, r3, #6
 800a162:	2b04      	cmp	r3, #4
 800a164:	bf02      	ittt	eq
 800a166:	68e5      	ldreq	r5, [r4, #12]
 800a168:	6833      	ldreq	r3, [r6, #0]
 800a16a:	1aed      	subeq	r5, r5, r3
 800a16c:	68a3      	ldr	r3, [r4, #8]
 800a16e:	bf0c      	ite	eq
 800a170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a174:	2500      	movne	r5, #0
 800a176:	4293      	cmp	r3, r2
 800a178:	bfc4      	itt	gt
 800a17a:	1a9b      	subgt	r3, r3, r2
 800a17c:	18ed      	addgt	r5, r5, r3
 800a17e:	2600      	movs	r6, #0
 800a180:	341a      	adds	r4, #26
 800a182:	42b5      	cmp	r5, r6
 800a184:	d11a      	bne.n	800a1bc <_printf_common+0xc8>
 800a186:	2000      	movs	r0, #0
 800a188:	e008      	b.n	800a19c <_printf_common+0xa8>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4652      	mov	r2, sl
 800a18e:	4641      	mov	r1, r8
 800a190:	4638      	mov	r0, r7
 800a192:	47c8      	blx	r9
 800a194:	3001      	adds	r0, #1
 800a196:	d103      	bne.n	800a1a0 <_printf_common+0xac>
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a0:	3501      	adds	r5, #1
 800a1a2:	e7c6      	b.n	800a132 <_printf_common+0x3e>
 800a1a4:	18e1      	adds	r1, r4, r3
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	2030      	movs	r0, #48	@ 0x30
 800a1aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1ae:	4422      	add	r2, r4
 800a1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	e7c7      	b.n	800a14c <_printf_common+0x58>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4622      	mov	r2, r4
 800a1c0:	4641      	mov	r1, r8
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	47c8      	blx	r9
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d0e6      	beq.n	800a198 <_printf_common+0xa4>
 800a1ca:	3601      	adds	r6, #1
 800a1cc:	e7d9      	b.n	800a182 <_printf_common+0x8e>
	...

0800a1d0 <_printf_i>:
 800a1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	7e0f      	ldrb	r7, [r1, #24]
 800a1d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1d8:	2f78      	cmp	r7, #120	@ 0x78
 800a1da:	4691      	mov	r9, r2
 800a1dc:	4680      	mov	r8, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	469a      	mov	sl, r3
 800a1e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1e6:	d807      	bhi.n	800a1f8 <_printf_i+0x28>
 800a1e8:	2f62      	cmp	r7, #98	@ 0x62
 800a1ea:	d80a      	bhi.n	800a202 <_printf_i+0x32>
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	f000 80d2 	beq.w	800a396 <_printf_i+0x1c6>
 800a1f2:	2f58      	cmp	r7, #88	@ 0x58
 800a1f4:	f000 80b9 	beq.w	800a36a <_printf_i+0x19a>
 800a1f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a200:	e03a      	b.n	800a278 <_printf_i+0xa8>
 800a202:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a206:	2b15      	cmp	r3, #21
 800a208:	d8f6      	bhi.n	800a1f8 <_printf_i+0x28>
 800a20a:	a101      	add	r1, pc, #4	@ (adr r1, 800a210 <_printf_i+0x40>)
 800a20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a210:	0800a269 	.word	0x0800a269
 800a214:	0800a27d 	.word	0x0800a27d
 800a218:	0800a1f9 	.word	0x0800a1f9
 800a21c:	0800a1f9 	.word	0x0800a1f9
 800a220:	0800a1f9 	.word	0x0800a1f9
 800a224:	0800a1f9 	.word	0x0800a1f9
 800a228:	0800a27d 	.word	0x0800a27d
 800a22c:	0800a1f9 	.word	0x0800a1f9
 800a230:	0800a1f9 	.word	0x0800a1f9
 800a234:	0800a1f9 	.word	0x0800a1f9
 800a238:	0800a1f9 	.word	0x0800a1f9
 800a23c:	0800a37d 	.word	0x0800a37d
 800a240:	0800a2a7 	.word	0x0800a2a7
 800a244:	0800a337 	.word	0x0800a337
 800a248:	0800a1f9 	.word	0x0800a1f9
 800a24c:	0800a1f9 	.word	0x0800a1f9
 800a250:	0800a39f 	.word	0x0800a39f
 800a254:	0800a1f9 	.word	0x0800a1f9
 800a258:	0800a2a7 	.word	0x0800a2a7
 800a25c:	0800a1f9 	.word	0x0800a1f9
 800a260:	0800a1f9 	.word	0x0800a1f9
 800a264:	0800a33f 	.word	0x0800a33f
 800a268:	6833      	ldr	r3, [r6, #0]
 800a26a:	1d1a      	adds	r2, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6032      	str	r2, [r6, #0]
 800a270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a274:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a278:	2301      	movs	r3, #1
 800a27a:	e09d      	b.n	800a3b8 <_printf_i+0x1e8>
 800a27c:	6833      	ldr	r3, [r6, #0]
 800a27e:	6820      	ldr	r0, [r4, #0]
 800a280:	1d19      	adds	r1, r3, #4
 800a282:	6031      	str	r1, [r6, #0]
 800a284:	0606      	lsls	r6, r0, #24
 800a286:	d501      	bpl.n	800a28c <_printf_i+0xbc>
 800a288:	681d      	ldr	r5, [r3, #0]
 800a28a:	e003      	b.n	800a294 <_printf_i+0xc4>
 800a28c:	0645      	lsls	r5, r0, #25
 800a28e:	d5fb      	bpl.n	800a288 <_printf_i+0xb8>
 800a290:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a294:	2d00      	cmp	r5, #0
 800a296:	da03      	bge.n	800a2a0 <_printf_i+0xd0>
 800a298:	232d      	movs	r3, #45	@ 0x2d
 800a29a:	426d      	negs	r5, r5
 800a29c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2a0:	4859      	ldr	r0, [pc, #356]	@ (800a408 <_printf_i+0x238>)
 800a2a2:	230a      	movs	r3, #10
 800a2a4:	e011      	b.n	800a2ca <_printf_i+0xfa>
 800a2a6:	6821      	ldr	r1, [r4, #0]
 800a2a8:	6833      	ldr	r3, [r6, #0]
 800a2aa:	0608      	lsls	r0, r1, #24
 800a2ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2b0:	d402      	bmi.n	800a2b8 <_printf_i+0xe8>
 800a2b2:	0649      	lsls	r1, r1, #25
 800a2b4:	bf48      	it	mi
 800a2b6:	b2ad      	uxthmi	r5, r5
 800a2b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ba:	4853      	ldr	r0, [pc, #332]	@ (800a408 <_printf_i+0x238>)
 800a2bc:	6033      	str	r3, [r6, #0]
 800a2be:	bf14      	ite	ne
 800a2c0:	230a      	movne	r3, #10
 800a2c2:	2308      	moveq	r3, #8
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2ca:	6866      	ldr	r6, [r4, #4]
 800a2cc:	60a6      	str	r6, [r4, #8]
 800a2ce:	2e00      	cmp	r6, #0
 800a2d0:	bfa2      	ittt	ge
 800a2d2:	6821      	ldrge	r1, [r4, #0]
 800a2d4:	f021 0104 	bicge.w	r1, r1, #4
 800a2d8:	6021      	strge	r1, [r4, #0]
 800a2da:	b90d      	cbnz	r5, 800a2e0 <_printf_i+0x110>
 800a2dc:	2e00      	cmp	r6, #0
 800a2de:	d04b      	beq.n	800a378 <_printf_i+0x1a8>
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2e6:	fb03 5711 	mls	r7, r3, r1, r5
 800a2ea:	5dc7      	ldrb	r7, [r0, r7]
 800a2ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2f0:	462f      	mov	r7, r5
 800a2f2:	42bb      	cmp	r3, r7
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	d9f4      	bls.n	800a2e2 <_printf_i+0x112>
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d10b      	bne.n	800a314 <_printf_i+0x144>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	07df      	lsls	r7, r3, #31
 800a300:	d508      	bpl.n	800a314 <_printf_i+0x144>
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	6861      	ldr	r1, [r4, #4]
 800a306:	4299      	cmp	r1, r3
 800a308:	bfde      	ittt	le
 800a30a:	2330      	movle	r3, #48	@ 0x30
 800a30c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a310:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a314:	1b92      	subs	r2, r2, r6
 800a316:	6122      	str	r2, [r4, #16]
 800a318:	f8cd a000 	str.w	sl, [sp]
 800a31c:	464b      	mov	r3, r9
 800a31e:	aa03      	add	r2, sp, #12
 800a320:	4621      	mov	r1, r4
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fee6 	bl	800a0f4 <_printf_common>
 800a328:	3001      	adds	r0, #1
 800a32a:	d14a      	bne.n	800a3c2 <_printf_i+0x1f2>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b004      	add	sp, #16
 800a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	f043 0320 	orr.w	r3, r3, #32
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	4833      	ldr	r0, [pc, #204]	@ (800a40c <_printf_i+0x23c>)
 800a340:	2778      	movs	r7, #120	@ 0x78
 800a342:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	6831      	ldr	r1, [r6, #0]
 800a34a:	061f      	lsls	r7, r3, #24
 800a34c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a350:	d402      	bmi.n	800a358 <_printf_i+0x188>
 800a352:	065f      	lsls	r7, r3, #25
 800a354:	bf48      	it	mi
 800a356:	b2ad      	uxthmi	r5, r5
 800a358:	6031      	str	r1, [r6, #0]
 800a35a:	07d9      	lsls	r1, r3, #31
 800a35c:	bf44      	itt	mi
 800a35e:	f043 0320 	orrmi.w	r3, r3, #32
 800a362:	6023      	strmi	r3, [r4, #0]
 800a364:	b11d      	cbz	r5, 800a36e <_printf_i+0x19e>
 800a366:	2310      	movs	r3, #16
 800a368:	e7ac      	b.n	800a2c4 <_printf_i+0xf4>
 800a36a:	4827      	ldr	r0, [pc, #156]	@ (800a408 <_printf_i+0x238>)
 800a36c:	e7e9      	b.n	800a342 <_printf_i+0x172>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f023 0320 	bic.w	r3, r3, #32
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	e7f6      	b.n	800a366 <_printf_i+0x196>
 800a378:	4616      	mov	r6, r2
 800a37a:	e7bd      	b.n	800a2f8 <_printf_i+0x128>
 800a37c:	6833      	ldr	r3, [r6, #0]
 800a37e:	6825      	ldr	r5, [r4, #0]
 800a380:	6961      	ldr	r1, [r4, #20]
 800a382:	1d18      	adds	r0, r3, #4
 800a384:	6030      	str	r0, [r6, #0]
 800a386:	062e      	lsls	r6, r5, #24
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	d501      	bpl.n	800a390 <_printf_i+0x1c0>
 800a38c:	6019      	str	r1, [r3, #0]
 800a38e:	e002      	b.n	800a396 <_printf_i+0x1c6>
 800a390:	0668      	lsls	r0, r5, #25
 800a392:	d5fb      	bpl.n	800a38c <_printf_i+0x1bc>
 800a394:	8019      	strh	r1, [r3, #0]
 800a396:	2300      	movs	r3, #0
 800a398:	6123      	str	r3, [r4, #16]
 800a39a:	4616      	mov	r6, r2
 800a39c:	e7bc      	b.n	800a318 <_printf_i+0x148>
 800a39e:	6833      	ldr	r3, [r6, #0]
 800a3a0:	1d1a      	adds	r2, r3, #4
 800a3a2:	6032      	str	r2, [r6, #0]
 800a3a4:	681e      	ldr	r6, [r3, #0]
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7f5 ff30 	bl	8000210 <memchr>
 800a3b0:	b108      	cbz	r0, 800a3b6 <_printf_i+0x1e6>
 800a3b2:	1b80      	subs	r0, r0, r6
 800a3b4:	6060      	str	r0, [r4, #4]
 800a3b6:	6863      	ldr	r3, [r4, #4]
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c0:	e7aa      	b.n	800a318 <_printf_i+0x148>
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	47d0      	blx	sl
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	d0ad      	beq.n	800a32c <_printf_i+0x15c>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	079b      	lsls	r3, r3, #30
 800a3d4:	d413      	bmi.n	800a3fe <_printf_i+0x22e>
 800a3d6:	68e0      	ldr	r0, [r4, #12]
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	4298      	cmp	r0, r3
 800a3dc:	bfb8      	it	lt
 800a3de:	4618      	movlt	r0, r3
 800a3e0:	e7a6      	b.n	800a330 <_printf_i+0x160>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	47d0      	blx	sl
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d09d      	beq.n	800a32c <_printf_i+0x15c>
 800a3f0:	3501      	adds	r5, #1
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	9903      	ldr	r1, [sp, #12]
 800a3f6:	1a5b      	subs	r3, r3, r1
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dcf2      	bgt.n	800a3e2 <_printf_i+0x212>
 800a3fc:	e7eb      	b.n	800a3d6 <_printf_i+0x206>
 800a3fe:	2500      	movs	r5, #0
 800a400:	f104 0619 	add.w	r6, r4, #25
 800a404:	e7f5      	b.n	800a3f2 <_printf_i+0x222>
 800a406:	bf00      	nop
 800a408:	0800deae 	.word	0x0800deae
 800a40c:	0800debf 	.word	0x0800debf

0800a410 <__sflush_r>:
 800a410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a418:	0716      	lsls	r6, r2, #28
 800a41a:	4605      	mov	r5, r0
 800a41c:	460c      	mov	r4, r1
 800a41e:	d454      	bmi.n	800a4ca <__sflush_r+0xba>
 800a420:	684b      	ldr	r3, [r1, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dc02      	bgt.n	800a42c <__sflush_r+0x1c>
 800a426:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dd48      	ble.n	800a4be <__sflush_r+0xae>
 800a42c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a42e:	2e00      	cmp	r6, #0
 800a430:	d045      	beq.n	800a4be <__sflush_r+0xae>
 800a432:	2300      	movs	r3, #0
 800a434:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a438:	682f      	ldr	r7, [r5, #0]
 800a43a:	6a21      	ldr	r1, [r4, #32]
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	d030      	beq.n	800a4a2 <__sflush_r+0x92>
 800a440:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	0759      	lsls	r1, r3, #29
 800a446:	d505      	bpl.n	800a454 <__sflush_r+0x44>
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a44e:	b10b      	cbz	r3, 800a454 <__sflush_r+0x44>
 800a450:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a452:	1ad2      	subs	r2, r2, r3
 800a454:	2300      	movs	r3, #0
 800a456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a458:	6a21      	ldr	r1, [r4, #32]
 800a45a:	4628      	mov	r0, r5
 800a45c:	47b0      	blx	r6
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	d106      	bne.n	800a472 <__sflush_r+0x62>
 800a464:	6829      	ldr	r1, [r5, #0]
 800a466:	291d      	cmp	r1, #29
 800a468:	d82b      	bhi.n	800a4c2 <__sflush_r+0xb2>
 800a46a:	4a2a      	ldr	r2, [pc, #168]	@ (800a514 <__sflush_r+0x104>)
 800a46c:	410a      	asrs	r2, r1
 800a46e:	07d6      	lsls	r6, r2, #31
 800a470:	d427      	bmi.n	800a4c2 <__sflush_r+0xb2>
 800a472:	2200      	movs	r2, #0
 800a474:	6062      	str	r2, [r4, #4]
 800a476:	04d9      	lsls	r1, r3, #19
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	d504      	bpl.n	800a488 <__sflush_r+0x78>
 800a47e:	1c42      	adds	r2, r0, #1
 800a480:	d101      	bne.n	800a486 <__sflush_r+0x76>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b903      	cbnz	r3, 800a488 <__sflush_r+0x78>
 800a486:	6560      	str	r0, [r4, #84]	@ 0x54
 800a488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a48a:	602f      	str	r7, [r5, #0]
 800a48c:	b1b9      	cbz	r1, 800a4be <__sflush_r+0xae>
 800a48e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a492:	4299      	cmp	r1, r3
 800a494:	d002      	beq.n	800a49c <__sflush_r+0x8c>
 800a496:	4628      	mov	r0, r5
 800a498:	f001 f9fe 	bl	800b898 <_free_r>
 800a49c:	2300      	movs	r3, #0
 800a49e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4a0:	e00d      	b.n	800a4be <__sflush_r+0xae>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b0      	blx	r6
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	1c50      	adds	r0, r2, #1
 800a4ac:	d1c9      	bne.n	800a442 <__sflush_r+0x32>
 800a4ae:	682b      	ldr	r3, [r5, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0c6      	beq.n	800a442 <__sflush_r+0x32>
 800a4b4:	2b1d      	cmp	r3, #29
 800a4b6:	d001      	beq.n	800a4bc <__sflush_r+0xac>
 800a4b8:	2b16      	cmp	r3, #22
 800a4ba:	d11e      	bne.n	800a4fa <__sflush_r+0xea>
 800a4bc:	602f      	str	r7, [r5, #0]
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e022      	b.n	800a508 <__sflush_r+0xf8>
 800a4c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c6:	b21b      	sxth	r3, r3
 800a4c8:	e01b      	b.n	800a502 <__sflush_r+0xf2>
 800a4ca:	690f      	ldr	r7, [r1, #16]
 800a4cc:	2f00      	cmp	r7, #0
 800a4ce:	d0f6      	beq.n	800a4be <__sflush_r+0xae>
 800a4d0:	0793      	lsls	r3, r2, #30
 800a4d2:	680e      	ldr	r6, [r1, #0]
 800a4d4:	bf08      	it	eq
 800a4d6:	694b      	ldreq	r3, [r1, #20]
 800a4d8:	600f      	str	r7, [r1, #0]
 800a4da:	bf18      	it	ne
 800a4dc:	2300      	movne	r3, #0
 800a4de:	eba6 0807 	sub.w	r8, r6, r7
 800a4e2:	608b      	str	r3, [r1, #8]
 800a4e4:	f1b8 0f00 	cmp.w	r8, #0
 800a4e8:	dde9      	ble.n	800a4be <__sflush_r+0xae>
 800a4ea:	6a21      	ldr	r1, [r4, #32]
 800a4ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4ee:	4643      	mov	r3, r8
 800a4f0:	463a      	mov	r2, r7
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b0      	blx	r6
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	dc08      	bgt.n	800a50c <__sflush_r+0xfc>
 800a4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a50c:	4407      	add	r7, r0
 800a50e:	eba8 0800 	sub.w	r8, r8, r0
 800a512:	e7e7      	b.n	800a4e4 <__sflush_r+0xd4>
 800a514:	dfbffffe 	.word	0xdfbffffe

0800a518 <_fflush_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	690b      	ldr	r3, [r1, #16]
 800a51c:	4605      	mov	r5, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	b913      	cbnz	r3, 800a528 <_fflush_r+0x10>
 800a522:	2500      	movs	r5, #0
 800a524:	4628      	mov	r0, r5
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	b118      	cbz	r0, 800a532 <_fflush_r+0x1a>
 800a52a:	6a03      	ldr	r3, [r0, #32]
 800a52c:	b90b      	cbnz	r3, 800a532 <_fflush_r+0x1a>
 800a52e:	f000 f8bb 	bl	800a6a8 <__sinit>
 800a532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0f3      	beq.n	800a522 <_fflush_r+0xa>
 800a53a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a53c:	07d0      	lsls	r0, r2, #31
 800a53e:	d404      	bmi.n	800a54a <_fflush_r+0x32>
 800a540:	0599      	lsls	r1, r3, #22
 800a542:	d402      	bmi.n	800a54a <_fflush_r+0x32>
 800a544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a546:	f000 fb48 	bl	800abda <__retarget_lock_acquire_recursive>
 800a54a:	4628      	mov	r0, r5
 800a54c:	4621      	mov	r1, r4
 800a54e:	f7ff ff5f 	bl	800a410 <__sflush_r>
 800a552:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a554:	07da      	lsls	r2, r3, #31
 800a556:	4605      	mov	r5, r0
 800a558:	d4e4      	bmi.n	800a524 <_fflush_r+0xc>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	059b      	lsls	r3, r3, #22
 800a55e:	d4e1      	bmi.n	800a524 <_fflush_r+0xc>
 800a560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a562:	f000 fb3b 	bl	800abdc <__retarget_lock_release_recursive>
 800a566:	e7dd      	b.n	800a524 <_fflush_r+0xc>

0800a568 <fflush>:
 800a568:	4601      	mov	r1, r0
 800a56a:	b920      	cbnz	r0, 800a576 <fflush+0xe>
 800a56c:	4a04      	ldr	r2, [pc, #16]	@ (800a580 <fflush+0x18>)
 800a56e:	4905      	ldr	r1, [pc, #20]	@ (800a584 <fflush+0x1c>)
 800a570:	4805      	ldr	r0, [pc, #20]	@ (800a588 <fflush+0x20>)
 800a572:	f000 b8b1 	b.w	800a6d8 <_fwalk_sglue>
 800a576:	4b05      	ldr	r3, [pc, #20]	@ (800a58c <fflush+0x24>)
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f7ff bfcd 	b.w	800a518 <_fflush_r>
 800a57e:	bf00      	nop
 800a580:	20000014 	.word	0x20000014
 800a584:	0800a519 	.word	0x0800a519
 800a588:	20000024 	.word	0x20000024
 800a58c:	20000020 	.word	0x20000020

0800a590 <std>:
 800a590:	2300      	movs	r3, #0
 800a592:	b510      	push	{r4, lr}
 800a594:	4604      	mov	r4, r0
 800a596:	e9c0 3300 	strd	r3, r3, [r0]
 800a59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a59e:	6083      	str	r3, [r0, #8]
 800a5a0:	8181      	strh	r1, [r0, #12]
 800a5a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5a4:	81c2      	strh	r2, [r0, #14]
 800a5a6:	6183      	str	r3, [r0, #24]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	2208      	movs	r2, #8
 800a5ac:	305c      	adds	r0, #92	@ 0x5c
 800a5ae:	f000 fa2d 	bl	800aa0c <memset>
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e8 <std+0x58>)
 800a5b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <std+0x5c>)
 800a5b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <std+0x60>)
 800a5bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <std+0x64>)
 800a5c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f8 <std+0x68>)
 800a5c4:	6224      	str	r4, [r4, #32]
 800a5c6:	429c      	cmp	r4, r3
 800a5c8:	d006      	beq.n	800a5d8 <std+0x48>
 800a5ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5ce:	4294      	cmp	r4, r2
 800a5d0:	d002      	beq.n	800a5d8 <std+0x48>
 800a5d2:	33d0      	adds	r3, #208	@ 0xd0
 800a5d4:	429c      	cmp	r4, r3
 800a5d6:	d105      	bne.n	800a5e4 <std+0x54>
 800a5d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e0:	f000 bafa 	b.w	800abd8 <__retarget_lock_init_recursive>
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800a85d 	.word	0x0800a85d
 800a5ec:	0800a87f 	.word	0x0800a87f
 800a5f0:	0800a8b7 	.word	0x0800a8b7
 800a5f4:	0800a8db 	.word	0x0800a8db
 800a5f8:	20019d30 	.word	0x20019d30

0800a5fc <stdio_exit_handler>:
 800a5fc:	4a02      	ldr	r2, [pc, #8]	@ (800a608 <stdio_exit_handler+0xc>)
 800a5fe:	4903      	ldr	r1, [pc, #12]	@ (800a60c <stdio_exit_handler+0x10>)
 800a600:	4803      	ldr	r0, [pc, #12]	@ (800a610 <stdio_exit_handler+0x14>)
 800a602:	f000 b869 	b.w	800a6d8 <_fwalk_sglue>
 800a606:	bf00      	nop
 800a608:	20000014 	.word	0x20000014
 800a60c:	0800a519 	.word	0x0800a519
 800a610:	20000024 	.word	0x20000024

0800a614 <cleanup_stdio>:
 800a614:	6841      	ldr	r1, [r0, #4]
 800a616:	4b0c      	ldr	r3, [pc, #48]	@ (800a648 <cleanup_stdio+0x34>)
 800a618:	4299      	cmp	r1, r3
 800a61a:	b510      	push	{r4, lr}
 800a61c:	4604      	mov	r4, r0
 800a61e:	d001      	beq.n	800a624 <cleanup_stdio+0x10>
 800a620:	f7ff ff7a 	bl	800a518 <_fflush_r>
 800a624:	68a1      	ldr	r1, [r4, #8]
 800a626:	4b09      	ldr	r3, [pc, #36]	@ (800a64c <cleanup_stdio+0x38>)
 800a628:	4299      	cmp	r1, r3
 800a62a:	d002      	beq.n	800a632 <cleanup_stdio+0x1e>
 800a62c:	4620      	mov	r0, r4
 800a62e:	f7ff ff73 	bl	800a518 <_fflush_r>
 800a632:	68e1      	ldr	r1, [r4, #12]
 800a634:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <cleanup_stdio+0x3c>)
 800a636:	4299      	cmp	r1, r3
 800a638:	d004      	beq.n	800a644 <cleanup_stdio+0x30>
 800a63a:	4620      	mov	r0, r4
 800a63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a640:	f7ff bf6a 	b.w	800a518 <_fflush_r>
 800a644:	bd10      	pop	{r4, pc}
 800a646:	bf00      	nop
 800a648:	20019d30 	.word	0x20019d30
 800a64c:	20019d98 	.word	0x20019d98
 800a650:	20019e00 	.word	0x20019e00

0800a654 <global_stdio_init.part.0>:
 800a654:	b510      	push	{r4, lr}
 800a656:	4b0b      	ldr	r3, [pc, #44]	@ (800a684 <global_stdio_init.part.0+0x30>)
 800a658:	4c0b      	ldr	r4, [pc, #44]	@ (800a688 <global_stdio_init.part.0+0x34>)
 800a65a:	4a0c      	ldr	r2, [pc, #48]	@ (800a68c <global_stdio_init.part.0+0x38>)
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	4620      	mov	r0, r4
 800a660:	2200      	movs	r2, #0
 800a662:	2104      	movs	r1, #4
 800a664:	f7ff ff94 	bl	800a590 <std>
 800a668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a66c:	2201      	movs	r2, #1
 800a66e:	2109      	movs	r1, #9
 800a670:	f7ff ff8e 	bl	800a590 <std>
 800a674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a678:	2202      	movs	r2, #2
 800a67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67e:	2112      	movs	r1, #18
 800a680:	f7ff bf86 	b.w	800a590 <std>
 800a684:	20019e68 	.word	0x20019e68
 800a688:	20019d30 	.word	0x20019d30
 800a68c:	0800a5fd 	.word	0x0800a5fd

0800a690 <__sfp_lock_acquire>:
 800a690:	4801      	ldr	r0, [pc, #4]	@ (800a698 <__sfp_lock_acquire+0x8>)
 800a692:	f000 baa2 	b.w	800abda <__retarget_lock_acquire_recursive>
 800a696:	bf00      	nop
 800a698:	20019e71 	.word	0x20019e71

0800a69c <__sfp_lock_release>:
 800a69c:	4801      	ldr	r0, [pc, #4]	@ (800a6a4 <__sfp_lock_release+0x8>)
 800a69e:	f000 ba9d 	b.w	800abdc <__retarget_lock_release_recursive>
 800a6a2:	bf00      	nop
 800a6a4:	20019e71 	.word	0x20019e71

0800a6a8 <__sinit>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	f7ff fff0 	bl	800a690 <__sfp_lock_acquire>
 800a6b0:	6a23      	ldr	r3, [r4, #32]
 800a6b2:	b11b      	cbz	r3, 800a6bc <__sinit+0x14>
 800a6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b8:	f7ff bff0 	b.w	800a69c <__sfp_lock_release>
 800a6bc:	4b04      	ldr	r3, [pc, #16]	@ (800a6d0 <__sinit+0x28>)
 800a6be:	6223      	str	r3, [r4, #32]
 800a6c0:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <__sinit+0x2c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1f5      	bne.n	800a6b4 <__sinit+0xc>
 800a6c8:	f7ff ffc4 	bl	800a654 <global_stdio_init.part.0>
 800a6cc:	e7f2      	b.n	800a6b4 <__sinit+0xc>
 800a6ce:	bf00      	nop
 800a6d0:	0800a615 	.word	0x0800a615
 800a6d4:	20019e68 	.word	0x20019e68

0800a6d8 <_fwalk_sglue>:
 800a6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6dc:	4607      	mov	r7, r0
 800a6de:	4688      	mov	r8, r1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	2600      	movs	r6, #0
 800a6e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e8:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ec:	d505      	bpl.n	800a6fa <_fwalk_sglue+0x22>
 800a6ee:	6824      	ldr	r4, [r4, #0]
 800a6f0:	2c00      	cmp	r4, #0
 800a6f2:	d1f7      	bne.n	800a6e4 <_fwalk_sglue+0xc>
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d907      	bls.n	800a710 <_fwalk_sglue+0x38>
 800a700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a704:	3301      	adds	r3, #1
 800a706:	d003      	beq.n	800a710 <_fwalk_sglue+0x38>
 800a708:	4629      	mov	r1, r5
 800a70a:	4638      	mov	r0, r7
 800a70c:	47c0      	blx	r8
 800a70e:	4306      	orrs	r6, r0
 800a710:	3568      	adds	r5, #104	@ 0x68
 800a712:	e7e9      	b.n	800a6e8 <_fwalk_sglue+0x10>

0800a714 <iprintf>:
 800a714:	b40f      	push	{r0, r1, r2, r3}
 800a716:	b507      	push	{r0, r1, r2, lr}
 800a718:	4906      	ldr	r1, [pc, #24]	@ (800a734 <iprintf+0x20>)
 800a71a:	ab04      	add	r3, sp, #16
 800a71c:	6808      	ldr	r0, [r1, #0]
 800a71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a722:	6881      	ldr	r1, [r0, #8]
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	f001 febb 	bl	800c4a0 <_vfiprintf_r>
 800a72a:	b003      	add	sp, #12
 800a72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a730:	b004      	add	sp, #16
 800a732:	4770      	bx	lr
 800a734:	20000020 	.word	0x20000020

0800a738 <_puts_r>:
 800a738:	6a03      	ldr	r3, [r0, #32]
 800a73a:	b570      	push	{r4, r5, r6, lr}
 800a73c:	6884      	ldr	r4, [r0, #8]
 800a73e:	4605      	mov	r5, r0
 800a740:	460e      	mov	r6, r1
 800a742:	b90b      	cbnz	r3, 800a748 <_puts_r+0x10>
 800a744:	f7ff ffb0 	bl	800a6a8 <__sinit>
 800a748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a74a:	07db      	lsls	r3, r3, #31
 800a74c:	d405      	bmi.n	800a75a <_puts_r+0x22>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	0598      	lsls	r0, r3, #22
 800a752:	d402      	bmi.n	800a75a <_puts_r+0x22>
 800a754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a756:	f000 fa40 	bl	800abda <__retarget_lock_acquire_recursive>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	0719      	lsls	r1, r3, #28
 800a75e:	d502      	bpl.n	800a766 <_puts_r+0x2e>
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d135      	bne.n	800a7d2 <_puts_r+0x9a>
 800a766:	4621      	mov	r1, r4
 800a768:	4628      	mov	r0, r5
 800a76a:	f000 f8f9 	bl	800a960 <__swsetup_r>
 800a76e:	b380      	cbz	r0, 800a7d2 <_puts_r+0x9a>
 800a770:	f04f 35ff 	mov.w	r5, #4294967295
 800a774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a776:	07da      	lsls	r2, r3, #31
 800a778:	d405      	bmi.n	800a786 <_puts_r+0x4e>
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	059b      	lsls	r3, r3, #22
 800a77e:	d402      	bmi.n	800a786 <_puts_r+0x4e>
 800a780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a782:	f000 fa2b 	bl	800abdc <__retarget_lock_release_recursive>
 800a786:	4628      	mov	r0, r5
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da04      	bge.n	800a798 <_puts_r+0x60>
 800a78e:	69a2      	ldr	r2, [r4, #24]
 800a790:	429a      	cmp	r2, r3
 800a792:	dc17      	bgt.n	800a7c4 <_puts_r+0x8c>
 800a794:	290a      	cmp	r1, #10
 800a796:	d015      	beq.n	800a7c4 <_puts_r+0x8c>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	6022      	str	r2, [r4, #0]
 800a79e:	7019      	strb	r1, [r3, #0]
 800a7a0:	68a3      	ldr	r3, [r4, #8]
 800a7a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	60a3      	str	r3, [r4, #8]
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	d1ed      	bne.n	800a78a <_puts_r+0x52>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	da11      	bge.n	800a7d6 <_puts_r+0x9e>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	210a      	movs	r1, #10
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f893 	bl	800a8e2 <__swbuf_r>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d0d7      	beq.n	800a770 <_puts_r+0x38>
 800a7c0:	250a      	movs	r5, #10
 800a7c2:	e7d7      	b.n	800a774 <_puts_r+0x3c>
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f88b 	bl	800a8e2 <__swbuf_r>
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	d1e7      	bne.n	800a7a0 <_puts_r+0x68>
 800a7d0:	e7ce      	b.n	800a770 <_puts_r+0x38>
 800a7d2:	3e01      	subs	r6, #1
 800a7d4:	e7e4      	b.n	800a7a0 <_puts_r+0x68>
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	6022      	str	r2, [r4, #0]
 800a7dc:	220a      	movs	r2, #10
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	e7ee      	b.n	800a7c0 <_puts_r+0x88>
	...

0800a7e4 <puts>:
 800a7e4:	4b02      	ldr	r3, [pc, #8]	@ (800a7f0 <puts+0xc>)
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	f7ff bfa5 	b.w	800a738 <_puts_r>
 800a7ee:	bf00      	nop
 800a7f0:	20000020 	.word	0x20000020

0800a7f4 <sniprintf>:
 800a7f4:	b40c      	push	{r2, r3}
 800a7f6:	b530      	push	{r4, r5, lr}
 800a7f8:	4b17      	ldr	r3, [pc, #92]	@ (800a858 <sniprintf+0x64>)
 800a7fa:	1e0c      	subs	r4, r1, #0
 800a7fc:	681d      	ldr	r5, [r3, #0]
 800a7fe:	b09d      	sub	sp, #116	@ 0x74
 800a800:	da08      	bge.n	800a814 <sniprintf+0x20>
 800a802:	238b      	movs	r3, #139	@ 0x8b
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f04f 30ff 	mov.w	r0, #4294967295
 800a80a:	b01d      	add	sp, #116	@ 0x74
 800a80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a810:	b002      	add	sp, #8
 800a812:	4770      	bx	lr
 800a814:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a818:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a81c:	bf14      	ite	ne
 800a81e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a822:	4623      	moveq	r3, r4
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	9307      	str	r3, [sp, #28]
 800a828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a82c:	9002      	str	r0, [sp, #8]
 800a82e:	9006      	str	r0, [sp, #24]
 800a830:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a834:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a836:	ab21      	add	r3, sp, #132	@ 0x84
 800a838:	a902      	add	r1, sp, #8
 800a83a:	4628      	mov	r0, r5
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	f001 fd09 	bl	800c254 <_svfiprintf_r>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	bfbc      	itt	lt
 800a846:	238b      	movlt	r3, #139	@ 0x8b
 800a848:	602b      	strlt	r3, [r5, #0]
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	d0dd      	beq.n	800a80a <sniprintf+0x16>
 800a84e:	9b02      	ldr	r3, [sp, #8]
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]
 800a854:	e7d9      	b.n	800a80a <sniprintf+0x16>
 800a856:	bf00      	nop
 800a858:	20000020 	.word	0x20000020

0800a85c <__sread>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	460c      	mov	r4, r1
 800a860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a864:	f000 f96a 	bl	800ab3c <_read_r>
 800a868:	2800      	cmp	r0, #0
 800a86a:	bfab      	itete	ge
 800a86c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a86e:	89a3      	ldrhlt	r3, [r4, #12]
 800a870:	181b      	addge	r3, r3, r0
 800a872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a876:	bfac      	ite	ge
 800a878:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a87a:	81a3      	strhlt	r3, [r4, #12]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__swrite>:
 800a87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	461f      	mov	r7, r3
 800a884:	898b      	ldrh	r3, [r1, #12]
 800a886:	05db      	lsls	r3, r3, #23
 800a888:	4605      	mov	r5, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4616      	mov	r6, r2
 800a88e:	d505      	bpl.n	800a89c <__swrite+0x1e>
 800a890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a894:	2302      	movs	r3, #2
 800a896:	2200      	movs	r2, #0
 800a898:	f000 f93e 	bl	800ab18 <_lseek_r>
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	463b      	mov	r3, r7
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b2:	f000 b955 	b.w	800ab60 <_write_r>

0800a8b6 <__sseek>:
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8be:	f000 f92b 	bl	800ab18 <_lseek_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	bf15      	itete	ne
 800a8c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8d2:	81a3      	strheq	r3, [r4, #12]
 800a8d4:	bf18      	it	ne
 800a8d6:	81a3      	strhne	r3, [r4, #12]
 800a8d8:	bd10      	pop	{r4, pc}

0800a8da <__sclose>:
 800a8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8de:	f000 b8b5 	b.w	800aa4c <_close_r>

0800a8e2 <__swbuf_r>:
 800a8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e4:	460e      	mov	r6, r1
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	b118      	cbz	r0, 800a8f4 <__swbuf_r+0x12>
 800a8ec:	6a03      	ldr	r3, [r0, #32]
 800a8ee:	b90b      	cbnz	r3, 800a8f4 <__swbuf_r+0x12>
 800a8f0:	f7ff feda 	bl	800a6a8 <__sinit>
 800a8f4:	69a3      	ldr	r3, [r4, #24]
 800a8f6:	60a3      	str	r3, [r4, #8]
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	071a      	lsls	r2, r3, #28
 800a8fc:	d501      	bpl.n	800a902 <__swbuf_r+0x20>
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	b943      	cbnz	r3, 800a914 <__swbuf_r+0x32>
 800a902:	4621      	mov	r1, r4
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f82b 	bl	800a960 <__swsetup_r>
 800a90a:	b118      	cbz	r0, 800a914 <__swbuf_r+0x32>
 800a90c:	f04f 37ff 	mov.w	r7, #4294967295
 800a910:	4638      	mov	r0, r7
 800a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	6922      	ldr	r2, [r4, #16]
 800a918:	1a98      	subs	r0, r3, r2
 800a91a:	6963      	ldr	r3, [r4, #20]
 800a91c:	b2f6      	uxtb	r6, r6
 800a91e:	4283      	cmp	r3, r0
 800a920:	4637      	mov	r7, r6
 800a922:	dc05      	bgt.n	800a930 <__swbuf_r+0x4e>
 800a924:	4621      	mov	r1, r4
 800a926:	4628      	mov	r0, r5
 800a928:	f7ff fdf6 	bl	800a518 <_fflush_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d1ed      	bne.n	800a90c <__swbuf_r+0x2a>
 800a930:	68a3      	ldr	r3, [r4, #8]
 800a932:	3b01      	subs	r3, #1
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	701e      	strb	r6, [r3, #0]
 800a93e:	6962      	ldr	r2, [r4, #20]
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	429a      	cmp	r2, r3
 800a944:	d004      	beq.n	800a950 <__swbuf_r+0x6e>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	07db      	lsls	r3, r3, #31
 800a94a:	d5e1      	bpl.n	800a910 <__swbuf_r+0x2e>
 800a94c:	2e0a      	cmp	r6, #10
 800a94e:	d1df      	bne.n	800a910 <__swbuf_r+0x2e>
 800a950:	4621      	mov	r1, r4
 800a952:	4628      	mov	r0, r5
 800a954:	f7ff fde0 	bl	800a518 <_fflush_r>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d0d9      	beq.n	800a910 <__swbuf_r+0x2e>
 800a95c:	e7d6      	b.n	800a90c <__swbuf_r+0x2a>
	...

0800a960 <__swsetup_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4b29      	ldr	r3, [pc, #164]	@ (800aa08 <__swsetup_r+0xa8>)
 800a964:	4605      	mov	r5, r0
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	460c      	mov	r4, r1
 800a96a:	b118      	cbz	r0, 800a974 <__swsetup_r+0x14>
 800a96c:	6a03      	ldr	r3, [r0, #32]
 800a96e:	b90b      	cbnz	r3, 800a974 <__swsetup_r+0x14>
 800a970:	f7ff fe9a 	bl	800a6a8 <__sinit>
 800a974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a978:	0719      	lsls	r1, r3, #28
 800a97a:	d422      	bmi.n	800a9c2 <__swsetup_r+0x62>
 800a97c:	06da      	lsls	r2, r3, #27
 800a97e:	d407      	bmi.n	800a990 <__swsetup_r+0x30>
 800a980:	2209      	movs	r2, #9
 800a982:	602a      	str	r2, [r5, #0]
 800a984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	f04f 30ff 	mov.w	r0, #4294967295
 800a98e:	e033      	b.n	800a9f8 <__swsetup_r+0x98>
 800a990:	0758      	lsls	r0, r3, #29
 800a992:	d512      	bpl.n	800a9ba <__swsetup_r+0x5a>
 800a994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a996:	b141      	cbz	r1, 800a9aa <__swsetup_r+0x4a>
 800a998:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a99c:	4299      	cmp	r1, r3
 800a99e:	d002      	beq.n	800a9a6 <__swsetup_r+0x46>
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f000 ff79 	bl	800b898 <_free_r>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f043 0308 	orr.w	r3, r3, #8
 800a9c0:	81a3      	strh	r3, [r4, #12]
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	b94b      	cbnz	r3, 800a9da <__swsetup_r+0x7a>
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d0:	d003      	beq.n	800a9da <__swsetup_r+0x7a>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f001 fea1 	bl	800c71c <__smakebuf_r>
 800a9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9de:	f013 0201 	ands.w	r2, r3, #1
 800a9e2:	d00a      	beq.n	800a9fa <__swsetup_r+0x9a>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	60a2      	str	r2, [r4, #8]
 800a9e8:	6962      	ldr	r2, [r4, #20]
 800a9ea:	4252      	negs	r2, r2
 800a9ec:	61a2      	str	r2, [r4, #24]
 800a9ee:	6922      	ldr	r2, [r4, #16]
 800a9f0:	b942      	cbnz	r2, 800aa04 <__swsetup_r+0xa4>
 800a9f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9f6:	d1c5      	bne.n	800a984 <__swsetup_r+0x24>
 800a9f8:	bd38      	pop	{r3, r4, r5, pc}
 800a9fa:	0799      	lsls	r1, r3, #30
 800a9fc:	bf58      	it	pl
 800a9fe:	6962      	ldrpl	r2, [r4, #20]
 800aa00:	60a2      	str	r2, [r4, #8]
 800aa02:	e7f4      	b.n	800a9ee <__swsetup_r+0x8e>
 800aa04:	2000      	movs	r0, #0
 800aa06:	e7f7      	b.n	800a9f8 <__swsetup_r+0x98>
 800aa08:	20000020 	.word	0x20000020

0800aa0c <memset>:
 800aa0c:	4402      	add	r2, r0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d100      	bne.n	800aa16 <memset+0xa>
 800aa14:	4770      	bx	lr
 800aa16:	f803 1b01 	strb.w	r1, [r3], #1
 800aa1a:	e7f9      	b.n	800aa10 <memset+0x4>

0800aa1c <strncpy>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	3901      	subs	r1, #1
 800aa20:	4603      	mov	r3, r0
 800aa22:	b132      	cbz	r2, 800aa32 <strncpy+0x16>
 800aa24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa28:	f803 4b01 	strb.w	r4, [r3], #1
 800aa2c:	3a01      	subs	r2, #1
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d1f7      	bne.n	800aa22 <strncpy+0x6>
 800aa32:	441a      	add	r2, r3
 800aa34:	2100      	movs	r1, #0
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d100      	bne.n	800aa3c <strncpy+0x20>
 800aa3a:	bd10      	pop	{r4, pc}
 800aa3c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa40:	e7f9      	b.n	800aa36 <strncpy+0x1a>
	...

0800aa44 <_localeconv_r>:
 800aa44:	4800      	ldr	r0, [pc, #0]	@ (800aa48 <_localeconv_r+0x4>)
 800aa46:	4770      	bx	lr
 800aa48:	20000160 	.word	0x20000160

0800aa4c <_close_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	@ (800aa68 <_close_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f8 f9ae 	bl	8002db8 <_close>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_close_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_close_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	20019e6c 	.word	0x20019e6c

0800aa6c <_reclaim_reent>:
 800aa6c:	4b29      	ldr	r3, [pc, #164]	@ (800ab14 <_reclaim_reent+0xa8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4283      	cmp	r3, r0
 800aa72:	b570      	push	{r4, r5, r6, lr}
 800aa74:	4604      	mov	r4, r0
 800aa76:	d04b      	beq.n	800ab10 <_reclaim_reent+0xa4>
 800aa78:	69c3      	ldr	r3, [r0, #28]
 800aa7a:	b1ab      	cbz	r3, 800aaa8 <_reclaim_reent+0x3c>
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	b16b      	cbz	r3, 800aa9c <_reclaim_reent+0x30>
 800aa80:	2500      	movs	r5, #0
 800aa82:	69e3      	ldr	r3, [r4, #28]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	5959      	ldr	r1, [r3, r5]
 800aa88:	2900      	cmp	r1, #0
 800aa8a:	d13b      	bne.n	800ab04 <_reclaim_reent+0x98>
 800aa8c:	3504      	adds	r5, #4
 800aa8e:	2d80      	cmp	r5, #128	@ 0x80
 800aa90:	d1f7      	bne.n	800aa82 <_reclaim_reent+0x16>
 800aa92:	69e3      	ldr	r3, [r4, #28]
 800aa94:	4620      	mov	r0, r4
 800aa96:	68d9      	ldr	r1, [r3, #12]
 800aa98:	f000 fefe 	bl	800b898 <_free_r>
 800aa9c:	69e3      	ldr	r3, [r4, #28]
 800aa9e:	6819      	ldr	r1, [r3, #0]
 800aaa0:	b111      	cbz	r1, 800aaa8 <_reclaim_reent+0x3c>
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fef8 	bl	800b898 <_free_r>
 800aaa8:	6961      	ldr	r1, [r4, #20]
 800aaaa:	b111      	cbz	r1, 800aab2 <_reclaim_reent+0x46>
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 fef3 	bl	800b898 <_free_r>
 800aab2:	69e1      	ldr	r1, [r4, #28]
 800aab4:	b111      	cbz	r1, 800aabc <_reclaim_reent+0x50>
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 feee 	bl	800b898 <_free_r>
 800aabc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aabe:	b111      	cbz	r1, 800aac6 <_reclaim_reent+0x5a>
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fee9 	bl	800b898 <_free_r>
 800aac6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aac8:	b111      	cbz	r1, 800aad0 <_reclaim_reent+0x64>
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fee4 	bl	800b898 <_free_r>
 800aad0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aad2:	b111      	cbz	r1, 800aada <_reclaim_reent+0x6e>
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 fedf 	bl	800b898 <_free_r>
 800aada:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aadc:	b111      	cbz	r1, 800aae4 <_reclaim_reent+0x78>
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 feda 	bl	800b898 <_free_r>
 800aae4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aae6:	b111      	cbz	r1, 800aaee <_reclaim_reent+0x82>
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fed5 	bl	800b898 <_free_r>
 800aaee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aaf0:	b111      	cbz	r1, 800aaf8 <_reclaim_reent+0x8c>
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 fed0 	bl	800b898 <_free_r>
 800aaf8:	6a23      	ldr	r3, [r4, #32]
 800aafa:	b14b      	cbz	r3, 800ab10 <_reclaim_reent+0xa4>
 800aafc:	4620      	mov	r0, r4
 800aafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab02:	4718      	bx	r3
 800ab04:	680e      	ldr	r6, [r1, #0]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fec6 	bl	800b898 <_free_r>
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	e7bb      	b.n	800aa88 <_reclaim_reent+0x1c>
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
 800ab12:	bf00      	nop
 800ab14:	20000020 	.word	0x20000020

0800ab18 <_lseek_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d07      	ldr	r5, [pc, #28]	@ (800ab38 <_lseek_r+0x20>)
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	4608      	mov	r0, r1
 800ab20:	4611      	mov	r1, r2
 800ab22:	2200      	movs	r2, #0
 800ab24:	602a      	str	r2, [r5, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	f7f8 f96d 	bl	8002e06 <_lseek>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d102      	bne.n	800ab36 <_lseek_r+0x1e>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	b103      	cbz	r3, 800ab36 <_lseek_r+0x1e>
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	20019e6c 	.word	0x20019e6c

0800ab3c <_read_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d07      	ldr	r5, [pc, #28]	@ (800ab5c <_read_r+0x20>)
 800ab40:	4604      	mov	r4, r0
 800ab42:	4608      	mov	r0, r1
 800ab44:	4611      	mov	r1, r2
 800ab46:	2200      	movs	r2, #0
 800ab48:	602a      	str	r2, [r5, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f7f8 f8fb 	bl	8002d46 <_read>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_read_r+0x1e>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_read_r+0x1e>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	20019e6c 	.word	0x20019e6c

0800ab60 <_write_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	@ (800ab80 <_write_r+0x20>)
 800ab64:	4604      	mov	r4, r0
 800ab66:	4608      	mov	r0, r1
 800ab68:	4611      	mov	r1, r2
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	602a      	str	r2, [r5, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f7f8 f906 	bl	8002d80 <_write>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_write_r+0x1e>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_write_r+0x1e>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	20019e6c 	.word	0x20019e6c

0800ab84 <__errno>:
 800ab84:	4b01      	ldr	r3, [pc, #4]	@ (800ab8c <__errno+0x8>)
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	20000020 	.word	0x20000020

0800ab90 <__libc_init_array>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	4d0d      	ldr	r5, [pc, #52]	@ (800abc8 <__libc_init_array+0x38>)
 800ab94:	4c0d      	ldr	r4, [pc, #52]	@ (800abcc <__libc_init_array+0x3c>)
 800ab96:	1b64      	subs	r4, r4, r5
 800ab98:	10a4      	asrs	r4, r4, #2
 800ab9a:	2600      	movs	r6, #0
 800ab9c:	42a6      	cmp	r6, r4
 800ab9e:	d109      	bne.n	800abb4 <__libc_init_array+0x24>
 800aba0:	4d0b      	ldr	r5, [pc, #44]	@ (800abd0 <__libc_init_array+0x40>)
 800aba2:	4c0c      	ldr	r4, [pc, #48]	@ (800abd4 <__libc_init_array+0x44>)
 800aba4:	f001 ff28 	bl	800c9f8 <_init>
 800aba8:	1b64      	subs	r4, r4, r5
 800abaa:	10a4      	asrs	r4, r4, #2
 800abac:	2600      	movs	r6, #0
 800abae:	42a6      	cmp	r6, r4
 800abb0:	d105      	bne.n	800abbe <__libc_init_array+0x2e>
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb8:	4798      	blx	r3
 800abba:	3601      	adds	r6, #1
 800abbc:	e7ee      	b.n	800ab9c <__libc_init_array+0xc>
 800abbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc2:	4798      	blx	r3
 800abc4:	3601      	adds	r6, #1
 800abc6:	e7f2      	b.n	800abae <__libc_init_array+0x1e>
 800abc8:	0800e218 	.word	0x0800e218
 800abcc:	0800e218 	.word	0x0800e218
 800abd0:	0800e218 	.word	0x0800e218
 800abd4:	0800e21c 	.word	0x0800e21c

0800abd8 <__retarget_lock_init_recursive>:
 800abd8:	4770      	bx	lr

0800abda <__retarget_lock_acquire_recursive>:
 800abda:	4770      	bx	lr

0800abdc <__retarget_lock_release_recursive>:
 800abdc:	4770      	bx	lr

0800abde <memcpy>:
 800abde:	440a      	add	r2, r1
 800abe0:	4291      	cmp	r1, r2
 800abe2:	f100 33ff 	add.w	r3, r0, #4294967295
 800abe6:	d100      	bne.n	800abea <memcpy+0xc>
 800abe8:	4770      	bx	lr
 800abea:	b510      	push	{r4, lr}
 800abec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abf4:	4291      	cmp	r1, r2
 800abf6:	d1f9      	bne.n	800abec <memcpy+0xe>
 800abf8:	bd10      	pop	{r4, pc}

0800abfa <quorem>:
 800abfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfe:	6903      	ldr	r3, [r0, #16]
 800ac00:	690c      	ldr	r4, [r1, #16]
 800ac02:	42a3      	cmp	r3, r4
 800ac04:	4607      	mov	r7, r0
 800ac06:	db7e      	blt.n	800ad06 <quorem+0x10c>
 800ac08:	3c01      	subs	r4, #1
 800ac0a:	f101 0814 	add.w	r8, r1, #20
 800ac0e:	00a3      	lsls	r3, r4, #2
 800ac10:	f100 0514 	add.w	r5, r0, #20
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac24:	3301      	adds	r3, #1
 800ac26:	429a      	cmp	r2, r3
 800ac28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac2c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac30:	d32e      	bcc.n	800ac90 <quorem+0x96>
 800ac32:	f04f 0a00 	mov.w	sl, #0
 800ac36:	46c4      	mov	ip, r8
 800ac38:	46ae      	mov	lr, r5
 800ac3a:	46d3      	mov	fp, sl
 800ac3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac40:	b298      	uxth	r0, r3
 800ac42:	fb06 a000 	mla	r0, r6, r0, sl
 800ac46:	0c02      	lsrs	r2, r0, #16
 800ac48:	0c1b      	lsrs	r3, r3, #16
 800ac4a:	fb06 2303 	mla	r3, r6, r3, r2
 800ac4e:	f8de 2000 	ldr.w	r2, [lr]
 800ac52:	b280      	uxth	r0, r0
 800ac54:	b292      	uxth	r2, r2
 800ac56:	1a12      	subs	r2, r2, r0
 800ac58:	445a      	add	r2, fp
 800ac5a:	f8de 0000 	ldr.w	r0, [lr]
 800ac5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac6c:	b292      	uxth	r2, r2
 800ac6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac72:	45e1      	cmp	r9, ip
 800ac74:	f84e 2b04 	str.w	r2, [lr], #4
 800ac78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac7c:	d2de      	bcs.n	800ac3c <quorem+0x42>
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	58eb      	ldr	r3, [r5, r3]
 800ac82:	b92b      	cbnz	r3, 800ac90 <quorem+0x96>
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	3b04      	subs	r3, #4
 800ac88:	429d      	cmp	r5, r3
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	d32f      	bcc.n	800acee <quorem+0xf4>
 800ac8e:	613c      	str	r4, [r7, #16]
 800ac90:	4638      	mov	r0, r7
 800ac92:	f001 f97b 	bl	800bf8c <__mcmp>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	db25      	blt.n	800ace6 <quorem+0xec>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	f858 2b04 	ldr.w	r2, [r8], #4
 800aca2:	f8d1 c000 	ldr.w	ip, [r1]
 800aca6:	fa1f fe82 	uxth.w	lr, r2
 800acaa:	fa1f f38c 	uxth.w	r3, ip
 800acae:	eba3 030e 	sub.w	r3, r3, lr
 800acb2:	4403      	add	r3, r0
 800acb4:	0c12      	lsrs	r2, r2, #16
 800acb6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800acba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc4:	45c1      	cmp	r9, r8
 800acc6:	f841 3b04 	str.w	r3, [r1], #4
 800acca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acce:	d2e6      	bcs.n	800ac9e <quorem+0xa4>
 800acd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd8:	b922      	cbnz	r2, 800ace4 <quorem+0xea>
 800acda:	3b04      	subs	r3, #4
 800acdc:	429d      	cmp	r5, r3
 800acde:	461a      	mov	r2, r3
 800ace0:	d30b      	bcc.n	800acfa <quorem+0x100>
 800ace2:	613c      	str	r4, [r7, #16]
 800ace4:	3601      	adds	r6, #1
 800ace6:	4630      	mov	r0, r6
 800ace8:	b003      	add	sp, #12
 800acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acee:	6812      	ldr	r2, [r2, #0]
 800acf0:	3b04      	subs	r3, #4
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d1cb      	bne.n	800ac8e <quorem+0x94>
 800acf6:	3c01      	subs	r4, #1
 800acf8:	e7c6      	b.n	800ac88 <quorem+0x8e>
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	3b04      	subs	r3, #4
 800acfe:	2a00      	cmp	r2, #0
 800ad00:	d1ef      	bne.n	800ace2 <quorem+0xe8>
 800ad02:	3c01      	subs	r4, #1
 800ad04:	e7ea      	b.n	800acdc <quorem+0xe2>
 800ad06:	2000      	movs	r0, #0
 800ad08:	e7ee      	b.n	800ace8 <quorem+0xee>
 800ad0a:	0000      	movs	r0, r0
 800ad0c:	0000      	movs	r0, r0
	...

0800ad10 <_dtoa_r>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	69c7      	ldr	r7, [r0, #28]
 800ad16:	b099      	sub	sp, #100	@ 0x64
 800ad18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad1c:	ec55 4b10 	vmov	r4, r5, d0
 800ad20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ad22:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad24:	4683      	mov	fp, r0
 800ad26:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad2a:	b97f      	cbnz	r7, 800ad4c <_dtoa_r+0x3c>
 800ad2c:	2010      	movs	r0, #16
 800ad2e:	f000 fdfd 	bl	800b92c <malloc>
 800ad32:	4602      	mov	r2, r0
 800ad34:	f8cb 001c 	str.w	r0, [fp, #28]
 800ad38:	b920      	cbnz	r0, 800ad44 <_dtoa_r+0x34>
 800ad3a:	4ba7      	ldr	r3, [pc, #668]	@ (800afd8 <_dtoa_r+0x2c8>)
 800ad3c:	21ef      	movs	r1, #239	@ 0xef
 800ad3e:	48a7      	ldr	r0, [pc, #668]	@ (800afdc <_dtoa_r+0x2cc>)
 800ad40:	f001 fd74 	bl	800c82c <__assert_func>
 800ad44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ad48:	6007      	str	r7, [r0, #0]
 800ad4a:	60c7      	str	r7, [r0, #12]
 800ad4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad50:	6819      	ldr	r1, [r3, #0]
 800ad52:	b159      	cbz	r1, 800ad6c <_dtoa_r+0x5c>
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	604a      	str	r2, [r1, #4]
 800ad58:	2301      	movs	r3, #1
 800ad5a:	4093      	lsls	r3, r2
 800ad5c:	608b      	str	r3, [r1, #8]
 800ad5e:	4658      	mov	r0, fp
 800ad60:	f000 feda 	bl	800bb18 <_Bfree>
 800ad64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	1e2b      	subs	r3, r5, #0
 800ad6e:	bfb9      	ittee	lt
 800ad70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad74:	9303      	strlt	r3, [sp, #12]
 800ad76:	2300      	movge	r3, #0
 800ad78:	6033      	strge	r3, [r6, #0]
 800ad7a:	9f03      	ldr	r7, [sp, #12]
 800ad7c:	4b98      	ldr	r3, [pc, #608]	@ (800afe0 <_dtoa_r+0x2d0>)
 800ad7e:	bfbc      	itt	lt
 800ad80:	2201      	movlt	r2, #1
 800ad82:	6032      	strlt	r2, [r6, #0]
 800ad84:	43bb      	bics	r3, r7
 800ad86:	d112      	bne.n	800adae <_dtoa_r+0x9e>
 800ad88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad94:	4323      	orrs	r3, r4
 800ad96:	f000 854d 	beq.w	800b834 <_dtoa_r+0xb24>
 800ad9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aff4 <_dtoa_r+0x2e4>
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 854f 	beq.w	800b844 <_dtoa_r+0xb34>
 800ada6:	f10a 0303 	add.w	r3, sl, #3
 800adaa:	f000 bd49 	b.w	800b840 <_dtoa_r+0xb30>
 800adae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adb2:	2200      	movs	r2, #0
 800adb4:	ec51 0b17 	vmov	r0, r1, d7
 800adb8:	2300      	movs	r3, #0
 800adba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800adbe:	f7f5 fea3 	bl	8000b08 <__aeabi_dcmpeq>
 800adc2:	4680      	mov	r8, r0
 800adc4:	b158      	cbz	r0, 800adde <_dtoa_r+0xce>
 800adc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800adc8:	2301      	movs	r3, #1
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adce:	b113      	cbz	r3, 800add6 <_dtoa_r+0xc6>
 800add0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800add2:	4b84      	ldr	r3, [pc, #528]	@ (800afe4 <_dtoa_r+0x2d4>)
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aff8 <_dtoa_r+0x2e8>
 800adda:	f000 bd33 	b.w	800b844 <_dtoa_r+0xb34>
 800adde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ade2:	aa16      	add	r2, sp, #88	@ 0x58
 800ade4:	a917      	add	r1, sp, #92	@ 0x5c
 800ade6:	4658      	mov	r0, fp
 800ade8:	f001 f980 	bl	800c0ec <__d2b>
 800adec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800adf0:	4681      	mov	r9, r0
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	d077      	beq.n	800aee6 <_dtoa_r+0x1d6>
 800adf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800adfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae10:	4619      	mov	r1, r3
 800ae12:	2200      	movs	r2, #0
 800ae14:	4b74      	ldr	r3, [pc, #464]	@ (800afe8 <_dtoa_r+0x2d8>)
 800ae16:	f7f5 fa57 	bl	80002c8 <__aeabi_dsub>
 800ae1a:	a369      	add	r3, pc, #420	@ (adr r3, 800afc0 <_dtoa_r+0x2b0>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f7f5 fc0a 	bl	8000638 <__aeabi_dmul>
 800ae24:	a368      	add	r3, pc, #416	@ (adr r3, 800afc8 <_dtoa_r+0x2b8>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fa4f 	bl	80002cc <__adddf3>
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4630      	mov	r0, r6
 800ae32:	460d      	mov	r5, r1
 800ae34:	f7f5 fb96 	bl	8000564 <__aeabi_i2d>
 800ae38:	a365      	add	r3, pc, #404	@ (adr r3, 800afd0 <_dtoa_r+0x2c0>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fbfb 	bl	8000638 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fa3f 	bl	80002cc <__adddf3>
 800ae4e:	4604      	mov	r4, r0
 800ae50:	460d      	mov	r5, r1
 800ae52:	f7f5 fea1 	bl	8000b98 <__aeabi_d2iz>
 800ae56:	2200      	movs	r2, #0
 800ae58:	4607      	mov	r7, r0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	4629      	mov	r1, r5
 800ae60:	f7f5 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 800ae64:	b140      	cbz	r0, 800ae78 <_dtoa_r+0x168>
 800ae66:	4638      	mov	r0, r7
 800ae68:	f7f5 fb7c 	bl	8000564 <__aeabi_i2d>
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	462b      	mov	r3, r5
 800ae70:	f7f5 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 800ae74:	b900      	cbnz	r0, 800ae78 <_dtoa_r+0x168>
 800ae76:	3f01      	subs	r7, #1
 800ae78:	2f16      	cmp	r7, #22
 800ae7a:	d851      	bhi.n	800af20 <_dtoa_r+0x210>
 800ae7c:	4b5b      	ldr	r3, [pc, #364]	@ (800afec <_dtoa_r+0x2dc>)
 800ae7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae8a:	f7f5 fe47 	bl	8000b1c <__aeabi_dcmplt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d048      	beq.n	800af24 <_dtoa_r+0x214>
 800ae92:	3f01      	subs	r7, #1
 800ae94:	2300      	movs	r3, #0
 800ae96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae9a:	1b9b      	subs	r3, r3, r6
 800ae9c:	1e5a      	subs	r2, r3, #1
 800ae9e:	bf44      	itt	mi
 800aea0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aea4:	2300      	movmi	r3, #0
 800aea6:	9208      	str	r2, [sp, #32]
 800aea8:	bf54      	ite	pl
 800aeaa:	f04f 0800 	movpl.w	r8, #0
 800aeae:	9308      	strmi	r3, [sp, #32]
 800aeb0:	2f00      	cmp	r7, #0
 800aeb2:	db39      	blt.n	800af28 <_dtoa_r+0x218>
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aeb8:	443b      	add	r3, r7
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	2300      	movs	r3, #0
 800aebe:	930a      	str	r3, [sp, #40]	@ 0x28
 800aec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec2:	2b09      	cmp	r3, #9
 800aec4:	d864      	bhi.n	800af90 <_dtoa_r+0x280>
 800aec6:	2b05      	cmp	r3, #5
 800aec8:	bfc4      	itt	gt
 800aeca:	3b04      	subgt	r3, #4
 800aecc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed0:	f1a3 0302 	sub.w	r3, r3, #2
 800aed4:	bfcc      	ite	gt
 800aed6:	2400      	movgt	r4, #0
 800aed8:	2401      	movle	r4, #1
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d863      	bhi.n	800afa6 <_dtoa_r+0x296>
 800aede:	e8df f003 	tbb	[pc, r3]
 800aee2:	372a      	.short	0x372a
 800aee4:	5535      	.short	0x5535
 800aee6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aeea:	441e      	add	r6, r3
 800aeec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	bfc1      	itttt	gt
 800aef4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aef8:	409f      	lslgt	r7, r3
 800aefa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aefe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af02:	bfd6      	itet	le
 800af04:	f1c3 0320 	rsble	r3, r3, #32
 800af08:	ea47 0003 	orrgt.w	r0, r7, r3
 800af0c:	fa04 f003 	lslle.w	r0, r4, r3
 800af10:	f7f5 fb18 	bl	8000544 <__aeabi_ui2d>
 800af14:	2201      	movs	r2, #1
 800af16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af1a:	3e01      	subs	r6, #1
 800af1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800af1e:	e777      	b.n	800ae10 <_dtoa_r+0x100>
 800af20:	2301      	movs	r3, #1
 800af22:	e7b8      	b.n	800ae96 <_dtoa_r+0x186>
 800af24:	9012      	str	r0, [sp, #72]	@ 0x48
 800af26:	e7b7      	b.n	800ae98 <_dtoa_r+0x188>
 800af28:	427b      	negs	r3, r7
 800af2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af2c:	2300      	movs	r3, #0
 800af2e:	eba8 0807 	sub.w	r8, r8, r7
 800af32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af34:	e7c4      	b.n	800aec0 <_dtoa_r+0x1b0>
 800af36:	2300      	movs	r3, #0
 800af38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	dc35      	bgt.n	800afac <_dtoa_r+0x29c>
 800af40:	2301      	movs	r3, #1
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	9307      	str	r3, [sp, #28]
 800af46:	461a      	mov	r2, r3
 800af48:	920e      	str	r2, [sp, #56]	@ 0x38
 800af4a:	e00b      	b.n	800af64 <_dtoa_r+0x254>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e7f3      	b.n	800af38 <_dtoa_r+0x228>
 800af50:	2300      	movs	r3, #0
 800af52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af56:	18fb      	adds	r3, r7, r3
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	3301      	adds	r3, #1
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	9307      	str	r3, [sp, #28]
 800af60:	bfb8      	it	lt
 800af62:	2301      	movlt	r3, #1
 800af64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800af68:	2100      	movs	r1, #0
 800af6a:	2204      	movs	r2, #4
 800af6c:	f102 0514 	add.w	r5, r2, #20
 800af70:	429d      	cmp	r5, r3
 800af72:	d91f      	bls.n	800afb4 <_dtoa_r+0x2a4>
 800af74:	6041      	str	r1, [r0, #4]
 800af76:	4658      	mov	r0, fp
 800af78:	f000 fd8e 	bl	800ba98 <_Balloc>
 800af7c:	4682      	mov	sl, r0
 800af7e:	2800      	cmp	r0, #0
 800af80:	d13c      	bne.n	800affc <_dtoa_r+0x2ec>
 800af82:	4b1b      	ldr	r3, [pc, #108]	@ (800aff0 <_dtoa_r+0x2e0>)
 800af84:	4602      	mov	r2, r0
 800af86:	f240 11af 	movw	r1, #431	@ 0x1af
 800af8a:	e6d8      	b.n	800ad3e <_dtoa_r+0x2e>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e7e0      	b.n	800af52 <_dtoa_r+0x242>
 800af90:	2401      	movs	r4, #1
 800af92:	2300      	movs	r3, #0
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	9307      	str	r3, [sp, #28]
 800afa0:	2200      	movs	r2, #0
 800afa2:	2312      	movs	r3, #18
 800afa4:	e7d0      	b.n	800af48 <_dtoa_r+0x238>
 800afa6:	2301      	movs	r3, #1
 800afa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afaa:	e7f5      	b.n	800af98 <_dtoa_r+0x288>
 800afac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	9307      	str	r3, [sp, #28]
 800afb2:	e7d7      	b.n	800af64 <_dtoa_r+0x254>
 800afb4:	3101      	adds	r1, #1
 800afb6:	0052      	lsls	r2, r2, #1
 800afb8:	e7d8      	b.n	800af6c <_dtoa_r+0x25c>
 800afba:	bf00      	nop
 800afbc:	f3af 8000 	nop.w
 800afc0:	636f4361 	.word	0x636f4361
 800afc4:	3fd287a7 	.word	0x3fd287a7
 800afc8:	8b60c8b3 	.word	0x8b60c8b3
 800afcc:	3fc68a28 	.word	0x3fc68a28
 800afd0:	509f79fb 	.word	0x509f79fb
 800afd4:	3fd34413 	.word	0x3fd34413
 800afd8:	0800dedd 	.word	0x0800dedd
 800afdc:	0800def4 	.word	0x0800def4
 800afe0:	7ff00000 	.word	0x7ff00000
 800afe4:	0800dead 	.word	0x0800dead
 800afe8:	3ff80000 	.word	0x3ff80000
 800afec:	0800dff0 	.word	0x0800dff0
 800aff0:	0800df4c 	.word	0x0800df4c
 800aff4:	0800ded9 	.word	0x0800ded9
 800aff8:	0800deac 	.word	0x0800deac
 800affc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b000:	6018      	str	r0, [r3, #0]
 800b002:	9b07      	ldr	r3, [sp, #28]
 800b004:	2b0e      	cmp	r3, #14
 800b006:	f200 80a4 	bhi.w	800b152 <_dtoa_r+0x442>
 800b00a:	2c00      	cmp	r4, #0
 800b00c:	f000 80a1 	beq.w	800b152 <_dtoa_r+0x442>
 800b010:	2f00      	cmp	r7, #0
 800b012:	dd33      	ble.n	800b07c <_dtoa_r+0x36c>
 800b014:	4bad      	ldr	r3, [pc, #692]	@ (800b2cc <_dtoa_r+0x5bc>)
 800b016:	f007 020f 	and.w	r2, r7, #15
 800b01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b01e:	ed93 7b00 	vldr	d7, [r3]
 800b022:	05f8      	lsls	r0, r7, #23
 800b024:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b028:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b02c:	d516      	bpl.n	800b05c <_dtoa_r+0x34c>
 800b02e:	4ba8      	ldr	r3, [pc, #672]	@ (800b2d0 <_dtoa_r+0x5c0>)
 800b030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b038:	f7f5 fc28 	bl	800088c <__aeabi_ddiv>
 800b03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b040:	f004 040f 	and.w	r4, r4, #15
 800b044:	2603      	movs	r6, #3
 800b046:	4da2      	ldr	r5, [pc, #648]	@ (800b2d0 <_dtoa_r+0x5c0>)
 800b048:	b954      	cbnz	r4, 800b060 <_dtoa_r+0x350>
 800b04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b052:	f7f5 fc1b 	bl	800088c <__aeabi_ddiv>
 800b056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b05a:	e028      	b.n	800b0ae <_dtoa_r+0x39e>
 800b05c:	2602      	movs	r6, #2
 800b05e:	e7f2      	b.n	800b046 <_dtoa_r+0x336>
 800b060:	07e1      	lsls	r1, r4, #31
 800b062:	d508      	bpl.n	800b076 <_dtoa_r+0x366>
 800b064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b06c:	f7f5 fae4 	bl	8000638 <__aeabi_dmul>
 800b070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b074:	3601      	adds	r6, #1
 800b076:	1064      	asrs	r4, r4, #1
 800b078:	3508      	adds	r5, #8
 800b07a:	e7e5      	b.n	800b048 <_dtoa_r+0x338>
 800b07c:	f000 80d2 	beq.w	800b224 <_dtoa_r+0x514>
 800b080:	427c      	negs	r4, r7
 800b082:	4b92      	ldr	r3, [pc, #584]	@ (800b2cc <_dtoa_r+0x5bc>)
 800b084:	4d92      	ldr	r5, [pc, #584]	@ (800b2d0 <_dtoa_r+0x5c0>)
 800b086:	f004 020f 	and.w	r2, r4, #15
 800b08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b096:	f7f5 facf 	bl	8000638 <__aeabi_dmul>
 800b09a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b09e:	1124      	asrs	r4, r4, #4
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2602      	movs	r6, #2
 800b0a4:	2c00      	cmp	r4, #0
 800b0a6:	f040 80b2 	bne.w	800b20e <_dtoa_r+0x4fe>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1d3      	bne.n	800b056 <_dtoa_r+0x346>
 800b0ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 80b7 	beq.w	800b228 <_dtoa_r+0x518>
 800b0ba:	4b86      	ldr	r3, [pc, #536]	@ (800b2d4 <_dtoa_r+0x5c4>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	f000 80ae 	beq.w	800b228 <_dtoa_r+0x518>
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 80aa 	beq.w	800b228 <_dtoa_r+0x518>
 800b0d4:	9b00      	ldr	r3, [sp, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dd37      	ble.n	800b14a <_dtoa_r+0x43a>
 800b0da:	1e7b      	subs	r3, r7, #1
 800b0dc:	9304      	str	r3, [sp, #16]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4b7d      	ldr	r3, [pc, #500]	@ (800b2d8 <_dtoa_r+0x5c8>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7f5 faa7 	bl	8000638 <__aeabi_dmul>
 800b0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ee:	9c00      	ldr	r4, [sp, #0]
 800b0f0:	3601      	adds	r6, #1
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7f5 fa36 	bl	8000564 <__aeabi_i2d>
 800b0f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0fc:	f7f5 fa9c 	bl	8000638 <__aeabi_dmul>
 800b100:	4b76      	ldr	r3, [pc, #472]	@ (800b2dc <_dtoa_r+0x5cc>)
 800b102:	2200      	movs	r2, #0
 800b104:	f7f5 f8e2 	bl	80002cc <__adddf3>
 800b108:	4605      	mov	r5, r0
 800b10a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b10e:	2c00      	cmp	r4, #0
 800b110:	f040 808d 	bne.w	800b22e <_dtoa_r+0x51e>
 800b114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b118:	4b71      	ldr	r3, [pc, #452]	@ (800b2e0 <_dtoa_r+0x5d0>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	f7f5 f8d4 	bl	80002c8 <__aeabi_dsub>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b128:	462a      	mov	r2, r5
 800b12a:	4633      	mov	r3, r6
 800b12c:	f7f5 fd14 	bl	8000b58 <__aeabi_dcmpgt>
 800b130:	2800      	cmp	r0, #0
 800b132:	f040 828b 	bne.w	800b64c <_dtoa_r+0x93c>
 800b136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13a:	462a      	mov	r2, r5
 800b13c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b140:	f7f5 fcec 	bl	8000b1c <__aeabi_dcmplt>
 800b144:	2800      	cmp	r0, #0
 800b146:	f040 8128 	bne.w	800b39a <_dtoa_r+0x68a>
 800b14a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b14e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b154:	2b00      	cmp	r3, #0
 800b156:	f2c0 815a 	blt.w	800b40e <_dtoa_r+0x6fe>
 800b15a:	2f0e      	cmp	r7, #14
 800b15c:	f300 8157 	bgt.w	800b40e <_dtoa_r+0x6fe>
 800b160:	4b5a      	ldr	r3, [pc, #360]	@ (800b2cc <_dtoa_r+0x5bc>)
 800b162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b166:	ed93 7b00 	vldr	d7, [r3]
 800b16a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	ed8d 7b00 	vstr	d7, [sp]
 800b172:	da03      	bge.n	800b17c <_dtoa_r+0x46c>
 800b174:	9b07      	ldr	r3, [sp, #28]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f340 8101 	ble.w	800b37e <_dtoa_r+0x66e>
 800b17c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b180:	4656      	mov	r6, sl
 800b182:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b186:	4620      	mov	r0, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	f7f5 fb7f 	bl	800088c <__aeabi_ddiv>
 800b18e:	f7f5 fd03 	bl	8000b98 <__aeabi_d2iz>
 800b192:	4680      	mov	r8, r0
 800b194:	f7f5 f9e6 	bl	8000564 <__aeabi_i2d>
 800b198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19c:	f7f5 fa4c 	bl	8000638 <__aeabi_dmul>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b1ac:	f7f5 f88c 	bl	80002c8 <__aeabi_dsub>
 800b1b0:	f806 4b01 	strb.w	r4, [r6], #1
 800b1b4:	9d07      	ldr	r5, [sp, #28]
 800b1b6:	eba6 040a 	sub.w	r4, r6, sl
 800b1ba:	42a5      	cmp	r5, r4
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	f040 8117 	bne.w	800b3f2 <_dtoa_r+0x6e2>
 800b1c4:	f7f5 f882 	bl	80002cc <__adddf3>
 800b1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	460d      	mov	r5, r1
 800b1d0:	f7f5 fcc2 	bl	8000b58 <__aeabi_dcmpgt>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f040 80f9 	bne.w	800b3cc <_dtoa_r+0x6bc>
 800b1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7f5 fc91 	bl	8000b08 <__aeabi_dcmpeq>
 800b1e6:	b118      	cbz	r0, 800b1f0 <_dtoa_r+0x4e0>
 800b1e8:	f018 0f01 	tst.w	r8, #1
 800b1ec:	f040 80ee 	bne.w	800b3cc <_dtoa_r+0x6bc>
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	4658      	mov	r0, fp
 800b1f4:	f000 fc90 	bl	800bb18 <_Bfree>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	7033      	strb	r3, [r6, #0]
 800b1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1fe:	3701      	adds	r7, #1
 800b200:	601f      	str	r7, [r3, #0]
 800b202:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b204:	2b00      	cmp	r3, #0
 800b206:	f000 831d 	beq.w	800b844 <_dtoa_r+0xb34>
 800b20a:	601e      	str	r6, [r3, #0]
 800b20c:	e31a      	b.n	800b844 <_dtoa_r+0xb34>
 800b20e:	07e2      	lsls	r2, r4, #31
 800b210:	d505      	bpl.n	800b21e <_dtoa_r+0x50e>
 800b212:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b216:	f7f5 fa0f 	bl	8000638 <__aeabi_dmul>
 800b21a:	3601      	adds	r6, #1
 800b21c:	2301      	movs	r3, #1
 800b21e:	1064      	asrs	r4, r4, #1
 800b220:	3508      	adds	r5, #8
 800b222:	e73f      	b.n	800b0a4 <_dtoa_r+0x394>
 800b224:	2602      	movs	r6, #2
 800b226:	e742      	b.n	800b0ae <_dtoa_r+0x39e>
 800b228:	9c07      	ldr	r4, [sp, #28]
 800b22a:	9704      	str	r7, [sp, #16]
 800b22c:	e761      	b.n	800b0f2 <_dtoa_r+0x3e2>
 800b22e:	4b27      	ldr	r3, [pc, #156]	@ (800b2cc <_dtoa_r+0x5bc>)
 800b230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b232:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b236:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b23a:	4454      	add	r4, sl
 800b23c:	2900      	cmp	r1, #0
 800b23e:	d053      	beq.n	800b2e8 <_dtoa_r+0x5d8>
 800b240:	4928      	ldr	r1, [pc, #160]	@ (800b2e4 <_dtoa_r+0x5d4>)
 800b242:	2000      	movs	r0, #0
 800b244:	f7f5 fb22 	bl	800088c <__aeabi_ddiv>
 800b248:	4633      	mov	r3, r6
 800b24a:	462a      	mov	r2, r5
 800b24c:	f7f5 f83c 	bl	80002c8 <__aeabi_dsub>
 800b250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b254:	4656      	mov	r6, sl
 800b256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b25a:	f7f5 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800b25e:	4605      	mov	r5, r0
 800b260:	f7f5 f980 	bl	8000564 <__aeabi_i2d>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26c:	f7f5 f82c 	bl	80002c8 <__aeabi_dsub>
 800b270:	3530      	adds	r5, #48	@ 0x30
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b27a:	f806 5b01 	strb.w	r5, [r6], #1
 800b27e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b282:	f7f5 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d171      	bne.n	800b36e <_dtoa_r+0x65e>
 800b28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b28e:	4911      	ldr	r1, [pc, #68]	@ (800b2d4 <_dtoa_r+0x5c4>)
 800b290:	2000      	movs	r0, #0
 800b292:	f7f5 f819 	bl	80002c8 <__aeabi_dsub>
 800b296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b29a:	f7f5 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f040 8095 	bne.w	800b3ce <_dtoa_r+0x6be>
 800b2a4:	42a6      	cmp	r6, r4
 800b2a6:	f43f af50 	beq.w	800b14a <_dtoa_r+0x43a>
 800b2aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d8 <_dtoa_r+0x5c8>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f7f5 f9c1 	bl	8000638 <__aeabi_dmul>
 800b2b6:	4b08      	ldr	r3, [pc, #32]	@ (800b2d8 <_dtoa_r+0x5c8>)
 800b2b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2bc:	2200      	movs	r2, #0
 800b2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c2:	f7f5 f9b9 	bl	8000638 <__aeabi_dmul>
 800b2c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ca:	e7c4      	b.n	800b256 <_dtoa_r+0x546>
 800b2cc:	0800dff0 	.word	0x0800dff0
 800b2d0:	0800dfc8 	.word	0x0800dfc8
 800b2d4:	3ff00000 	.word	0x3ff00000
 800b2d8:	40240000 	.word	0x40240000
 800b2dc:	401c0000 	.word	0x401c0000
 800b2e0:	40140000 	.word	0x40140000
 800b2e4:	3fe00000 	.word	0x3fe00000
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f7f5 f9a4 	bl	8000638 <__aeabi_dmul>
 800b2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b2f6:	4656      	mov	r6, sl
 800b2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2fc:	f7f5 fc4c 	bl	8000b98 <__aeabi_d2iz>
 800b300:	4605      	mov	r5, r0
 800b302:	f7f5 f92f 	bl	8000564 <__aeabi_i2d>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b30e:	f7f4 ffdb 	bl	80002c8 <__aeabi_dsub>
 800b312:	3530      	adds	r5, #48	@ 0x30
 800b314:	f806 5b01 	strb.w	r5, [r6], #1
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	42a6      	cmp	r6, r4
 800b31e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b322:	f04f 0200 	mov.w	r2, #0
 800b326:	d124      	bne.n	800b372 <_dtoa_r+0x662>
 800b328:	4bac      	ldr	r3, [pc, #688]	@ (800b5dc <_dtoa_r+0x8cc>)
 800b32a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b32e:	f7f4 ffcd 	bl	80002cc <__adddf3>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b33a:	f7f5 fc0d 	bl	8000b58 <__aeabi_dcmpgt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	d145      	bne.n	800b3ce <_dtoa_r+0x6be>
 800b342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b346:	49a5      	ldr	r1, [pc, #660]	@ (800b5dc <_dtoa_r+0x8cc>)
 800b348:	2000      	movs	r0, #0
 800b34a:	f7f4 ffbd 	bl	80002c8 <__aeabi_dsub>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b356:	f7f5 fbe1 	bl	8000b1c <__aeabi_dcmplt>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	f43f aef5 	beq.w	800b14a <_dtoa_r+0x43a>
 800b360:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b362:	1e73      	subs	r3, r6, #1
 800b364:	9315      	str	r3, [sp, #84]	@ 0x54
 800b366:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b36a:	2b30      	cmp	r3, #48	@ 0x30
 800b36c:	d0f8      	beq.n	800b360 <_dtoa_r+0x650>
 800b36e:	9f04      	ldr	r7, [sp, #16]
 800b370:	e73e      	b.n	800b1f0 <_dtoa_r+0x4e0>
 800b372:	4b9b      	ldr	r3, [pc, #620]	@ (800b5e0 <_dtoa_r+0x8d0>)
 800b374:	f7f5 f960 	bl	8000638 <__aeabi_dmul>
 800b378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b37c:	e7bc      	b.n	800b2f8 <_dtoa_r+0x5e8>
 800b37e:	d10c      	bne.n	800b39a <_dtoa_r+0x68a>
 800b380:	4b98      	ldr	r3, [pc, #608]	@ (800b5e4 <_dtoa_r+0x8d4>)
 800b382:	2200      	movs	r2, #0
 800b384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b388:	f7f5 f956 	bl	8000638 <__aeabi_dmul>
 800b38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b390:	f7f5 fbd8 	bl	8000b44 <__aeabi_dcmpge>
 800b394:	2800      	cmp	r0, #0
 800b396:	f000 8157 	beq.w	800b648 <_dtoa_r+0x938>
 800b39a:	2400      	movs	r4, #0
 800b39c:	4625      	mov	r5, r4
 800b39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3a0:	43db      	mvns	r3, r3
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	4656      	mov	r6, sl
 800b3a6:	2700      	movs	r7, #0
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f000 fbb4 	bl	800bb18 <_Bfree>
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	d0dc      	beq.n	800b36e <_dtoa_r+0x65e>
 800b3b4:	b12f      	cbz	r7, 800b3c2 <_dtoa_r+0x6b2>
 800b3b6:	42af      	cmp	r7, r5
 800b3b8:	d003      	beq.n	800b3c2 <_dtoa_r+0x6b2>
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	4658      	mov	r0, fp
 800b3be:	f000 fbab 	bl	800bb18 <_Bfree>
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4658      	mov	r0, fp
 800b3c6:	f000 fba7 	bl	800bb18 <_Bfree>
 800b3ca:	e7d0      	b.n	800b36e <_dtoa_r+0x65e>
 800b3cc:	9704      	str	r7, [sp, #16]
 800b3ce:	4633      	mov	r3, r6
 800b3d0:	461e      	mov	r6, r3
 800b3d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3d6:	2a39      	cmp	r2, #57	@ 0x39
 800b3d8:	d107      	bne.n	800b3ea <_dtoa_r+0x6da>
 800b3da:	459a      	cmp	sl, r3
 800b3dc:	d1f8      	bne.n	800b3d0 <_dtoa_r+0x6c0>
 800b3de:	9a04      	ldr	r2, [sp, #16]
 800b3e0:	3201      	adds	r2, #1
 800b3e2:	9204      	str	r2, [sp, #16]
 800b3e4:	2230      	movs	r2, #48	@ 0x30
 800b3e6:	f88a 2000 	strb.w	r2, [sl]
 800b3ea:	781a      	ldrb	r2, [r3, #0]
 800b3ec:	3201      	adds	r2, #1
 800b3ee:	701a      	strb	r2, [r3, #0]
 800b3f0:	e7bd      	b.n	800b36e <_dtoa_r+0x65e>
 800b3f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b5e0 <_dtoa_r+0x8d0>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f7f5 f91f 	bl	8000638 <__aeabi_dmul>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	f7f5 fb81 	bl	8000b08 <__aeabi_dcmpeq>
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f aebb 	beq.w	800b182 <_dtoa_r+0x472>
 800b40c:	e6f0      	b.n	800b1f0 <_dtoa_r+0x4e0>
 800b40e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b410:	2a00      	cmp	r2, #0
 800b412:	f000 80db 	beq.w	800b5cc <_dtoa_r+0x8bc>
 800b416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b418:	2a01      	cmp	r2, #1
 800b41a:	f300 80bf 	bgt.w	800b59c <_dtoa_r+0x88c>
 800b41e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b420:	2a00      	cmp	r2, #0
 800b422:	f000 80b7 	beq.w	800b594 <_dtoa_r+0x884>
 800b426:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b42a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b42c:	4646      	mov	r6, r8
 800b42e:	9a08      	ldr	r2, [sp, #32]
 800b430:	2101      	movs	r1, #1
 800b432:	441a      	add	r2, r3
 800b434:	4658      	mov	r0, fp
 800b436:	4498      	add	r8, r3
 800b438:	9208      	str	r2, [sp, #32]
 800b43a:	f000 fc21 	bl	800bc80 <__i2b>
 800b43e:	4605      	mov	r5, r0
 800b440:	b15e      	cbz	r6, 800b45a <_dtoa_r+0x74a>
 800b442:	9b08      	ldr	r3, [sp, #32]
 800b444:	2b00      	cmp	r3, #0
 800b446:	dd08      	ble.n	800b45a <_dtoa_r+0x74a>
 800b448:	42b3      	cmp	r3, r6
 800b44a:	9a08      	ldr	r2, [sp, #32]
 800b44c:	bfa8      	it	ge
 800b44e:	4633      	movge	r3, r6
 800b450:	eba8 0803 	sub.w	r8, r8, r3
 800b454:	1af6      	subs	r6, r6, r3
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	9308      	str	r3, [sp, #32]
 800b45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b45c:	b1f3      	cbz	r3, 800b49c <_dtoa_r+0x78c>
 800b45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 80b7 	beq.w	800b5d4 <_dtoa_r+0x8c4>
 800b466:	b18c      	cbz	r4, 800b48c <_dtoa_r+0x77c>
 800b468:	4629      	mov	r1, r5
 800b46a:	4622      	mov	r2, r4
 800b46c:	4658      	mov	r0, fp
 800b46e:	f000 fcc7 	bl	800be00 <__pow5mult>
 800b472:	464a      	mov	r2, r9
 800b474:	4601      	mov	r1, r0
 800b476:	4605      	mov	r5, r0
 800b478:	4658      	mov	r0, fp
 800b47a:	f000 fc17 	bl	800bcac <__multiply>
 800b47e:	4649      	mov	r1, r9
 800b480:	9004      	str	r0, [sp, #16]
 800b482:	4658      	mov	r0, fp
 800b484:	f000 fb48 	bl	800bb18 <_Bfree>
 800b488:	9b04      	ldr	r3, [sp, #16]
 800b48a:	4699      	mov	r9, r3
 800b48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b48e:	1b1a      	subs	r2, r3, r4
 800b490:	d004      	beq.n	800b49c <_dtoa_r+0x78c>
 800b492:	4649      	mov	r1, r9
 800b494:	4658      	mov	r0, fp
 800b496:	f000 fcb3 	bl	800be00 <__pow5mult>
 800b49a:	4681      	mov	r9, r0
 800b49c:	2101      	movs	r1, #1
 800b49e:	4658      	mov	r0, fp
 800b4a0:	f000 fbee 	bl	800bc80 <__i2b>
 800b4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 81cf 	beq.w	800b84c <_dtoa_r+0xb3c>
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	4601      	mov	r1, r0
 800b4b2:	4658      	mov	r0, fp
 800b4b4:	f000 fca4 	bl	800be00 <__pow5mult>
 800b4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	4604      	mov	r4, r0
 800b4be:	f300 8095 	bgt.w	800b5ec <_dtoa_r+0x8dc>
 800b4c2:	9b02      	ldr	r3, [sp, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 8087 	bne.w	800b5d8 <_dtoa_r+0x8c8>
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f040 8089 	bne.w	800b5e8 <_dtoa_r+0x8d8>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4dc:	0d1b      	lsrs	r3, r3, #20
 800b4de:	051b      	lsls	r3, r3, #20
 800b4e0:	b12b      	cbz	r3, 800b4ee <_dtoa_r+0x7de>
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	9308      	str	r3, [sp, #32]
 800b4e8:	f108 0801 	add.w	r8, r8, #1
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 81b0 	beq.w	800b858 <_dtoa_r+0xb48>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4fe:	6918      	ldr	r0, [r3, #16]
 800b500:	f000 fb72 	bl	800bbe8 <__hi0bits>
 800b504:	f1c0 0020 	rsb	r0, r0, #32
 800b508:	9b08      	ldr	r3, [sp, #32]
 800b50a:	4418      	add	r0, r3
 800b50c:	f010 001f 	ands.w	r0, r0, #31
 800b510:	d077      	beq.n	800b602 <_dtoa_r+0x8f2>
 800b512:	f1c0 0320 	rsb	r3, r0, #32
 800b516:	2b04      	cmp	r3, #4
 800b518:	dd6b      	ble.n	800b5f2 <_dtoa_r+0x8e2>
 800b51a:	9b08      	ldr	r3, [sp, #32]
 800b51c:	f1c0 001c 	rsb	r0, r0, #28
 800b520:	4403      	add	r3, r0
 800b522:	4480      	add	r8, r0
 800b524:	4406      	add	r6, r0
 800b526:	9308      	str	r3, [sp, #32]
 800b528:	f1b8 0f00 	cmp.w	r8, #0
 800b52c:	dd05      	ble.n	800b53a <_dtoa_r+0x82a>
 800b52e:	4649      	mov	r1, r9
 800b530:	4642      	mov	r2, r8
 800b532:	4658      	mov	r0, fp
 800b534:	f000 fcbe 	bl	800beb4 <__lshift>
 800b538:	4681      	mov	r9, r0
 800b53a:	9b08      	ldr	r3, [sp, #32]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dd05      	ble.n	800b54c <_dtoa_r+0x83c>
 800b540:	4621      	mov	r1, r4
 800b542:	461a      	mov	r2, r3
 800b544:	4658      	mov	r0, fp
 800b546:	f000 fcb5 	bl	800beb4 <__lshift>
 800b54a:	4604      	mov	r4, r0
 800b54c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d059      	beq.n	800b606 <_dtoa_r+0x8f6>
 800b552:	4621      	mov	r1, r4
 800b554:	4648      	mov	r0, r9
 800b556:	f000 fd19 	bl	800bf8c <__mcmp>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	da53      	bge.n	800b606 <_dtoa_r+0x8f6>
 800b55e:	1e7b      	subs	r3, r7, #1
 800b560:	9304      	str	r3, [sp, #16]
 800b562:	4649      	mov	r1, r9
 800b564:	2300      	movs	r3, #0
 800b566:	220a      	movs	r2, #10
 800b568:	4658      	mov	r0, fp
 800b56a:	f000 faf7 	bl	800bb5c <__multadd>
 800b56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b570:	4681      	mov	r9, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 8172 	beq.w	800b85c <_dtoa_r+0xb4c>
 800b578:	2300      	movs	r3, #0
 800b57a:	4629      	mov	r1, r5
 800b57c:	220a      	movs	r2, #10
 800b57e:	4658      	mov	r0, fp
 800b580:	f000 faec 	bl	800bb5c <__multadd>
 800b584:	9b00      	ldr	r3, [sp, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	4605      	mov	r5, r0
 800b58a:	dc67      	bgt.n	800b65c <_dtoa_r+0x94c>
 800b58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58e:	2b02      	cmp	r3, #2
 800b590:	dc41      	bgt.n	800b616 <_dtoa_r+0x906>
 800b592:	e063      	b.n	800b65c <_dtoa_r+0x94c>
 800b594:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b596:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b59a:	e746      	b.n	800b42a <_dtoa_r+0x71a>
 800b59c:	9b07      	ldr	r3, [sp, #28]
 800b59e:	1e5c      	subs	r4, r3, #1
 800b5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5a2:	42a3      	cmp	r3, r4
 800b5a4:	bfbf      	itttt	lt
 800b5a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b5a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b5aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b5ac:	1ae3      	sublt	r3, r4, r3
 800b5ae:	bfb4      	ite	lt
 800b5b0:	18d2      	addlt	r2, r2, r3
 800b5b2:	1b1c      	subge	r4, r3, r4
 800b5b4:	9b07      	ldr	r3, [sp, #28]
 800b5b6:	bfbc      	itt	lt
 800b5b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b5ba:	2400      	movlt	r4, #0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	bfb5      	itete	lt
 800b5c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b5c4:	9b07      	ldrge	r3, [sp, #28]
 800b5c6:	2300      	movlt	r3, #0
 800b5c8:	4646      	movge	r6, r8
 800b5ca:	e730      	b.n	800b42e <_dtoa_r+0x71e>
 800b5cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b5ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b5d0:	4646      	mov	r6, r8
 800b5d2:	e735      	b.n	800b440 <_dtoa_r+0x730>
 800b5d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5d6:	e75c      	b.n	800b492 <_dtoa_r+0x782>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e788      	b.n	800b4ee <_dtoa_r+0x7de>
 800b5dc:	3fe00000 	.word	0x3fe00000
 800b5e0:	40240000 	.word	0x40240000
 800b5e4:	40140000 	.word	0x40140000
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	e780      	b.n	800b4ee <_dtoa_r+0x7de>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5f0:	e782      	b.n	800b4f8 <_dtoa_r+0x7e8>
 800b5f2:	d099      	beq.n	800b528 <_dtoa_r+0x818>
 800b5f4:	9a08      	ldr	r2, [sp, #32]
 800b5f6:	331c      	adds	r3, #28
 800b5f8:	441a      	add	r2, r3
 800b5fa:	4498      	add	r8, r3
 800b5fc:	441e      	add	r6, r3
 800b5fe:	9208      	str	r2, [sp, #32]
 800b600:	e792      	b.n	800b528 <_dtoa_r+0x818>
 800b602:	4603      	mov	r3, r0
 800b604:	e7f6      	b.n	800b5f4 <_dtoa_r+0x8e4>
 800b606:	9b07      	ldr	r3, [sp, #28]
 800b608:	9704      	str	r7, [sp, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dc20      	bgt.n	800b650 <_dtoa_r+0x940>
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b612:	2b02      	cmp	r3, #2
 800b614:	dd1e      	ble.n	800b654 <_dtoa_r+0x944>
 800b616:	9b00      	ldr	r3, [sp, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f47f aec0 	bne.w	800b39e <_dtoa_r+0x68e>
 800b61e:	4621      	mov	r1, r4
 800b620:	2205      	movs	r2, #5
 800b622:	4658      	mov	r0, fp
 800b624:	f000 fa9a 	bl	800bb5c <__multadd>
 800b628:	4601      	mov	r1, r0
 800b62a:	4604      	mov	r4, r0
 800b62c:	4648      	mov	r0, r9
 800b62e:	f000 fcad 	bl	800bf8c <__mcmp>
 800b632:	2800      	cmp	r0, #0
 800b634:	f77f aeb3 	ble.w	800b39e <_dtoa_r+0x68e>
 800b638:	4656      	mov	r6, sl
 800b63a:	2331      	movs	r3, #49	@ 0x31
 800b63c:	f806 3b01 	strb.w	r3, [r6], #1
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	3301      	adds	r3, #1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	e6ae      	b.n	800b3a6 <_dtoa_r+0x696>
 800b648:	9c07      	ldr	r4, [sp, #28]
 800b64a:	9704      	str	r7, [sp, #16]
 800b64c:	4625      	mov	r5, r4
 800b64e:	e7f3      	b.n	800b638 <_dtoa_r+0x928>
 800b650:	9b07      	ldr	r3, [sp, #28]
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 8104 	beq.w	800b864 <_dtoa_r+0xb54>
 800b65c:	2e00      	cmp	r6, #0
 800b65e:	dd05      	ble.n	800b66c <_dtoa_r+0x95c>
 800b660:	4629      	mov	r1, r5
 800b662:	4632      	mov	r2, r6
 800b664:	4658      	mov	r0, fp
 800b666:	f000 fc25 	bl	800beb4 <__lshift>
 800b66a:	4605      	mov	r5, r0
 800b66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d05a      	beq.n	800b728 <_dtoa_r+0xa18>
 800b672:	6869      	ldr	r1, [r5, #4]
 800b674:	4658      	mov	r0, fp
 800b676:	f000 fa0f 	bl	800ba98 <_Balloc>
 800b67a:	4606      	mov	r6, r0
 800b67c:	b928      	cbnz	r0, 800b68a <_dtoa_r+0x97a>
 800b67e:	4b84      	ldr	r3, [pc, #528]	@ (800b890 <_dtoa_r+0xb80>)
 800b680:	4602      	mov	r2, r0
 800b682:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b686:	f7ff bb5a 	b.w	800ad3e <_dtoa_r+0x2e>
 800b68a:	692a      	ldr	r2, [r5, #16]
 800b68c:	3202      	adds	r2, #2
 800b68e:	0092      	lsls	r2, r2, #2
 800b690:	f105 010c 	add.w	r1, r5, #12
 800b694:	300c      	adds	r0, #12
 800b696:	f7ff faa2 	bl	800abde <memcpy>
 800b69a:	2201      	movs	r2, #1
 800b69c:	4631      	mov	r1, r6
 800b69e:	4658      	mov	r0, fp
 800b6a0:	f000 fc08 	bl	800beb4 <__lshift>
 800b6a4:	f10a 0301 	add.w	r3, sl, #1
 800b6a8:	9307      	str	r3, [sp, #28]
 800b6aa:	9b00      	ldr	r3, [sp, #0]
 800b6ac:	4453      	add	r3, sl
 800b6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6b0:	9b02      	ldr	r3, [sp, #8]
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	462f      	mov	r7, r5
 800b6b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	9b07      	ldr	r3, [sp, #28]
 800b6be:	4621      	mov	r1, r4
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	4648      	mov	r0, r9
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	f7ff fa98 	bl	800abfa <quorem>
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	9002      	str	r0, [sp, #8]
 800b6ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b6d2:	4648      	mov	r0, r9
 800b6d4:	f000 fc5a 	bl	800bf8c <__mcmp>
 800b6d8:	462a      	mov	r2, r5
 800b6da:	9008      	str	r0, [sp, #32]
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4658      	mov	r0, fp
 800b6e0:	f000 fc70 	bl	800bfc4 <__mdiff>
 800b6e4:	68c2      	ldr	r2, [r0, #12]
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	bb02      	cbnz	r2, 800b72c <_dtoa_r+0xa1c>
 800b6ea:	4601      	mov	r1, r0
 800b6ec:	4648      	mov	r0, r9
 800b6ee:	f000 fc4d 	bl	800bf8c <__mcmp>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4658      	mov	r0, fp
 800b6f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6fa:	f000 fa0d 	bl	800bb18 <_Bfree>
 800b6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b702:	9e07      	ldr	r6, [sp, #28]
 800b704:	ea43 0102 	orr.w	r1, r3, r2
 800b708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b70a:	4319      	orrs	r1, r3
 800b70c:	d110      	bne.n	800b730 <_dtoa_r+0xa20>
 800b70e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b712:	d029      	beq.n	800b768 <_dtoa_r+0xa58>
 800b714:	9b08      	ldr	r3, [sp, #32]
 800b716:	2b00      	cmp	r3, #0
 800b718:	dd02      	ble.n	800b720 <_dtoa_r+0xa10>
 800b71a:	9b02      	ldr	r3, [sp, #8]
 800b71c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b720:	9b00      	ldr	r3, [sp, #0]
 800b722:	f883 8000 	strb.w	r8, [r3]
 800b726:	e63f      	b.n	800b3a8 <_dtoa_r+0x698>
 800b728:	4628      	mov	r0, r5
 800b72a:	e7bb      	b.n	800b6a4 <_dtoa_r+0x994>
 800b72c:	2201      	movs	r2, #1
 800b72e:	e7e1      	b.n	800b6f4 <_dtoa_r+0x9e4>
 800b730:	9b08      	ldr	r3, [sp, #32]
 800b732:	2b00      	cmp	r3, #0
 800b734:	db04      	blt.n	800b740 <_dtoa_r+0xa30>
 800b736:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b738:	430b      	orrs	r3, r1
 800b73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b73c:	430b      	orrs	r3, r1
 800b73e:	d120      	bne.n	800b782 <_dtoa_r+0xa72>
 800b740:	2a00      	cmp	r2, #0
 800b742:	dded      	ble.n	800b720 <_dtoa_r+0xa10>
 800b744:	4649      	mov	r1, r9
 800b746:	2201      	movs	r2, #1
 800b748:	4658      	mov	r0, fp
 800b74a:	f000 fbb3 	bl	800beb4 <__lshift>
 800b74e:	4621      	mov	r1, r4
 800b750:	4681      	mov	r9, r0
 800b752:	f000 fc1b 	bl	800bf8c <__mcmp>
 800b756:	2800      	cmp	r0, #0
 800b758:	dc03      	bgt.n	800b762 <_dtoa_r+0xa52>
 800b75a:	d1e1      	bne.n	800b720 <_dtoa_r+0xa10>
 800b75c:	f018 0f01 	tst.w	r8, #1
 800b760:	d0de      	beq.n	800b720 <_dtoa_r+0xa10>
 800b762:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b766:	d1d8      	bne.n	800b71a <_dtoa_r+0xa0a>
 800b768:	9a00      	ldr	r2, [sp, #0]
 800b76a:	2339      	movs	r3, #57	@ 0x39
 800b76c:	7013      	strb	r3, [r2, #0]
 800b76e:	4633      	mov	r3, r6
 800b770:	461e      	mov	r6, r3
 800b772:	3b01      	subs	r3, #1
 800b774:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b778:	2a39      	cmp	r2, #57	@ 0x39
 800b77a:	d052      	beq.n	800b822 <_dtoa_r+0xb12>
 800b77c:	3201      	adds	r2, #1
 800b77e:	701a      	strb	r2, [r3, #0]
 800b780:	e612      	b.n	800b3a8 <_dtoa_r+0x698>
 800b782:	2a00      	cmp	r2, #0
 800b784:	dd07      	ble.n	800b796 <_dtoa_r+0xa86>
 800b786:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b78a:	d0ed      	beq.n	800b768 <_dtoa_r+0xa58>
 800b78c:	9a00      	ldr	r2, [sp, #0]
 800b78e:	f108 0301 	add.w	r3, r8, #1
 800b792:	7013      	strb	r3, [r2, #0]
 800b794:	e608      	b.n	800b3a8 <_dtoa_r+0x698>
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	9a07      	ldr	r2, [sp, #28]
 800b79a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d028      	beq.n	800b7f6 <_dtoa_r+0xae6>
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	220a      	movs	r2, #10
 800b7aa:	4658      	mov	r0, fp
 800b7ac:	f000 f9d6 	bl	800bb5c <__multadd>
 800b7b0:	42af      	cmp	r7, r5
 800b7b2:	4681      	mov	r9, r0
 800b7b4:	f04f 0300 	mov.w	r3, #0
 800b7b8:	f04f 020a 	mov.w	r2, #10
 800b7bc:	4639      	mov	r1, r7
 800b7be:	4658      	mov	r0, fp
 800b7c0:	d107      	bne.n	800b7d2 <_dtoa_r+0xac2>
 800b7c2:	f000 f9cb 	bl	800bb5c <__multadd>
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	9b07      	ldr	r3, [sp, #28]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	9307      	str	r3, [sp, #28]
 800b7d0:	e774      	b.n	800b6bc <_dtoa_r+0x9ac>
 800b7d2:	f000 f9c3 	bl	800bb5c <__multadd>
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4607      	mov	r7, r0
 800b7da:	2300      	movs	r3, #0
 800b7dc:	220a      	movs	r2, #10
 800b7de:	4658      	mov	r0, fp
 800b7e0:	f000 f9bc 	bl	800bb5c <__multadd>
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	e7f0      	b.n	800b7ca <_dtoa_r+0xaba>
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfcc      	ite	gt
 800b7ee:	461e      	movgt	r6, r3
 800b7f0:	2601      	movle	r6, #1
 800b7f2:	4456      	add	r6, sl
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	4658      	mov	r0, fp
 800b7fc:	f000 fb5a 	bl	800beb4 <__lshift>
 800b800:	4621      	mov	r1, r4
 800b802:	4681      	mov	r9, r0
 800b804:	f000 fbc2 	bl	800bf8c <__mcmp>
 800b808:	2800      	cmp	r0, #0
 800b80a:	dcb0      	bgt.n	800b76e <_dtoa_r+0xa5e>
 800b80c:	d102      	bne.n	800b814 <_dtoa_r+0xb04>
 800b80e:	f018 0f01 	tst.w	r8, #1
 800b812:	d1ac      	bne.n	800b76e <_dtoa_r+0xa5e>
 800b814:	4633      	mov	r3, r6
 800b816:	461e      	mov	r6, r3
 800b818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b81c:	2a30      	cmp	r2, #48	@ 0x30
 800b81e:	d0fa      	beq.n	800b816 <_dtoa_r+0xb06>
 800b820:	e5c2      	b.n	800b3a8 <_dtoa_r+0x698>
 800b822:	459a      	cmp	sl, r3
 800b824:	d1a4      	bne.n	800b770 <_dtoa_r+0xa60>
 800b826:	9b04      	ldr	r3, [sp, #16]
 800b828:	3301      	adds	r3, #1
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	2331      	movs	r3, #49	@ 0x31
 800b82e:	f88a 3000 	strb.w	r3, [sl]
 800b832:	e5b9      	b.n	800b3a8 <_dtoa_r+0x698>
 800b834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b836:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b894 <_dtoa_r+0xb84>
 800b83a:	b11b      	cbz	r3, 800b844 <_dtoa_r+0xb34>
 800b83c:	f10a 0308 	add.w	r3, sl, #8
 800b840:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	4650      	mov	r0, sl
 800b846:	b019      	add	sp, #100	@ 0x64
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b84e:	2b01      	cmp	r3, #1
 800b850:	f77f ae37 	ble.w	800b4c2 <_dtoa_r+0x7b2>
 800b854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b856:	930a      	str	r3, [sp, #40]	@ 0x28
 800b858:	2001      	movs	r0, #1
 800b85a:	e655      	b.n	800b508 <_dtoa_r+0x7f8>
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f77f aed6 	ble.w	800b610 <_dtoa_r+0x900>
 800b864:	4656      	mov	r6, sl
 800b866:	4621      	mov	r1, r4
 800b868:	4648      	mov	r0, r9
 800b86a:	f7ff f9c6 	bl	800abfa <quorem>
 800b86e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b872:	f806 8b01 	strb.w	r8, [r6], #1
 800b876:	9b00      	ldr	r3, [sp, #0]
 800b878:	eba6 020a 	sub.w	r2, r6, sl
 800b87c:	4293      	cmp	r3, r2
 800b87e:	ddb3      	ble.n	800b7e8 <_dtoa_r+0xad8>
 800b880:	4649      	mov	r1, r9
 800b882:	2300      	movs	r3, #0
 800b884:	220a      	movs	r2, #10
 800b886:	4658      	mov	r0, fp
 800b888:	f000 f968 	bl	800bb5c <__multadd>
 800b88c:	4681      	mov	r9, r0
 800b88e:	e7ea      	b.n	800b866 <_dtoa_r+0xb56>
 800b890:	0800df4c 	.word	0x0800df4c
 800b894:	0800ded0 	.word	0x0800ded0

0800b898 <_free_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4605      	mov	r5, r0
 800b89c:	2900      	cmp	r1, #0
 800b89e:	d041      	beq.n	800b924 <_free_r+0x8c>
 800b8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a4:	1f0c      	subs	r4, r1, #4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfb8      	it	lt
 800b8aa:	18e4      	addlt	r4, r4, r3
 800b8ac:	f000 f8e8 	bl	800ba80 <__malloc_lock>
 800b8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b928 <_free_r+0x90>)
 800b8b2:	6813      	ldr	r3, [r2, #0]
 800b8b4:	b933      	cbnz	r3, 800b8c4 <_free_r+0x2c>
 800b8b6:	6063      	str	r3, [r4, #4]
 800b8b8:	6014      	str	r4, [r2, #0]
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8c0:	f000 b8e4 	b.w	800ba8c <__malloc_unlock>
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	d908      	bls.n	800b8da <_free_r+0x42>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	1821      	adds	r1, r4, r0
 800b8cc:	428b      	cmp	r3, r1
 800b8ce:	bf01      	itttt	eq
 800b8d0:	6819      	ldreq	r1, [r3, #0]
 800b8d2:	685b      	ldreq	r3, [r3, #4]
 800b8d4:	1809      	addeq	r1, r1, r0
 800b8d6:	6021      	streq	r1, [r4, #0]
 800b8d8:	e7ed      	b.n	800b8b6 <_free_r+0x1e>
 800b8da:	461a      	mov	r2, r3
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	b10b      	cbz	r3, 800b8e4 <_free_r+0x4c>
 800b8e0:	42a3      	cmp	r3, r4
 800b8e2:	d9fa      	bls.n	800b8da <_free_r+0x42>
 800b8e4:	6811      	ldr	r1, [r2, #0]
 800b8e6:	1850      	adds	r0, r2, r1
 800b8e8:	42a0      	cmp	r0, r4
 800b8ea:	d10b      	bne.n	800b904 <_free_r+0x6c>
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	4401      	add	r1, r0
 800b8f0:	1850      	adds	r0, r2, r1
 800b8f2:	4283      	cmp	r3, r0
 800b8f4:	6011      	str	r1, [r2, #0]
 800b8f6:	d1e0      	bne.n	800b8ba <_free_r+0x22>
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	6053      	str	r3, [r2, #4]
 800b8fe:	4408      	add	r0, r1
 800b900:	6010      	str	r0, [r2, #0]
 800b902:	e7da      	b.n	800b8ba <_free_r+0x22>
 800b904:	d902      	bls.n	800b90c <_free_r+0x74>
 800b906:	230c      	movs	r3, #12
 800b908:	602b      	str	r3, [r5, #0]
 800b90a:	e7d6      	b.n	800b8ba <_free_r+0x22>
 800b90c:	6820      	ldr	r0, [r4, #0]
 800b90e:	1821      	adds	r1, r4, r0
 800b910:	428b      	cmp	r3, r1
 800b912:	bf04      	itt	eq
 800b914:	6819      	ldreq	r1, [r3, #0]
 800b916:	685b      	ldreq	r3, [r3, #4]
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	bf04      	itt	eq
 800b91c:	1809      	addeq	r1, r1, r0
 800b91e:	6021      	streq	r1, [r4, #0]
 800b920:	6054      	str	r4, [r2, #4]
 800b922:	e7ca      	b.n	800b8ba <_free_r+0x22>
 800b924:	bd38      	pop	{r3, r4, r5, pc}
 800b926:	bf00      	nop
 800b928:	20019e78 	.word	0x20019e78

0800b92c <malloc>:
 800b92c:	4b02      	ldr	r3, [pc, #8]	@ (800b938 <malloc+0xc>)
 800b92e:	4601      	mov	r1, r0
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	f000 b825 	b.w	800b980 <_malloc_r>
 800b936:	bf00      	nop
 800b938:	20000020 	.word	0x20000020

0800b93c <sbrk_aligned>:
 800b93c:	b570      	push	{r4, r5, r6, lr}
 800b93e:	4e0f      	ldr	r6, [pc, #60]	@ (800b97c <sbrk_aligned+0x40>)
 800b940:	460c      	mov	r4, r1
 800b942:	6831      	ldr	r1, [r6, #0]
 800b944:	4605      	mov	r5, r0
 800b946:	b911      	cbnz	r1, 800b94e <sbrk_aligned+0x12>
 800b948:	f000 ff60 	bl	800c80c <_sbrk_r>
 800b94c:	6030      	str	r0, [r6, #0]
 800b94e:	4621      	mov	r1, r4
 800b950:	4628      	mov	r0, r5
 800b952:	f000 ff5b 	bl	800c80c <_sbrk_r>
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	d103      	bne.n	800b962 <sbrk_aligned+0x26>
 800b95a:	f04f 34ff 	mov.w	r4, #4294967295
 800b95e:	4620      	mov	r0, r4
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	1cc4      	adds	r4, r0, #3
 800b964:	f024 0403 	bic.w	r4, r4, #3
 800b968:	42a0      	cmp	r0, r4
 800b96a:	d0f8      	beq.n	800b95e <sbrk_aligned+0x22>
 800b96c:	1a21      	subs	r1, r4, r0
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 ff4c 	bl	800c80c <_sbrk_r>
 800b974:	3001      	adds	r0, #1
 800b976:	d1f2      	bne.n	800b95e <sbrk_aligned+0x22>
 800b978:	e7ef      	b.n	800b95a <sbrk_aligned+0x1e>
 800b97a:	bf00      	nop
 800b97c:	20019e74 	.word	0x20019e74

0800b980 <_malloc_r>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	1ccd      	adds	r5, r1, #3
 800b986:	f025 0503 	bic.w	r5, r5, #3
 800b98a:	3508      	adds	r5, #8
 800b98c:	2d0c      	cmp	r5, #12
 800b98e:	bf38      	it	cc
 800b990:	250c      	movcc	r5, #12
 800b992:	2d00      	cmp	r5, #0
 800b994:	4606      	mov	r6, r0
 800b996:	db01      	blt.n	800b99c <_malloc_r+0x1c>
 800b998:	42a9      	cmp	r1, r5
 800b99a:	d904      	bls.n	800b9a6 <_malloc_r+0x26>
 800b99c:	230c      	movs	r3, #12
 800b99e:	6033      	str	r3, [r6, #0]
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba7c <_malloc_r+0xfc>
 800b9aa:	f000 f869 	bl	800ba80 <__malloc_lock>
 800b9ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b2:	461c      	mov	r4, r3
 800b9b4:	bb44      	cbnz	r4, 800ba08 <_malloc_r+0x88>
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f7ff ffbf 	bl	800b93c <sbrk_aligned>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	d158      	bne.n	800ba76 <_malloc_r+0xf6>
 800b9c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b9c8:	4627      	mov	r7, r4
 800b9ca:	2f00      	cmp	r7, #0
 800b9cc:	d143      	bne.n	800ba56 <_malloc_r+0xd6>
 800b9ce:	2c00      	cmp	r4, #0
 800b9d0:	d04b      	beq.n	800ba6a <_malloc_r+0xea>
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	eb04 0903 	add.w	r9, r4, r3
 800b9dc:	f000 ff16 	bl	800c80c <_sbrk_r>
 800b9e0:	4581      	cmp	r9, r0
 800b9e2:	d142      	bne.n	800ba6a <_malloc_r+0xea>
 800b9e4:	6821      	ldr	r1, [r4, #0]
 800b9e6:	1a6d      	subs	r5, r5, r1
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7ff ffa6 	bl	800b93c <sbrk_aligned>
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	d03a      	beq.n	800ba6a <_malloc_r+0xea>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	442b      	add	r3, r5
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b9fe:	685a      	ldr	r2, [r3, #4]
 800ba00:	bb62      	cbnz	r2, 800ba5c <_malloc_r+0xdc>
 800ba02:	f8c8 7000 	str.w	r7, [r8]
 800ba06:	e00f      	b.n	800ba28 <_malloc_r+0xa8>
 800ba08:	6822      	ldr	r2, [r4, #0]
 800ba0a:	1b52      	subs	r2, r2, r5
 800ba0c:	d420      	bmi.n	800ba50 <_malloc_r+0xd0>
 800ba0e:	2a0b      	cmp	r2, #11
 800ba10:	d917      	bls.n	800ba42 <_malloc_r+0xc2>
 800ba12:	1961      	adds	r1, r4, r5
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	6025      	str	r5, [r4, #0]
 800ba18:	bf18      	it	ne
 800ba1a:	6059      	strne	r1, [r3, #4]
 800ba1c:	6863      	ldr	r3, [r4, #4]
 800ba1e:	bf08      	it	eq
 800ba20:	f8c8 1000 	streq.w	r1, [r8]
 800ba24:	5162      	str	r2, [r4, r5]
 800ba26:	604b      	str	r3, [r1, #4]
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f000 f82f 	bl	800ba8c <__malloc_unlock>
 800ba2e:	f104 000b 	add.w	r0, r4, #11
 800ba32:	1d23      	adds	r3, r4, #4
 800ba34:	f020 0007 	bic.w	r0, r0, #7
 800ba38:	1ac2      	subs	r2, r0, r3
 800ba3a:	bf1c      	itt	ne
 800ba3c:	1a1b      	subne	r3, r3, r0
 800ba3e:	50a3      	strne	r3, [r4, r2]
 800ba40:	e7af      	b.n	800b9a2 <_malloc_r+0x22>
 800ba42:	6862      	ldr	r2, [r4, #4]
 800ba44:	42a3      	cmp	r3, r4
 800ba46:	bf0c      	ite	eq
 800ba48:	f8c8 2000 	streq.w	r2, [r8]
 800ba4c:	605a      	strne	r2, [r3, #4]
 800ba4e:	e7eb      	b.n	800ba28 <_malloc_r+0xa8>
 800ba50:	4623      	mov	r3, r4
 800ba52:	6864      	ldr	r4, [r4, #4]
 800ba54:	e7ae      	b.n	800b9b4 <_malloc_r+0x34>
 800ba56:	463c      	mov	r4, r7
 800ba58:	687f      	ldr	r7, [r7, #4]
 800ba5a:	e7b6      	b.n	800b9ca <_malloc_r+0x4a>
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	d1fb      	bne.n	800ba5c <_malloc_r+0xdc>
 800ba64:	2300      	movs	r3, #0
 800ba66:	6053      	str	r3, [r2, #4]
 800ba68:	e7de      	b.n	800ba28 <_malloc_r+0xa8>
 800ba6a:	230c      	movs	r3, #12
 800ba6c:	6033      	str	r3, [r6, #0]
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f000 f80c 	bl	800ba8c <__malloc_unlock>
 800ba74:	e794      	b.n	800b9a0 <_malloc_r+0x20>
 800ba76:	6005      	str	r5, [r0, #0]
 800ba78:	e7d6      	b.n	800ba28 <_malloc_r+0xa8>
 800ba7a:	bf00      	nop
 800ba7c:	20019e78 	.word	0x20019e78

0800ba80 <__malloc_lock>:
 800ba80:	4801      	ldr	r0, [pc, #4]	@ (800ba88 <__malloc_lock+0x8>)
 800ba82:	f7ff b8aa 	b.w	800abda <__retarget_lock_acquire_recursive>
 800ba86:	bf00      	nop
 800ba88:	20019e70 	.word	0x20019e70

0800ba8c <__malloc_unlock>:
 800ba8c:	4801      	ldr	r0, [pc, #4]	@ (800ba94 <__malloc_unlock+0x8>)
 800ba8e:	f7ff b8a5 	b.w	800abdc <__retarget_lock_release_recursive>
 800ba92:	bf00      	nop
 800ba94:	20019e70 	.word	0x20019e70

0800ba98 <_Balloc>:
 800ba98:	b570      	push	{r4, r5, r6, lr}
 800ba9a:	69c6      	ldr	r6, [r0, #28]
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	460d      	mov	r5, r1
 800baa0:	b976      	cbnz	r6, 800bac0 <_Balloc+0x28>
 800baa2:	2010      	movs	r0, #16
 800baa4:	f7ff ff42 	bl	800b92c <malloc>
 800baa8:	4602      	mov	r2, r0
 800baaa:	61e0      	str	r0, [r4, #28]
 800baac:	b920      	cbnz	r0, 800bab8 <_Balloc+0x20>
 800baae:	4b18      	ldr	r3, [pc, #96]	@ (800bb10 <_Balloc+0x78>)
 800bab0:	4818      	ldr	r0, [pc, #96]	@ (800bb14 <_Balloc+0x7c>)
 800bab2:	216b      	movs	r1, #107	@ 0x6b
 800bab4:	f000 feba 	bl	800c82c <__assert_func>
 800bab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800babc:	6006      	str	r6, [r0, #0]
 800babe:	60c6      	str	r6, [r0, #12]
 800bac0:	69e6      	ldr	r6, [r4, #28]
 800bac2:	68f3      	ldr	r3, [r6, #12]
 800bac4:	b183      	cbz	r3, 800bae8 <_Balloc+0x50>
 800bac6:	69e3      	ldr	r3, [r4, #28]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bace:	b9b8      	cbnz	r0, 800bb00 <_Balloc+0x68>
 800bad0:	2101      	movs	r1, #1
 800bad2:	fa01 f605 	lsl.w	r6, r1, r5
 800bad6:	1d72      	adds	r2, r6, #5
 800bad8:	0092      	lsls	r2, r2, #2
 800bada:	4620      	mov	r0, r4
 800badc:	f000 fec4 	bl	800c868 <_calloc_r>
 800bae0:	b160      	cbz	r0, 800bafc <_Balloc+0x64>
 800bae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bae6:	e00e      	b.n	800bb06 <_Balloc+0x6e>
 800bae8:	2221      	movs	r2, #33	@ 0x21
 800baea:	2104      	movs	r1, #4
 800baec:	4620      	mov	r0, r4
 800baee:	f000 febb 	bl	800c868 <_calloc_r>
 800baf2:	69e3      	ldr	r3, [r4, #28]
 800baf4:	60f0      	str	r0, [r6, #12]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e4      	bne.n	800bac6 <_Balloc+0x2e>
 800bafc:	2000      	movs	r0, #0
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	6802      	ldr	r2, [r0, #0]
 800bb02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb06:	2300      	movs	r3, #0
 800bb08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb0c:	e7f7      	b.n	800bafe <_Balloc+0x66>
 800bb0e:	bf00      	nop
 800bb10:	0800dedd 	.word	0x0800dedd
 800bb14:	0800df5d 	.word	0x0800df5d

0800bb18 <_Bfree>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	69c6      	ldr	r6, [r0, #28]
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	460c      	mov	r4, r1
 800bb20:	b976      	cbnz	r6, 800bb40 <_Bfree+0x28>
 800bb22:	2010      	movs	r0, #16
 800bb24:	f7ff ff02 	bl	800b92c <malloc>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	61e8      	str	r0, [r5, #28]
 800bb2c:	b920      	cbnz	r0, 800bb38 <_Bfree+0x20>
 800bb2e:	4b09      	ldr	r3, [pc, #36]	@ (800bb54 <_Bfree+0x3c>)
 800bb30:	4809      	ldr	r0, [pc, #36]	@ (800bb58 <_Bfree+0x40>)
 800bb32:	218f      	movs	r1, #143	@ 0x8f
 800bb34:	f000 fe7a 	bl	800c82c <__assert_func>
 800bb38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb3c:	6006      	str	r6, [r0, #0]
 800bb3e:	60c6      	str	r6, [r0, #12]
 800bb40:	b13c      	cbz	r4, 800bb52 <_Bfree+0x3a>
 800bb42:	69eb      	ldr	r3, [r5, #28]
 800bb44:	6862      	ldr	r2, [r4, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb4c:	6021      	str	r1, [r4, #0]
 800bb4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	0800dedd 	.word	0x0800dedd
 800bb58:	0800df5d 	.word	0x0800df5d

0800bb5c <__multadd>:
 800bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb60:	690d      	ldr	r5, [r1, #16]
 800bb62:	4607      	mov	r7, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	461e      	mov	r6, r3
 800bb68:	f101 0c14 	add.w	ip, r1, #20
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb72:	b299      	uxth	r1, r3
 800bb74:	fb02 6101 	mla	r1, r2, r1, r6
 800bb78:	0c1e      	lsrs	r6, r3, #16
 800bb7a:	0c0b      	lsrs	r3, r1, #16
 800bb7c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb80:	b289      	uxth	r1, r1
 800bb82:	3001      	adds	r0, #1
 800bb84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb88:	4285      	cmp	r5, r0
 800bb8a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb92:	dcec      	bgt.n	800bb6e <__multadd+0x12>
 800bb94:	b30e      	cbz	r6, 800bbda <__multadd+0x7e>
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	42ab      	cmp	r3, r5
 800bb9a:	dc19      	bgt.n	800bbd0 <__multadd+0x74>
 800bb9c:	6861      	ldr	r1, [r4, #4]
 800bb9e:	4638      	mov	r0, r7
 800bba0:	3101      	adds	r1, #1
 800bba2:	f7ff ff79 	bl	800ba98 <_Balloc>
 800bba6:	4680      	mov	r8, r0
 800bba8:	b928      	cbnz	r0, 800bbb6 <__multadd+0x5a>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe0 <__multadd+0x84>)
 800bbae:	480d      	ldr	r0, [pc, #52]	@ (800bbe4 <__multadd+0x88>)
 800bbb0:	21ba      	movs	r1, #186	@ 0xba
 800bbb2:	f000 fe3b 	bl	800c82c <__assert_func>
 800bbb6:	6922      	ldr	r2, [r4, #16]
 800bbb8:	3202      	adds	r2, #2
 800bbba:	f104 010c 	add.w	r1, r4, #12
 800bbbe:	0092      	lsls	r2, r2, #2
 800bbc0:	300c      	adds	r0, #12
 800bbc2:	f7ff f80c 	bl	800abde <memcpy>
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4638      	mov	r0, r7
 800bbca:	f7ff ffa5 	bl	800bb18 <_Bfree>
 800bbce:	4644      	mov	r4, r8
 800bbd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	615e      	str	r6, [r3, #20]
 800bbd8:	6125      	str	r5, [r4, #16]
 800bbda:	4620      	mov	r0, r4
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	0800df4c 	.word	0x0800df4c
 800bbe4:	0800df5d 	.word	0x0800df5d

0800bbe8 <__hi0bits>:
 800bbe8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bbec:	4603      	mov	r3, r0
 800bbee:	bf36      	itet	cc
 800bbf0:	0403      	lslcc	r3, r0, #16
 800bbf2:	2000      	movcs	r0, #0
 800bbf4:	2010      	movcc	r0, #16
 800bbf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbfa:	bf3c      	itt	cc
 800bbfc:	021b      	lslcc	r3, r3, #8
 800bbfe:	3008      	addcc	r0, #8
 800bc00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc04:	bf3c      	itt	cc
 800bc06:	011b      	lslcc	r3, r3, #4
 800bc08:	3004      	addcc	r0, #4
 800bc0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc0e:	bf3c      	itt	cc
 800bc10:	009b      	lslcc	r3, r3, #2
 800bc12:	3002      	addcc	r0, #2
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	db05      	blt.n	800bc24 <__hi0bits+0x3c>
 800bc18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc1c:	f100 0001 	add.w	r0, r0, #1
 800bc20:	bf08      	it	eq
 800bc22:	2020      	moveq	r0, #32
 800bc24:	4770      	bx	lr

0800bc26 <__lo0bits>:
 800bc26:	6803      	ldr	r3, [r0, #0]
 800bc28:	4602      	mov	r2, r0
 800bc2a:	f013 0007 	ands.w	r0, r3, #7
 800bc2e:	d00b      	beq.n	800bc48 <__lo0bits+0x22>
 800bc30:	07d9      	lsls	r1, r3, #31
 800bc32:	d421      	bmi.n	800bc78 <__lo0bits+0x52>
 800bc34:	0798      	lsls	r0, r3, #30
 800bc36:	bf49      	itett	mi
 800bc38:	085b      	lsrmi	r3, r3, #1
 800bc3a:	089b      	lsrpl	r3, r3, #2
 800bc3c:	2001      	movmi	r0, #1
 800bc3e:	6013      	strmi	r3, [r2, #0]
 800bc40:	bf5c      	itt	pl
 800bc42:	6013      	strpl	r3, [r2, #0]
 800bc44:	2002      	movpl	r0, #2
 800bc46:	4770      	bx	lr
 800bc48:	b299      	uxth	r1, r3
 800bc4a:	b909      	cbnz	r1, 800bc50 <__lo0bits+0x2a>
 800bc4c:	0c1b      	lsrs	r3, r3, #16
 800bc4e:	2010      	movs	r0, #16
 800bc50:	b2d9      	uxtb	r1, r3
 800bc52:	b909      	cbnz	r1, 800bc58 <__lo0bits+0x32>
 800bc54:	3008      	adds	r0, #8
 800bc56:	0a1b      	lsrs	r3, r3, #8
 800bc58:	0719      	lsls	r1, r3, #28
 800bc5a:	bf04      	itt	eq
 800bc5c:	091b      	lsreq	r3, r3, #4
 800bc5e:	3004      	addeq	r0, #4
 800bc60:	0799      	lsls	r1, r3, #30
 800bc62:	bf04      	itt	eq
 800bc64:	089b      	lsreq	r3, r3, #2
 800bc66:	3002      	addeq	r0, #2
 800bc68:	07d9      	lsls	r1, r3, #31
 800bc6a:	d403      	bmi.n	800bc74 <__lo0bits+0x4e>
 800bc6c:	085b      	lsrs	r3, r3, #1
 800bc6e:	f100 0001 	add.w	r0, r0, #1
 800bc72:	d003      	beq.n	800bc7c <__lo0bits+0x56>
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	4770      	bx	lr
 800bc78:	2000      	movs	r0, #0
 800bc7a:	4770      	bx	lr
 800bc7c:	2020      	movs	r0, #32
 800bc7e:	4770      	bx	lr

0800bc80 <__i2b>:
 800bc80:	b510      	push	{r4, lr}
 800bc82:	460c      	mov	r4, r1
 800bc84:	2101      	movs	r1, #1
 800bc86:	f7ff ff07 	bl	800ba98 <_Balloc>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	b928      	cbnz	r0, 800bc9a <__i2b+0x1a>
 800bc8e:	4b05      	ldr	r3, [pc, #20]	@ (800bca4 <__i2b+0x24>)
 800bc90:	4805      	ldr	r0, [pc, #20]	@ (800bca8 <__i2b+0x28>)
 800bc92:	f240 1145 	movw	r1, #325	@ 0x145
 800bc96:	f000 fdc9 	bl	800c82c <__assert_func>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	6144      	str	r4, [r0, #20]
 800bc9e:	6103      	str	r3, [r0, #16]
 800bca0:	bd10      	pop	{r4, pc}
 800bca2:	bf00      	nop
 800bca4:	0800df4c 	.word	0x0800df4c
 800bca8:	0800df5d 	.word	0x0800df5d

0800bcac <__multiply>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	690a      	ldr	r2, [r1, #16]
 800bcb4:	6923      	ldr	r3, [r4, #16]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	bfa8      	it	ge
 800bcba:	4623      	movge	r3, r4
 800bcbc:	460f      	mov	r7, r1
 800bcbe:	bfa4      	itt	ge
 800bcc0:	460c      	movge	r4, r1
 800bcc2:	461f      	movge	r7, r3
 800bcc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bcc8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bccc:	68a3      	ldr	r3, [r4, #8]
 800bcce:	6861      	ldr	r1, [r4, #4]
 800bcd0:	eb0a 0609 	add.w	r6, sl, r9
 800bcd4:	42b3      	cmp	r3, r6
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	bfb8      	it	lt
 800bcda:	3101      	addlt	r1, #1
 800bcdc:	f7ff fedc 	bl	800ba98 <_Balloc>
 800bce0:	b930      	cbnz	r0, 800bcf0 <__multiply+0x44>
 800bce2:	4602      	mov	r2, r0
 800bce4:	4b44      	ldr	r3, [pc, #272]	@ (800bdf8 <__multiply+0x14c>)
 800bce6:	4845      	ldr	r0, [pc, #276]	@ (800bdfc <__multiply+0x150>)
 800bce8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bcec:	f000 fd9e 	bl	800c82c <__assert_func>
 800bcf0:	f100 0514 	add.w	r5, r0, #20
 800bcf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4543      	cmp	r3, r8
 800bcfe:	d321      	bcc.n	800bd44 <__multiply+0x98>
 800bd00:	f107 0114 	add.w	r1, r7, #20
 800bd04:	f104 0214 	add.w	r2, r4, #20
 800bd08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bd0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bd10:	9302      	str	r3, [sp, #8]
 800bd12:	1b13      	subs	r3, r2, r4
 800bd14:	3b15      	subs	r3, #21
 800bd16:	f023 0303 	bic.w	r3, r3, #3
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	f104 0715 	add.w	r7, r4, #21
 800bd20:	42ba      	cmp	r2, r7
 800bd22:	bf38      	it	cc
 800bd24:	2304      	movcc	r3, #4
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	9b02      	ldr	r3, [sp, #8]
 800bd2a:	9103      	str	r1, [sp, #12]
 800bd2c:	428b      	cmp	r3, r1
 800bd2e:	d80c      	bhi.n	800bd4a <__multiply+0x9e>
 800bd30:	2e00      	cmp	r6, #0
 800bd32:	dd03      	ble.n	800bd3c <__multiply+0x90>
 800bd34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d05b      	beq.n	800bdf4 <__multiply+0x148>
 800bd3c:	6106      	str	r6, [r0, #16]
 800bd3e:	b005      	add	sp, #20
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	f843 2b04 	str.w	r2, [r3], #4
 800bd48:	e7d8      	b.n	800bcfc <__multiply+0x50>
 800bd4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd4e:	f1ba 0f00 	cmp.w	sl, #0
 800bd52:	d024      	beq.n	800bd9e <__multiply+0xf2>
 800bd54:	f104 0e14 	add.w	lr, r4, #20
 800bd58:	46a9      	mov	r9, r5
 800bd5a:	f04f 0c00 	mov.w	ip, #0
 800bd5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd62:	f8d9 3000 	ldr.w	r3, [r9]
 800bd66:	fa1f fb87 	uxth.w	fp, r7
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bd74:	f8d9 7000 	ldr.w	r7, [r9]
 800bd78:	4463      	add	r3, ip
 800bd7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd7e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bd82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd8c:	4572      	cmp	r2, lr
 800bd8e:	f849 3b04 	str.w	r3, [r9], #4
 800bd92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd96:	d8e2      	bhi.n	800bd5e <__multiply+0xb2>
 800bd98:	9b01      	ldr	r3, [sp, #4]
 800bd9a:	f845 c003 	str.w	ip, [r5, r3]
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bda4:	3104      	adds	r1, #4
 800bda6:	f1b9 0f00 	cmp.w	r9, #0
 800bdaa:	d021      	beq.n	800bdf0 <__multiply+0x144>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	f104 0c14 	add.w	ip, r4, #20
 800bdb2:	46ae      	mov	lr, r5
 800bdb4:	f04f 0a00 	mov.w	sl, #0
 800bdb8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bdc0:	fb09 770b 	mla	r7, r9, fp, r7
 800bdc4:	4457      	add	r7, sl
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bdcc:	f84e 3b04 	str.w	r3, [lr], #4
 800bdd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdd8:	f8be 3000 	ldrh.w	r3, [lr]
 800bddc:	fb09 330a 	mla	r3, r9, sl, r3
 800bde0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bde4:	4562      	cmp	r2, ip
 800bde6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdea:	d8e5      	bhi.n	800bdb8 <__multiply+0x10c>
 800bdec:	9f01      	ldr	r7, [sp, #4]
 800bdee:	51eb      	str	r3, [r5, r7]
 800bdf0:	3504      	adds	r5, #4
 800bdf2:	e799      	b.n	800bd28 <__multiply+0x7c>
 800bdf4:	3e01      	subs	r6, #1
 800bdf6:	e79b      	b.n	800bd30 <__multiply+0x84>
 800bdf8:	0800df4c 	.word	0x0800df4c
 800bdfc:	0800df5d 	.word	0x0800df5d

0800be00 <__pow5mult>:
 800be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be04:	4615      	mov	r5, r2
 800be06:	f012 0203 	ands.w	r2, r2, #3
 800be0a:	4607      	mov	r7, r0
 800be0c:	460e      	mov	r6, r1
 800be0e:	d007      	beq.n	800be20 <__pow5mult+0x20>
 800be10:	4c25      	ldr	r4, [pc, #148]	@ (800bea8 <__pow5mult+0xa8>)
 800be12:	3a01      	subs	r2, #1
 800be14:	2300      	movs	r3, #0
 800be16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be1a:	f7ff fe9f 	bl	800bb5c <__multadd>
 800be1e:	4606      	mov	r6, r0
 800be20:	10ad      	asrs	r5, r5, #2
 800be22:	d03d      	beq.n	800bea0 <__pow5mult+0xa0>
 800be24:	69fc      	ldr	r4, [r7, #28]
 800be26:	b97c      	cbnz	r4, 800be48 <__pow5mult+0x48>
 800be28:	2010      	movs	r0, #16
 800be2a:	f7ff fd7f 	bl	800b92c <malloc>
 800be2e:	4602      	mov	r2, r0
 800be30:	61f8      	str	r0, [r7, #28]
 800be32:	b928      	cbnz	r0, 800be40 <__pow5mult+0x40>
 800be34:	4b1d      	ldr	r3, [pc, #116]	@ (800beac <__pow5mult+0xac>)
 800be36:	481e      	ldr	r0, [pc, #120]	@ (800beb0 <__pow5mult+0xb0>)
 800be38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be3c:	f000 fcf6 	bl	800c82c <__assert_func>
 800be40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be44:	6004      	str	r4, [r0, #0]
 800be46:	60c4      	str	r4, [r0, #12]
 800be48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be50:	b94c      	cbnz	r4, 800be66 <__pow5mult+0x66>
 800be52:	f240 2171 	movw	r1, #625	@ 0x271
 800be56:	4638      	mov	r0, r7
 800be58:	f7ff ff12 	bl	800bc80 <__i2b>
 800be5c:	2300      	movs	r3, #0
 800be5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be62:	4604      	mov	r4, r0
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	f04f 0900 	mov.w	r9, #0
 800be6a:	07eb      	lsls	r3, r5, #31
 800be6c:	d50a      	bpl.n	800be84 <__pow5mult+0x84>
 800be6e:	4631      	mov	r1, r6
 800be70:	4622      	mov	r2, r4
 800be72:	4638      	mov	r0, r7
 800be74:	f7ff ff1a 	bl	800bcac <__multiply>
 800be78:	4631      	mov	r1, r6
 800be7a:	4680      	mov	r8, r0
 800be7c:	4638      	mov	r0, r7
 800be7e:	f7ff fe4b 	bl	800bb18 <_Bfree>
 800be82:	4646      	mov	r6, r8
 800be84:	106d      	asrs	r5, r5, #1
 800be86:	d00b      	beq.n	800bea0 <__pow5mult+0xa0>
 800be88:	6820      	ldr	r0, [r4, #0]
 800be8a:	b938      	cbnz	r0, 800be9c <__pow5mult+0x9c>
 800be8c:	4622      	mov	r2, r4
 800be8e:	4621      	mov	r1, r4
 800be90:	4638      	mov	r0, r7
 800be92:	f7ff ff0b 	bl	800bcac <__multiply>
 800be96:	6020      	str	r0, [r4, #0]
 800be98:	f8c0 9000 	str.w	r9, [r0]
 800be9c:	4604      	mov	r4, r0
 800be9e:	e7e4      	b.n	800be6a <__pow5mult+0x6a>
 800bea0:	4630      	mov	r0, r6
 800bea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea6:	bf00      	nop
 800bea8:	0800dfb8 	.word	0x0800dfb8
 800beac:	0800dedd 	.word	0x0800dedd
 800beb0:	0800df5d 	.word	0x0800df5d

0800beb4 <__lshift>:
 800beb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb8:	460c      	mov	r4, r1
 800beba:	6849      	ldr	r1, [r1, #4]
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bec2:	68a3      	ldr	r3, [r4, #8]
 800bec4:	4607      	mov	r7, r0
 800bec6:	4691      	mov	r9, r2
 800bec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800becc:	f108 0601 	add.w	r6, r8, #1
 800bed0:	42b3      	cmp	r3, r6
 800bed2:	db0b      	blt.n	800beec <__lshift+0x38>
 800bed4:	4638      	mov	r0, r7
 800bed6:	f7ff fddf 	bl	800ba98 <_Balloc>
 800beda:	4605      	mov	r5, r0
 800bedc:	b948      	cbnz	r0, 800bef2 <__lshift+0x3e>
 800bede:	4602      	mov	r2, r0
 800bee0:	4b28      	ldr	r3, [pc, #160]	@ (800bf84 <__lshift+0xd0>)
 800bee2:	4829      	ldr	r0, [pc, #164]	@ (800bf88 <__lshift+0xd4>)
 800bee4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bee8:	f000 fca0 	bl	800c82c <__assert_func>
 800beec:	3101      	adds	r1, #1
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	e7ee      	b.n	800bed0 <__lshift+0x1c>
 800bef2:	2300      	movs	r3, #0
 800bef4:	f100 0114 	add.w	r1, r0, #20
 800bef8:	f100 0210 	add.w	r2, r0, #16
 800befc:	4618      	mov	r0, r3
 800befe:	4553      	cmp	r3, sl
 800bf00:	db33      	blt.n	800bf6a <__lshift+0xb6>
 800bf02:	6920      	ldr	r0, [r4, #16]
 800bf04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf08:	f104 0314 	add.w	r3, r4, #20
 800bf0c:	f019 091f 	ands.w	r9, r9, #31
 800bf10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf18:	d02b      	beq.n	800bf72 <__lshift+0xbe>
 800bf1a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf1e:	468a      	mov	sl, r1
 800bf20:	2200      	movs	r2, #0
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	fa00 f009 	lsl.w	r0, r0, r9
 800bf28:	4310      	orrs	r0, r2
 800bf2a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf32:	459c      	cmp	ip, r3
 800bf34:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf38:	d8f3      	bhi.n	800bf22 <__lshift+0x6e>
 800bf3a:	ebac 0304 	sub.w	r3, ip, r4
 800bf3e:	3b15      	subs	r3, #21
 800bf40:	f023 0303 	bic.w	r3, r3, #3
 800bf44:	3304      	adds	r3, #4
 800bf46:	f104 0015 	add.w	r0, r4, #21
 800bf4a:	4584      	cmp	ip, r0
 800bf4c:	bf38      	it	cc
 800bf4e:	2304      	movcc	r3, #4
 800bf50:	50ca      	str	r2, [r1, r3]
 800bf52:	b10a      	cbz	r2, 800bf58 <__lshift+0xa4>
 800bf54:	f108 0602 	add.w	r6, r8, #2
 800bf58:	3e01      	subs	r6, #1
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	612e      	str	r6, [r5, #16]
 800bf5e:	4621      	mov	r1, r4
 800bf60:	f7ff fdda 	bl	800bb18 <_Bfree>
 800bf64:	4628      	mov	r0, r5
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf6e:	3301      	adds	r3, #1
 800bf70:	e7c5      	b.n	800befe <__lshift+0x4a>
 800bf72:	3904      	subs	r1, #4
 800bf74:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf78:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf7c:	459c      	cmp	ip, r3
 800bf7e:	d8f9      	bhi.n	800bf74 <__lshift+0xc0>
 800bf80:	e7ea      	b.n	800bf58 <__lshift+0xa4>
 800bf82:	bf00      	nop
 800bf84:	0800df4c 	.word	0x0800df4c
 800bf88:	0800df5d 	.word	0x0800df5d

0800bf8c <__mcmp>:
 800bf8c:	690a      	ldr	r2, [r1, #16]
 800bf8e:	4603      	mov	r3, r0
 800bf90:	6900      	ldr	r0, [r0, #16]
 800bf92:	1a80      	subs	r0, r0, r2
 800bf94:	b530      	push	{r4, r5, lr}
 800bf96:	d10e      	bne.n	800bfb6 <__mcmp+0x2a>
 800bf98:	3314      	adds	r3, #20
 800bf9a:	3114      	adds	r1, #20
 800bf9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bfa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfac:	4295      	cmp	r5, r2
 800bfae:	d003      	beq.n	800bfb8 <__mcmp+0x2c>
 800bfb0:	d205      	bcs.n	800bfbe <__mcmp+0x32>
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	bd30      	pop	{r4, r5, pc}
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	d3f3      	bcc.n	800bfa4 <__mcmp+0x18>
 800bfbc:	e7fb      	b.n	800bfb6 <__mcmp+0x2a>
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e7f9      	b.n	800bfb6 <__mcmp+0x2a>
	...

0800bfc4 <__mdiff>:
 800bfc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	4689      	mov	r9, r1
 800bfca:	4606      	mov	r6, r0
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4648      	mov	r0, r9
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	f7ff ffdb 	bl	800bf8c <__mcmp>
 800bfd6:	1e05      	subs	r5, r0, #0
 800bfd8:	d112      	bne.n	800c000 <__mdiff+0x3c>
 800bfda:	4629      	mov	r1, r5
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7ff fd5b 	bl	800ba98 <_Balloc>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	b928      	cbnz	r0, 800bff2 <__mdiff+0x2e>
 800bfe6:	4b3f      	ldr	r3, [pc, #252]	@ (800c0e4 <__mdiff+0x120>)
 800bfe8:	f240 2137 	movw	r1, #567	@ 0x237
 800bfec:	483e      	ldr	r0, [pc, #248]	@ (800c0e8 <__mdiff+0x124>)
 800bfee:	f000 fc1d 	bl	800c82c <__assert_func>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bff8:	4610      	mov	r0, r2
 800bffa:	b003      	add	sp, #12
 800bffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c000:	bfbc      	itt	lt
 800c002:	464b      	movlt	r3, r9
 800c004:	46a1      	movlt	r9, r4
 800c006:	4630      	mov	r0, r6
 800c008:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c00c:	bfba      	itte	lt
 800c00e:	461c      	movlt	r4, r3
 800c010:	2501      	movlt	r5, #1
 800c012:	2500      	movge	r5, #0
 800c014:	f7ff fd40 	bl	800ba98 <_Balloc>
 800c018:	4602      	mov	r2, r0
 800c01a:	b918      	cbnz	r0, 800c024 <__mdiff+0x60>
 800c01c:	4b31      	ldr	r3, [pc, #196]	@ (800c0e4 <__mdiff+0x120>)
 800c01e:	f240 2145 	movw	r1, #581	@ 0x245
 800c022:	e7e3      	b.n	800bfec <__mdiff+0x28>
 800c024:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c028:	6926      	ldr	r6, [r4, #16]
 800c02a:	60c5      	str	r5, [r0, #12]
 800c02c:	f109 0310 	add.w	r3, r9, #16
 800c030:	f109 0514 	add.w	r5, r9, #20
 800c034:	f104 0e14 	add.w	lr, r4, #20
 800c038:	f100 0b14 	add.w	fp, r0, #20
 800c03c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c040:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	46d9      	mov	r9, fp
 800c048:	f04f 0c00 	mov.w	ip, #0
 800c04c:	9b01      	ldr	r3, [sp, #4]
 800c04e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c052:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	fa1f f38a 	uxth.w	r3, sl
 800c05c:	4619      	mov	r1, r3
 800c05e:	b283      	uxth	r3, r0
 800c060:	1acb      	subs	r3, r1, r3
 800c062:	0c00      	lsrs	r0, r0, #16
 800c064:	4463      	add	r3, ip
 800c066:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c06a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c06e:	b29b      	uxth	r3, r3
 800c070:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c074:	4576      	cmp	r6, lr
 800c076:	f849 3b04 	str.w	r3, [r9], #4
 800c07a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c07e:	d8e5      	bhi.n	800c04c <__mdiff+0x88>
 800c080:	1b33      	subs	r3, r6, r4
 800c082:	3b15      	subs	r3, #21
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	3415      	adds	r4, #21
 800c08a:	3304      	adds	r3, #4
 800c08c:	42a6      	cmp	r6, r4
 800c08e:	bf38      	it	cc
 800c090:	2304      	movcc	r3, #4
 800c092:	441d      	add	r5, r3
 800c094:	445b      	add	r3, fp
 800c096:	461e      	mov	r6, r3
 800c098:	462c      	mov	r4, r5
 800c09a:	4544      	cmp	r4, r8
 800c09c:	d30e      	bcc.n	800c0bc <__mdiff+0xf8>
 800c09e:	f108 0103 	add.w	r1, r8, #3
 800c0a2:	1b49      	subs	r1, r1, r5
 800c0a4:	f021 0103 	bic.w	r1, r1, #3
 800c0a8:	3d03      	subs	r5, #3
 800c0aa:	45a8      	cmp	r8, r5
 800c0ac:	bf38      	it	cc
 800c0ae:	2100      	movcc	r1, #0
 800c0b0:	440b      	add	r3, r1
 800c0b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0b6:	b191      	cbz	r1, 800c0de <__mdiff+0x11a>
 800c0b8:	6117      	str	r7, [r2, #16]
 800c0ba:	e79d      	b.n	800bff8 <__mdiff+0x34>
 800c0bc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c0:	46e6      	mov	lr, ip
 800c0c2:	0c08      	lsrs	r0, r1, #16
 800c0c4:	fa1c fc81 	uxtah	ip, ip, r1
 800c0c8:	4471      	add	r1, lr
 800c0ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c0ce:	b289      	uxth	r1, r1
 800c0d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c0d4:	f846 1b04 	str.w	r1, [r6], #4
 800c0d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0dc:	e7dd      	b.n	800c09a <__mdiff+0xd6>
 800c0de:	3f01      	subs	r7, #1
 800c0e0:	e7e7      	b.n	800c0b2 <__mdiff+0xee>
 800c0e2:	bf00      	nop
 800c0e4:	0800df4c 	.word	0x0800df4c
 800c0e8:	0800df5d 	.word	0x0800df5d

0800c0ec <__d2b>:
 800c0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	460f      	mov	r7, r1
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	ec59 8b10 	vmov	r8, r9, d0
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	f7ff fccd 	bl	800ba98 <_Balloc>
 800c0fe:	4604      	mov	r4, r0
 800c100:	b930      	cbnz	r0, 800c110 <__d2b+0x24>
 800c102:	4602      	mov	r2, r0
 800c104:	4b23      	ldr	r3, [pc, #140]	@ (800c194 <__d2b+0xa8>)
 800c106:	4824      	ldr	r0, [pc, #144]	@ (800c198 <__d2b+0xac>)
 800c108:	f240 310f 	movw	r1, #783	@ 0x30f
 800c10c:	f000 fb8e 	bl	800c82c <__assert_func>
 800c110:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c118:	b10d      	cbz	r5, 800c11e <__d2b+0x32>
 800c11a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	f1b8 0300 	subs.w	r3, r8, #0
 800c124:	d023      	beq.n	800c16e <__d2b+0x82>
 800c126:	4668      	mov	r0, sp
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	f7ff fd7c 	bl	800bc26 <__lo0bits>
 800c12e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c132:	b1d0      	cbz	r0, 800c16a <__d2b+0x7e>
 800c134:	f1c0 0320 	rsb	r3, r0, #32
 800c138:	fa02 f303 	lsl.w	r3, r2, r3
 800c13c:	430b      	orrs	r3, r1
 800c13e:	40c2      	lsrs	r2, r0
 800c140:	6163      	str	r3, [r4, #20]
 800c142:	9201      	str	r2, [sp, #4]
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	61a3      	str	r3, [r4, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	bf0c      	ite	eq
 800c14c:	2201      	moveq	r2, #1
 800c14e:	2202      	movne	r2, #2
 800c150:	6122      	str	r2, [r4, #16]
 800c152:	b1a5      	cbz	r5, 800c17e <__d2b+0x92>
 800c154:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c158:	4405      	add	r5, r0
 800c15a:	603d      	str	r5, [r7, #0]
 800c15c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c160:	6030      	str	r0, [r6, #0]
 800c162:	4620      	mov	r0, r4
 800c164:	b003      	add	sp, #12
 800c166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c16a:	6161      	str	r1, [r4, #20]
 800c16c:	e7ea      	b.n	800c144 <__d2b+0x58>
 800c16e:	a801      	add	r0, sp, #4
 800c170:	f7ff fd59 	bl	800bc26 <__lo0bits>
 800c174:	9b01      	ldr	r3, [sp, #4]
 800c176:	6163      	str	r3, [r4, #20]
 800c178:	3020      	adds	r0, #32
 800c17a:	2201      	movs	r2, #1
 800c17c:	e7e8      	b.n	800c150 <__d2b+0x64>
 800c17e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c182:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c186:	6038      	str	r0, [r7, #0]
 800c188:	6918      	ldr	r0, [r3, #16]
 800c18a:	f7ff fd2d 	bl	800bbe8 <__hi0bits>
 800c18e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c192:	e7e5      	b.n	800c160 <__d2b+0x74>
 800c194:	0800df4c 	.word	0x0800df4c
 800c198:	0800df5d 	.word	0x0800df5d

0800c19c <__ssputs_r>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	688e      	ldr	r6, [r1, #8]
 800c1a2:	461f      	mov	r7, r3
 800c1a4:	42be      	cmp	r6, r7
 800c1a6:	680b      	ldr	r3, [r1, #0]
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	d82d      	bhi.n	800c20c <__ssputs_r+0x70>
 800c1b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c1b8:	d026      	beq.n	800c208 <__ssputs_r+0x6c>
 800c1ba:	6965      	ldr	r5, [r4, #20]
 800c1bc:	6909      	ldr	r1, [r1, #16]
 800c1be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1c2:	eba3 0901 	sub.w	r9, r3, r1
 800c1c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1ca:	1c7b      	adds	r3, r7, #1
 800c1cc:	444b      	add	r3, r9
 800c1ce:	106d      	asrs	r5, r5, #1
 800c1d0:	429d      	cmp	r5, r3
 800c1d2:	bf38      	it	cc
 800c1d4:	461d      	movcc	r5, r3
 800c1d6:	0553      	lsls	r3, r2, #21
 800c1d8:	d527      	bpl.n	800c22a <__ssputs_r+0x8e>
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7ff fbd0 	bl	800b980 <_malloc_r>
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	b360      	cbz	r0, 800c23e <__ssputs_r+0xa2>
 800c1e4:	6921      	ldr	r1, [r4, #16]
 800c1e6:	464a      	mov	r2, r9
 800c1e8:	f7fe fcf9 	bl	800abde <memcpy>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	6126      	str	r6, [r4, #16]
 800c1fa:	6165      	str	r5, [r4, #20]
 800c1fc:	444e      	add	r6, r9
 800c1fe:	eba5 0509 	sub.w	r5, r5, r9
 800c202:	6026      	str	r6, [r4, #0]
 800c204:	60a5      	str	r5, [r4, #8]
 800c206:	463e      	mov	r6, r7
 800c208:	42be      	cmp	r6, r7
 800c20a:	d900      	bls.n	800c20e <__ssputs_r+0x72>
 800c20c:	463e      	mov	r6, r7
 800c20e:	6820      	ldr	r0, [r4, #0]
 800c210:	4632      	mov	r2, r6
 800c212:	4641      	mov	r1, r8
 800c214:	f000 fabe 	bl	800c794 <memmove>
 800c218:	68a3      	ldr	r3, [r4, #8]
 800c21a:	1b9b      	subs	r3, r3, r6
 800c21c:	60a3      	str	r3, [r4, #8]
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	4433      	add	r3, r6
 800c222:	6023      	str	r3, [r4, #0]
 800c224:	2000      	movs	r0, #0
 800c226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22a:	462a      	mov	r2, r5
 800c22c:	f000 fb42 	bl	800c8b4 <_realloc_r>
 800c230:	4606      	mov	r6, r0
 800c232:	2800      	cmp	r0, #0
 800c234:	d1e0      	bne.n	800c1f8 <__ssputs_r+0x5c>
 800c236:	6921      	ldr	r1, [r4, #16]
 800c238:	4650      	mov	r0, sl
 800c23a:	f7ff fb2d 	bl	800b898 <_free_r>
 800c23e:	230c      	movs	r3, #12
 800c240:	f8ca 3000 	str.w	r3, [sl]
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	f04f 30ff 	mov.w	r0, #4294967295
 800c250:	e7e9      	b.n	800c226 <__ssputs_r+0x8a>
	...

0800c254 <_svfiprintf_r>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	4698      	mov	r8, r3
 800c25a:	898b      	ldrh	r3, [r1, #12]
 800c25c:	061b      	lsls	r3, r3, #24
 800c25e:	b09d      	sub	sp, #116	@ 0x74
 800c260:	4607      	mov	r7, r0
 800c262:	460d      	mov	r5, r1
 800c264:	4614      	mov	r4, r2
 800c266:	d510      	bpl.n	800c28a <_svfiprintf_r+0x36>
 800c268:	690b      	ldr	r3, [r1, #16]
 800c26a:	b973      	cbnz	r3, 800c28a <_svfiprintf_r+0x36>
 800c26c:	2140      	movs	r1, #64	@ 0x40
 800c26e:	f7ff fb87 	bl	800b980 <_malloc_r>
 800c272:	6028      	str	r0, [r5, #0]
 800c274:	6128      	str	r0, [r5, #16]
 800c276:	b930      	cbnz	r0, 800c286 <_svfiprintf_r+0x32>
 800c278:	230c      	movs	r3, #12
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	f04f 30ff 	mov.w	r0, #4294967295
 800c280:	b01d      	add	sp, #116	@ 0x74
 800c282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c286:	2340      	movs	r3, #64	@ 0x40
 800c288:	616b      	str	r3, [r5, #20]
 800c28a:	2300      	movs	r3, #0
 800c28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c28e:	2320      	movs	r3, #32
 800c290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c294:	f8cd 800c 	str.w	r8, [sp, #12]
 800c298:	2330      	movs	r3, #48	@ 0x30
 800c29a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c438 <_svfiprintf_r+0x1e4>
 800c29e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2a2:	f04f 0901 	mov.w	r9, #1
 800c2a6:	4623      	mov	r3, r4
 800c2a8:	469a      	mov	sl, r3
 800c2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2ae:	b10a      	cbz	r2, 800c2b4 <_svfiprintf_r+0x60>
 800c2b0:	2a25      	cmp	r2, #37	@ 0x25
 800c2b2:	d1f9      	bne.n	800c2a8 <_svfiprintf_r+0x54>
 800c2b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b8:	d00b      	beq.n	800c2d2 <_svfiprintf_r+0x7e>
 800c2ba:	465b      	mov	r3, fp
 800c2bc:	4622      	mov	r2, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff ff6b 	bl	800c19c <__ssputs_r>
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	f000 80a7 	beq.w	800c41a <_svfiprintf_r+0x1c6>
 800c2cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2ce:	445a      	add	r2, fp
 800c2d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 809f 	beq.w	800c41a <_svfiprintf_r+0x1c6>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e6:	f10a 0a01 	add.w	sl, sl, #1
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	9307      	str	r3, [sp, #28]
 800c2ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2f4:	4654      	mov	r4, sl
 800c2f6:	2205      	movs	r2, #5
 800c2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2fc:	484e      	ldr	r0, [pc, #312]	@ (800c438 <_svfiprintf_r+0x1e4>)
 800c2fe:	f7f3 ff87 	bl	8000210 <memchr>
 800c302:	9a04      	ldr	r2, [sp, #16]
 800c304:	b9d8      	cbnz	r0, 800c33e <_svfiprintf_r+0xea>
 800c306:	06d0      	lsls	r0, r2, #27
 800c308:	bf44      	itt	mi
 800c30a:	2320      	movmi	r3, #32
 800c30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c310:	0711      	lsls	r1, r2, #28
 800c312:	bf44      	itt	mi
 800c314:	232b      	movmi	r3, #43	@ 0x2b
 800c316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c31a:	f89a 3000 	ldrb.w	r3, [sl]
 800c31e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c320:	d015      	beq.n	800c34e <_svfiprintf_r+0xfa>
 800c322:	9a07      	ldr	r2, [sp, #28]
 800c324:	4654      	mov	r4, sl
 800c326:	2000      	movs	r0, #0
 800c328:	f04f 0c0a 	mov.w	ip, #10
 800c32c:	4621      	mov	r1, r4
 800c32e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c332:	3b30      	subs	r3, #48	@ 0x30
 800c334:	2b09      	cmp	r3, #9
 800c336:	d94b      	bls.n	800c3d0 <_svfiprintf_r+0x17c>
 800c338:	b1b0      	cbz	r0, 800c368 <_svfiprintf_r+0x114>
 800c33a:	9207      	str	r2, [sp, #28]
 800c33c:	e014      	b.n	800c368 <_svfiprintf_r+0x114>
 800c33e:	eba0 0308 	sub.w	r3, r0, r8
 800c342:	fa09 f303 	lsl.w	r3, r9, r3
 800c346:	4313      	orrs	r3, r2
 800c348:	9304      	str	r3, [sp, #16]
 800c34a:	46a2      	mov	sl, r4
 800c34c:	e7d2      	b.n	800c2f4 <_svfiprintf_r+0xa0>
 800c34e:	9b03      	ldr	r3, [sp, #12]
 800c350:	1d19      	adds	r1, r3, #4
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	9103      	str	r1, [sp, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	bfbb      	ittet	lt
 800c35a:	425b      	neglt	r3, r3
 800c35c:	f042 0202 	orrlt.w	r2, r2, #2
 800c360:	9307      	strge	r3, [sp, #28]
 800c362:	9307      	strlt	r3, [sp, #28]
 800c364:	bfb8      	it	lt
 800c366:	9204      	strlt	r2, [sp, #16]
 800c368:	7823      	ldrb	r3, [r4, #0]
 800c36a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c36c:	d10a      	bne.n	800c384 <_svfiprintf_r+0x130>
 800c36e:	7863      	ldrb	r3, [r4, #1]
 800c370:	2b2a      	cmp	r3, #42	@ 0x2a
 800c372:	d132      	bne.n	800c3da <_svfiprintf_r+0x186>
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	1d1a      	adds	r2, r3, #4
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	9203      	str	r2, [sp, #12]
 800c37c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c380:	3402      	adds	r4, #2
 800c382:	9305      	str	r3, [sp, #20]
 800c384:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c448 <_svfiprintf_r+0x1f4>
 800c388:	7821      	ldrb	r1, [r4, #0]
 800c38a:	2203      	movs	r2, #3
 800c38c:	4650      	mov	r0, sl
 800c38e:	f7f3 ff3f 	bl	8000210 <memchr>
 800c392:	b138      	cbz	r0, 800c3a4 <_svfiprintf_r+0x150>
 800c394:	9b04      	ldr	r3, [sp, #16]
 800c396:	eba0 000a 	sub.w	r0, r0, sl
 800c39a:	2240      	movs	r2, #64	@ 0x40
 800c39c:	4082      	lsls	r2, r0
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a8:	4824      	ldr	r0, [pc, #144]	@ (800c43c <_svfiprintf_r+0x1e8>)
 800c3aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3ae:	2206      	movs	r2, #6
 800c3b0:	f7f3 ff2e 	bl	8000210 <memchr>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d036      	beq.n	800c426 <_svfiprintf_r+0x1d2>
 800c3b8:	4b21      	ldr	r3, [pc, #132]	@ (800c440 <_svfiprintf_r+0x1ec>)
 800c3ba:	bb1b      	cbnz	r3, 800c404 <_svfiprintf_r+0x1b0>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	3307      	adds	r3, #7
 800c3c0:	f023 0307 	bic.w	r3, r3, #7
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ca:	4433      	add	r3, r6
 800c3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ce:	e76a      	b.n	800c2a6 <_svfiprintf_r+0x52>
 800c3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	e7a8      	b.n	800c32c <_svfiprintf_r+0xd8>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	3401      	adds	r4, #1
 800c3de:	9305      	str	r3, [sp, #20]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f04f 0c0a 	mov.w	ip, #10
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ec:	3a30      	subs	r2, #48	@ 0x30
 800c3ee:	2a09      	cmp	r2, #9
 800c3f0:	d903      	bls.n	800c3fa <_svfiprintf_r+0x1a6>
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0c6      	beq.n	800c384 <_svfiprintf_r+0x130>
 800c3f6:	9105      	str	r1, [sp, #20]
 800c3f8:	e7c4      	b.n	800c384 <_svfiprintf_r+0x130>
 800c3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3fe:	4604      	mov	r4, r0
 800c400:	2301      	movs	r3, #1
 800c402:	e7f0      	b.n	800c3e6 <_svfiprintf_r+0x192>
 800c404:	ab03      	add	r3, sp, #12
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	462a      	mov	r2, r5
 800c40a:	4b0e      	ldr	r3, [pc, #56]	@ (800c444 <_svfiprintf_r+0x1f0>)
 800c40c:	a904      	add	r1, sp, #16
 800c40e:	4638      	mov	r0, r7
 800c410:	f7fd fc46 	bl	8009ca0 <_printf_float>
 800c414:	1c42      	adds	r2, r0, #1
 800c416:	4606      	mov	r6, r0
 800c418:	d1d6      	bne.n	800c3c8 <_svfiprintf_r+0x174>
 800c41a:	89ab      	ldrh	r3, [r5, #12]
 800c41c:	065b      	lsls	r3, r3, #25
 800c41e:	f53f af2d 	bmi.w	800c27c <_svfiprintf_r+0x28>
 800c422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c424:	e72c      	b.n	800c280 <_svfiprintf_r+0x2c>
 800c426:	ab03      	add	r3, sp, #12
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	462a      	mov	r2, r5
 800c42c:	4b05      	ldr	r3, [pc, #20]	@ (800c444 <_svfiprintf_r+0x1f0>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	4638      	mov	r0, r7
 800c432:	f7fd fecd 	bl	800a1d0 <_printf_i>
 800c436:	e7ed      	b.n	800c414 <_svfiprintf_r+0x1c0>
 800c438:	0800e0b8 	.word	0x0800e0b8
 800c43c:	0800e0c2 	.word	0x0800e0c2
 800c440:	08009ca1 	.word	0x08009ca1
 800c444:	0800c19d 	.word	0x0800c19d
 800c448:	0800e0be 	.word	0x0800e0be

0800c44c <__sfputc_r>:
 800c44c:	6893      	ldr	r3, [r2, #8]
 800c44e:	3b01      	subs	r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	b410      	push	{r4}
 800c454:	6093      	str	r3, [r2, #8]
 800c456:	da08      	bge.n	800c46a <__sfputc_r+0x1e>
 800c458:	6994      	ldr	r4, [r2, #24]
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	db01      	blt.n	800c462 <__sfputc_r+0x16>
 800c45e:	290a      	cmp	r1, #10
 800c460:	d103      	bne.n	800c46a <__sfputc_r+0x1e>
 800c462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c466:	f7fe ba3c 	b.w	800a8e2 <__swbuf_r>
 800c46a:	6813      	ldr	r3, [r2, #0]
 800c46c:	1c58      	adds	r0, r3, #1
 800c46e:	6010      	str	r0, [r2, #0]
 800c470:	7019      	strb	r1, [r3, #0]
 800c472:	4608      	mov	r0, r1
 800c474:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <__sfputs_r>:
 800c47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47c:	4606      	mov	r6, r0
 800c47e:	460f      	mov	r7, r1
 800c480:	4614      	mov	r4, r2
 800c482:	18d5      	adds	r5, r2, r3
 800c484:	42ac      	cmp	r4, r5
 800c486:	d101      	bne.n	800c48c <__sfputs_r+0x12>
 800c488:	2000      	movs	r0, #0
 800c48a:	e007      	b.n	800c49c <__sfputs_r+0x22>
 800c48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c490:	463a      	mov	r2, r7
 800c492:	4630      	mov	r0, r6
 800c494:	f7ff ffda 	bl	800c44c <__sfputc_r>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d1f3      	bne.n	800c484 <__sfputs_r+0xa>
 800c49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4a0 <_vfiprintf_r>:
 800c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a4:	460d      	mov	r5, r1
 800c4a6:	b09d      	sub	sp, #116	@ 0x74
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	4698      	mov	r8, r3
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	b118      	cbz	r0, 800c4b8 <_vfiprintf_r+0x18>
 800c4b0:	6a03      	ldr	r3, [r0, #32]
 800c4b2:	b90b      	cbnz	r3, 800c4b8 <_vfiprintf_r+0x18>
 800c4b4:	f7fe f8f8 	bl	800a6a8 <__sinit>
 800c4b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4ba:	07d9      	lsls	r1, r3, #31
 800c4bc:	d405      	bmi.n	800c4ca <_vfiprintf_r+0x2a>
 800c4be:	89ab      	ldrh	r3, [r5, #12]
 800c4c0:	059a      	lsls	r2, r3, #22
 800c4c2:	d402      	bmi.n	800c4ca <_vfiprintf_r+0x2a>
 800c4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4c6:	f7fe fb88 	bl	800abda <__retarget_lock_acquire_recursive>
 800c4ca:	89ab      	ldrh	r3, [r5, #12]
 800c4cc:	071b      	lsls	r3, r3, #28
 800c4ce:	d501      	bpl.n	800c4d4 <_vfiprintf_r+0x34>
 800c4d0:	692b      	ldr	r3, [r5, #16]
 800c4d2:	b99b      	cbnz	r3, 800c4fc <_vfiprintf_r+0x5c>
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f7fe fa42 	bl	800a960 <__swsetup_r>
 800c4dc:	b170      	cbz	r0, 800c4fc <_vfiprintf_r+0x5c>
 800c4de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4e0:	07dc      	lsls	r4, r3, #31
 800c4e2:	d504      	bpl.n	800c4ee <_vfiprintf_r+0x4e>
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	b01d      	add	sp, #116	@ 0x74
 800c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	0598      	lsls	r0, r3, #22
 800c4f2:	d4f7      	bmi.n	800c4e4 <_vfiprintf_r+0x44>
 800c4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4f6:	f7fe fb71 	bl	800abdc <__retarget_lock_release_recursive>
 800c4fa:	e7f3      	b.n	800c4e4 <_vfiprintf_r+0x44>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c500:	2320      	movs	r3, #32
 800c502:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c506:	f8cd 800c 	str.w	r8, [sp, #12]
 800c50a:	2330      	movs	r3, #48	@ 0x30
 800c50c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6bc <_vfiprintf_r+0x21c>
 800c510:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c514:	f04f 0901 	mov.w	r9, #1
 800c518:	4623      	mov	r3, r4
 800c51a:	469a      	mov	sl, r3
 800c51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c520:	b10a      	cbz	r2, 800c526 <_vfiprintf_r+0x86>
 800c522:	2a25      	cmp	r2, #37	@ 0x25
 800c524:	d1f9      	bne.n	800c51a <_vfiprintf_r+0x7a>
 800c526:	ebba 0b04 	subs.w	fp, sl, r4
 800c52a:	d00b      	beq.n	800c544 <_vfiprintf_r+0xa4>
 800c52c:	465b      	mov	r3, fp
 800c52e:	4622      	mov	r2, r4
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ffa1 	bl	800c47a <__sfputs_r>
 800c538:	3001      	adds	r0, #1
 800c53a:	f000 80a7 	beq.w	800c68c <_vfiprintf_r+0x1ec>
 800c53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c540:	445a      	add	r2, fp
 800c542:	9209      	str	r2, [sp, #36]	@ 0x24
 800c544:	f89a 3000 	ldrb.w	r3, [sl]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 809f 	beq.w	800c68c <_vfiprintf_r+0x1ec>
 800c54e:	2300      	movs	r3, #0
 800c550:	f04f 32ff 	mov.w	r2, #4294967295
 800c554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c558:	f10a 0a01 	add.w	sl, sl, #1
 800c55c:	9304      	str	r3, [sp, #16]
 800c55e:	9307      	str	r3, [sp, #28]
 800c560:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c564:	931a      	str	r3, [sp, #104]	@ 0x68
 800c566:	4654      	mov	r4, sl
 800c568:	2205      	movs	r2, #5
 800c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56e:	4853      	ldr	r0, [pc, #332]	@ (800c6bc <_vfiprintf_r+0x21c>)
 800c570:	f7f3 fe4e 	bl	8000210 <memchr>
 800c574:	9a04      	ldr	r2, [sp, #16]
 800c576:	b9d8      	cbnz	r0, 800c5b0 <_vfiprintf_r+0x110>
 800c578:	06d1      	lsls	r1, r2, #27
 800c57a:	bf44      	itt	mi
 800c57c:	2320      	movmi	r3, #32
 800c57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c582:	0713      	lsls	r3, r2, #28
 800c584:	bf44      	itt	mi
 800c586:	232b      	movmi	r3, #43	@ 0x2b
 800c588:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c58c:	f89a 3000 	ldrb.w	r3, [sl]
 800c590:	2b2a      	cmp	r3, #42	@ 0x2a
 800c592:	d015      	beq.n	800c5c0 <_vfiprintf_r+0x120>
 800c594:	9a07      	ldr	r2, [sp, #28]
 800c596:	4654      	mov	r4, sl
 800c598:	2000      	movs	r0, #0
 800c59a:	f04f 0c0a 	mov.w	ip, #10
 800c59e:	4621      	mov	r1, r4
 800c5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a4:	3b30      	subs	r3, #48	@ 0x30
 800c5a6:	2b09      	cmp	r3, #9
 800c5a8:	d94b      	bls.n	800c642 <_vfiprintf_r+0x1a2>
 800c5aa:	b1b0      	cbz	r0, 800c5da <_vfiprintf_r+0x13a>
 800c5ac:	9207      	str	r2, [sp, #28]
 800c5ae:	e014      	b.n	800c5da <_vfiprintf_r+0x13a>
 800c5b0:	eba0 0308 	sub.w	r3, r0, r8
 800c5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	46a2      	mov	sl, r4
 800c5be:	e7d2      	b.n	800c566 <_vfiprintf_r+0xc6>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	1d19      	adds	r1, r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	9103      	str	r1, [sp, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bfbb      	ittet	lt
 800c5cc:	425b      	neglt	r3, r3
 800c5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d2:	9307      	strge	r3, [sp, #28]
 800c5d4:	9307      	strlt	r3, [sp, #28]
 800c5d6:	bfb8      	it	lt
 800c5d8:	9204      	strlt	r2, [sp, #16]
 800c5da:	7823      	ldrb	r3, [r4, #0]
 800c5dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5de:	d10a      	bne.n	800c5f6 <_vfiprintf_r+0x156>
 800c5e0:	7863      	ldrb	r3, [r4, #1]
 800c5e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5e4:	d132      	bne.n	800c64c <_vfiprintf_r+0x1ac>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	1d1a      	adds	r2, r3, #4
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	9203      	str	r2, [sp, #12]
 800c5ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5f2:	3402      	adds	r4, #2
 800c5f4:	9305      	str	r3, [sp, #20]
 800c5f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6cc <_vfiprintf_r+0x22c>
 800c5fa:	7821      	ldrb	r1, [r4, #0]
 800c5fc:	2203      	movs	r2, #3
 800c5fe:	4650      	mov	r0, sl
 800c600:	f7f3 fe06 	bl	8000210 <memchr>
 800c604:	b138      	cbz	r0, 800c616 <_vfiprintf_r+0x176>
 800c606:	9b04      	ldr	r3, [sp, #16]
 800c608:	eba0 000a 	sub.w	r0, r0, sl
 800c60c:	2240      	movs	r2, #64	@ 0x40
 800c60e:	4082      	lsls	r2, r0
 800c610:	4313      	orrs	r3, r2
 800c612:	3401      	adds	r4, #1
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61a:	4829      	ldr	r0, [pc, #164]	@ (800c6c0 <_vfiprintf_r+0x220>)
 800c61c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c620:	2206      	movs	r2, #6
 800c622:	f7f3 fdf5 	bl	8000210 <memchr>
 800c626:	2800      	cmp	r0, #0
 800c628:	d03f      	beq.n	800c6aa <_vfiprintf_r+0x20a>
 800c62a:	4b26      	ldr	r3, [pc, #152]	@ (800c6c4 <_vfiprintf_r+0x224>)
 800c62c:	bb1b      	cbnz	r3, 800c676 <_vfiprintf_r+0x1d6>
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	3307      	adds	r3, #7
 800c632:	f023 0307 	bic.w	r3, r3, #7
 800c636:	3308      	adds	r3, #8
 800c638:	9303      	str	r3, [sp, #12]
 800c63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c63c:	443b      	add	r3, r7
 800c63e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c640:	e76a      	b.n	800c518 <_vfiprintf_r+0x78>
 800c642:	fb0c 3202 	mla	r2, ip, r2, r3
 800c646:	460c      	mov	r4, r1
 800c648:	2001      	movs	r0, #1
 800c64a:	e7a8      	b.n	800c59e <_vfiprintf_r+0xfe>
 800c64c:	2300      	movs	r3, #0
 800c64e:	3401      	adds	r4, #1
 800c650:	9305      	str	r3, [sp, #20]
 800c652:	4619      	mov	r1, r3
 800c654:	f04f 0c0a 	mov.w	ip, #10
 800c658:	4620      	mov	r0, r4
 800c65a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c65e:	3a30      	subs	r2, #48	@ 0x30
 800c660:	2a09      	cmp	r2, #9
 800c662:	d903      	bls.n	800c66c <_vfiprintf_r+0x1cc>
 800c664:	2b00      	cmp	r3, #0
 800c666:	d0c6      	beq.n	800c5f6 <_vfiprintf_r+0x156>
 800c668:	9105      	str	r1, [sp, #20]
 800c66a:	e7c4      	b.n	800c5f6 <_vfiprintf_r+0x156>
 800c66c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c670:	4604      	mov	r4, r0
 800c672:	2301      	movs	r3, #1
 800c674:	e7f0      	b.n	800c658 <_vfiprintf_r+0x1b8>
 800c676:	ab03      	add	r3, sp, #12
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	462a      	mov	r2, r5
 800c67c:	4b12      	ldr	r3, [pc, #72]	@ (800c6c8 <_vfiprintf_r+0x228>)
 800c67e:	a904      	add	r1, sp, #16
 800c680:	4630      	mov	r0, r6
 800c682:	f7fd fb0d 	bl	8009ca0 <_printf_float>
 800c686:	4607      	mov	r7, r0
 800c688:	1c78      	adds	r0, r7, #1
 800c68a:	d1d6      	bne.n	800c63a <_vfiprintf_r+0x19a>
 800c68c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c68e:	07d9      	lsls	r1, r3, #31
 800c690:	d405      	bmi.n	800c69e <_vfiprintf_r+0x1fe>
 800c692:	89ab      	ldrh	r3, [r5, #12]
 800c694:	059a      	lsls	r2, r3, #22
 800c696:	d402      	bmi.n	800c69e <_vfiprintf_r+0x1fe>
 800c698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c69a:	f7fe fa9f 	bl	800abdc <__retarget_lock_release_recursive>
 800c69e:	89ab      	ldrh	r3, [r5, #12]
 800c6a0:	065b      	lsls	r3, r3, #25
 800c6a2:	f53f af1f 	bmi.w	800c4e4 <_vfiprintf_r+0x44>
 800c6a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6a8:	e71e      	b.n	800c4e8 <_vfiprintf_r+0x48>
 800c6aa:	ab03      	add	r3, sp, #12
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4b05      	ldr	r3, [pc, #20]	@ (800c6c8 <_vfiprintf_r+0x228>)
 800c6b2:	a904      	add	r1, sp, #16
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7fd fd8b 	bl	800a1d0 <_printf_i>
 800c6ba:	e7e4      	b.n	800c686 <_vfiprintf_r+0x1e6>
 800c6bc:	0800e0b8 	.word	0x0800e0b8
 800c6c0:	0800e0c2 	.word	0x0800e0c2
 800c6c4:	08009ca1 	.word	0x08009ca1
 800c6c8:	0800c47b 	.word	0x0800c47b
 800c6cc:	0800e0be 	.word	0x0800e0be

0800c6d0 <__swhatbuf_r>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	b096      	sub	sp, #88	@ 0x58
 800c6dc:	4615      	mov	r5, r2
 800c6de:	461e      	mov	r6, r3
 800c6e0:	da0d      	bge.n	800c6fe <__swhatbuf_r+0x2e>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6e8:	f04f 0100 	mov.w	r1, #0
 800c6ec:	bf14      	ite	ne
 800c6ee:	2340      	movne	r3, #64	@ 0x40
 800c6f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	6031      	str	r1, [r6, #0]
 800c6f8:	602b      	str	r3, [r5, #0]
 800c6fa:	b016      	add	sp, #88	@ 0x58
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
 800c6fe:	466a      	mov	r2, sp
 800c700:	f000 f862 	bl	800c7c8 <_fstat_r>
 800c704:	2800      	cmp	r0, #0
 800c706:	dbec      	blt.n	800c6e2 <__swhatbuf_r+0x12>
 800c708:	9901      	ldr	r1, [sp, #4]
 800c70a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c70e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c712:	4259      	negs	r1, r3
 800c714:	4159      	adcs	r1, r3
 800c716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c71a:	e7eb      	b.n	800c6f4 <__swhatbuf_r+0x24>

0800c71c <__smakebuf_r>:
 800c71c:	898b      	ldrh	r3, [r1, #12]
 800c71e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c720:	079d      	lsls	r5, r3, #30
 800c722:	4606      	mov	r6, r0
 800c724:	460c      	mov	r4, r1
 800c726:	d507      	bpl.n	800c738 <__smakebuf_r+0x1c>
 800c728:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	6123      	str	r3, [r4, #16]
 800c730:	2301      	movs	r3, #1
 800c732:	6163      	str	r3, [r4, #20]
 800c734:	b003      	add	sp, #12
 800c736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c738:	ab01      	add	r3, sp, #4
 800c73a:	466a      	mov	r2, sp
 800c73c:	f7ff ffc8 	bl	800c6d0 <__swhatbuf_r>
 800c740:	9f00      	ldr	r7, [sp, #0]
 800c742:	4605      	mov	r5, r0
 800c744:	4639      	mov	r1, r7
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff f91a 	bl	800b980 <_malloc_r>
 800c74c:	b948      	cbnz	r0, 800c762 <__smakebuf_r+0x46>
 800c74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c752:	059a      	lsls	r2, r3, #22
 800c754:	d4ee      	bmi.n	800c734 <__smakebuf_r+0x18>
 800c756:	f023 0303 	bic.w	r3, r3, #3
 800c75a:	f043 0302 	orr.w	r3, r3, #2
 800c75e:	81a3      	strh	r3, [r4, #12]
 800c760:	e7e2      	b.n	800c728 <__smakebuf_r+0xc>
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	6020      	str	r0, [r4, #0]
 800c766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c76a:	81a3      	strh	r3, [r4, #12]
 800c76c:	9b01      	ldr	r3, [sp, #4]
 800c76e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c772:	b15b      	cbz	r3, 800c78c <__smakebuf_r+0x70>
 800c774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c778:	4630      	mov	r0, r6
 800c77a:	f000 f837 	bl	800c7ec <_isatty_r>
 800c77e:	b128      	cbz	r0, 800c78c <__smakebuf_r+0x70>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f023 0303 	bic.w	r3, r3, #3
 800c786:	f043 0301 	orr.w	r3, r3, #1
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	431d      	orrs	r5, r3
 800c790:	81a5      	strh	r5, [r4, #12]
 800c792:	e7cf      	b.n	800c734 <__smakebuf_r+0x18>

0800c794 <memmove>:
 800c794:	4288      	cmp	r0, r1
 800c796:	b510      	push	{r4, lr}
 800c798:	eb01 0402 	add.w	r4, r1, r2
 800c79c:	d902      	bls.n	800c7a4 <memmove+0x10>
 800c79e:	4284      	cmp	r4, r0
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	d807      	bhi.n	800c7b4 <memmove+0x20>
 800c7a4:	1e43      	subs	r3, r0, #1
 800c7a6:	42a1      	cmp	r1, r4
 800c7a8:	d008      	beq.n	800c7bc <memmove+0x28>
 800c7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7b2:	e7f8      	b.n	800c7a6 <memmove+0x12>
 800c7b4:	4402      	add	r2, r0
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	428a      	cmp	r2, r1
 800c7ba:	d100      	bne.n	800c7be <memmove+0x2a>
 800c7bc:	bd10      	pop	{r4, pc}
 800c7be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7c6:	e7f7      	b.n	800c7b8 <memmove+0x24>

0800c7c8 <_fstat_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d07      	ldr	r5, [pc, #28]	@ (800c7e8 <_fstat_r+0x20>)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	4608      	mov	r0, r1
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	602b      	str	r3, [r5, #0]
 800c7d6:	f7f6 fafb 	bl	8002dd0 <_fstat>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	d102      	bne.n	800c7e4 <_fstat_r+0x1c>
 800c7de:	682b      	ldr	r3, [r5, #0]
 800c7e0:	b103      	cbz	r3, 800c7e4 <_fstat_r+0x1c>
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20019e6c 	.word	0x20019e6c

0800c7ec <_isatty_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d06      	ldr	r5, [pc, #24]	@ (800c808 <_isatty_r+0x1c>)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	602b      	str	r3, [r5, #0]
 800c7f8:	f7f6 fafa 	bl	8002df0 <_isatty>
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d102      	bne.n	800c806 <_isatty_r+0x1a>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	b103      	cbz	r3, 800c806 <_isatty_r+0x1a>
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	bd38      	pop	{r3, r4, r5, pc}
 800c808:	20019e6c 	.word	0x20019e6c

0800c80c <_sbrk_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	@ (800c828 <_sbrk_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f6 fb02 	bl	8002e20 <_sbrk>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_sbrk_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_sbrk_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	20019e6c 	.word	0x20019e6c

0800c82c <__assert_func>:
 800c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4b09      	ldr	r3, [pc, #36]	@ (800c858 <__assert_func+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	b954      	cbnz	r4, 800c852 <__assert_func+0x26>
 800c83c:	4b07      	ldr	r3, [pc, #28]	@ (800c85c <__assert_func+0x30>)
 800c83e:	461c      	mov	r4, r3
 800c840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c844:	9100      	str	r1, [sp, #0]
 800c846:	462b      	mov	r3, r5
 800c848:	4905      	ldr	r1, [pc, #20]	@ (800c860 <__assert_func+0x34>)
 800c84a:	f000 f86f 	bl	800c92c <fiprintf>
 800c84e:	f000 f87f 	bl	800c950 <abort>
 800c852:	4b04      	ldr	r3, [pc, #16]	@ (800c864 <__assert_func+0x38>)
 800c854:	e7f4      	b.n	800c840 <__assert_func+0x14>
 800c856:	bf00      	nop
 800c858:	20000020 	.word	0x20000020
 800c85c:	0800e10e 	.word	0x0800e10e
 800c860:	0800e0e0 	.word	0x0800e0e0
 800c864:	0800e0d3 	.word	0x0800e0d3

0800c868 <_calloc_r>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	fba1 5402 	umull	r5, r4, r1, r2
 800c86e:	b93c      	cbnz	r4, 800c880 <_calloc_r+0x18>
 800c870:	4629      	mov	r1, r5
 800c872:	f7ff f885 	bl	800b980 <_malloc_r>
 800c876:	4606      	mov	r6, r0
 800c878:	b928      	cbnz	r0, 800c886 <_calloc_r+0x1e>
 800c87a:	2600      	movs	r6, #0
 800c87c:	4630      	mov	r0, r6
 800c87e:	bd70      	pop	{r4, r5, r6, pc}
 800c880:	220c      	movs	r2, #12
 800c882:	6002      	str	r2, [r0, #0]
 800c884:	e7f9      	b.n	800c87a <_calloc_r+0x12>
 800c886:	462a      	mov	r2, r5
 800c888:	4621      	mov	r1, r4
 800c88a:	f7fe f8bf 	bl	800aa0c <memset>
 800c88e:	e7f5      	b.n	800c87c <_calloc_r+0x14>

0800c890 <__ascii_mbtowc>:
 800c890:	b082      	sub	sp, #8
 800c892:	b901      	cbnz	r1, 800c896 <__ascii_mbtowc+0x6>
 800c894:	a901      	add	r1, sp, #4
 800c896:	b142      	cbz	r2, 800c8aa <__ascii_mbtowc+0x1a>
 800c898:	b14b      	cbz	r3, 800c8ae <__ascii_mbtowc+0x1e>
 800c89a:	7813      	ldrb	r3, [r2, #0]
 800c89c:	600b      	str	r3, [r1, #0]
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	1e10      	subs	r0, r2, #0
 800c8a2:	bf18      	it	ne
 800c8a4:	2001      	movne	r0, #1
 800c8a6:	b002      	add	sp, #8
 800c8a8:	4770      	bx	lr
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	e7fb      	b.n	800c8a6 <__ascii_mbtowc+0x16>
 800c8ae:	f06f 0001 	mvn.w	r0, #1
 800c8b2:	e7f8      	b.n	800c8a6 <__ascii_mbtowc+0x16>

0800c8b4 <_realloc_r>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	4680      	mov	r8, r0
 800c8ba:	4615      	mov	r5, r2
 800c8bc:	460c      	mov	r4, r1
 800c8be:	b921      	cbnz	r1, 800c8ca <_realloc_r+0x16>
 800c8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	f7ff b85b 	b.w	800b980 <_malloc_r>
 800c8ca:	b92a      	cbnz	r2, 800c8d8 <_realloc_r+0x24>
 800c8cc:	f7fe ffe4 	bl	800b898 <_free_r>
 800c8d0:	2400      	movs	r4, #0
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d8:	f000 f841 	bl	800c95e <_malloc_usable_size_r>
 800c8dc:	4285      	cmp	r5, r0
 800c8de:	4606      	mov	r6, r0
 800c8e0:	d802      	bhi.n	800c8e8 <_realloc_r+0x34>
 800c8e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8e6:	d8f4      	bhi.n	800c8d2 <_realloc_r+0x1e>
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	f7ff f848 	bl	800b980 <_malloc_r>
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d0ec      	beq.n	800c8d0 <_realloc_r+0x1c>
 800c8f6:	42b5      	cmp	r5, r6
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	bf28      	it	cs
 800c8fe:	4632      	movcs	r2, r6
 800c900:	f7fe f96d 	bl	800abde <memcpy>
 800c904:	4621      	mov	r1, r4
 800c906:	4640      	mov	r0, r8
 800c908:	f7fe ffc6 	bl	800b898 <_free_r>
 800c90c:	463c      	mov	r4, r7
 800c90e:	e7e0      	b.n	800c8d2 <_realloc_r+0x1e>

0800c910 <__ascii_wctomb>:
 800c910:	4603      	mov	r3, r0
 800c912:	4608      	mov	r0, r1
 800c914:	b141      	cbz	r1, 800c928 <__ascii_wctomb+0x18>
 800c916:	2aff      	cmp	r2, #255	@ 0xff
 800c918:	d904      	bls.n	800c924 <__ascii_wctomb+0x14>
 800c91a:	228a      	movs	r2, #138	@ 0x8a
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295
 800c922:	4770      	bx	lr
 800c924:	700a      	strb	r2, [r1, #0]
 800c926:	2001      	movs	r0, #1
 800c928:	4770      	bx	lr
	...

0800c92c <fiprintf>:
 800c92c:	b40e      	push	{r1, r2, r3}
 800c92e:	b503      	push	{r0, r1, lr}
 800c930:	4601      	mov	r1, r0
 800c932:	ab03      	add	r3, sp, #12
 800c934:	4805      	ldr	r0, [pc, #20]	@ (800c94c <fiprintf+0x20>)
 800c936:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93a:	6800      	ldr	r0, [r0, #0]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	f7ff fdaf 	bl	800c4a0 <_vfiprintf_r>
 800c942:	b002      	add	sp, #8
 800c944:	f85d eb04 	ldr.w	lr, [sp], #4
 800c948:	b003      	add	sp, #12
 800c94a:	4770      	bx	lr
 800c94c:	20000020 	.word	0x20000020

0800c950 <abort>:
 800c950:	b508      	push	{r3, lr}
 800c952:	2006      	movs	r0, #6
 800c954:	f000 f834 	bl	800c9c0 <raise>
 800c958:	2001      	movs	r0, #1
 800c95a:	f7f6 f9e9 	bl	8002d30 <_exit>

0800c95e <_malloc_usable_size_r>:
 800c95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c962:	1f18      	subs	r0, r3, #4
 800c964:	2b00      	cmp	r3, #0
 800c966:	bfbc      	itt	lt
 800c968:	580b      	ldrlt	r3, [r1, r0]
 800c96a:	18c0      	addlt	r0, r0, r3
 800c96c:	4770      	bx	lr

0800c96e <_raise_r>:
 800c96e:	291f      	cmp	r1, #31
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4605      	mov	r5, r0
 800c974:	460c      	mov	r4, r1
 800c976:	d904      	bls.n	800c982 <_raise_r+0x14>
 800c978:	2316      	movs	r3, #22
 800c97a:	6003      	str	r3, [r0, #0]
 800c97c:	f04f 30ff 	mov.w	r0, #4294967295
 800c980:	bd38      	pop	{r3, r4, r5, pc}
 800c982:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c984:	b112      	cbz	r2, 800c98c <_raise_r+0x1e>
 800c986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c98a:	b94b      	cbnz	r3, 800c9a0 <_raise_r+0x32>
 800c98c:	4628      	mov	r0, r5
 800c98e:	f000 f831 	bl	800c9f4 <_getpid_r>
 800c992:	4622      	mov	r2, r4
 800c994:	4601      	mov	r1, r0
 800c996:	4628      	mov	r0, r5
 800c998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c99c:	f000 b818 	b.w	800c9d0 <_kill_r>
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d00a      	beq.n	800c9ba <_raise_r+0x4c>
 800c9a4:	1c59      	adds	r1, r3, #1
 800c9a6:	d103      	bne.n	800c9b0 <_raise_r+0x42>
 800c9a8:	2316      	movs	r3, #22
 800c9aa:	6003      	str	r3, [r0, #0]
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	e7e7      	b.n	800c980 <_raise_r+0x12>
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	4798      	blx	r3
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	e7e0      	b.n	800c980 <_raise_r+0x12>
	...

0800c9c0 <raise>:
 800c9c0:	4b02      	ldr	r3, [pc, #8]	@ (800c9cc <raise+0xc>)
 800c9c2:	4601      	mov	r1, r0
 800c9c4:	6818      	ldr	r0, [r3, #0]
 800c9c6:	f7ff bfd2 	b.w	800c96e <_raise_r>
 800c9ca:	bf00      	nop
 800c9cc:	20000020 	.word	0x20000020

0800c9d0 <_kill_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4d07      	ldr	r5, [pc, #28]	@ (800c9f0 <_kill_r+0x20>)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	4608      	mov	r0, r1
 800c9da:	4611      	mov	r1, r2
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	f7f6 f997 	bl	8002d10 <_kill>
 800c9e2:	1c43      	adds	r3, r0, #1
 800c9e4:	d102      	bne.n	800c9ec <_kill_r+0x1c>
 800c9e6:	682b      	ldr	r3, [r5, #0]
 800c9e8:	b103      	cbz	r3, 800c9ec <_kill_r+0x1c>
 800c9ea:	6023      	str	r3, [r4, #0]
 800c9ec:	bd38      	pop	{r3, r4, r5, pc}
 800c9ee:	bf00      	nop
 800c9f0:	20019e6c 	.word	0x20019e6c

0800c9f4 <_getpid_r>:
 800c9f4:	f7f6 b984 	b.w	8002d00 <_getpid>

0800c9f8 <_init>:
 800c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fa:	bf00      	nop
 800c9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fe:	bc08      	pop	{r3}
 800ca00:	469e      	mov	lr, r3
 800ca02:	4770      	bx	lr

0800ca04 <_fini>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	bf00      	nop
 800ca08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0a:	bc08      	pop	{r3}
 800ca0c:	469e      	mov	lr, r3
 800ca0e:	4770      	bx	lr


city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  0800a024  0800a024  0000b024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af10  0800af10  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af10  0800af10  0000bf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af18  0800af18  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af18  0800af18  0000bf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af1c  0800af1c  0000bf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800af20  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019c84  2000006c  0800af8c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019cf0  0800af8c  0000ccf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ac6  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000464f  00000000  00000000  0002db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  000321b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001436  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abe2  00000000  00000000  00034f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205d3  00000000  00000000  0005fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff2f  00000000  00000000  0008013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018006a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007524  00000000  00000000  001800b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001875d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a00c 	.word	0x0800a00c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800a00c 	.word	0x0800a00c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vDispatcherCode>:
 * This function implements the dispatcher task, which waits for notifications
 * to process and route incoming dispatcher packets to the appropriate department queues.
 *
 * @param pvParameters Parameters passed to the task (expected to be `1`).
 */
void vDispatcherCode(void *pvParameters) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b09e      	sub	sp, #120	@ 0x78
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00d      	beq.n	80005ca <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005b2:	b672      	cpsid	i
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	b662      	cpsie	i
 80005c2:	677b      	str	r3, [r7, #116]	@ 0x74
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;
	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4821      	ldr	r0, [pc, #132]	@ (8000654 <vDispatcherCode+0xb4>)
 80005d0:	f002 f91a 	bl	8002808 <HAL_GPIO_WritePin>
		printf("Dispatcher Entered BLOCKED state! \r\n");
 80005d4:	4820      	ldr	r0, [pc, #128]	@ (8000658 <vDispatcherCode+0xb8>)
 80005d6:	f008 fd0d 	bl	8008ff4 <puts>
		fflush(stdout);
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <vDispatcherCode+0xbc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f008 fbc9 	bl	8008d78 <fflush>
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 80005e6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f007 f91d 	bl	8007830 <xTaskNotifyWait>
		printf("Dispatcher in RUNNING state! \n \tPerforming a task! \r\n");
 80005f6:	481a      	ldr	r0, [pc, #104]	@ (8000660 <vDispatcherCode+0xc0>)
 80005f8:	f008 fcfc 	bl	8008ff4 <puts>
		fflush(stdout);
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <vDispatcherCode+0xbc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4618      	mov	r0, r3
 8000604:	f008 fbb8 	bl	8008d78 <fflush>
		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <vDispatcherCode+0xc4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fcaf 	bl	8005f78 <xQueueReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d1d4      	bne.n	80005ca <vDispatcherCode+0x2a>
			xSemaphoreTake(xTasksDataMutex, portMAX_DELAY);
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <vDispatcherCode+0xc8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fd8d 	bl	8006148 <xQueueSemaphoreTake>
			total_tasks_ran++;
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <vDispatcherCode+0xcc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <vDispatcherCode+0xcc>)
 8000636:	6013      	str	r3, [r2, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <vDispatcherCode+0xc8>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f005 faeb 	bl	8005c1c <xQueueGenericSend>
			packetRouting(&new_packet);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f810 	bl	8000670 <packetRouting>
	for(;;) {
 8000650:	e7bb      	b.n	80005ca <vDispatcherCode+0x2a>
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400
 8000658:	0800a024 	.word	0x0800a024
 800065c:	2000001c 	.word	0x2000001c
 8000660:	0800a048 	.word	0x0800a048
 8000664:	2000065c 	.word	0x2000065c
 8000668:	200006d0 	.word	0x200006d0
 800066c:	200006c8 	.word	0x200006c8

08000670 <packetRouting>:
 * This function sends the given dispatcher packet to the queue corresponding
 * to its department.
 *
 * @param new_packet Pointer to the DispatcherPacket to be routed.
 */
void packetRouting(DispatcherPacket* new_packet) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	switch(new_packet->department) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d82f      	bhi.n	80006e0 <packetRouting+0x70>
 8000680:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <packetRouting+0x18>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000699 	.word	0x08000699
 800068c:	080006ab 	.word	0x080006ab
 8000690:	080006bd 	.word	0x080006bd
 8000694:	080006cf 	.word	0x080006cf
		case AMBULANCE:
			xQueueSend(qAmbulance, new_packet, portMAX_DELAY);
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <packetRouting+0x78>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	f04f 32ff 	mov.w	r2, #4294967295
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f005 faba 	bl	8005c1c <xQueueGenericSend>
			break;
 80006a8:	e01a      	b.n	80006e0 <packetRouting+0x70>
		case POLICE:
			xQueueSend(qPolice, new_packet, portMAX_DELAY);
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <packetRouting+0x7c>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	f005 fab1 	bl	8005c1c <xQueueGenericSend>
			break;
 80006ba:	e011      	b.n	80006e0 <packetRouting+0x70>
		case FIRE:
			xQueueSend(qFire, new_packet, portMAX_DELAY);
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <packetRouting+0x80>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	f04f 32ff 	mov.w	r2, #4294967295
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f005 faa8 	bl	8005c1c <xQueueGenericSend>
			break;
 80006cc:	e008      	b.n	80006e0 <packetRouting+0x70>
		case CORONA:
			xQueueSend(qCorona, new_packet, portMAX_DELAY);
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <packetRouting+0x84>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	f005 fa9f 	bl	8005c1c <xQueueGenericSend>
			break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000064c 	.word	0x2000064c
 80006ec:	20000650 	.word	0x20000650
 80006f0:	20000654 	.word	0x20000654
 80006f4:	20000658 	.word	0x20000658

080006f8 <generateDispatcherMSG>:
 * This function generates a dispatcher message based on a random department and message.
 * It also sets the time required to handle the task in ticks.
 *
 * @param hDispPacket Pointer to the DispatcherPacket to be filled with generated data.
 */
void generateDispatcherMSG(DispatcherPacket* hDispPacket) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	/*
	 * TODO: Consider creating a Mutex for when trying to modify hDispPacket.
	 * 		 It's also used in the TIM2 Interrupt Handler.
	 */
	DepartmentsEnum dep;
	uint8_t msgIdx = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73bb      	strb	r3, [r7, #14]

	// Generate Department
	uint32_t random_number = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	4619      	mov	r1, r3
 800070e:	4861      	ldr	r0, [pc, #388]	@ (8000894 <generateDispatcherMSG+0x19c>)
 8000710:	f003 fb34 	bl	8003d7c <HAL_RNG_GenerateRandomNumber>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d107      	bne.n	800072a <generateDispatcherMSG+0x32>
	        dep = (random_number % 4);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0303 	and.w	r3, r3, #3
 8000722:	73fb      	strb	r3, [r7, #15]
	        hDispPacket->department = dep;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7bfa      	ldrb	r2, [r7, #15]
 8000728:	701a      	strb	r2, [r3, #0]
	}

	// Pick a message
	switch(dep) {
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b03      	cmp	r3, #3
 800072e:	f200 8093 	bhi.w	8000858 <generateDispatcherMSG+0x160>
 8000732:	a201      	add	r2, pc, #4	@ (adr r2, 8000738 <generateDispatcherMSG+0x40>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000749 	.word	0x08000749
 800073c:	08000787 	.word	0x08000787
 8000740:	080007d1 	.word	0x080007d1
 8000744:	0800081b 	.word	0x0800081b
		case AMBULANCE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4619      	mov	r1, r3
 800074e:	4851      	ldr	r0, [pc, #324]	@ (8000894 <generateDispatcherMSG+0x19c>)
 8000750:	f003 fb14 	bl	8003d7c <HAL_RNG_GenerateRandomNumber>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <generateDispatcherMSG+0x6c>
				msgIdx = (uint8_t)(random_number % AMB_STRINGS_LEN);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vAMBstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1c58      	adds	r0, r3, #1
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2264      	movs	r2, #100	@ 0x64
 800076c:	fb02 f303 	mul.w	r3, r2, r3
 8000770:	4a49      	ldr	r2, [pc, #292]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000772:	4413      	add	r3, r2
 8000774:	2263      	movs	r2, #99	@ 0x63
 8000776:	4619      	mov	r1, r3
 8000778:	f008 fd58 	bl	800922c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000784:	e069      	b.n	800085a <generateDispatcherMSG+0x162>


		case POLICE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	4841      	ldr	r0, [pc, #260]	@ (8000894 <generateDispatcherMSG+0x19c>)
 800078e:	f003 faf5 	bl	8003d7c <HAL_RNG_GenerateRandomNumber>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <generateDispatcherMSG+0xb6>
				msgIdx = (uint8_t)(random_number % POLICE_STRINGS_LEN);
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	4b40      	ldr	r3, [pc, #256]	@ (800089c <generateDispatcherMSG+0x1a4>)
 800079c:	fba3 2301 	umull	r2, r3, r3, r1
 80007a0:	089a      	lsrs	r2, r3, #2
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	4613      	mov	r3, r2
 80007ac:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vPOLstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1c58      	adds	r0, r3, #1
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	2264      	movs	r2, #100	@ 0x64
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	4a39      	ldr	r2, [pc, #228]	@ (80008a0 <generateDispatcherMSG+0x1a8>)
 80007bc:	4413      	add	r3, r2
 80007be:	2263      	movs	r2, #99	@ 0x63
 80007c0:	4619      	mov	r1, r3
 80007c2:	f008 fd33 	bl	800922c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 80007ce:	e044      	b.n	800085a <generateDispatcherMSG+0x162>


		case FIRE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	482f      	ldr	r0, [pc, #188]	@ (8000894 <generateDispatcherMSG+0x19c>)
 80007d8:	f003 fad0 	bl	8003d7c <HAL_RNG_GenerateRandomNumber>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10a      	bne.n	80007f8 <generateDispatcherMSG+0x100>
				msgIdx = (uint8_t)(random_number % FIRE_STRINGS_LEN);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <generateDispatcherMSG+0x1ac>)
 80007e6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ea:	085a      	lsrs	r2, r3, #1
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	1aca      	subs	r2, r1, r3
 80007f4:	4613      	mov	r3, r2
 80007f6:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vFIREstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c58      	adds	r0, r3, #1
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	2264      	movs	r2, #100	@ 0x64
 8000800:	fb02 f303 	mul.w	r3, r2, r3
 8000804:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <generateDispatcherMSG+0x1b0>)
 8000806:	4413      	add	r3, r2
 8000808:	2263      	movs	r2, #99	@ 0x63
 800080a:	4619      	mov	r1, r3
 800080c:	f008 fd0e 	bl	800922c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000818:	e01f      	b.n	800085a <generateDispatcherMSG+0x162>


		case CORONA:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	481c      	ldr	r0, [pc, #112]	@ (8000894 <generateDispatcherMSG+0x19c>)
 8000822:	f003 faab 	bl	8003d7c <HAL_RNG_GenerateRandomNumber>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d104      	bne.n	8000836 <generateDispatcherMSG+0x13e>
				msgIdx = (uint8_t)(random_number % CORONA_STRINGS_LEN);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vCORstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c58      	adds	r0, r3, #1
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	2264      	movs	r2, #100	@ 0x64
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	4a1a      	ldr	r2, [pc, #104]	@ (80008ac <generateDispatcherMSG+0x1b4>)
 8000844:	4413      	add	r3, r2
 8000846:	2263      	movs	r2, #99	@ 0x63
 8000848:	4619      	mov	r1, r3
 800084a:	f008 fcef 	bl	800922c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000856:	e000      	b.n	800085a <generateDispatcherMSG+0x162>


		default:
			break;
 8000858:	bf00      	nop
	}

	// Pick handling time
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <generateDispatcherMSG+0x19c>)
 8000862:	f003 fa8b 	bl	8003d7c <HAL_RNG_GenerateRandomNumber>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10f      	bne.n	800088c <generateDispatcherMSG+0x194>
		hDispPacket->timeToHandleInTicks = (uint16_t)(random_number % LONGEST_TASK_DURATION_IN_TICKS) +
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <generateDispatcherMSG+0x1b8>)
 8000870:	fba3 1302 	umull	r1, r3, r3, r2
 8000874:	095b      	lsrs	r3, r3, #5
 8000876:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800087a:	fb01 f303 	mul.w	r3, r1, r3
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	330a      	adds	r3, #10
 8000884:	b29a      	uxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
													SHORTEST_TASK_DURATION_IN_TICKS;
	}
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000088 	.word	0x20000088
 8000898:	0800a30c 	.word	0x0800a30c
 800089c:	cccccccd 	.word	0xcccccccd
 80008a0:	0800a62c 	.word	0x0800a62c
 80008a4:	38e38e39 	.word	0x38e38e39
 80008a8:	0800a820 	.word	0x0800a820
 80008ac:	0800aba4 	.word	0x0800aba4
 80008b0:	1b4e81b5 	.word	0x1b4e81b5

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f001 fcc6 	bl	800224a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f835 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f95f 	bl	8000b84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008c6:	f000 f8ff 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ca:	f000 f92d 	bl	8000b28 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80008ce:	f000 f899 	bl	8000a04 <MX_RNG_Init>
  MX_TIM2_Init();
 80008d2:	f000 f8ab 	bl	8000a2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  initSemaphores();
 80008d6:	f000 fd25 	bl	8001324 <initSemaphores>
  initQueues();
 80008da:	f000 fcd3 	bl	8001284 <initQueues>
  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  BaseType_t status;
  status = xTaskCreate((TaskFunction_t)initTasks,
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <main+0x6c>)
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2338      	movs	r3, #56	@ 0x38
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	490e      	ldr	r1, [pc, #56]	@ (8000924 <main+0x70>)
 80008ec:	480e      	ldr	r0, [pc, #56]	@ (8000928 <main+0x74>)
 80008ee:	f005 ff71 	bl	80067d4 <xTaskCreate>
 80008f2:	6078      	str	r0, [r7, #4]
		  "init_task",
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);
  configASSERT(status ==  pdTRUE);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00d      	beq.n	8000916 <main+0x62>
	__asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fe:	b672      	cpsid	i
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	b662      	cpsie	i
 800090e:	603b      	str	r3, [r7, #0]
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <main+0x5e>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 8000916:	f006 f97b 	bl	8006c10 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091a:	bf00      	nop
 800091c:	e7fd      	b.n	800091a <main+0x66>
 800091e:	bf00      	nop
 8000920:	20000698 	.word	0x20000698
 8000924:	0800a080 	.word	0x0800a080
 8000928:	08000d51 	.word	0x08000d51

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	@ 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	@ 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f008 fc6e 	bl	800921c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <SystemClock_Config+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a29      	ldr	r2, [pc, #164]	@ (80009fc <SystemClock_Config+0xd0>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <SystemClock_Config+0xd0>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <SystemClock_Config+0xd4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a24      	ldr	r2, [pc, #144]	@ (8000a00 <SystemClock_Config+0xd4>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000998:	23d8      	movs	r3, #216	@ 0xd8
 800099a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009a0:	2309      	movs	r3, #9
 80009a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 f8d1 	bl	8002b50 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009b4:	f000 fd90 	bl	80014d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009b8:	f002 f87a 	bl	8002ab0 <HAL_PWREx_EnableOverDrive>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009c2:	f000 fd89 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2107      	movs	r1, #7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fb57 	bl	8003098 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009f0:	f000 fd72 	bl	80014d8 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	@ 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_RNG_Init+0x20>)
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <MX_RNG_Init+0x24>)
 8000a0c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_RNG_Init+0x20>)
 8000a10:	f003 f98a 	bl	8003d28 <HAL_RNG_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000a1a:	f000 fd5d 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000088 	.word	0x20000088
 8000a28:	50060800 	.word	0x50060800

08000a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER_SET;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a54:	f240 221b 	movw	r2, #539	@ 0x21b
 8000a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD_SET;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a62:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000a66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a74:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a76:	f003 fa35 	bl	8003ee4 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 fd2a 	bl	80014d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000a92:	f003 fbff 	bl	8004294 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a9c:	f000 fd1c 	bl	80014d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_TIM2_Init+0x98>)
 8000aae:	f003 fe29 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ab8:	f000 fd0e 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000098 	.word	0x20000098

08000ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <MX_USART3_UART_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b0c:	f003 fea6 	bl	800485c <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 fcdf 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000e4 	.word	0x200000e4
 8000b24:	40004800 	.word	0x40004800

08000b28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	2206      	movs	r2, #6
 8000b38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6c:	f001 fe65 	bl	800283a <HAL_PCD_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b76:	f000 fcaf 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000016c 	.word	0x2000016c

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	@ 0x30
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b68      	ldr	r3, [pc, #416]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a67      	ldr	r2, [pc, #412]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b65      	ldr	r3, [pc, #404]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	4b62      	ldr	r3, [pc, #392]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a61      	ldr	r2, [pc, #388]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b5c      	ldr	r3, [pc, #368]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a5b      	ldr	r2, [pc, #364]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b59      	ldr	r3, [pc, #356]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b56      	ldr	r3, [pc, #344]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a55      	ldr	r2, [pc, #340]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b53      	ldr	r3, [pc, #332]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b50      	ldr	r3, [pc, #320]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c12:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a49      	ldr	r2, [pc, #292]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <MX_GPIO_Init+0x1b8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c30:	4843      	ldr	r0, [pc, #268]	@ (8000d40 <MX_GPIO_Init+0x1bc>)
 8000c32:	f001 fde9 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	4842      	ldr	r0, [pc, #264]	@ (8000d44 <MX_GPIO_Init+0x1c0>)
 8000c3c:	f001 fde4 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	483c      	ldr	r0, [pc, #240]	@ (8000d48 <MX_GPIO_Init+0x1c4>)
 8000c58:	f001 fc2a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c5c:	2332      	movs	r3, #50	@ 0x32
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4834      	ldr	r0, [pc, #208]	@ (8000d48 <MX_GPIO_Init+0x1c4>)
 8000c78:	f001 fc1a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c7c:	2386      	movs	r3, #134	@ 0x86
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8c:	230b      	movs	r3, #11
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	482d      	ldr	r0, [pc, #180]	@ (8000d4c <MX_GPIO_Init+0x1c8>)
 8000c98:	f001 fc0a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c9c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4822      	ldr	r0, [pc, #136]	@ (8000d40 <MX_GPIO_Init+0x1bc>)
 8000cb6:	f001 fbfb 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <MX_GPIO_Init+0x1bc>)
 8000cd8:	f001 fbea 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <MX_GPIO_Init+0x1c0>)
 8000cf4:	f001 fbdc 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <MX_GPIO_Init+0x1c0>)
 8000d0c:	f001 fbd0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_GPIO_Init+0x1c0>)
 8000d2e:	f001 fbbf 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	@ 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <initTasks>:

/* USER CODE BEGIN 4 */
void initTasks(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0a4      	sub	sp, #144	@ 0x90
 8000d54:	af02      	add	r7, sp, #8
	/* TODO: consider creating a dedicated function to initialize the tasks,
	 *       the function will receive the address of the tasks array, and its size,
	 *       and will initialize it.
	 *       This will replace initializing each array separately.
	 */
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000d56:	4b92      	ldr	r3, [pc, #584]	@ (8000fa0 <initTasks+0x250>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 f9f2 	bl	8006148 <xQueueSemaphoreTake>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d113      	bne.n	8000d92 <initTasks+0x42>
		portENTER_CRITICAL();
 8000d6a:	f007 fc3f 	bl	80085ec <vPortEnterCritical>
		printf("Starting initTasks task! \r\n");
 8000d6e:	488d      	ldr	r0, [pc, #564]	@ (8000fa4 <initTasks+0x254>)
 8000d70:	f008 f940 	bl	8008ff4 <puts>
		fflush(stdout);
 8000d74:	4b8c      	ldr	r3, [pc, #560]	@ (8000fa8 <initTasks+0x258>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 fffc 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 8000d80:	4b87      	ldr	r3, [pc, #540]	@ (8000fa0 <initTasks+0x250>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f004 ff47 	bl	8005c1c <xQueueGenericSend>
		portEXIT_CRITICAL();
 8000d8e:	f007 fc63 	bl	8008658 <vPortExitCritical>
	}
	/* AMBULANCE TASK INIT */
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000d98:	e056      	b.n	8000e48 <initTasks+0xf8>
		taskInit_t* ambulance_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8000d9a:	2014      	movs	r0, #20
 8000d9c:	f007 fd54 	bl	8008848 <pvPortMalloc>
 8000da0:	65b8      	str	r0, [r7, #88]	@ 0x58
		configASSERT(ambulance_taskInit != NULL);
 8000da2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10d      	bne.n	8000dc4 <initTasks+0x74>
	__asm volatile
 8000da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dac:	b672      	cpsid	i
 8000dae:	f383 8811 	msr	BASEPRI, r3
 8000db2:	f3bf 8f6f 	isb	sy
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	b662      	cpsie	i
 8000dbc:	653b      	str	r3, [r7, #80]	@ 0x50
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <initTasks+0x70>

		ambulance_taskInit->department = AMBULANCE;
 8000dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
		ambulance_taskInit->taskIdentifier = i;
 8000dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dd2:	705a      	strb	r2, [r3, #1]
		ambulance_taskInit->pQhandler = &qAmbulance;
 8000dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dd6:	4a75      	ldr	r2, [pc, #468]	@ (8000fac <initTasks+0x25c>)
 8000dd8:	605a      	str	r2, [r3, #4]
		ambulance_taskInit->pSemHandler = &AmbTasksStatusMutex;
 8000dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ddc:	4a74      	ldr	r2, [pc, #464]	@ (8000fb0 <initTasks+0x260>)
 8000dde:	609a      	str	r2, [r3, #8]
		ambulance_taskInit->bTaskStatusArr = bAmbTasksStatus;
 8000de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000de2:	4a74      	ldr	r2, [pc, #464]	@ (8000fb4 <initTasks+0x264>)
 8000de4:	60da      	str	r2, [r3, #12]
		ambulance_taskInit->numOfTasks = AMBULANCE_TASKS;
 8000de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000de8:	2204      	movs	r2, #4
 8000dea:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i);
 8000dec:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000df4:	4a70      	ldr	r2, [pc, #448]	@ (8000fb8 <initTasks+0x268>)
 8000df6:	2110      	movs	r1, #16
 8000df8:	f008 f904 	bl	8009004 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8000dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4a6e      	ldr	r2, [pc, #440]	@ (8000fbc <initTasks+0x26c>)
 8000e04:	4413      	add	r3, r2
 8000e06:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	232e      	movs	r3, #46	@ 0x2e
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e12:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e16:	486a      	ldr	r0, [pc, #424]	@ (8000fc0 <initTasks+0x270>)
 8000e18:	f005 fcdc 	bl	80067d4 <xTaskCreate>
 8000e1c:	6578      	str	r0, [r7, #84]	@ 0x54
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*)ambulance_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 8000e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00c      	beq.n	8000e3e <initTasks+0xee>
	 		/* TODO: handle this error */
	 		vPortFree(ambulance_taskInit);
 8000e24:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000e26:	f007 fddd 	bl	80089e4 <vPortFree>
	 		printf("Starting Ambulance Threads Failed! \r\n");
 8000e2a:	4866      	ldr	r0, [pc, #408]	@ (8000fc4 <initTasks+0x274>)
 8000e2c:	f008 f8e2 	bl	8008ff4 <puts>
	 		fflush(stdout);
 8000e30:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa8 <initTasks+0x258>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f007 ff9e 	bl	8008d78 <fflush>
 8000e3c:	e1ee      	b.n	800121c <initTasks+0x4cc>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8000e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e42:	3301      	adds	r3, #1
 8000e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	dda4      	ble.n	8000d9a <initTasks+0x4a>
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000e50:	4b53      	ldr	r3, [pc, #332]	@ (8000fa0 <initTasks+0x250>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 f975 	bl	8006148 <xQueueSemaphoreTake>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d113      	bne.n	8000e8c <initTasks+0x13c>
		portENTER_CRITICAL();
 8000e64:	f007 fbc2 	bl	80085ec <vPortEnterCritical>
		printf("Started Ambulance Threads! \r\n");
 8000e68:	4857      	ldr	r0, [pc, #348]	@ (8000fc8 <initTasks+0x278>)
 8000e6a:	f008 f8c3 	bl	8008ff4 <puts>
		fflush(stdout);
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa8 <initTasks+0x258>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 ff7f 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 8000e7a:	4b49      	ldr	r3, [pc, #292]	@ (8000fa0 <initTasks+0x250>)
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	f004 feca 	bl	8005c1c <xQueueGenericSend>
		portEXIT_CRITICAL();
 8000e88:	f007 fbe6 	bl	8008658 <vPortExitCritical>
	}


	/* POLICE TASK INIT */
	for(int i=0; i<POLICE_TASKS; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e92:	e04a      	b.n	8000f2a <initTasks+0x1da>
		taskInit_t* police_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8000e94:	2014      	movs	r0, #20
 8000e96:	f007 fcd7 	bl	8008848 <pvPortMalloc>
 8000e9a:	6638      	str	r0, [r7, #96]	@ 0x60
		configASSERT(police_taskInit != NULL);
 8000e9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10d      	bne.n	8000ebe <initTasks+0x16e>
	__asm volatile
 8000ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ea6:	b672      	cpsid	i
 8000ea8:	f383 8811 	msr	BASEPRI, r3
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f3bf 8f4f 	dsb	sy
 8000eb4:	b662      	cpsie	i
 8000eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <initTasks+0x16a>

		police_taskInit->department = POLICE;
 8000ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
		police_taskInit->taskIdentifier = i;
 8000ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ecc:	705a      	strb	r2, [r3, #1]
		police_taskInit->pQhandler = &qPolice;
 8000ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8000fcc <initTasks+0x27c>)
 8000ed2:	605a      	str	r2, [r3, #4]
		police_taskInit->pSemHandler = &PolTasksStatusMutex;
 8000ed4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd0 <initTasks+0x280>)
 8000ed8:	609a      	str	r2, [r3, #8]
		police_taskInit->bTaskStatusArr = bPolTasksStatus;
 8000eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000edc:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <initTasks+0x284>)
 8000ede:	60da      	str	r2, [r3, #12]
		police_taskInit->numOfTasks = POLICE_TASKS;
 8000ee0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i);
 8000ee6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000eee:	4a3a      	ldr	r2, [pc, #232]	@ (8000fd8 <initTasks+0x288>)
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	f008 f887 	bl	8009004 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8000ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4a37      	ldr	r2, [pc, #220]	@ (8000fdc <initTasks+0x28c>)
 8000efe:	4413      	add	r3, r2
 8000f00:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	232e      	movs	r3, #46	@ 0x2e
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f0c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f10:	482b      	ldr	r0, [pc, #172]	@ (8000fc0 <initTasks+0x270>)
 8000f12:	f005 fc5f 	bl	80067d4 <xTaskCreate>
 8000f16:	65f8      	str	r0, [r7, #92]	@ 0x5c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) police_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 8000f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	f040 8177 	bne.w	800120e <initTasks+0x4be>
	for(int i=0; i<POLICE_TASKS; i++) {
 8000f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f24:	3301      	adds	r3, #1
 8000f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	ddb0      	ble.n	8000e94 <initTasks+0x144>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <initTasks+0x250>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 f904 	bl	8006148 <xQueueSemaphoreTake>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d113      	bne.n	8000f6e <initTasks+0x21e>
		portENTER_CRITICAL();
 8000f46:	f007 fb51 	bl	80085ec <vPortEnterCritical>
		printf("Started Police Threads! \r\n");
 8000f4a:	4825      	ldr	r0, [pc, #148]	@ (8000fe0 <initTasks+0x290>)
 8000f4c:	f008 f852 	bl	8008ff4 <puts>
		fflush(stdout);
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <initTasks+0x258>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 ff0e 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <initTasks+0x250>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	f004 fe59 	bl	8005c1c <xQueueGenericSend>
		portEXIT_CRITICAL();
 8000f6a:	f007 fb75 	bl	8008658 <vPortExitCritical>
	}

	/* FIRE DEP TASK INIT */
	for(int i=0; i<FIRE_TASKS; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000f72:	e068      	b.n	8001046 <initTasks+0x2f6>
		taskInit_t* fire_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8000f74:	2014      	movs	r0, #20
 8000f76:	f007 fc67 	bl	8008848 <pvPortMalloc>
 8000f7a:	66b8      	str	r0, [r7, #104]	@ 0x68
		configASSERT(fire_taskInit != NULL);
 8000f7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d130      	bne.n	8000fe4 <initTasks+0x294>
	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f86:	b672      	cpsid	i
 8000f88:	f383 8811 	msr	BASEPRI, r3
 8000f8c:	f3bf 8f6f 	isb	sy
 8000f90:	f3bf 8f4f 	dsb	sy
 8000f94:	b662      	cpsie	i
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	e7fd      	b.n	8000f9a <initTasks+0x24a>
 8000f9e:	bf00      	nop
 8000fa0:	200006c0 	.word	0x200006c0
 8000fa4:	0800a08c 	.word	0x0800a08c
 8000fa8:	2000001c 	.word	0x2000001c
 8000fac:	2000064c 	.word	0x2000064c
 8000fb0:	200006a4 	.word	0x200006a4
 8000fb4:	200006a0 	.word	0x200006a0
 8000fb8:	0800a0a8 	.word	0x0800a0a8
 8000fbc:	20000660 	.word	0x20000660
 8000fc0:	08001d39 	.word	0x08001d39
 8000fc4:	0800a0b8 	.word	0x0800a0b8
 8000fc8:	0800a0e0 	.word	0x0800a0e0
 8000fcc:	20000650 	.word	0x20000650
 8000fd0:	200006ac 	.word	0x200006ac
 8000fd4:	200006a8 	.word	0x200006a8
 8000fd8:	0800a100 	.word	0x0800a100
 8000fdc:	20000670 	.word	0x20000670
 8000fe0:	0800a10c 	.word	0x0800a10c

		fire_taskInit->department = FIRE;
 8000fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
		fire_taskInit->taskIdentifier = i;
 8000fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ff0:	705a      	strb	r2, [r3, #1]
		fire_taskInit->pQhandler = &qFire;
 8000ff2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ff4:	4a8b      	ldr	r2, [pc, #556]	@ (8001224 <initTasks+0x4d4>)
 8000ff6:	605a      	str	r2, [r3, #4]
		fire_taskInit->pSemHandler = &FireTasksStatusMutex;
 8000ff8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ffa:	4a8b      	ldr	r2, [pc, #556]	@ (8001228 <initTasks+0x4d8>)
 8000ffc:	609a      	str	r2, [r3, #8]
		fire_taskInit->bTaskStatusArr = bFireTasksStatus;
 8000ffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001000:	4a8a      	ldr	r2, [pc, #552]	@ (800122c <initTasks+0x4dc>)
 8001002:	60da      	str	r2, [r3, #12]
		fire_taskInit->numOfTasks = FIRE_TASKS;
 8001004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001006:	2202      	movs	r2, #2
 8001008:	741a      	strb	r2, [r3, #16]
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i);
 800100a:	f107 0014 	add.w	r0, r7, #20
 800100e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001010:	4a87      	ldr	r2, [pc, #540]	@ (8001230 <initTasks+0x4e0>)
 8001012:	2110      	movs	r1, #16
 8001014:	f007 fff6 	bl	8009004 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a85      	ldr	r2, [pc, #532]	@ (8001234 <initTasks+0x4e4>)
 800101e:	4413      	add	r3, r2
 8001020:	f107 0114 	add.w	r1, r7, #20
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	232e      	movs	r3, #46	@ 0x2e
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800102c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001030:	4881      	ldr	r0, [pc, #516]	@ (8001238 <initTasks+0x4e8>)
 8001032:	f005 fbcf 	bl	80067d4 <xTaskCreate>
 8001036:	6678      	str	r0, [r7, #100]	@ 0x64
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) fire_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 8001038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800103a:	2b01      	cmp	r3, #1
 800103c:	f040 80e9 	bne.w	8001212 <initTasks+0x4c2>
	for(int i=0; i<FIRE_TASKS; i++) {
 8001040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001042:	3301      	adds	r3, #1
 8001044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001046:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001048:	2b01      	cmp	r3, #1
 800104a:	dd93      	ble.n	8000f74 <initTasks+0x224>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800104c:	4b7b      	ldr	r3, [pc, #492]	@ (800123c <initTasks+0x4ec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	4618      	mov	r0, r3
 8001056:	f005 f877 	bl	8006148 <xQueueSemaphoreTake>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d10f      	bne.n	8001080 <initTasks+0x330>
		printf("Started Fire Dep Threads! \r\n");
 8001060:	4877      	ldr	r0, [pc, #476]	@ (8001240 <initTasks+0x4f0>)
 8001062:	f007 ffc7 	bl	8008ff4 <puts>
		fflush(stdout);
 8001066:	4b77      	ldr	r3, [pc, #476]	@ (8001244 <initTasks+0x4f4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f007 fe83 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 8001072:	4b72      	ldr	r3, [pc, #456]	@ (800123c <initTasks+0x4ec>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	f004 fdce 	bl	8005c1c <xQueueGenericSend>
	}

	/* CORONA TASK INIT */
	for(int i=0; i<CORONA_TASKS; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001084:	e043      	b.n	800110e <initTasks+0x3be>
		taskInit_t* corona_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001086:	2014      	movs	r0, #20
 8001088:	f007 fbde 	bl	8008848 <pvPortMalloc>
 800108c:	6738      	str	r0, [r7, #112]	@ 0x70
		configASSERT(corona_taskInit != NULL);
 800108e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10d      	bne.n	80010b0 <initTasks+0x360>
	__asm volatile
 8001094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001098:	b672      	cpsid	i
 800109a:	f383 8811 	msr	BASEPRI, r3
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f3bf 8f4f 	dsb	sy
 80010a6:	b662      	cpsie	i
 80010a8:	647b      	str	r3, [r7, #68]	@ 0x44
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <initTasks+0x35c>

		corona_taskInit->department = CORONA;
 80010b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010b2:	2203      	movs	r2, #3
 80010b4:	701a      	strb	r2, [r3, #0]
		corona_taskInit->taskIdentifier = i;
 80010b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010bc:	705a      	strb	r2, [r3, #1]
		corona_taskInit->pQhandler = &qCorona;
 80010be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010c0:	4a61      	ldr	r2, [pc, #388]	@ (8001248 <initTasks+0x4f8>)
 80010c2:	605a      	str	r2, [r3, #4]
		corona_taskInit->pSemHandler = &CorTasksStatusMutex;
 80010c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010c6:	4a61      	ldr	r2, [pc, #388]	@ (800124c <initTasks+0x4fc>)
 80010c8:	609a      	str	r2, [r3, #8]
		corona_taskInit->bTaskStatusArr = bCorTasksStatus;
 80010ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010cc:	4a60      	ldr	r2, [pc, #384]	@ (8001250 <initTasks+0x500>)
 80010ce:	60da      	str	r2, [r3, #12]
		corona_taskInit->numOfTasks = CORONA_TASKS;
 80010d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010d2:	2204      	movs	r2, #4
 80010d4:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i);
 80010d6:	1d38      	adds	r0, r7, #4
 80010d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010da:	4a5e      	ldr	r2, [pc, #376]	@ (8001254 <initTasks+0x504>)
 80010dc:	2110      	movs	r1, #16
 80010de:	f007 ff91 	bl	8009004 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80010e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001258 <initTasks+0x508>)
 80010e8:	4413      	add	r3, r2
 80010ea:	1d39      	adds	r1, r7, #4
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	232e      	movs	r3, #46	@ 0x2e
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010f8:	484f      	ldr	r0, [pc, #316]	@ (8001238 <initTasks+0x4e8>)
 80010fa:	f005 fb6b 	bl	80067d4 <xTaskCreate>
 80010fe:	66f8      	str	r0, [r7, #108]	@ 0x6c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) corona_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 8001100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001102:	2b01      	cmp	r3, #1
 8001104:	f040 8087 	bne.w	8001216 <initTasks+0x4c6>
	for(int i=0; i<CORONA_TASKS; i++) {
 8001108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800110a:	3301      	adds	r3, #1
 800110c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800110e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001110:	2b03      	cmp	r3, #3
 8001112:	ddb8      	ble.n	8001086 <initTasks+0x336>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001114:	4b49      	ldr	r3, [pc, #292]	@ (800123c <initTasks+0x4ec>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	4618      	mov	r0, r3
 800111e:	f005 f813 	bl	8006148 <xQueueSemaphoreTake>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10f      	bne.n	8001148 <initTasks+0x3f8>
		printf("Started Corona Threads! \r\n");
 8001128:	484c      	ldr	r0, [pc, #304]	@ (800125c <initTasks+0x50c>)
 800112a:	f007 ff63 	bl	8008ff4 <puts>
		fflush(stdout);
 800112e:	4b45      	ldr	r3, [pc, #276]	@ (8001244 <initTasks+0x4f4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4618      	mov	r0, r3
 8001136:	f007 fe1f 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 800113a:	4b40      	ldr	r3, [pc, #256]	@ (800123c <initTasks+0x4ec>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	f004 fd6a 	bl	8005c1c <xQueueGenericSend>
	}

	vTaskDelay(100);
 8001148:	2064      	movs	r0, #100	@ 0x64
 800114a:	f005 fd29 	bl	8006ba0 <vTaskDelay>

	BaseType_t status = xTaskCreate((TaskFunction_t)vDispatcherCode,
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <initTasks+0x510>)
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	232c      	movs	r3, #44	@ 0x2c
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800115c:	4941      	ldr	r1, [pc, #260]	@ (8001264 <initTasks+0x514>)
 800115e:	4842      	ldr	r0, [pc, #264]	@ (8001268 <initTasks+0x518>)
 8001160:	f005 fb38 	bl	80067d4 <xTaskCreate>
 8001164:	6778      	str	r0, [r7, #116]	@ 0x74
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							DISPATCHER_TASK_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 8001166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001168:	2b01      	cmp	r3, #1
 800116a:	d156      	bne.n	800121a <initTasks+0x4ca>
		return;
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800116c:	4b33      	ldr	r3, [pc, #204]	@ (800123c <initTasks+0x4ec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	4618      	mov	r0, r3
 8001176:	f004 ffe7 	bl	8006148 <xQueueSemaphoreTake>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10f      	bne.n	80011a0 <initTasks+0x450>
		printf("Started Dispatcher Thread! \r\n");
 8001180:	483a      	ldr	r0, [pc, #232]	@ (800126c <initTasks+0x51c>)
 8001182:	f007 ff37 	bl	8008ff4 <puts>
		fflush(stdout);
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <initTasks+0x4f4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fdf3 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 8001192:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <initTasks+0x4ec>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	f004 fd3e 	bl	8005c1c <xQueueGenericSend>
	}

	status = xTaskCreate((TaskFunction_t)tasksManagerTask,
 80011a0:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <initTasks+0x520>)
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	232b      	movs	r3, #43	@ 0x2b
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011ae:	4931      	ldr	r1, [pc, #196]	@ (8001274 <initTasks+0x524>)
 80011b0:	4831      	ldr	r0, [pc, #196]	@ (8001278 <initTasks+0x528>)
 80011b2:	f005 fb0f 	bl	80067d4 <xTaskCreate>
 80011b6:	6778      	str	r0, [r7, #116]	@ 0x74
						(void*)1,
						MANAGER_TASK_PRIORITY,
						&vTasksManagerTask);


	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80011b8:	4830      	ldr	r0, [pc, #192]	@ (800127c <initTasks+0x52c>)
 80011ba:	f002 feeb 	bl	8003f94 <HAL_TIM_Base_Start_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <initTasks+0x478>
		Error_Handler();
 80011c4:	f000 f988 	bl	80014d8 <Error_Handler>
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <initTasks+0x4ec>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 ffb9 	bl	8006148 <xQueueSemaphoreTake>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10f      	bne.n	80011fc <initTasks+0x4ac>
		printf("Timer interrupts enabled! \r\n");
 80011dc:	4828      	ldr	r0, [pc, #160]	@ (8001280 <initTasks+0x530>)
 80011de:	f007 ff09 	bl	8008ff4 <puts>
		fflush(stdout);
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <initTasks+0x4f4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f007 fdc5 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <initTasks+0x4ec>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	f004 fd10 	bl	8005c1c <xQueueGenericSend>
	//	Error_Handler();
	//}
	//vTaskDelay(100);
	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 80011fc:	463a      	mov	r2, r7
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f006 fb13 	bl	8007830 <xTaskNotifyWait>
	for(;;) {
 800120a:	bf00      	nop
 800120c:	e7f6      	b.n	80011fc <initTasks+0x4ac>
	 		return;
 800120e:	bf00      	nop
 8001210:	e004      	b.n	800121c <initTasks+0x4cc>
	 		return;
 8001212:	bf00      	nop
 8001214:	e002      	b.n	800121c <initTasks+0x4cc>
	 		return;
 8001216:	bf00      	nop
 8001218:	e000      	b.n	800121c <initTasks+0x4cc>
		return;
 800121a:	bf00      	nop
	}
}
 800121c:	3788      	adds	r7, #136	@ 0x88
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000654 	.word	0x20000654
 8001228:	200006b4 	.word	0x200006b4
 800122c:	200006b0 	.word	0x200006b0
 8001230:	0800a128 	.word	0x0800a128
 8001234:	2000067c 	.word	0x2000067c
 8001238:	08001d39 	.word	0x08001d39
 800123c:	200006c0 	.word	0x200006c0
 8001240:	0800a130 	.word	0x0800a130
 8001244:	2000001c 	.word	0x2000001c
 8001248:	20000658 	.word	0x20000658
 800124c:	200006bc 	.word	0x200006bc
 8001250:	200006b8 	.word	0x200006b8
 8001254:	0800a14c 	.word	0x0800a14c
 8001258:	20000684 	.word	0x20000684
 800125c:	0800a158 	.word	0x0800a158
 8001260:	20000694 	.word	0x20000694
 8001264:	0800a174 	.word	0x0800a174
 8001268:	080005a1 	.word	0x080005a1
 800126c:	0800a184 	.word	0x0800a184
 8001270:	2000069c 	.word	0x2000069c
 8001274:	0800a1a4 	.word	0x0800a1a4
 8001278:	08001af1 	.word	0x08001af1
 800127c:	20000098 	.word	0x20000098
 8001280:	0800a1b4 	.word	0x0800a1b4

08001284 <initQueues>:

void initQueues(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	/* TODO: Consider setting attributed for each queue */

	qAmbulance = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8001288:	2200      	movs	r2, #0
 800128a:	2168      	movs	r1, #104	@ 0x68
 800128c:	200a      	movs	r0, #10
 800128e:	f004 fc2c 	bl	8005aea <xQueueGenericCreate>
 8001292:	4603      	mov	r3, r0
 8001294:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <initQueues+0x8c>)
 8001296:	6013      	str	r3, [r2, #0]
	if(qAmbulance == NULL) {
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <initQueues+0x8c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d02f      	beq.n	8001300 <initQueues+0x7c>
		/* TODO: handle this error */
		return;
	}
	qPolice = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80012a0:	2200      	movs	r2, #0
 80012a2:	2168      	movs	r1, #104	@ 0x68
 80012a4:	200a      	movs	r0, #10
 80012a6:	f004 fc20 	bl	8005aea <xQueueGenericCreate>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <initQueues+0x90>)
 80012ae:	6013      	str	r3, [r2, #0]
	if(qPolice == NULL) {
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <initQueues+0x90>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d025      	beq.n	8001304 <initQueues+0x80>
		/* TODO: handle this error */
		return;
	}
	qFire = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80012b8:	2200      	movs	r2, #0
 80012ba:	2168      	movs	r1, #104	@ 0x68
 80012bc:	200a      	movs	r0, #10
 80012be:	f004 fc14 	bl	8005aea <xQueueGenericCreate>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <initQueues+0x94>)
 80012c6:	6013      	str	r3, [r2, #0]
	if(qFire == NULL) {
 80012c8:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <initQueues+0x94>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01b      	beq.n	8001308 <initQueues+0x84>
		/* TODO: handle this error */
		return;
	}
	qCorona = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80012d0:	2200      	movs	r2, #0
 80012d2:	2168      	movs	r1, #104	@ 0x68
 80012d4:	200a      	movs	r0, #10
 80012d6:	f004 fc08 	bl	8005aea <xQueueGenericCreate>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <initQueues+0x98>)
 80012de:	6013      	str	r3, [r2, #0]
	if(qCorona == NULL) {
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <initQueues+0x98>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d011      	beq.n	800130c <initQueues+0x88>
		/* TODO: handle this error */
		return;
	}
	qDispatcher = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80012e8:	2200      	movs	r2, #0
 80012ea:	2168      	movs	r1, #104	@ 0x68
 80012ec:	200a      	movs	r0, #10
 80012ee:	f004 fbfc 	bl	8005aea <xQueueGenericCreate>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <initQueues+0x9c>)
 80012f6:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <initQueues+0x9c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	e006      	b.n	800130e <initQueues+0x8a>
		return;
 8001300:	bf00      	nop
 8001302:	e004      	b.n	800130e <initQueues+0x8a>
		return;
 8001304:	bf00      	nop
 8001306:	e002      	b.n	800130e <initQueues+0x8a>
		return;
 8001308:	bf00      	nop
 800130a:	e000      	b.n	800130e <initQueues+0x8a>
		return;
 800130c:	bf00      	nop
		/* TODO: handle this error */
		return;
	}
	/* TODO: log a message queues were initialized */

}
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000064c 	.word	0x2000064c
 8001314:	20000650 	.word	0x20000650
 8001318:	20000654 	.word	0x20000654
 800131c:	20000658 	.word	0x20000658
 8001320:	2000065c 	.word	0x2000065c

08001324 <initSemaphores>:





void initSemaphores(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	printfMutex = xSemaphoreCreateMutex();
 8001328:	2001      	movs	r0, #1
 800132a:	f004 fc5e 	bl	8005bea <xQueueCreateMutex>
 800132e:	4603      	mov	r3, r0
 8001330:	4a20      	ldr	r2, [pc, #128]	@ (80013b4 <initSemaphores+0x90>)
 8001332:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <initSemaphores+0x90>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d031      	beq.n	80013a0 <initSemaphores+0x7c>
		return;
	}
	xTasksDataMutex = xSemaphoreCreateMutex();
 800133c:	2001      	movs	r0, #1
 800133e:	f004 fc54 	bl	8005bea <xQueueCreateMutex>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <initSemaphores+0x94>)
 8001346:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <initSemaphores+0x90>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d029      	beq.n	80013a4 <initSemaphores+0x80>
		return;
	}
	AmbTasksStatusMutex = xSemaphoreCreateMutex();
 8001350:	2001      	movs	r0, #1
 8001352:	f004 fc4a 	bl	8005bea <xQueueCreateMutex>
 8001356:	4603      	mov	r3, r0
 8001358:	4a18      	ldr	r2, [pc, #96]	@ (80013bc <initSemaphores+0x98>)
 800135a:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <initSemaphores+0x90>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d021      	beq.n	80013a8 <initSemaphores+0x84>
		return;
	}
	PolTasksStatusMutex = xSemaphoreCreateMutex();
 8001364:	2001      	movs	r0, #1
 8001366:	f004 fc40 	bl	8005bea <xQueueCreateMutex>
 800136a:	4603      	mov	r3, r0
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <initSemaphores+0x9c>)
 800136e:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <initSemaphores+0x90>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d019      	beq.n	80013ac <initSemaphores+0x88>
		return;
	}
	FireTasksStatusMutex = xSemaphoreCreateMutex();
 8001378:	2001      	movs	r0, #1
 800137a:	f004 fc36 	bl	8005bea <xQueueCreateMutex>
 800137e:	4603      	mov	r3, r0
 8001380:	4a10      	ldr	r2, [pc, #64]	@ (80013c4 <initSemaphores+0xa0>)
 8001382:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <initSemaphores+0x90>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d011      	beq.n	80013b0 <initSemaphores+0x8c>
		return;
	}
	CorTasksStatusMutex = xSemaphoreCreateMutex();
 800138c:	2001      	movs	r0, #1
 800138e:	f004 fc2c 	bl	8005bea <xQueueCreateMutex>
 8001392:	4603      	mov	r3, r0
 8001394:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <initSemaphores+0xa4>)
 8001396:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <initSemaphores+0x90>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	e008      	b.n	80013b2 <initSemaphores+0x8e>
		return;
 80013a0:	bf00      	nop
 80013a2:	e006      	b.n	80013b2 <initSemaphores+0x8e>
		return;
 80013a4:	bf00      	nop
 80013a6:	e004      	b.n	80013b2 <initSemaphores+0x8e>
		return;
 80013a8:	bf00      	nop
 80013aa:	e002      	b.n	80013b2 <initSemaphores+0x8e>
		return;
 80013ac:	bf00      	nop
 80013ae:	e000      	b.n	80013b2 <initSemaphores+0x8e>
		return;
 80013b0:	bf00      	nop
		return;
	}
}
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200006c0 	.word	0x200006c0
 80013b8:	200006d0 	.word	0x200006d0
 80013bc:	200006a4 	.word	0x200006a4
 80013c0:	200006ac 	.word	0x200006ac
 80013c4:	200006b4 	.word	0x200006b4
 80013c8:	200006bc 	.word	0x200006bc

080013cc <HAL_RNG_ReadyDataCallback>:


void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t randomPeriod = (random32bit % MAX_TIM2_IT_PERIOD) + MIN_TIM2_IT_PERIOD;
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_RNG_ReadyDataCallback+0x50>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80013e4:	fb01 f303 	mul.w	r3, r1, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	3364      	adds	r3, #100	@ 0x64
 80013ec:	60fb      	str	r3, [r7, #12]

  // Update timer IT period
  __HAL_TIM_SET_AUTORELOAD(&htim2, randomPeriod * 2);
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_RNG_ReadyDataCallback+0x54>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	0052      	lsls	r2, r2, #1
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <HAL_RNG_ReadyDataCallback+0x54>)
 80013fe:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <HAL_RNG_ReadyDataCallback+0x54>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <HAL_RNG_ReadyDataCallback+0x58>)
 8001410:	f001 f9fa 	bl	8002808 <HAL_GPIO_WritePin>

}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	10624dd3 	.word	0x10624dd3
 8001420:	20000098 	.word	0x20000098
 8001424:	40020400 	.word	0x40020400

08001428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0a0      	sub	sp, #128	@ 0x80
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001438:	d13a      	bne.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x88>
		DispatcherPacket new_packet;
		generateDispatcherMSG(&new_packet);
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f95a 	bl	80006f8 <generateDispatcherMSG>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001444:	2300      	movs	r3, #0
 8001446:	673b      	str	r3, [r7, #112]	@ 0x70
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f004 ffb4 	bl	80063ba <uxQueueMessagesWaitingFromISR>
 8001452:	6778      	str	r0, [r7, #116]	@ 0x74
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
		if( qItems != TASKS_QUEUE_SIZE) {
 8001454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d012      	beq.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x58>
			xQueueSendFromISR(qDispatcher, &new_packet, NULL);
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	2300      	movs	r3, #0
 8001464:	2200      	movs	r2, #0
 8001466:	f004 fce3 	bl	8005e30 <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2300      	movs	r3, #0
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	f006 fb01 	bl	8007a80 <xTaskGenericNotifyFromISR>
 800147e:	e009      	b.n	8001494 <HAL_TIM_PeriodElapsedCallback+0x6c>
			//printf("Added to queue! \r\n");
			//fflush(stdout);
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	f006 faf6 	bl	8007a80 <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 8001494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10a      	bne.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x88>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800149a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x88>
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80014a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f3bf 8f4f 	dsb	sy
 80014ac:	f3bf 8f6f 	isb	sy
		/*
		 * TODO: add a random item to dispatcher queue.
		 */
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x96>
    HAL_IncTick();
 80014ba:	f000 fed3 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014be:	bf00      	nop
 80014c0:	3778      	adds	r7, #120	@ 0x78
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000065c 	.word	0x2000065c
 80014cc:	20000694 	.word	0x20000694
 80014d0:	e000ed04 	.word	0xe000ed04
 80014d4:	40001000 	.word	0x40001000

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_MspInit+0x70>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_MspInit+0x70>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_MspInit+0x70>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_MspInit+0x70>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <HAL_MspInit+0x70>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_MspInit+0x70>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	210f      	movs	r1, #15
 800151e:	f06f 0001 	mvn.w	r0, #1
 8001522:	f000 ff9b 	bl	800245c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1  , 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2104      	movs	r1, #4
 800152a:	2050      	movs	r0, #80	@ 0x50
 800152c:	f000 ff96 	bl	800245c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001530:	2050      	movs	r0, #80	@ 0x50
 8001532:	f000 ffaf 	bl	8002494 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2104      	movs	r1, #4
 800153a:	201c      	movs	r0, #28
 800153c:	f000 ff8e 	bl	800245c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001540:	201c      	movs	r0, #28
 8001542:	f000 ffa7 	bl	8002494 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 ff7d 	bl	8002446 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0a4      	sub	sp, #144	@ 0x90
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2284      	movs	r2, #132	@ 0x84
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f007 fe57 	bl	800921c <memset>
  if(hrng->Instance==RNG)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <HAL_RNG_MspInit+0x70>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d123      	bne.n	80015c0 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001578:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800157c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4618      	mov	r0, r3
 800158a:	f001 ffdd 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001594:	f7ff ffa0 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_RNG_MspInit+0x74>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159c:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <HAL_RNG_MspInit+0x74>)
 800159e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_RNG_MspInit+0x74>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	210f      	movs	r1, #15
 80015b4:	2050      	movs	r0, #80	@ 0x50
 80015b6:	f000 ff51 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80015ba:	2050      	movs	r0, #80	@ 0x50
 80015bc:	f000 ff6a 	bl	8002494 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80015c0:	bf00      	nop
 80015c2:	3790      	adds	r7, #144	@ 0x90
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	50060800 	.word	0x50060800
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e0:	d113      	bne.n	800160a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_TIM_Base_MspInit+0x44>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <HAL_TIM_Base_MspInit+0x44>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_TIM_Base_MspInit+0x44>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	210a      	movs	r1, #10
 80015fe:	201c      	movs	r0, #28
 8001600:	f000 ff2c 	bl	800245c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001604:	201c      	movs	r0, #28
 8001606:	f000 ff45 	bl	8002494 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0aa      	sub	sp, #168	@ 0xa8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2284      	movs	r2, #132	@ 0x84
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f007 fdef 	bl	800921c <memset>
  if(huart->Instance==USART3)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <HAL_UART_MspInit+0xb4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d13c      	bne.n	80016c2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800164e:	2300      	movs	r3, #0
 8001650:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4618      	mov	r0, r3
 8001658:	f001 ff76 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001662:	f7ff ff39 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_UART_MspInit+0xb8>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <HAL_UART_MspInit+0xb8>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <HAL_UART_MspInit+0xb8>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <HAL_UART_MspInit+0xb8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <HAL_UART_MspInit+0xb8>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_UART_MspInit+0xb8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001696:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800169a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b0:	2307      	movs	r3, #7
 80016b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <HAL_UART_MspInit+0xbc>)
 80016be:	f000 fef7 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	37a8      	adds	r7, #168	@ 0xa8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40004800 	.word	0x40004800
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020c00 	.word	0x40020c00

080016d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0ac      	sub	sp, #176	@ 0xb0
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	2284      	movs	r2, #132	@ 0x84
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f007 fd8f 	bl	800921c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001706:	d159      	bne.n	80017bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001708:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800170c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001714:	f107 0318 	add.w	r3, r7, #24
 8001718:	4618      	mov	r0, r3
 800171a:	f001 ff15 	bl	8003548 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001724:	f7ff fed8 	bl	80014d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
 8001734:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001740:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800175a:	230a      	movs	r3, #10
 800175c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001764:	4619      	mov	r1, r3
 8001766:	4818      	ldr	r0, [pc, #96]	@ (80017c8 <HAL_PCD_MspInit+0xf0>)
 8001768:	f000 fea2 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800176c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001770:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001784:	4619      	mov	r1, r3
 8001786:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <HAL_PCD_MspInit+0xf0>)
 8001788:	f000 fe92 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 800178e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001790:	4a0c      	ldr	r2, [pc, #48]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 8001792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001796:	6353      	str	r3, [r2, #52]	@ 0x34
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 800179a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 80017a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b0:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <HAL_PCD_MspInit+0xec>)
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017bc:	bf00      	nop
 80017be:	37b0      	adds	r7, #176	@ 0xb0
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	@ 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_InitTick+0xe0>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	4a32      	ldr	r2, [pc, #200]	@ (80018ac <HAL_InitTick+0xe0>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <HAL_InitTick+0xe0>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f4:	f107 0210 	add.w	r2, r7, #16
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fe70 	bl	80034e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800180e:	f001 fe41 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8001812:	6378      	str	r0, [r7, #52]	@ 0x34
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001816:	f001 fe3d 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 800181a:	4603      	mov	r3, r0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001822:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <HAL_InitTick+0xe4>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	3b01      	subs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800182e:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_InitTick+0xe8>)
 8001830:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <HAL_InitTick+0xec>)
 8001832:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <HAL_InitTick+0xe8>)
 8001836:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_InitTick+0xe8>)
 800183e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001840:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <HAL_InitTick+0xe8>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <HAL_InitTick+0xe8>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_InitTick+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001854:	4817      	ldr	r0, [pc, #92]	@ (80018b4 <HAL_InitTick+0xe8>)
 8001856:	f002 fb45 	bl	8003ee4 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001860:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001868:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <HAL_InitTick+0xe8>)
 800186a:	f002 fb93 	bl	8003f94 <HAL_TIM_Base_Start_IT>
 800186e:	4603      	mov	r3, r0
 8001870:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001874:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800187c:	2036      	movs	r0, #54	@ 0x36
 800187e:	f000 fe09 	bl	8002494 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d808      	bhi.n	800189a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	2036      	movs	r0, #54	@ 0x36
 800188e:	f000 fde5 	bl	800245c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_InitTick+0xf0>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e002      	b.n	80018a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3738      	adds	r7, #56	@ 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	200006d4 	.word	0x200006d4
 80018b8:	40001000 	.word	0x40001000
 80018bc:	20000004 	.word	0x20000004

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <MemManage_Handler+0x4>

080018d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM2_IRQHandler+0x10>)
 80018fe:	f002 fbc1 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000098 	.word	0x20000098

0800190c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <TIM6_DAC_IRQHandler+0x10>)
 8001912:	f002 fbb7 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200006d4 	.word	0x200006d4

08001920 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <RNG_IRQHandler+0x10>)
 8001926:	f002 fa7f 	bl	8003e28 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000088 	.word	0x20000088

08001934 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <ITM_SendChar+0x48>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0e      	ldr	r2, [pc, #56]	@ (800197c <ITM_SendChar+0x48>)
 8001944:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001948:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <ITM_SendChar+0x4c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a0c      	ldr	r2, [pc, #48]	@ (8001980 <ITM_SendChar+0x4c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001956:	bf00      	nop
 8001958:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f8      	beq.n	8001958 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8001966:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000edfc 	.word	0xe000edfc
 8001980:	e0000e00 	.word	0xe0000e00

08001984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
  }

  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffab 	bl	8001934 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
  }
  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f007 fc7c 	bl	800938c <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20050000 	.word	0x20050000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	20000720 	.word	0x20000720
 8001ac8:	20019cf0 	.word	0x20019cf0

08001acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <tasksManagerTask>:
static void addCurrentRunningTask(void);




void tasksManagerTask(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	uint32_t ulNotificationValue;
	int8_t newTaskIndex;
	for(;;) {
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001af6:	4b80      	ldr	r3, [pc, #512]	@ (8001cf8 <tasksManagerTask+0x208>)
 8001af8:	f993 3000 	ldrsb.w	r3, [r3]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	dd06      	ble.n	8001b0e <tasksManagerTask+0x1e>
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, TASK_MANAGER_TICKS_TO_WAIT);
 8001b00:	463a      	mov	r2, r7
 8001b02:	2328      	movs	r3, #40	@ 0x28
 8001b04:	2100      	movs	r1, #0
 8001b06:	2000      	movs	r0, #0
 8001b08:	f005 fe92 	bl	8007830 <xTaskNotifyWait>
 8001b0c:	e7f3      	b.n	8001af6 <tasksManagerTask+0x6>
		} else {
			// Check if there are Ambulance tasks to perform
			if(uxQueueMessagesWaiting( qAmbulance ) > 0) {
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8001cfc <tasksManagerTask+0x20c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fc30 	bl	8006378 <uxQueueMessagesWaiting>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d032      	beq.n	8001b84 <tasksManagerTask+0x94>
				newTaskIndex = getAvailableAmbulanceTask();
 8001b1e:	f000 fa6b 	bl	8001ff8 <getAvailableAmbulanceTask>
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d029      	beq.n	8001b84 <tasksManagerTask+0x94>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001b30:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <tasksManagerTask+0x210>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 fb05 	bl	8006148 <xQueueSemaphoreTake>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d112      	bne.n	8001b6a <tasksManagerTask+0x7a>
						printf("Ambulance handler number %d is now active\r\n", newTaskIndex);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	486e      	ldr	r0, [pc, #440]	@ (8001d04 <tasksManagerTask+0x214>)
 8001b4c:	f007 f9ea 	bl	8008f24 <iprintf>
						fflush(stdout);
 8001b50:	4b6d      	ldr	r3, [pc, #436]	@ (8001d08 <tasksManagerTask+0x218>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 f90e 	bl	8008d78 <fflush>
						xSemaphoreGive(printfMutex);
 8001b5c:	4b68      	ldr	r3, [pc, #416]	@ (8001d00 <tasksManagerTask+0x210>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	f004 f859 	bl	8005c1c <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8001b6a:	f000 f9f9 	bl	8001f60 <addCurrentRunningTask>
					xTaskNotify(vAmbulanceTasks[newTaskIndex], 0, eNoAction);
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	4a66      	ldr	r2, [pc, #408]	@ (8001d0c <tasksManagerTask+0x21c>)
 8001b74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f005 feb7 	bl	80078f0 <xTaskGenericNotify>
					continue;
 8001b82:	e0b8      	b.n	8001cf6 <tasksManagerTask+0x206>
				}
			}
			// Check if there are Police tasks to perform
			if(uxQueueMessagesWaiting( qPolice ) > 0) {
 8001b84:	4b62      	ldr	r3, [pc, #392]	@ (8001d10 <tasksManagerTask+0x220>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fbf5 	bl	8006378 <uxQueueMessagesWaiting>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d032      	beq.n	8001bfa <tasksManagerTask+0x10a>
				newTaskIndex = getAvailablePoliceeTask();
 8001b94:	f000 fa70 	bl	8002078 <getAvailablePoliceeTask>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d029      	beq.n	8001bfa <tasksManagerTask+0x10a>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001ba6:	4b56      	ldr	r3, [pc, #344]	@ (8001d00 <tasksManagerTask+0x210>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f04f 31ff 	mov.w	r1, #4294967295
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 faca 	bl	8006148 <xQueueSemaphoreTake>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d112      	bne.n	8001be0 <tasksManagerTask+0xf0>
						printf("Police handler number %d is now active\r\n", newTaskIndex);
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4854      	ldr	r0, [pc, #336]	@ (8001d14 <tasksManagerTask+0x224>)
 8001bc2:	f007 f9af 	bl	8008f24 <iprintf>
						fflush(stdout);
 8001bc6:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <tasksManagerTask+0x218>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 f8d3 	bl	8008d78 <fflush>
						xSemaphoreGive(printfMutex);
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d00 <tasksManagerTask+0x210>)
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f004 f81e 	bl	8005c1c <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8001be0:	f000 f9be 	bl	8001f60 <addCurrentRunningTask>
					xTaskNotify(vPoliceTasks[newTaskIndex], 0, eNoAction);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d18 <tasksManagerTask+0x228>)
 8001bea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f005 fe7c 	bl	80078f0 <xTaskGenericNotify>
					continue;
 8001bf8:	e07d      	b.n	8001cf6 <tasksManagerTask+0x206>
				}
			}

			// Check if there are Fire Dep tasks to perform
			if(uxQueueMessagesWaiting( qFire ) > 0) {
 8001bfa:	4b48      	ldr	r3, [pc, #288]	@ (8001d1c <tasksManagerTask+0x22c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 fbba 	bl	8006378 <uxQueueMessagesWaiting>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d032      	beq.n	8001c70 <tasksManagerTask+0x180>
				newTaskIndex = getAvailableFireTask();
 8001c0a:	f000 fa75 	bl	80020f8 <getAvailableFireTask>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1a:	d029      	beq.n	8001c70 <tasksManagerTask+0x180>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001c1c:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <tasksManagerTask+0x210>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	4618      	mov	r0, r3
 8001c26:	f004 fa8f 	bl	8006148 <xQueueSemaphoreTake>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d112      	bne.n	8001c56 <tasksManagerTask+0x166>
						printf("Fire dep handler number %d is now active\r\n", newTaskIndex);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4619      	mov	r1, r3
 8001c36:	483a      	ldr	r0, [pc, #232]	@ (8001d20 <tasksManagerTask+0x230>)
 8001c38:	f007 f974 	bl	8008f24 <iprintf>
						fflush(stdout);
 8001c3c:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <tasksManagerTask+0x218>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 f898 	bl	8008d78 <fflush>
						xSemaphoreGive(printfMutex);
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <tasksManagerTask+0x210>)
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	f003 ffe3 	bl	8005c1c <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8001c56:	f000 f983 	bl	8001f60 <addCurrentRunningTask>
					xTaskNotify(vFireTasks[newTaskIndex], 0, eNoAction);
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <tasksManagerTask+0x234>)
 8001c60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c64:	2300      	movs	r3, #0
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f005 fe41 	bl	80078f0 <xTaskGenericNotify>
					continue;
 8001c6e:	e042      	b.n	8001cf6 <tasksManagerTask+0x206>
				}
			}

			// Check if there are Corona tasks to perform
			if(uxQueueMessagesWaiting( qCorona ) > 0) {
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <tasksManagerTask+0x238>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 fb7f 	bl	8006378 <uxQueueMessagesWaiting>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d032      	beq.n	8001ce6 <tasksManagerTask+0x1f6>
				newTaskIndex = getAvailableCoronaTask();
 8001c80:	f000 fa7a 	bl	8002178 <getAvailableCoronaTask>
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d029      	beq.n	8001ce6 <tasksManagerTask+0x1f6>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <tasksManagerTask+0x210>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fa54 	bl	8006148 <xQueueSemaphoreTake>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d112      	bne.n	8001ccc <tasksManagerTask+0x1dc>
						printf("Corona handler number %d is now active\r\n", newTaskIndex);
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	4619      	mov	r1, r3
 8001cac:	481f      	ldr	r0, [pc, #124]	@ (8001d2c <tasksManagerTask+0x23c>)
 8001cae:	f007 f939 	bl	8008f24 <iprintf>
						fflush(stdout);
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <tasksManagerTask+0x218>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f007 f85d 	bl	8008d78 <fflush>
						xSemaphoreGive(printfMutex);
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <tasksManagerTask+0x210>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f003 ffa8 	bl	8005c1c <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8001ccc:	f000 f948 	bl	8001f60 <addCurrentRunningTask>
					xTaskNotify(vCoronaTasks[newTaskIndex], 0, eNoAction);
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <tasksManagerTask+0x240>)
 8001cd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f005 fe06 	bl	80078f0 <xTaskGenericNotify>
					continue;
 8001ce4:	e007      	b.n	8001cf6 <tasksManagerTask+0x206>
				}
			}
			portYIELD();
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <tasksManagerTask+0x244>)
 8001ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	f3bf 8f6f 	isb	sy
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001cf6:	e6fe      	b.n	8001af6 <tasksManagerTask+0x6>
 8001cf8:	200006cc 	.word	0x200006cc
 8001cfc:	2000064c 	.word	0x2000064c
 8001d00:	200006c0 	.word	0x200006c0
 8001d04:	0800a1d0 	.word	0x0800a1d0
 8001d08:	2000001c 	.word	0x2000001c
 8001d0c:	20000660 	.word	0x20000660
 8001d10:	20000650 	.word	0x20000650
 8001d14:	0800a1fc 	.word	0x0800a1fc
 8001d18:	20000670 	.word	0x20000670
 8001d1c:	20000654 	.word	0x20000654
 8001d20:	0800a228 	.word	0x0800a228
 8001d24:	2000067c 	.word	0x2000067c
 8001d28:	20000658 	.word	0x20000658
 8001d2c:	0800a254 	.word	0x0800a254
 8001d30:	20000684 	.word	0x20000684
 8001d34:	e000ed04 	.word	0xe000ed04

08001d38 <vHandleCall>:
	}
}



void vHandleCall(void* pvParameters) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b0bc      	sub	sp, #240	@ 0xf0
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifictionValue;
	TickType_t startTick, endTick, totalTicks;
	taskInit_t* pTaskInit = (taskInit_t*)pvParameters;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	DispatcherPacket new_packet = {0};
 8001d46:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d4a:	2268      	movs	r2, #104	@ 0x68
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f007 fa64 	bl	800921c <memset>

	char printMSG[100];
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8001d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d58:	781b      	ldrb	r3, [r3, #0]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <vHandleCall+0x54>
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8001d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d00f      	beq.n	8001d88 <vHandleCall+0x50>
 8001d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d008      	beq.n	8001d84 <vHandleCall+0x4c>
 8001d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d101      	bne.n	8001d80 <vHandleCall+0x48>
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f2c <vHandleCall+0x1f4>)
 8001d7e:	e006      	b.n	8001d8e <vHandleCall+0x56>
 8001d80:	4b6b      	ldr	r3, [pc, #428]	@ (8001f30 <vHandleCall+0x1f8>)
 8001d82:	e004      	b.n	8001d8e <vHandleCall+0x56>
 8001d84:	4b6b      	ldr	r3, [pc, #428]	@ (8001f34 <vHandleCall+0x1fc>)
 8001d86:	e002      	b.n	8001d8e <vHandleCall+0x56>
 8001d88:	4b6b      	ldr	r3, [pc, #428]	@ (8001f38 <vHandleCall+0x200>)
 8001d8a:	e000      	b.n	8001d8e <vHandleCall+0x56>
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f3c <vHandleCall+0x204>)
			, pTaskInit->taskIdentifier);
 8001d8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d92:	7852      	ldrb	r2, [r2, #1]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8001d94:	f107 0008 	add.w	r0, r7, #8
 8001d98:	9200      	str	r2, [sp, #0]
 8001d9a:	4a69      	ldr	r2, [pc, #420]	@ (8001f40 <vHandleCall+0x208>)
 8001d9c:	2164      	movs	r1, #100	@ 0x64
 8001d9e:	f007 f931 	bl	8009004 <sniprintf>
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001da2:	4b68      	ldr	r3, [pc, #416]	@ (8001f44 <vHandleCall+0x20c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 31ff 	mov.w	r1, #4294967295
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 f9cc 	bl	8006148 <xQueueSemaphoreTake>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d111      	bne.n	8001dda <vHandleCall+0xa2>
		printf(printMSG);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f007 f8b2 	bl	8008f24 <iprintf>
		fflush(stdout);
 8001dc0:	4b61      	ldr	r3, [pc, #388]	@ (8001f48 <vHandleCall+0x210>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f006 ffd6 	bl	8008d78 <fflush>
		xSemaphoreGive(printfMutex);
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8001f44 <vHandleCall+0x20c>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f003 ff21 	bl	8005c1c <xQueueGenericSend>
	}
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8001dda:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	2100      	movs	r1, #0
 8001de4:	2000      	movs	r0, #0
 8001de6:	f005 fd23 	bl	8007830 <xTaskNotifyWait>
		// Get starting time tick count
		startTick = xTaskGetTickCount();
 8001dea:	f005 f833 	bl	8006e54 <xTaskGetTickCount>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

		// Get packet from the queue handler
		//DispatcherPacket new_packet;

		if(!(xQueueReceive(*(pTaskInit->pQhandler), &new_packet, portMAX_DELAY) == pdTRUE)) {
 8001df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 f8b7 	bl	8005f78 <xQueueReceive>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 808b 	bne.w	8001f28 <vHandleCall+0x1f0>
			continue;
		}

		// Wait for the job to get done
		vTaskDelayUntil(&startTick, new_packet.timeToHandleInTicks);
 8001e12:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8001e16:	461a      	mov	r2, r3
 8001e18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fe38 	bl	8006a94 <vTaskDelayUntil>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001e24:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <vHandleCall+0x20c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 f98b 	bl	8006148 <xQueueSemaphoreTake>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d113      	bne.n	8001e60 <vHandleCall+0x128>
			printf("Handled task: %s \r\n", new_packet.message);
 8001e38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4842      	ldr	r0, [pc, #264]	@ (8001f4c <vHandleCall+0x214>)
 8001e42:	f007 f86f 	bl	8008f24 <iprintf>
			fflush(stdout);
 8001e46:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <vHandleCall+0x210>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f006 ff93 	bl	8008d78 <fflush>
			xSemaphoreGive(printfMutex);
 8001e52:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <vHandleCall+0x20c>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f003 fede 	bl	8005c1c <xQueueGenericSend>
		}

		// Update shared app data
		if(xTasksDataMutex != NULL) {
 8001e60:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <vHandleCall+0x218>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d036      	beq.n	8001ed6 <vHandleCall+0x19e>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8001e68:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <vHandleCall+0x218>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f969 	bl	8006148 <xQueueSemaphoreTake>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d12c      	bne.n	8001ed6 <vHandleCall+0x19e>
				total_tasks_ran++;
 8001e7c:	4b35      	ldr	r3, [pc, #212]	@ (8001f54 <vHandleCall+0x21c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a34      	ldr	r2, [pc, #208]	@ (8001f54 <vHandleCall+0x21c>)
 8001e84:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 8001e86:	f004 ffe5 	bl	8006e54 <xTaskGetTickCount>
 8001e8a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				totalTicks = endTick - startTick;
 8001e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				taskENTER_CRITICAL();
 8001e9c:	f006 fba6 	bl	80085ec <vPortEnterCritical>
				total_tasks_time += (float)totalTicks/configTICK_RATE_HZ;
 8001ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eac:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001f58 <vHandleCall+0x220>
 8001eb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eb4:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <vHandleCall+0x224>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <vHandleCall+0x224>)
 8001ec0:	edc3 7a00 	vstr	s15, [r3]
				taskEXIT_CRITICAL();
 8001ec4:	f006 fbc8 	bl	8008658 <vPortExitCritical>
				xSemaphoreGive(xTasksDataMutex);
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <vHandleCall+0x218>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f003 fea3 	bl	8005c1c <xQueueGenericSend>
				 * The mutex couldn't be obtained. Code should never get here.
				 */
			}
		}
		// Indicate the task is now available for the next incoming packet.
		if(*pTaskInit->pSemHandler != NULL) {
 8001ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f43f af7b 	beq.w	8001dda <vHandleCall+0xa2>
			if(xSemaphoreTake(*(pTaskInit->pSemHandler), portMAX_DELAY) ==  pdTRUE) {
 8001ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 f929 	bl	8006148 <xQueueSemaphoreTake>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	f47f af6e 	bne.w	8001dda <vHandleCall+0xa2>
				removeCurrentRunningTask();
 8001efe:	f000 f855 	bl	8001fac <removeCurrentRunningTask>
				pTaskInit->bTaskStatusArr[pTaskInit->taskIdentifier] = false;
 8001f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001f0c:	7852      	ldrb	r2, [r2, #1]
 8001f0e:	4413      	add	r3, r2
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(*(pTaskInit->pSemHandler));
 8001f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	f003 fe7b 	bl	8005c1c <xQueueGenericSend>
 8001f26:	e758      	b.n	8001dda <vHandleCall+0xa2>
			continue;
 8001f28:	bf00      	nop
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8001f2a:	e756      	b.n	8001dda <vHandleCall+0xa2>
 8001f2c:	0800a280 	.word	0x0800a280
 8001f30:	0800a288 	.word	0x0800a288
 8001f34:	0800a294 	.word	0x0800a294
 8001f38:	0800a2a0 	.word	0x0800a2a0
 8001f3c:	0800a2a8 	.word	0x0800a2a8
 8001f40:	0800a2b4 	.word	0x0800a2b4
 8001f44:	200006c0 	.word	0x200006c0
 8001f48:	2000001c 	.word	0x2000001c
 8001f4c:	0800a2e0 	.word	0x0800a2e0
 8001f50:	200006d0 	.word	0x200006d0
 8001f54:	200006c8 	.word	0x200006c8
 8001f58:	447a0000 	.word	0x447a0000
 8001f5c:	200006c4 	.word	0x200006c4

08001f60 <addCurrentRunningTask>:
		}
	}
}


static void addCurrentRunningTask(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	if(xTasksDataMutex != NULL) {
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <addCurrentRunningTask+0x44>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d019      	beq.n	8001fa0 <addCurrentRunningTask+0x40>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <addCurrentRunningTask+0x44>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f8e7 	bl	8006148 <xQueueSemaphoreTake>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10f      	bne.n	8001fa0 <addCurrentRunningTask+0x40>
			current_running_tasks++;
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <addCurrentRunningTask+0x48>)
 8001f82:	f993 3000 	ldrsb.w	r3, [r3]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <addCurrentRunningTask+0x48>)
 8001f90:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8001f92:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <addCurrentRunningTask+0x44>)
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f003 fe3e 	bl	8005c1c <xQueueGenericSend>
		}
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200006d0 	.word	0x200006d0
 8001fa8:	200006cc 	.word	0x200006cc

08001fac <removeCurrentRunningTask>:


static void removeCurrentRunningTask(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	if(xTasksDataMutex != NULL) {
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <removeCurrentRunningTask+0x44>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d019      	beq.n	8001fec <removeCurrentRunningTask+0x40>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <removeCurrentRunningTask+0x44>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f8c1 	bl	8006148 <xQueueSemaphoreTake>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10f      	bne.n	8001fec <removeCurrentRunningTask+0x40>
			current_running_tasks--;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <removeCurrentRunningTask+0x48>)
 8001fce:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	b25a      	sxtb	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <removeCurrentRunningTask+0x48>)
 8001fdc:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <removeCurrentRunningTask+0x44>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f003 fe18 	bl	8005c1c <xQueueGenericSend>
		}
	}
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200006d0 	.word	0x200006d0
 8001ff4:	200006cc 	.word	0x200006cc

08001ff8 <getAvailableAmbulanceTask>:
 * This function iterates through the ambulance task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available ambulance tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableAmbulanceTask(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(AmbTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <getAvailableAmbulanceTask+0x78>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f04f 31ff 	mov.w	r1, #4294967295
 8002006:	4618      	mov	r0, r3
 8002008:	f004 f89e 	bl	8006148 <xQueueSemaphoreTake>
 800200c:	4603      	mov	r3, r0
 800200e:	2b01      	cmp	r3, #1
 8002010:	d127      	bne.n	8002062 <getAvailableAmbulanceTask+0x6a>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	e01a      	b.n	800204e <getAvailableAmbulanceTask+0x56>
			if(bAmbTasksStatus[i] == false) {
 8002018:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <getAvailableAmbulanceTask+0x7c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00e      	beq.n	8002048 <getAvailableAmbulanceTask+0x50>
				bAmbTasksStatus[i] = true;
 800202a:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <getAvailableAmbulanceTask+0x7c>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(AmbTasksStatusMutex);
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <getAvailableAmbulanceTask+0x78>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	f003 fded 	bl	8005c1c <xQueueGenericSend>
				return (int8_t)i;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	b25b      	sxtb	r3, r3
 8002046:	e00e      	b.n	8002066 <getAvailableAmbulanceTask+0x6e>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3301      	adds	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b03      	cmp	r3, #3
 8002052:	dde1      	ble.n	8002018 <getAvailableAmbulanceTask+0x20>
			}
		}
		xSemaphoreGive(AmbTasksStatusMutex);
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <getAvailableAmbulanceTask+0x78>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	f003 fddd 	bl	8005c1c <xQueueGenericSend>
	}
	return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200006a4 	.word	0x200006a4
 8002074:	200006a0 	.word	0x200006a0

08002078 <getAvailablePoliceeTask>:
 * This function iterates through the police task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available police tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailablePoliceeTask(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(PolTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 800207e:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <getAvailablePoliceeTask+0x78>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f04f 31ff 	mov.w	r1, #4294967295
 8002086:	4618      	mov	r0, r3
 8002088:	f004 f85e 	bl	8006148 <xQueueSemaphoreTake>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d127      	bne.n	80020e2 <getAvailablePoliceeTask+0x6a>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	e01a      	b.n	80020ce <getAvailablePoliceeTask+0x56>
			if(bPolTasksStatus[i] == false) {
 8002098:	4a16      	ldr	r2, [pc, #88]	@ (80020f4 <getAvailablePoliceeTask+0x7c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00e      	beq.n	80020c8 <getAvailablePoliceeTask+0x50>
				bPolTasksStatus[i] = true;
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <getAvailablePoliceeTask+0x7c>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(PolTasksStatusMutex);
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <getAvailablePoliceeTask+0x78>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	f003 fdad 	bl	8005c1c <xQueueGenericSend>
				return (int8_t)i;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	e00e      	b.n	80020e6 <getAvailablePoliceeTask+0x6e>
		for(int i = 0; i < POLICE_TASKS; i++) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3301      	adds	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	dde1      	ble.n	8002098 <getAvailablePoliceeTask+0x20>
			}
		}
		xSemaphoreGive(PolTasksStatusMutex);
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <getAvailablePoliceeTask+0x78>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	2300      	movs	r3, #0
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	f003 fd9d 	bl	8005c1c <xQueueGenericSend>
	}
	return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200006ac 	.word	0x200006ac
 80020f4:	200006a8 	.word	0x200006a8

080020f8 <getAvailableFireTask>:
 * This function iterates through the fire department task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available fire department tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableFireTask(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(FireTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <getAvailableFireTask+0x78>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f04f 31ff 	mov.w	r1, #4294967295
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f81e 	bl	8006148 <xQueueSemaphoreTake>
 800210c:	4603      	mov	r3, r0
 800210e:	2b01      	cmp	r3, #1
 8002110:	d127      	bne.n	8002162 <getAvailableFireTask+0x6a>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	e01a      	b.n	800214e <getAvailableFireTask+0x56>
			if(bFireTasksStatus[i] == false) {
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <getAvailableFireTask+0x7c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00e      	beq.n	8002148 <getAvailableFireTask+0x50>
				bFireTasksStatus[i] = true;
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <getAvailableFireTask+0x7c>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(FireTasksStatusMutex);
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <getAvailableFireTask+0x78>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	f003 fd6d 	bl	8005c1c <xQueueGenericSend>
				return (int8_t)i;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	e00e      	b.n	8002166 <getAvailableFireTask+0x6e>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b01      	cmp	r3, #1
 8002152:	dde1      	ble.n	8002118 <getAvailableFireTask+0x20>
			}
		}
		xSemaphoreGive(FireTasksStatusMutex);
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <getAvailableFireTask+0x78>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	f003 fd5d 	bl	8005c1c <xQueueGenericSend>
	}
	return -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200006b4 	.word	0x200006b4
 8002174:	200006b0 	.word	0x200006b0

08002178 <getAvailableCoronaTask>:
 * This function iterates through the corona task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available corona tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableCoronaTask(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(CorTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 800217e:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <getAvailableCoronaTask+0x78>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	4618      	mov	r0, r3
 8002188:	f003 ffde 	bl	8006148 <xQueueSemaphoreTake>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d127      	bne.n	80021e2 <getAvailableCoronaTask+0x6a>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	e01a      	b.n	80021ce <getAvailableCoronaTask+0x56>
			if(bCorTasksStatus[i] == false) {
 8002198:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <getAvailableCoronaTask+0x7c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00e      	beq.n	80021c8 <getAvailableCoronaTask+0x50>
				bCorTasksStatus[i] = true;
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <getAvailableCoronaTask+0x7c>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(CorTasksStatusMutex);
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <getAvailableCoronaTask+0x78>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	f003 fd2d 	bl	8005c1c <xQueueGenericSend>
				return (int8_t)i;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	e00e      	b.n	80021e6 <getAvailableCoronaTask+0x6e>
		for(int i = 0; i < CORONA_TASKS; i++) {
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	dde1      	ble.n	8002198 <getAvailableCoronaTask+0x20>
			}
		}
		xSemaphoreGive(CorTasksStatusMutex);
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <getAvailableCoronaTask+0x78>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	f003 fd1d 	bl	8005c1c <xQueueGenericSend>
	}
	return -1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200006bc 	.word	0x200006bc
 80021f4:	200006b8 	.word	0x200006b8

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002230 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021fc:	f7ff fc66 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002200:	480c      	ldr	r0, [pc, #48]	@ (8002234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002202:	490d      	ldr	r1, [pc, #52]	@ (8002238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002218:	4c0a      	ldr	r4, [pc, #40]	@ (8002244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002226:	f007 f8b7 	bl	8009398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222a:	f7fe fb43 	bl	80008b4 <main>
  bx  lr    
 800222e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800223c:	0800af20 	.word	0x0800af20
  ldr r2, =_sbss
 8002240:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002244:	20019cf0 	.word	0x20019cf0

08002248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC_IRQHandler>

0800224a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224e:	2003      	movs	r0, #3
 8002250:	f000 f8f9 	bl	8002446 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002254:	200f      	movs	r0, #15
 8002256:	f7ff fab9 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225a:	f7ff f943 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008
 8002288:	20000724 	.word	0x20000724

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000724 	.word	0x20000724

080022a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff ffee 	bl	800228c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d005      	beq.n	80022ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_Delay+0x44>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ca:	bf00      	nop
 80022cc:	f7ff ffde 	bl	800228c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d8f7      	bhi.n	80022cc <HAL_Delay+0x28>
  {
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <__NVIC_SetPriorityGrouping+0x40>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	4313      	orrs	r3, r2
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <__NVIC_SetPriorityGrouping+0x40>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	05fa0000 	.word	0x05fa0000

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	@ (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	@ (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	@ (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff4c 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246e:	f7ff ff61 	bl	8002334 <__NVIC_GetPriorityGrouping>
 8002472:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7ff ffb1 	bl	80023e0 <NVIC_EncodePriority>
 800247e:	4602      	mov	r2, r0
 8002480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff80 	bl	800238c <__NVIC_SetPriority>
}
 800248c:	bf00      	nop
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff54 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e175      	b.n	80027bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8164 	bne.w	80027b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x56>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80be 	beq.w	80027b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	4a65      	ldr	r2, [pc, #404]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002644:	6453      	str	r3, [r2, #68]	@ 0x44
 8002646:	4b63      	ldr	r3, [pc, #396]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002652:	4a61      	ldr	r2, [pc, #388]	@ (80027d8 <HAL_GPIO_Init+0x328>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_GPIO_Init+0x32c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d037      	beq.n	80026ee <HAL_GPIO_Init+0x23e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a57      	ldr	r2, [pc, #348]	@ (80027e0 <HAL_GPIO_Init+0x330>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_GPIO_Init+0x23a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a56      	ldr	r2, [pc, #344]	@ (80027e4 <HAL_GPIO_Init+0x334>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02b      	beq.n	80026e6 <HAL_GPIO_Init+0x236>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a55      	ldr	r2, [pc, #340]	@ (80027e8 <HAL_GPIO_Init+0x338>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d025      	beq.n	80026e2 <HAL_GPIO_Init+0x232>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a54      	ldr	r2, [pc, #336]	@ (80027ec <HAL_GPIO_Init+0x33c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01f      	beq.n	80026de <HAL_GPIO_Init+0x22e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a53      	ldr	r2, [pc, #332]	@ (80027f0 <HAL_GPIO_Init+0x340>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x22a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_GPIO_Init+0x344>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a51      	ldr	r2, [pc, #324]	@ (80027f8 <HAL_GPIO_Init+0x348>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x222>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a50      	ldr	r2, [pc, #320]	@ (80027fc <HAL_GPIO_Init+0x34c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x21e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002800 <HAL_GPIO_Init+0x350>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x21a>
 80026c6:	2309      	movs	r3, #9
 80026c8:	e012      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ca:	230a      	movs	r3, #10
 80026cc:	e010      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ce:	2308      	movs	r3, #8
 80026d0:	e00e      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e00c      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00a      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026da:	2305      	movs	r3, #5
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026de:	2304      	movs	r3, #4
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ee:	2300      	movs	r3, #0
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002700:	4935      	ldr	r1, [pc, #212]	@ (80027d8 <HAL_GPIO_Init+0x328>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002732:	4a34      	ldr	r2, [pc, #208]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002738:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_GPIO_Init+0x354>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800275c:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_GPIO_Init+0x354>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002762:	4b28      	ldr	r3, [pc, #160]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002786:	4a1f      	ldr	r2, [pc, #124]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HAL_GPIO_Init+0x354>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_GPIO_Init+0x354>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	f67f ae86 	bls.w	80024d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	@ 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40021400 	.word	0x40021400
 80027f4:	40021800 	.word	0x40021800
 80027f8:	40021c00 	.word	0x40021c00
 80027fc:	40022000 	.word	0x40022000
 8002800:	40022400 	.word	0x40022400
 8002804:	40013c00 	.word	0x40013c00

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002824:	e003      	b.n	800282e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af02      	add	r7, sp, #8
 8002840:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e108      	b.n	8002a5e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe ff36 	bl	80016d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2203      	movs	r2, #3
 8002870:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800287a:	d102      	bne.n	8002882 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fcbe 	bl	8005208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7c1a      	ldrb	r2, [r3, #16]
 8002894:	f88d 2000 	strb.w	r2, [sp]
 8002898:	3304      	adds	r3, #4
 800289a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289c:	f002 fc5a 	bl	8005154 <USB_CoreInit>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0d5      	b.n	8002a5e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 fcb6 	bl	800522a <USB_SetCurrentMode>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0c6      	b.n	8002a5e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e04a      	b.n	800296c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3315      	adds	r3, #21
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3314      	adds	r3, #20
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	b298      	uxth	r0, r3
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	332e      	adds	r3, #46	@ 0x2e
 8002912:	4602      	mov	r2, r0
 8002914:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3318      	adds	r3, #24
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	331c      	adds	r3, #28
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3320      	adds	r3, #32
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3324      	adds	r3, #36	@ 0x24
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	3301      	adds	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	791b      	ldrb	r3, [r3, #4]
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3af      	bcc.n	80028d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	e044      	b.n	8002a06 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	3301      	adds	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	791b      	ldrb	r3, [r3, #4]
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3b5      	bcc.n	800297c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7c1a      	ldrb	r2, [r3, #16]
 8002a18:	f88d 2000 	strb.w	r2, [sp]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a20:	f002 fc50 	bl	80052c4 <USB_DevInit>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e013      	b.n	8002a5e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7b1b      	ldrb	r3, [r3, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d102      	bne.n	8002a52 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f80b 	bl	8002a68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fe0b 	bl	8005672 <USB_DevDisconnect>

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_PCDEx_ActivateLPM+0x44>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	10000003 	.word	0x10000003

08002ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a22      	ldr	r2, [pc, #136]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ade:	f7ff fbd5 	bl	800228c <HAL_GetTick>
 8002ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ae4:	e009      	b.n	8002afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ae6:	f7ff fbd1 	bl	800228c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002af4:	d901      	bls.n	8002afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e022      	b.n	8002b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7ff fbba 	bl	800228c <HAL_GetTick>
 8002b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b1a:	e009      	b.n	8002b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b1c:	f7ff fbb6 	bl	800228c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b2a:	d901      	bls.n	8002b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e007      	b.n	8002b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e291      	b.n	800308a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b96      	ldr	r3, [pc, #600]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b80:	4b93      	ldr	r3, [pc, #588]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
 8002b8c:	4b90      	ldr	r3, [pc, #576]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x130>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e26b      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x7a>
 8002bbc:	4b84      	ldr	r3, [pc, #528]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x9c>
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7b      	ldr	r2, [pc, #492]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002bf6:	4b76      	ldr	r3, [pc, #472]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a75      	ldr	r2, [pc, #468]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b73      	ldr	r3, [pc, #460]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a72      	ldr	r2, [pc, #456]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff fb2c 	bl	800228c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff fb28 	bl	800228c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e21f      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b61      	ldr	r3, [pc, #388]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7ff fb18 	bl	800228c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff fb14 	bl	800228c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e20b      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x110>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d069      	beq.n	8002d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b50      	ldr	r3, [pc, #320]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1df      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b41      	ldr	r3, [pc, #260]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	493d      	ldr	r1, [pc, #244]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e040      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a38      	ldr	r2, [pc, #224]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff faca 	bl	800228c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fac6 	bl	800228c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1bd      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e018      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7ff faa6 	bl	800228c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d44:	f7ff faa2 	bl	800228c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e199      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d038      	beq.n	8002de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d019      	beq.n	8002daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7a:	4a15      	ldr	r2, [pc, #84]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7ff fa83 	bl	800228c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7ff fa7f 	bl	800228c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e176      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x23a>
 8002da8:	e01a      	b.n	8002de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7ff fa69 	bl	800228c <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7ff fa65 	bl	800228c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d903      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e15c      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
 8002dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b91      	ldr	r3, [pc, #580]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a4 	beq.w	8002f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b8b      	ldr	r3, [pc, #556]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	4b88      	ldr	r3, [pc, #544]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	4a87      	ldr	r2, [pc, #540]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e06:	4b85      	ldr	r3, [pc, #532]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e16:	4b82      	ldr	r3, [pc, #520]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b7f      	ldr	r3, [pc, #508]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7e      	ldr	r2, [pc, #504]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7ff fa2d 	bl	800228c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7ff fa29 	bl	800228c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	@ 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e120      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	4b75      	ldr	r3, [pc, #468]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x31a>
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a6e      	ldr	r2, [pc, #440]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e68:	e02d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x33c>
 8002e72:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	4a69      	ldr	r2, [pc, #420]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7e:	4b67      	ldr	r3, [pc, #412]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e82:	4a66      	ldr	r2, [pc, #408]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8a:	e01c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x35e>
 8002e94:	4b61      	ldr	r3, [pc, #388]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a60      	ldr	r2, [pc, #384]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002eae:	4b5b      	ldr	r3, [pc, #364]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	4b58      	ldr	r3, [pc, #352]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	4a57      	ldr	r2, [pc, #348]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d015      	beq.n	8002efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7ff f9dd 	bl	800228c <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7ff f9d9 	bl	800228c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0ce      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	4b4b      	ldr	r3, [pc, #300]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ee      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x386>
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7ff f9c7 	bl	800228c <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7ff f9c3 	bl	800228c <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0b8      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	4b40      	ldr	r3, [pc, #256]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a4 	beq.w	8003088 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f40:	4b36      	ldr	r3, [pc, #216]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d06b      	beq.n	8003024 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d149      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b31      	ldr	r3, [pc, #196]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a30      	ldr	r2, [pc, #192]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7ff f994 	bl	800228c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7ff f990 	bl	800228c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e087      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b28      	ldr	r3, [pc, #160]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	4313      	orrs	r3, r2
 8002fac:	4a1b      	ldr	r2, [pc, #108]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fb2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7ff f964 	bl	800228c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff f960 	bl	800228c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e057      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x478>
 8002fe6:	e04f      	b.n	8003088 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff f94a 	bl	800228c <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7ff f946 	bl	800228c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e03d      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_RCC_OscConfig+0x4cc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4ac>
 800301a:	e035      	b.n	8003088 <HAL_RCC_OscConfig+0x538>
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_RCC_OscConfig+0x544>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d028      	beq.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d121      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d11a      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800305a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 020f 	bic.w	r2, r3, #15
 80030c6:	4965      	ldr	r1, [pc, #404]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a58      	ldr	r2, [pc, #352]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003102:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a52      	ldr	r2, [pc, #328]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800311a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318c:	f7ff f87e 	bl	800228c <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7ff f87a 	bl	800228c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 020f 	bic.w	r2, r3, #15
 80031d2:	4922      	ldr	r1, [pc, #136]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	@ (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_ClockConfig+0x1d4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fabe 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
 8003264:	0800aec4 	.word	0x0800aec4
 8003268:	20000000 	.word	0x20000000
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b094      	sub	sp, #80	@ 0x50
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	@ 0x44
 800327c:	2300      	movs	r3, #0
 800327e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003280:	2300      	movs	r3, #0
 8003282:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d00d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003294:	2b08      	cmp	r3, #8
 8003296:	f200 80e1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x3a>
 80032a2:	e0db      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b73      	ldr	r3, [pc, #460]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032a8:	e0db      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b73      	ldr	r3, [pc, #460]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x208>)
 80032ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ae:	e0d8      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	6139      	str	r1, [r7, #16]
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003314:	4659      	mov	r1, fp
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4651      	mov	r1, sl
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4651      	mov	r1, sl
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4651      	mov	r1, sl
 8003324:	ebb2 0801 	subs.w	r8, r2, r1
 8003328:	4659      	mov	r1, fp
 800332a:	eb63 0901 	sbc.w	r9, r3, r1
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003342:	4690      	mov	r8, r2
 8003344:	4699      	mov	r9, r3
 8003346:	4623      	mov	r3, r4
 8003348:	eb18 0303 	adds.w	r3, r8, r3
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	462b      	mov	r3, r5
 8003350:	eb49 0303 	adc.w	r3, r9, r3
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003362:	4629      	mov	r1, r5
 8003364:	024b      	lsls	r3, r1, #9
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800336c:	4621      	mov	r1, r4
 800336e:	024a      	lsls	r2, r1, #9
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003376:	2200      	movs	r2, #0
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800337a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800337c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003380:	f7fc ff96 	bl	80002b0 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338c:	e058      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	2200      	movs	r2, #0
 8003396:	4618      	mov	r0, r3
 8003398:	4611      	mov	r1, r2
 800339a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ba:	0150      	lsls	r0, r2, #5
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4641      	mov	r1, r8
 80033c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e0:	ebb2 040a 	subs.w	r4, r2, sl
 80033e4:	eb63 050b 	sbc.w	r5, r3, fp
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	00eb      	lsls	r3, r5, #3
 80033f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f6:	00e2      	lsls	r2, r4, #3
 80033f8:	4614      	mov	r4, r2
 80033fa:	461d      	mov	r5, r3
 80033fc:	4643      	mov	r3, r8
 80033fe:	18e3      	adds	r3, r4, r3
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	464b      	mov	r3, r9
 8003404:	eb45 0303 	adc.w	r3, r5, r3
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003416:	4629      	mov	r1, r5
 8003418:	028b      	lsls	r3, r1, #10
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003420:	4621      	mov	r1, r4
 8003422:	028a      	lsls	r2, r1, #10
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	61fa      	str	r2, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	f7fc ff3c 	bl	80002b0 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003464:	4618      	mov	r0, r3
 8003466:	3750      	adds	r7, #80	@ 0x50
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff0 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	@ (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	0800aed4 	.word	0x0800aed4

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c0:	f7ff ffdc 	bl	800347c <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0b5b      	lsrs	r3, r3, #13
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	@ (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	0800aed4 	.word	0x0800aed4

080034e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	220f      	movs	r2, #15
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_RCC_GetClockConfig+0x5c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003500:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <HAL_RCC_GetClockConfig+0x5c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <HAL_RCC_GetClockConfig+0x60>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	40023c00 	.word	0x40023c00

08003548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003570:	4b69      	ldr	r3, [pc, #420]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a68      	ldr	r2, [pc, #416]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800357a:	6093      	str	r3, [r2, #8]
 800357c:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	4964      	ldr	r1, [pc, #400]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	4959      	ldr	r1, [pc, #356]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035de:	4b4e      	ldr	r3, [pc, #312]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	494a      	ldr	r1, [pc, #296]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035fc:	d101      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800360a:	2301      	movs	r3, #1
 800360c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 808b 	beq.w	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	4a39      	ldr	r2, [pc, #228]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6413      	str	r3, [r2, #64]	@ 0x40
 8003638:	4b37      	ldr	r3, [pc, #220]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003644:	4b35      	ldr	r3, [pc, #212]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a34      	ldr	r2, [pc, #208]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fe fe1c 	bl	800228c <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fe fe18 	bl	800228c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e357      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800366a:	4b2c      	ldr	r3, [pc, #176]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003676:	4b28      	ldr	r3, [pc, #160]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d035      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	429a      	cmp	r2, r3
 8003692:	d02e      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369e:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036b6:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036bc:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d114      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fde0 	bl	800228c <HAL_GetTick>
 80036cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe fddc 	bl	800228c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e319      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0ee      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036fe:	d111      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003700:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800370e:	400b      	ands	r3, r1
 8003710:	4901      	ldr	r1, [pc, #4]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
 8003716:	e00b      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
 8003720:	0ffffcff 	.word	0x0ffffcff
 8003724:	4baa      	ldr	r3, [pc, #680]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4aa9      	ldr	r2, [pc, #676]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	4ba7      	ldr	r3, [pc, #668]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	49a4      	ldr	r1, [pc, #656]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373e:	4313      	orrs	r3, r2
 8003740:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800374e:	4ba0      	ldr	r3, [pc, #640]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003754:	4a9e      	ldr	r2, [pc, #632]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800375a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800375e:	4b9c      	ldr	r3, [pc, #624]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003760:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	4999      	ldr	r1, [pc, #612]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377c:	4b94      	ldr	r3, [pc, #592]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003782:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800378a:	4991      	ldr	r1, [pc, #580]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800379e:	4b8c      	ldr	r3, [pc, #560]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ac:	4988      	ldr	r1, [pc, #544]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c0:	4b83      	ldr	r3, [pc, #524]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ce:	4980      	ldr	r1, [pc, #512]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037e2:	4b7b      	ldr	r3, [pc, #492]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4977      	ldr	r1, [pc, #476]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003804:	4b72      	ldr	r3, [pc, #456]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	496f      	ldr	r1, [pc, #444]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003826:	4b6a      	ldr	r3, [pc, #424]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f023 020c 	bic.w	r2, r3, #12
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	4966      	ldr	r1, [pc, #408]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003848:	4b61      	ldr	r3, [pc, #388]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003856:	495e      	ldr	r1, [pc, #376]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800386a:	4b59      	ldr	r3, [pc, #356]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003870:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	4955      	ldr	r1, [pc, #340]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800388c:	4b50      	ldr	r3, [pc, #320]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003892:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389a:	494d      	ldr	r1, [pc, #308]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ae:	4b48      	ldr	r3, [pc, #288]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	4944      	ldr	r1, [pc, #272]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038d0:	4b3f      	ldr	r3, [pc, #252]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	493c      	ldr	r1, [pc, #240]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038f2:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	4933      	ldr	r1, [pc, #204]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003914:	4b2e      	ldr	r3, [pc, #184]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003922:	492b      	ldr	r1, [pc, #172]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d011      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003936:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003944:	4922      	ldr	r1, [pc, #136]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003976:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003984:	4912      	ldr	r1, [pc, #72]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039a8:	4909      	ldr	r1, [pc, #36]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d006      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d9 	beq.w	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a01      	ldr	r2, [pc, #4]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d6:	f7fe fc59 	bl	800228c <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039de:	f7fe fc55 	bl	800228c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b64      	cmp	r3, #100	@ 0x64
 80039ea:	d901      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e194      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d021      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11d      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a10:	4b64      	ldr	r3, [pc, #400]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a1e:	4b61      	ldr	r3, [pc, #388]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	019a      	lsls	r2, r3, #6
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	431a      	orrs	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	071b      	lsls	r3, r3, #28
 8003a44:	4957      	ldr	r1, [pc, #348]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02e      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a76:	d129      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a78:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a8c:	0f1b      	lsrs	r3, r3, #28
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	019a      	lsls	r2, r3, #6
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	071b      	lsls	r3, r3, #28
 8003aac:	493d      	ldr	r1, [pc, #244]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aba:	f023 021f 	bic.w	r2, r3, #31
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	4937      	ldr	r1, [pc, #220]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01d      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad8:	4b32      	ldr	r3, [pc, #200]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ade:	0e1b      	lsrs	r3, r3, #24
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aec:	0f1b      	lsrs	r3, r3, #28
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	019a      	lsls	r2, r3, #6
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	431a      	orrs	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	071b      	lsls	r3, r3, #28
 8003b0c:	4925      	ldr	r1, [pc, #148]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	019a      	lsls	r2, r3, #6
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	071b      	lsls	r3, r3, #28
 8003b3c:	4919      	ldr	r1, [pc, #100]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b44:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a16      	ldr	r2, [pc, #88]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fe fb9c 	bl	800228c <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b58:	f7fe fb98 	bl	800228c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0d7      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 80cd 	bne.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a08      	ldr	r2, [pc, #32]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8a:	f7fe fb7f 	bl	800228c <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b92:	f7fe fb7b 	bl	800228c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	@ 0x64
 8003b9e:	d903      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0ba      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ba4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb4:	d0ed      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02e      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d12a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bde:	4b51      	ldr	r3, [pc, #324]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bec:	4b4d      	ldr	r3, [pc, #308]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	0f1b      	lsrs	r3, r3, #28
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	019a      	lsls	r2, r3, #6
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	061b      	lsls	r3, r3, #24
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	4944      	ldr	r1, [pc, #272]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c1a:	4b42      	ldr	r3, [pc, #264]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c20:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	493d      	ldr	r1, [pc, #244]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d022      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c48:	d11d      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4a:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	0e1b      	lsrs	r3, r3, #24
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c58:	4b32      	ldr	r3, [pc, #200]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	0f1b      	lsrs	r3, r3, #28
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	019a      	lsls	r2, r3, #6
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	4929      	ldr	r1, [pc, #164]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c92:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	0e1b      	lsrs	r3, r3, #24
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca0:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	019a      	lsls	r2, r3, #6
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	4917      	ldr	r1, [pc, #92]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cce:	4b15      	ldr	r3, [pc, #84]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	4911      	ldr	r1, [pc, #68]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fe facc 	bl	800228c <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf8:	f7fe fac8 	bl	800228c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e007      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d16:	d1ef      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e01c      	b.n	8003d74 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	795b      	ldrb	r3, [r3, #5]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fc04 	bl	8001558 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0204 	orr.w	r2, r2, #4
 8003d64:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	791b      	ldrb	r3, [r3, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e044      	b.n	8003e20 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	795b      	ldrb	r3, [r3, #5]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d133      	bne.n	8003e0e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dac:	f7fe fa6e 	bl	800228c <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003db2:	e018      	b.n	8003de6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003db4:	f7fe fa6a 	bl	800228c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d911      	bls.n	8003de6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d00a      	beq.n	8003de6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e01c      	b.n	8003e20 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d1df      	bne.n	8003db4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	715a      	strb	r2, [r3, #5]
 8003e0c:	e004      	b.n	8003e18 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	711a      	strb	r2, [r3, #4]

  return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e009      	b.n	8003e66 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2208      	movs	r2, #8
 8003e60:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003e62:	2301      	movs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f82c 	bl	8003ed0 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8003e80:	605a      	str	r2, [r3, #4]

    return;
 8003e82:	e022      	b.n	8003eca <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d01d      	beq.n	8003eca <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0208 	bic.w	r2, r2, #8
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	795b      	ldrb	r3, [r3, #5]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00b      	beq.n	8003eca <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fd fa81 	bl	80013cc <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e049      	b.n	8003f8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fb60 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f000 faa8 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d001      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e054      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a26      	ldr	r2, [pc, #152]	@ (8004064 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd6:	d01d      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	@ (8004068 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <HAL_TIM_Base_Start_IT+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <HAL_TIM_Base_Start_IT+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_TIM_Base_Start_IT+0xec>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40010400 	.word	0x40010400
 8004078:	40014000 	.word	0x40014000
 800407c:	40001800 	.word	0x40001800
 8004080:	00010007 	.word	0x00010007

08004084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0202 	mvn.w	r2, #2
 80040b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f9b4 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9a6 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f9b7 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d020      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0204 	mvn.w	r2, #4
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f98e 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f980 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f991 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0208 	mvn.w	r2, #8
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f968 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f95a 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f96b 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f942 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f934 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f945 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd f91c 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb0b 	bl	8004834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fb03 	bl	8004848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8ff 	bl	8004464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0220 	mvn.w	r2, #32
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 facb 	bl	8004820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_ConfigClockSource+0x1c>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0b4      	b.n	800441a <HAL_TIM_ConfigClockSource+0x186>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	4b56      	ldr	r3, [pc, #344]	@ (8004424 <HAL_TIM_ConfigClockSource+0x190>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e8:	d03e      	beq.n	8004368 <HAL_TIM_ConfigClockSource+0xd4>
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ee:	f200 8087 	bhi.w	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f6:	f000 8086 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x172>
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fe:	d87f      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b70      	cmp	r3, #112	@ 0x70
 8004302:	d01a      	beq.n	800433a <HAL_TIM_ConfigClockSource+0xa6>
 8004304:	2b70      	cmp	r3, #112	@ 0x70
 8004306:	d87b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b60      	cmp	r3, #96	@ 0x60
 800430a:	d050      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x11a>
 800430c:	2b60      	cmp	r3, #96	@ 0x60
 800430e:	d877      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b50      	cmp	r3, #80	@ 0x50
 8004312:	d03c      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xfa>
 8004314:	2b50      	cmp	r3, #80	@ 0x50
 8004316:	d873      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d058      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x13a>
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d86f      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b30      	cmp	r3, #48	@ 0x30
 8004322:	d064      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 8004324:	2b30      	cmp	r3, #48	@ 0x30
 8004326:	d86b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d060      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d867      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05c      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 8004334:	2b10      	cmp	r3, #16
 8004336:	d05a      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x15a>
 8004338:	e062      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	f000 f9bb 	bl	80046c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800435c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	609a      	str	r2, [r3, #8]
      break;
 8004366:	e04f      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	f000 f9a4 	bl	80046c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800438a:	609a      	str	r2, [r3, #8]
      break;
 800438c:	e03c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	461a      	mov	r2, r3
 800439c:	f000 f918 	bl	80045d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2150      	movs	r1, #80	@ 0x50
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f971 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80043ac:	e02c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f937 	bl	800462e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2160      	movs	r1, #96	@ 0x60
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f961 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80043cc:	e01c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 f8f8 	bl	80045d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2140      	movs	r1, #64	@ 0x40
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f951 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80043ec:	e00c      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f000 f948 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80043fe:	e003      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      break;
 8004404:	e000      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	fffeff88 	.word	0xfffeff88

08004428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a46      	ldr	r2, [pc, #280]	@ (80045a4 <TIM_Base_SetConfig+0x12c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004496:	d00f      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a43      	ldr	r2, [pc, #268]	@ (80045a8 <TIM_Base_SetConfig+0x130>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a42      	ldr	r2, [pc, #264]	@ (80045ac <TIM_Base_SetConfig+0x134>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a41      	ldr	r2, [pc, #260]	@ (80045b0 <TIM_Base_SetConfig+0x138>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a40      	ldr	r2, [pc, #256]	@ (80045b4 <TIM_Base_SetConfig+0x13c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a35      	ldr	r2, [pc, #212]	@ (80045a4 <TIM_Base_SetConfig+0x12c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02b      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d8:	d027      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <TIM_Base_SetConfig+0x130>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d023      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a31      	ldr	r2, [pc, #196]	@ (80045ac <TIM_Base_SetConfig+0x134>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01f      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a30      	ldr	r2, [pc, #192]	@ (80045b0 <TIM_Base_SetConfig+0x138>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01b      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2f      	ldr	r2, [pc, #188]	@ (80045b4 <TIM_Base_SetConfig+0x13c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d017      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2e      	ldr	r2, [pc, #184]	@ (80045b8 <TIM_Base_SetConfig+0x140>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2d      	ldr	r2, [pc, #180]	@ (80045bc <TIM_Base_SetConfig+0x144>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00f      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2c      	ldr	r2, [pc, #176]	@ (80045c0 <TIM_Base_SetConfig+0x148>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00b      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2b      	ldr	r2, [pc, #172]	@ (80045c4 <TIM_Base_SetConfig+0x14c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d007      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2a      	ldr	r2, [pc, #168]	@ (80045c8 <TIM_Base_SetConfig+0x150>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a29      	ldr	r2, [pc, #164]	@ (80045cc <TIM_Base_SetConfig+0x154>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a10      	ldr	r2, [pc, #64]	@ (80045a4 <TIM_Base_SetConfig+0x12c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0xf8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a12      	ldr	r2, [pc, #72]	@ (80045b4 <TIM_Base_SetConfig+0x13c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d103      	bne.n	8004578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	611a      	str	r2, [r3, #16]
  }
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40010400 	.word	0x40010400
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800
 80045c4:	40001800 	.word	0x40001800
 80045c8:	40001c00 	.word	0x40001c00
 80045cc:	40002000 	.word	0x40002000

080045d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 030a 	bic.w	r3, r3, #10
 800460c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462e:	b480      	push	{r7}
 8004630:	b087      	sub	sp, #28
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f023 0210 	bic.w	r2, r3, #16
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f043 0307 	orr.w	r3, r3, #7
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e06d      	b.n	80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a30      	ldr	r2, [pc, #192]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2f      	ldr	r2, [pc, #188]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d108      	bne.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a20      	ldr	r2, [pc, #128]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478e:	d01d      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1d      	ldr	r2, [pc, #116]	@ (800480c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a15      	ldr	r2, [pc, #84]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a16      	ldr	r2, [pc, #88]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10c      	bne.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40010000 	.word	0x40010000
 8004808:	40010400 	.word	0x40010400
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40014000 	.word	0x40014000
 800481c:	40001800 	.word	0x40001800

08004820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e040      	b.n	80048f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc feca 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	@ 0x24
 8004888:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa8c 	bl	8004dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f825 	bl	80048f8 <UART_SetConfig>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e01b      	b.n	80048f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb0b 	bl	8004f04 <UART_CheckIdleState>
 80048ee:	4603      	mov	r3, r0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4ba6      	ldr	r3, [pc, #664]	@ (8004bbc <UART_SetConfig+0x2c4>)
 8004924:	4013      	ands	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	430b      	orrs	r3, r1
 800492e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a94      	ldr	r2, [pc, #592]	@ (8004bc0 <UART_SetConfig+0x2c8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d120      	bne.n	80049b6 <UART_SetConfig+0xbe>
 8004974:	4b93      	ldr	r3, [pc, #588]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d816      	bhi.n	80049b0 <UART_SetConfig+0xb8>
 8004982:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <UART_SetConfig+0x90>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a5 	.word	0x080049a5
 8004990:	0800499f 	.word	0x0800499f
 8004994:	080049ab 	.word	0x080049ab
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e150      	b.n	8004c40 <UART_SetConfig+0x348>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e14d      	b.n	8004c40 <UART_SetConfig+0x348>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e14a      	b.n	8004c40 <UART_SetConfig+0x348>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e147      	b.n	8004c40 <UART_SetConfig+0x348>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e144      	b.n	8004c40 <UART_SetConfig+0x348>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a83      	ldr	r2, [pc, #524]	@ (8004bc8 <UART_SetConfig+0x2d0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d132      	bne.n	8004a26 <UART_SetConfig+0x12e>
 80049c0:	4b80      	ldr	r3, [pc, #512]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d828      	bhi.n	8004a20 <UART_SetConfig+0x128>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <UART_SetConfig+0xdc>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a09 	.word	0x08004a09
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a15 	.word	0x08004a15
 80049e8:	08004a21 	.word	0x08004a21
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a21 	.word	0x08004a21
 80049f4:	08004a0f 	.word	0x08004a0f
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a21 	.word	0x08004a21
 8004a04:	08004a1b 	.word	0x08004a1b
 8004a08:	2300      	movs	r3, #0
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e118      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e115      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a14:	2304      	movs	r3, #4
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e112      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e10f      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a20:	2310      	movs	r3, #16
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e10c      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a68      	ldr	r2, [pc, #416]	@ (8004bcc <UART_SetConfig+0x2d4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d120      	bne.n	8004a72 <UART_SetConfig+0x17a>
 8004a30:	4b64      	ldr	r3, [pc, #400]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a3a:	2b30      	cmp	r3, #48	@ 0x30
 8004a3c:	d013      	beq.n	8004a66 <UART_SetConfig+0x16e>
 8004a3e:	2b30      	cmp	r3, #48	@ 0x30
 8004a40:	d814      	bhi.n	8004a6c <UART_SetConfig+0x174>
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d009      	beq.n	8004a5a <UART_SetConfig+0x162>
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d810      	bhi.n	8004a6c <UART_SetConfig+0x174>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <UART_SetConfig+0x15c>
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d006      	beq.n	8004a60 <UART_SetConfig+0x168>
 8004a52:	e00b      	b.n	8004a6c <UART_SetConfig+0x174>
 8004a54:	2300      	movs	r3, #0
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e0f2      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e0ef      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a60:	2304      	movs	r3, #4
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e0ec      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a66:	2308      	movs	r3, #8
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e0e9      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e0e6      	b.n	8004c40 <UART_SetConfig+0x348>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a56      	ldr	r2, [pc, #344]	@ (8004bd0 <UART_SetConfig+0x2d8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d120      	bne.n	8004abe <UART_SetConfig+0x1c6>
 8004a7c:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a88:	d013      	beq.n	8004ab2 <UART_SetConfig+0x1ba>
 8004a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a8c:	d814      	bhi.n	8004ab8 <UART_SetConfig+0x1c0>
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d009      	beq.n	8004aa6 <UART_SetConfig+0x1ae>
 8004a92:	2b80      	cmp	r3, #128	@ 0x80
 8004a94:	d810      	bhi.n	8004ab8 <UART_SetConfig+0x1c0>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <UART_SetConfig+0x1a8>
 8004a9a:	2b40      	cmp	r3, #64	@ 0x40
 8004a9c:	d006      	beq.n	8004aac <UART_SetConfig+0x1b4>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x1c0>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e0cc      	b.n	8004c40 <UART_SetConfig+0x348>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e0c9      	b.n	8004c40 <UART_SetConfig+0x348>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e0c6      	b.n	8004c40 <UART_SetConfig+0x348>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e0c3      	b.n	8004c40 <UART_SetConfig+0x348>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e0c0      	b.n	8004c40 <UART_SetConfig+0x348>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a44      	ldr	r2, [pc, #272]	@ (8004bd4 <UART_SetConfig+0x2dc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d125      	bne.n	8004b14 <UART_SetConfig+0x21c>
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ad6:	d017      	beq.n	8004b08 <UART_SetConfig+0x210>
 8004ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004adc:	d817      	bhi.n	8004b0e <UART_SetConfig+0x216>
 8004ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae2:	d00b      	beq.n	8004afc <UART_SetConfig+0x204>
 8004ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae8:	d811      	bhi.n	8004b0e <UART_SetConfig+0x216>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <UART_SetConfig+0x1fe>
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af2:	d006      	beq.n	8004b02 <UART_SetConfig+0x20a>
 8004af4:	e00b      	b.n	8004b0e <UART_SetConfig+0x216>
 8004af6:	2300      	movs	r3, #0
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0a1      	b.n	8004c40 <UART_SetConfig+0x348>
 8004afc:	2302      	movs	r3, #2
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e09e      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b02:	2304      	movs	r3, #4
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e09b      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e098      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e095      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd8 <UART_SetConfig+0x2e0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d125      	bne.n	8004b6a <UART_SetConfig+0x272>
 8004b1e:	4b29      	ldr	r3, [pc, #164]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b2c:	d017      	beq.n	8004b5e <UART_SetConfig+0x266>
 8004b2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b32:	d817      	bhi.n	8004b64 <UART_SetConfig+0x26c>
 8004b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b38:	d00b      	beq.n	8004b52 <UART_SetConfig+0x25a>
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3e:	d811      	bhi.n	8004b64 <UART_SetConfig+0x26c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <UART_SetConfig+0x254>
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b48:	d006      	beq.n	8004b58 <UART_SetConfig+0x260>
 8004b4a:	e00b      	b.n	8004b64 <UART_SetConfig+0x26c>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e076      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b52:	2302      	movs	r3, #2
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e073      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b58:	2304      	movs	r3, #4
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e070      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b5e:	2308      	movs	r3, #8
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e06d      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b64:	2310      	movs	r3, #16
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e06a      	b.n	8004c40 <UART_SetConfig+0x348>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <UART_SetConfig+0x2e4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d138      	bne.n	8004be6 <UART_SetConfig+0x2ee>
 8004b74:	4b13      	ldr	r3, [pc, #76]	@ (8004bc4 <UART_SetConfig+0x2cc>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b82:	d017      	beq.n	8004bb4 <UART_SetConfig+0x2bc>
 8004b84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b88:	d82a      	bhi.n	8004be0 <UART_SetConfig+0x2e8>
 8004b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b8e:	d00b      	beq.n	8004ba8 <UART_SetConfig+0x2b0>
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b94:	d824      	bhi.n	8004be0 <UART_SetConfig+0x2e8>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <UART_SetConfig+0x2aa>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9e:	d006      	beq.n	8004bae <UART_SetConfig+0x2b6>
 8004ba0:	e01e      	b.n	8004be0 <UART_SetConfig+0x2e8>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e04b      	b.n	8004c40 <UART_SetConfig+0x348>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e048      	b.n	8004c40 <UART_SetConfig+0x348>
 8004bae:	2304      	movs	r3, #4
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e045      	b.n	8004c40 <UART_SetConfig+0x348>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e042      	b.n	8004c40 <UART_SetConfig+0x348>
 8004bba:	bf00      	nop
 8004bbc:	efff69f3 	.word	0xefff69f3
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	40004800 	.word	0x40004800
 8004bd0:	40004c00 	.word	0x40004c00
 8004bd4:	40005000 	.word	0x40005000
 8004bd8:	40011400 	.word	0x40011400
 8004bdc:	40007800 	.word	0x40007800
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e02c      	b.n	8004c40 <UART_SetConfig+0x348>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a72      	ldr	r2, [pc, #456]	@ (8004db4 <UART_SetConfig+0x4bc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d125      	bne.n	8004c3c <UART_SetConfig+0x344>
 8004bf0:	4b71      	ldr	r3, [pc, #452]	@ (8004db8 <UART_SetConfig+0x4c0>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bfa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bfe:	d017      	beq.n	8004c30 <UART_SetConfig+0x338>
 8004c00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004c04:	d817      	bhi.n	8004c36 <UART_SetConfig+0x33e>
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c0a:	d00b      	beq.n	8004c24 <UART_SetConfig+0x32c>
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c10:	d811      	bhi.n	8004c36 <UART_SetConfig+0x33e>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <UART_SetConfig+0x326>
 8004c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1a:	d006      	beq.n	8004c2a <UART_SetConfig+0x332>
 8004c1c:	e00b      	b.n	8004c36 <UART_SetConfig+0x33e>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e00d      	b.n	8004c40 <UART_SetConfig+0x348>
 8004c24:	2302      	movs	r3, #2
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e00a      	b.n	8004c40 <UART_SetConfig+0x348>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e007      	b.n	8004c40 <UART_SetConfig+0x348>
 8004c30:	2308      	movs	r3, #8
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e004      	b.n	8004c40 <UART_SetConfig+0x348>
 8004c36:	2310      	movs	r3, #16
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e001      	b.n	8004c40 <UART_SetConfig+0x348>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c48:	d15b      	bne.n	8004d02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c4a:	7ffb      	ldrb	r3, [r7, #31]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d828      	bhi.n	8004ca2 <UART_SetConfig+0x3aa>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <UART_SetConfig+0x360>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c7d 	.word	0x08004c7d
 8004c5c:	08004c85 	.word	0x08004c85
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	08004ca3 	.word	0x08004ca3
 8004c68:	08004c93 	.word	0x08004c93
 8004c6c:	08004ca3 	.word	0x08004ca3
 8004c70:	08004ca3 	.word	0x08004ca3
 8004c74:	08004ca3 	.word	0x08004ca3
 8004c78:	08004c9b 	.word	0x08004c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c7c:	f7fe fc0a 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8004c80:	61b8      	str	r0, [r7, #24]
        break;
 8004c82:	e013      	b.n	8004cac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c84:	f7fe fc1a 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8004c88:	61b8      	str	r0, [r7, #24]
        break;
 8004c8a:	e00f      	b.n	8004cac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004dbc <UART_SetConfig+0x4c4>)
 8004c8e:	61bb      	str	r3, [r7, #24]
        break;
 8004c90:	e00c      	b.n	8004cac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c92:	f7fe faed 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8004c96:	61b8      	str	r0, [r7, #24]
        break;
 8004c98:	e008      	b.n	8004cac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ca0:	e004      	b.n	8004cac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	77bb      	strb	r3, [r7, #30]
        break;
 8004caa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d074      	beq.n	8004d9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	005a      	lsls	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d916      	bls.n	8004cfc <UART_SetConfig+0x404>
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd4:	d212      	bcs.n	8004cfc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f023 030f 	bic.w	r3, r3, #15
 8004cde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	89fa      	ldrh	r2, [r7, #14]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e04f      	b.n	8004d9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	77bb      	strb	r3, [r7, #30]
 8004d00:	e04c      	b.n	8004d9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d02:	7ffb      	ldrb	r3, [r7, #31]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d828      	bhi.n	8004d5a <UART_SetConfig+0x462>
 8004d08:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <UART_SetConfig+0x418>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	08004d5b 	.word	0x08004d5b
 8004d20:	08004d4b 	.word	0x08004d4b
 8004d24:	08004d5b 	.word	0x08004d5b
 8004d28:	08004d5b 	.word	0x08004d5b
 8004d2c:	08004d5b 	.word	0x08004d5b
 8004d30:	08004d53 	.word	0x08004d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d34:	f7fe fbae 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8004d38:	61b8      	str	r0, [r7, #24]
        break;
 8004d3a:	e013      	b.n	8004d64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7fe fbbe 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8004d40:	61b8      	str	r0, [r7, #24]
        break;
 8004d42:	e00f      	b.n	8004d64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d44:	4b1d      	ldr	r3, [pc, #116]	@ (8004dbc <UART_SetConfig+0x4c4>)
 8004d46:	61bb      	str	r3, [r7, #24]
        break;
 8004d48:	e00c      	b.n	8004d64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4a:	f7fe fa91 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 8004d4e:	61b8      	str	r0, [r7, #24]
        break;
 8004d50:	e008      	b.n	8004d64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d56:	61bb      	str	r3, [r7, #24]
        break;
 8004d58:	e004      	b.n	8004d64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	77bb      	strb	r3, [r7, #30]
        break;
 8004d62:	bf00      	nop
    }

    if (pclk != 0U)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	085a      	lsrs	r2, r3, #1
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	441a      	add	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b0f      	cmp	r3, #15
 8004d82:	d909      	bls.n	8004d98 <UART_SetConfig+0x4a0>
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d8a:	d205      	bcs.n	8004d98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	e001      	b.n	8004d9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004da8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40007c00 	.word	0x40007c00
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00f42400 	.word	0x00f42400

08004dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ebe:	d10a      	bne.n	8004ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	@ 0x30
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f14:	f7fd f9ba 	bl	800228c <HAL_GetTick>
 8004f18:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d12e      	bne.n	8004f86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	2200      	movs	r2, #0
 8004f32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f83b 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d021      	beq.n	8004f86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e011      	b.n	8004faa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	@ 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc2:	e04f      	b.n	8005064 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d04b      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fcc:	f7fd f95e 	bl	800228c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04e      	b.n	8005084 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d037      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b80      	cmp	r3, #128	@ 0x80
 8004ff8:	d034      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b40      	cmp	r3, #64	@ 0x40
 8004ffe:	d031      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d110      	bne.n	8005030 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2208      	movs	r2, #8
 8005014:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f838 	bl	800508c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2208      	movs	r2, #8
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e029      	b.n	8005084 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800503e:	d111      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005048:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f81e 	bl	800508c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e00f      	b.n	8005084 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	429a      	cmp	r2, r3
 8005080:	d0a0      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b095      	sub	sp, #84	@ 0x54
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80050b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e6      	bne.n	8005094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3308      	adds	r3, #8
 80050cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d118      	bne.n	8005134 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f023 0310 	bic.w	r3, r3, #16
 8005116:	647b      	str	r3, [r7, #68]	@ 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6979      	ldr	r1, [r7, #20]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	613b      	str	r3, [r7, #16]
   return(result);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e6      	bne.n	8005102 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005148:	bf00      	nop
 800514a:	3754      	adds	r7, #84	@ 0x54
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005154:	b084      	sub	sp, #16
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	f107 001c 	add.w	r0, r7, #28
 8005162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005166:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800516a:	2b01      	cmp	r3, #1
 800516c:	d121      	bne.n	80051b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	4b21      	ldr	r3, [pc, #132]	@ (8005204 <USB_CoreInit+0xb0>)
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005196:	2b01      	cmp	r3, #1
 8005198:	d105      	bne.n	80051a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa92 	bl	80056d0 <USB_CoreReset>
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	e010      	b.n	80051d4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa86 	bl	80056d0 <USB_CoreReset>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80051d4:	7fbb      	ldrb	r3, [r7, #30]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10b      	bne.n	80051f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f043 0206 	orr.w	r2, r3, #6
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051fe:	b004      	add	sp, #16
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	ffbdffbf 	.word	0xffbdffbf

08005208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 0201 	bic.w	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d115      	bne.n	8005278 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005258:	200a      	movs	r0, #10
 800525a:	f7fd f823 	bl	80022a4 <HAL_Delay>
      ms += 10U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	330a      	adds	r3, #10
 8005262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa25 	bl	80056b4 <USB_GetMode>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d01e      	beq.n	80052ae <USB_SetCurrentMode+0x84>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2bc7      	cmp	r3, #199	@ 0xc7
 8005274:	d9f0      	bls.n	8005258 <USB_SetCurrentMode+0x2e>
 8005276:	e01a      	b.n	80052ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d115      	bne.n	80052aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800528a:	200a      	movs	r0, #10
 800528c:	f7fd f80a 	bl	80022a4 <HAL_Delay>
      ms += 10U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	330a      	adds	r3, #10
 8005294:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa0c 	bl	80056b4 <USB_GetMode>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <USB_SetCurrentMode+0x84>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80052a6:	d9f0      	bls.n	800528a <USB_SetCurrentMode+0x60>
 80052a8:	e001      	b.n	80052ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e005      	b.n	80052ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80052b2:	d101      	bne.n	80052b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c4:	b084      	sub	sp, #16
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e009      	b.n	80052f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3340      	adds	r3, #64	@ 0x40
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0e      	cmp	r3, #14
 80052fc:	d9f2      	bls.n	80052e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005302:	2b00      	cmp	r3, #0
 8005304:	d11c      	bne.n	8005340 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e005      	b.n	800534c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005358:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10d      	bne.n	800537c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005368:	2100      	movs	r1, #0
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f968 	bl	8005640 <USB_SetDevSpeed>
 8005370:	e008      	b.n	8005384 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005372:	2101      	movs	r1, #1
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f963 	bl	8005640 <USB_SetDevSpeed>
 800537a:	e003      	b.n	8005384 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800537c:	2103      	movs	r1, #3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f95e 	bl	8005640 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005384:	2110      	movs	r1, #16
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8fa 	bl	8005580 <USB_FlushTxFifo>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f924 	bl	80055e4 <USB_FlushRxFifo>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b8:	461a      	mov	r2, r3
 80053ba:	2300      	movs	r3, #0
 80053bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c4:	461a      	mov	r2, r3
 80053c6:	2300      	movs	r3, #0
 80053c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e043      	b.n	8005458 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e6:	d118      	bne.n	800541a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053fa:	461a      	mov	r2, r3
 80053fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e013      	b.n	800542c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005410:	461a      	mov	r2, r3
 8005412:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e008      	b.n	800542c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005426:	461a      	mov	r2, r3
 8005428:	2300      	movs	r3, #0
 800542a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	461a      	mov	r2, r3
 800543a:	2300      	movs	r3, #0
 800543c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544a:	461a      	mov	r2, r3
 800544c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3301      	adds	r3, #1
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800545c:	461a      	mov	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4293      	cmp	r3, r2
 8005462:	d3b5      	bcc.n	80053d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	e043      	b.n	80054f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800547c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005480:	d118      	bne.n	80054b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005494:	461a      	mov	r2, r3
 8005496:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e013      	b.n	80054c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054aa:	461a      	mov	r2, r3
 80054ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e008      	b.n	80054c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	2300      	movs	r3, #0
 80054c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e4:	461a      	mov	r2, r3
 80054e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054f6:	461a      	mov	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d3b5      	bcc.n	800546a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800550c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005510:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800551e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005524:	2b00      	cmp	r3, #0
 8005526:	d105      	bne.n	8005534 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f043 0210 	orr.w	r2, r3, #16
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <USB_DevInit+0x2b4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005540:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f043 0208 	orr.w	r2, r3, #8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005554:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005558:	2b01      	cmp	r3, #1
 800555a:	d105      	bne.n	8005568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	4b06      	ldr	r3, [pc, #24]	@ (800557c <USB_DevInit+0x2b8>)
 8005562:	4313      	orrs	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005574:	b004      	add	sp, #16
 8005576:	4770      	bx	lr
 8005578:	803c3800 	.word	0x803c3800
 800557c:	40000004 	.word	0x40000004

08005580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800559a:	d901      	bls.n	80055a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e01b      	b.n	80055d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	daf2      	bge.n	800558e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	019b      	lsls	r3, r3, #6
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3301      	adds	r3, #1
 80055bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055c4:	d901      	bls.n	80055ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e006      	b.n	80055d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d0f0      	beq.n	80055b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055fc:	d901      	bls.n	8005602 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e018      	b.n	8005634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	daf2      	bge.n	80055f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2210      	movs	r2, #16
 8005612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005620:	d901      	bls.n	8005626 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e006      	b.n	8005634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b10      	cmp	r3, #16
 8005630:	d0f0      	beq.n	8005614 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005660:	4313      	orrs	r3, r2
 8005662:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a0:	f043 0302 	orr.w	r3, r3, #2
 80056a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0301 	and.w	r3, r3, #1
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3301      	adds	r3, #1
 80056e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056e8:	d901      	bls.n	80056ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e01b      	b.n	8005726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	daf2      	bge.n	80056dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005712:	d901      	bls.n	8005718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e006      	b.n	8005726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b01      	cmp	r3, #1
 8005722:	d0f0      	beq.n	8005706 <USB_CoreReset+0x36>

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <vApplicationGetIdleTaskMemory+0x2c>)
 8005744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a06      	ldr	r2, [pc, #24]	@ (8005764 <vApplicationGetIdleTaskMemory+0x30>)
 800574a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2280      	movs	r2, #128	@ 0x80
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000728 	.word	0x20000728
 8005764:	200007d0 	.word	0x200007d0

08005768 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a07      	ldr	r2, [pc, #28]	@ (8005794 <vApplicationGetTimerTaskMemory+0x2c>)
 8005778:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4a06      	ldr	r2, [pc, #24]	@ (8005798 <vApplicationGetTimerTaskMemory+0x30>)
 800577e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005786:	601a      	str	r2, [r3, #0]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	200009d0 	.word	0x200009d0
 8005798:	20000a78 	.word	0x20000a78

0800579c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f103 0208 	add.w	r2, r3, #8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f103 0208 	add.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d103      	bne.n	800585e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e00c      	b.n	8005878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3308      	adds	r3, #8
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e002      	b.n	800586c <vListInsert+0x2e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d2f6      	bcs.n	8005866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6852      	ldr	r2, [r2, #4]
 80058d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d103      	bne.n	80058e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1e5a      	subs	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <xQueueGenericReset+0x30>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591c:	b672      	cpsid	i
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	b662      	cpsie	i
 800592c:	60bb      	str	r3, [r7, #8]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005934:	f002 fe5a 	bl	80085ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	441a      	add	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	3b01      	subs	r3, #1
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	22ff      	movs	r2, #255	@ 0xff
 8005978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d114      	bne.n	80059b4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01a      	beq.n	80059c8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3310      	adds	r3, #16
 8005996:	4618      	mov	r0, r3
 8005998:	f001 fbe6 	bl	8007168 <xTaskRemoveFromEventList>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d012      	beq.n	80059c8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <xQueueGenericReset+0xd4>)
 80059a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	e009      	b.n	80059c8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3310      	adds	r3, #16
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff feef 	bl	800579c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3324      	adds	r3, #36	@ 0x24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff feea 	bl	800579c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059c8:	f002 fe46 	bl	8008658 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059cc:	2301      	movs	r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	@ 0x38
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10d      	bne.n	8005a0c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	b672      	cpsid	i
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	b662      	cpsie	i
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	b672      	cpsid	i
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	b662      	cpsie	i
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <xQueueGenericCreateStatic+0x5e>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <xQueueGenericCreateStatic+0x62>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <xQueueGenericCreateStatic+0x64>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10d      	bne.n	8005a60 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	b672      	cpsid	i
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	b662      	cpsie	i
 8005a58:	623b      	str	r3, [r7, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	e7fd      	b.n	8005a5c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <xQueueGenericCreateStatic+0x90>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <xQueueGenericCreateStatic+0x94>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <xQueueGenericCreateStatic+0x96>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	b672      	cpsid	i
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	b662      	cpsie	i
 8005a8a:	61fb      	str	r3, [r7, #28]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a92:	2350      	movs	r3, #80	@ 0x50
 8005a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b50      	cmp	r3, #80	@ 0x50
 8005a9a:	d00d      	beq.n	8005ab8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	b672      	cpsid	i
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	b662      	cpsie	i
 8005ab0:	61bb      	str	r3, [r7, #24]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ab8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005acc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f848 	bl	8005b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3730      	adds	r7, #48	@ 0x30
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b08a      	sub	sp, #40	@ 0x28
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <xQueueGenericCreate+0x30>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	b672      	cpsid	i
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	b662      	cpsie	i
 8005b12:	613b      	str	r3, [r7, #16]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	e004      	b.n	8005b30 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3350      	adds	r3, #80	@ 0x50
 8005b34:	4618      	mov	r0, r3
 8005b36:	f002 fe87 	bl	8008848 <pvPortMalloc>
 8005b3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d011      	beq.n	8005b66 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	3350      	adds	r3, #80	@ 0x50
 8005b4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b54:	79fa      	ldrb	r2, [r7, #7]
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f805 	bl	8005b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b66:	69bb      	ldr	r3, [r7, #24]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	69b8      	ldr	r0, [r7, #24]
 8005ba2:	f7ff feaf 	bl	8005904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2100      	movs	r1, #0
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f81d 	bl	8005c1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6939      	ldr	r1, [r7, #16]
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f7ff ff71 	bl	8005aea <xQueueGenericCreate>
 8005c08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff ffd3 	bl	8005bb6 <prvInitialiseMutex>

		return xNewQueue;
 8005c10:	68fb      	ldr	r3, [r7, #12]
	}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	@ 0x38
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <xQueueGenericSend+0x38>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	b672      	cpsid	i
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	b662      	cpsie	i
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSend+0x46>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericSend+0x4a>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericSend+0x4c>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10d      	bne.n	8005c88 <xQueueGenericSend+0x6c>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	b672      	cpsid	i
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	b662      	cpsie	i
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	e7fd      	b.n	8005c84 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d103      	bne.n	8005c96 <xQueueGenericSend+0x7a>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <xQueueGenericSend+0x7e>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <xQueueGenericSend+0x80>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10d      	bne.n	8005cbc <xQueueGenericSend+0xa0>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	b672      	cpsid	i
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	b662      	cpsie	i
 8005cb4:	623b      	str	r3, [r7, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cbc:	f001 fc22 	bl	8007504 <xTaskGetSchedulerState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <xQueueGenericSend+0xb0>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <xQueueGenericSend+0xb4>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <xQueueGenericSend+0xb6>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <xQueueGenericSend+0xd6>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	b672      	cpsid	i
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	b662      	cpsie	i
 8005cea:	61fb      	str	r3, [r7, #28]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cf2:	f002 fc7b 	bl	80085ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <xQueueGenericSend+0xec>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d129      	bne.n	8005d5c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d0e:	f000 fb8d 	bl	800642c <prvCopyDataToQueue>
 8005d12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	3324      	adds	r3, #36	@ 0x24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 fa21 	bl	8007168 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <xQueueGenericSend+0x210>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	e00a      	b.n	8005d54 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d44:	4b39      	ldr	r3, [pc, #228]	@ (8005e2c <xQueueGenericSend+0x210>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d54:	f002 fc80 	bl	8008658 <vPortExitCritical>
				return pdPASS;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e063      	b.n	8005e24 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d62:	f002 fc79 	bl	8008658 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e05c      	b.n	8005e24 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fa5d 	bl	8007234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d7e:	f002 fc6b 	bl	8008658 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d82:	f000 ffb9 	bl	8006cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d86:	f002 fc31 	bl	80085ec <vPortEnterCritical>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d103      	bne.n	8005da0 <xQueueGenericSend+0x184>
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d103      	bne.n	8005db6 <xQueueGenericSend+0x19a>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005db6:	f002 fc4f 	bl	8008658 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dba:	1d3a      	adds	r2, r7, #4
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 fa4c 	bl	8007260 <xTaskCheckForTimeOut>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d124      	bne.n	8005e18 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dd0:	f000 fc24 	bl	800661c <prvIsQueueFull>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	3310      	adds	r3, #16
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4611      	mov	r1, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f96a 	bl	80070bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dea:	f000 fbaf 	bl	800654c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dee:	f000 ff91 	bl	8006d14 <xTaskResumeAll>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f47f af7c 	bne.w	8005cf2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <xQueueGenericSend+0x210>)
 8005dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	e772      	b.n	8005cf2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e0e:	f000 fb9d 	bl	800654c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e12:	f000 ff7f 	bl	8006d14 <xTaskResumeAll>
 8005e16:	e76c      	b.n	8005cf2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e1a:	f000 fb97 	bl	800654c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e1e:	f000 ff79 	bl	8006d14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3738      	adds	r7, #56	@ 0x38
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	@ 0x38
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	b672      	cpsid	i
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	b662      	cpsie	i
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <xQueueGenericSendFromISR+0x42>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <xQueueGenericSendFromISR+0x46>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <xQueueGenericSendFromISR+0x48>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	b672      	cpsid	i
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	b662      	cpsie	i
 8005e90:	623b      	str	r3, [r7, #32]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x76>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSendFromISR+0x7a>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSendFromISR+0x7c>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	61fb      	str	r3, [r7, #28]
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ecc:	f002 fc76 	bl	80087bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ed0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	b672      	cpsid	i
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	b662      	cpsie	i
 8005ee8:	61ba      	str	r2, [r7, #24]
 8005eea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <xQueueGenericSendFromISR+0xd2>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d12c      	bne.n	8005f5c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f12:	f000 fa8b 	bl	800642c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f16:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d112      	bne.n	8005f46 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2a:	3324      	adds	r3, #36	@ 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f91b 	bl	8007168 <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e007      	b.n	8005f56 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	b25a      	sxtb	r2, r3
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f56:	2301      	movs	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005f5a:	e001      	b.n	8005f60 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3738      	adds	r7, #56	@ 0x38
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	@ 0x30
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <xQueueReceive+0x36>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	b672      	cpsid	i
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	b662      	cpsie	i
 8005fa6:	623b      	str	r3, [r7, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <xQueueReceive+0x44>
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <xQueueReceive+0x48>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <xQueueReceive+0x4a>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10d      	bne.n	8005fe2 <xQueueReceive+0x6a>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	b672      	cpsid	i
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	b662      	cpsie	i
 8005fda:	61fb      	str	r3, [r7, #28]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe2:	f001 fa8f 	bl	8007504 <xTaskGetSchedulerState>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <xQueueReceive+0x7a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <xQueueReceive+0x7e>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueReceive+0x80>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <xQueueReceive+0xa0>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	b672      	cpsid	i
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	b662      	cpsie	i
 8006010:	61bb      	str	r3, [r7, #24]
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	e7fd      	b.n	8006014 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006018:	f002 fae8 	bl	80085ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01f      	beq.n	8006068 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800602c:	f000 fa68 	bl	8006500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	1e5a      	subs	r2, r3, #1
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00f      	beq.n	8006060 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	3310      	adds	r3, #16
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f88f 	bl	8007168 <xTaskRemoveFromEventList>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006050:	4b3c      	ldr	r3, [pc, #240]	@ (8006144 <xQueueReceive+0x1cc>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006060:	f002 fafa 	bl	8008658 <vPortExitCritical>
				return pdPASS;
 8006064:	2301      	movs	r3, #1
 8006066:	e069      	b.n	800613c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800606e:	f002 faf3 	bl	8008658 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006072:	2300      	movs	r3, #0
 8006074:	e062      	b.n	800613c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800607c:	f107 0310 	add.w	r3, r7, #16
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f8d7 	bl	8007234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006086:	2301      	movs	r3, #1
 8006088:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800608a:	f002 fae5 	bl	8008658 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800608e:	f000 fe33 	bl	8006cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006092:	f002 faab 	bl	80085ec <vPortEnterCritical>
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d103      	bne.n	80060ac <xQueueReceive+0x134>
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d103      	bne.n	80060c2 <xQueueReceive+0x14a>
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060c2:	f002 fac9 	bl	8008658 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c6:	1d3a      	adds	r2, r7, #4
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	4611      	mov	r1, r2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 f8c6 	bl	8007260 <xTaskCheckForTimeOut>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d123      	bne.n	8006122 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060dc:	f000 fa88 	bl	80065f0 <prvIsQueueEmpty>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d017      	beq.n	8006116 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	3324      	adds	r3, #36	@ 0x24
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 ffe4 	bl	80070bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f6:	f000 fa29 	bl	800654c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060fa:	f000 fe0b 	bl	8006d14 <xTaskResumeAll>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d189      	bne.n	8006018 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <xQueueReceive+0x1cc>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	e780      	b.n	8006018 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006118:	f000 fa18 	bl	800654c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800611c:	f000 fdfa 	bl	8006d14 <xTaskResumeAll>
 8006120:	e77a      	b.n	8006018 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006124:	f000 fa12 	bl	800654c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006128:	f000 fdf4 	bl	8006d14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800612c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800612e:	f000 fa5f 	bl	80065f0 <prvIsQueueEmpty>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	f43f af6f 	beq.w	8006018 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800613a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800613c:	4618      	mov	r0, r3
 800613e:	3730      	adds	r7, #48	@ 0x30
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10d      	bne.n	8006180 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	b672      	cpsid	i
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	b662      	cpsie	i
 8006178:	623b      	str	r3, [r7, #32]
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00d      	beq.n	80061a4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	b672      	cpsid	i
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	b662      	cpsie	i
 800619c:	61fb      	str	r3, [r7, #28]
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	e7fd      	b.n	80061a0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061a4:	f001 f9ae 	bl	8007504 <xTaskGetSchedulerState>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <xQueueSemaphoreTake+0x6c>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <xQueueSemaphoreTake+0x70>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <xQueueSemaphoreTake+0x72>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <xQueueSemaphoreTake+0x92>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	b672      	cpsid	i
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	b662      	cpsie	i
 80061d2:	61bb      	str	r3, [r7, #24]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061da:	f002 fa07 	bl	80085ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d024      	beq.n	8006234 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	1e5a      	subs	r2, r3, #1
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061fa:	f001 fb05 	bl	8007808 <pvTaskIncrementMutexHeldCount>
 80061fe:	4602      	mov	r2, r0
 8006200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006202:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00f      	beq.n	800622c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	3310      	adds	r3, #16
 8006210:	4618      	mov	r0, r3
 8006212:	f000 ffa9 	bl	8007168 <xTaskRemoveFromEventList>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800621c:	4b55      	ldr	r3, [pc, #340]	@ (8006374 <xQueueSemaphoreTake+0x22c>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800622c:	f002 fa14 	bl	8008658 <vPortExitCritical>
				return pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	e09a      	b.n	800636a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d114      	bne.n	8006264 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	617b      	str	r3, [r7, #20]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800625c:	f002 f9fc 	bl	8008658 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006260:	2300      	movs	r3, #0
 8006262:	e082      	b.n	800636a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ffe0 	bl	8007234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006278:	f002 f9ee 	bl	8008658 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800627c:	f000 fd3c 	bl	8006cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006280:	f002 f9b4 	bl	80085ec <vPortEnterCritical>
 8006284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006286:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800628a:	b25b      	sxtb	r3, r3
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d103      	bne.n	800629a <xQueueSemaphoreTake+0x152>
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <xQueueSemaphoreTake+0x168>
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b0:	f002 f9d2 	bl	8008658 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b4:	463a      	mov	r2, r7
 80062b6:	f107 030c 	add.w	r3, r7, #12
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 ffcf 	bl	8007260 <xTaskCheckForTimeOut>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d132      	bne.n	800632e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ca:	f000 f991 	bl	80065f0 <prvIsQueueEmpty>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d026      	beq.n	8006322 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80062dc:	f002 f986 	bl	80085ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f92b 	bl	8007540 <xTaskPriorityInherit>
 80062ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062ec:	f002 f9b4 	bl	8008658 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	3324      	adds	r3, #36	@ 0x24
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fedf 	bl	80070bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006300:	f000 f924 	bl	800654c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006304:	f000 fd06 	bl	8006d14 <xTaskResumeAll>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	f47f af65 	bne.w	80061da <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006310:	4b18      	ldr	r3, [pc, #96]	@ (8006374 <xQueueSemaphoreTake+0x22c>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	e75b      	b.n	80061da <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006322:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006324:	f000 f912 	bl	800654c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006328:	f000 fcf4 	bl	8006d14 <xTaskResumeAll>
 800632c:	e755      	b.n	80061da <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800632e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006330:	f000 f90c 	bl	800654c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006334:	f000 fcee 	bl	8006d14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006338:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800633a:	f000 f959 	bl	80065f0 <prvIsQueueEmpty>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f43f af4a 	beq.w	80061da <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800634c:	f002 f94e 	bl	80085ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006352:	f000 f853 	bl	80063fc <prvGetDisinheritPriorityAfterTimeout>
 8006356:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f9ca 	bl	80076f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006364:	f002 f978 	bl	8008658 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800636a:	4618      	mov	r0, r3
 800636c:	3738      	adds	r7, #56	@ 0x38
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10d      	bne.n	80063a2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	b672      	cpsid	i
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	b662      	cpsie	i
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80063a2:	f002 f923 	bl	80085ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063aa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80063ac:	f002 f954 	bl	8008658 <vPortExitCritical>

	return uxReturn;
 80063b0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80063ba:	b480      	push	{r7}
 80063bc:	b087      	sub	sp, #28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10d      	bne.n	80063e8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	b672      	cpsid	i
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	b662      	cpsie	i
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	e7fd      	b.n	80063e4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80063ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063f0:	4618      	mov	r0, r3
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e001      	b.n	800641e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800641e:	68fb      	ldr	r3, [r7, #12]
	}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10d      	bne.n	8006466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d14d      	bne.n	80064ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f8da 	bl	8007610 <xTaskPriorityDisinherit>
 800645c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	e043      	b.n	80064ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d119      	bne.n	80064a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6858      	ldr	r0, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	461a      	mov	r2, r3
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	f002 ffb5 	bl	80093e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006484:	441a      	add	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d32b      	bcc.n	80064ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]
 800649e:	e026      	b.n	80064ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68d8      	ldr	r0, [r3, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	461a      	mov	r2, r3
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	f002 ff9b 	bl	80093e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	425b      	negs	r3, r3
 80064ba:	441a      	add	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d207      	bcs.n	80064dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d4:	425b      	negs	r3, r3
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d105      	bne.n	80064ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064f6:	697b      	ldr	r3, [r7, #20]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d018      	beq.n	8006544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	441a      	add	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	d303      	bcc.n	8006534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68d9      	ldr	r1, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	461a      	mov	r2, r3
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f002 ff51 	bl	80093e6 <memcpy>
	}
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006554:	f002 f84a 	bl	80085ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800655e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006560:	e011      	b.n	8006586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3324      	adds	r3, #36	@ 0x24
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fdfa 	bl	8007168 <xTaskRemoveFromEventList>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800657a:	f000 fed9 	bl	8007330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	3b01      	subs	r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dce9      	bgt.n	8006562 <prvUnlockQueue+0x16>
 800658e:	e000      	b.n	8006592 <prvUnlockQueue+0x46>
					break;
 8006590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	22ff      	movs	r2, #255	@ 0xff
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800659a:	f002 f85d 	bl	8008658 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800659e:	f002 f825 	bl	80085ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065aa:	e011      	b.n	80065d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d012      	beq.n	80065da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3310      	adds	r3, #16
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fdd5 	bl	8007168 <xTaskRemoveFromEventList>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065c4:	f000 feb4 	bl	8007330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dce9      	bgt.n	80065ac <prvUnlockQueue+0x60>
 80065d8:	e000      	b.n	80065dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	22ff      	movs	r2, #255	@ 0xff
 80065e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80065e4:	f002 f838 	bl	8008658 <vPortExitCritical>
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065f8:	f001 fff8 	bl	80085ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e001      	b.n	800660e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800660e:	f002 f823 	bl	8008658 <vPortExitCritical>

	return xReturn;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006624:	f001 ffe2 	bl	80085ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	429a      	cmp	r2, r3
 8006632:	d102      	bne.n	800663a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e001      	b.n	800663e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800663e:	f002 f80b 	bl	8008658 <vPortExitCritical>

	return xReturn;
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e014      	b.n	8006686 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800665c:	4a0f      	ldr	r2, [pc, #60]	@ (800669c <vQueueAddToRegistry+0x50>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006668:	490c      	ldr	r1, [pc, #48]	@ (800669c <vQueueAddToRegistry+0x50>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006672:	4a0a      	ldr	r2, [pc, #40]	@ (800669c <vQueueAddToRegistry+0x50>)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800667e:	e006      	b.n	800668e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b07      	cmp	r3, #7
 800668a:	d9e7      	bls.n	800665c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000e78 	.word	0x20000e78

080066a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066b0:	f001 ff9c 	bl	80085ec <vPortEnterCritical>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ba:	b25b      	sxtb	r3, r3
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d103      	bne.n	80066ca <vQueueWaitForMessageRestricted+0x2a>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d103      	bne.n	80066e0 <vQueueWaitForMessageRestricted+0x40>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e0:	f001 ffba 	bl	8008658 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	3324      	adds	r3, #36	@ 0x24
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fd09 	bl	800710c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7ff ff26 	bl	800654c <prvUnlockQueue>
	}
 8006700:	bf00      	nop
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	@ 0x38
 800670c:	af04      	add	r7, sp, #16
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <xTaskCreateStatic+0x30>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	623b      	str	r3, [r7, #32]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10d      	bne.n	800675a <xTaskCreateStatic+0x52>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	b672      	cpsid	i
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	b662      	cpsie	i
 8006752:	61fb      	str	r3, [r7, #28]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800675a:	23a8      	movs	r3, #168	@ 0xa8
 800675c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2ba8      	cmp	r3, #168	@ 0xa8
 8006762:	d00d      	beq.n	8006780 <xTaskCreateStatic+0x78>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	b672      	cpsid	i
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	b662      	cpsie	i
 8006778:	61bb      	str	r3, [r7, #24]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006780:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01e      	beq.n	80067c6 <xTaskCreateStatic+0xbe>
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01b      	beq.n	80067c6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006796:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	2202      	movs	r2, #2
 800679c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067a0:	2300      	movs	r3, #0
 80067a2:	9303      	str	r3, [sp, #12]
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	9302      	str	r3, [sp, #8]
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f851 	bl	8006860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067c0:	f000 f8f8 	bl	80069b4 <prvAddNewTaskToReadyList>
 80067c4:	e001      	b.n	80067ca <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067ca:	697b      	ldr	r3, [r7, #20]
	}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	@ 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	@ 0x30
 80067d8:	af04      	add	r7, sp, #16
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 f82d 	bl	8008848 <pvPortMalloc>
 80067ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067f6:	20a8      	movs	r0, #168	@ 0xa8
 80067f8:	f002 f826 	bl	8008848 <pvPortMalloc>
 80067fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	631a      	str	r2, [r3, #48]	@ 0x30
 800680a:	e005      	b.n	8006818 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800680c:	6978      	ldr	r0, [r7, #20]
 800680e:	f002 f8e9 	bl	80089e4 <vPortFree>
 8006812:	e001      	b.n	8006818 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	2300      	movs	r3, #0
 800682a:	9303      	str	r3, [sp, #12]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f80f 	bl	8006860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006842:	69f8      	ldr	r0, [r7, #28]
 8006844:	f000 f8b6 	bl	80069b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006848:	2301      	movs	r3, #1
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e002      	b.n	8006854 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006854:	69bb      	ldr	r3, [r7, #24]
	}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	461a      	mov	r2, r3
 8006878:	21a5      	movs	r1, #165	@ 0xa5
 800687a:	f002 fccf 	bl	800921c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006888:	440b      	add	r3, r1
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f023 0307 	bic.w	r3, r3, #7
 8006896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <prvInitialiseNewTask+0x5e>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	b672      	cpsid	i
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	b662      	cpsie	i
 80068b6:	617b      	str	r3, [r7, #20]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01f      	beq.n	8006904 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e012      	b.n	80068f0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	7819      	ldrb	r1, [r3, #0]
 80068d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	3334      	adds	r3, #52	@ 0x34
 80068da:	460a      	mov	r2, r1
 80068dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d006      	beq.n	80068f8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	3301      	adds	r3, #1
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b0f      	cmp	r3, #15
 80068f4:	d9e9      	bls.n	80068ca <prvInitialiseNewTask+0x6a>
 80068f6:	e000      	b.n	80068fa <prvInitialiseNewTask+0x9a>
			{
				break;
 80068f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006902:	e003      	b.n	800690c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	2b37      	cmp	r3, #55	@ 0x37
 8006910:	d901      	bls.n	8006916 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006912:	2337      	movs	r3, #55	@ 0x37
 8006914:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800691a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006920:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	2200      	movs	r2, #0
 8006926:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe ff55 	bl	80057dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	3318      	adds	r3, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe ff50 	bl	80057dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006940:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006950:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	2200      	movs	r2, #0
 800695e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	3354      	adds	r3, #84	@ 0x54
 8006966:	224c      	movs	r2, #76	@ 0x4c
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f002 fc56 	bl	800921c <memset>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	4a0d      	ldr	r2, [pc, #52]	@ (80069a8 <prvInitialiseNewTask+0x148>)
 8006974:	659a      	str	r2, [r3, #88]	@ 0x58
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	4a0c      	ldr	r2, [pc, #48]	@ (80069ac <prvInitialiseNewTask+0x14c>)
 800697a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	4a0c      	ldr	r2, [pc, #48]	@ (80069b0 <prvInitialiseNewTask+0x150>)
 8006980:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	68f9      	ldr	r1, [r7, #12]
 8006986:	69b8      	ldr	r0, [r7, #24]
 8006988:	f001 fd24 	bl	80083d4 <pxPortInitialiseStack>
 800698c:	4602      	mov	r2, r0
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800699e:	bf00      	nop
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20019ba4 	.word	0x20019ba4
 80069ac:	20019c0c 	.word	0x20019c0c
 80069b0:	20019c74 	.word	0x20019c74

080069b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069bc:	f001 fe16 	bl	80085ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a78 <prvAddNewTaskToReadyList+0xc4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a78 <prvAddNewTaskToReadyList+0xc4>)
 80069c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069ca:	4b2c      	ldr	r3, [pc, #176]	@ (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069d2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069d8:	4b27      	ldr	r3, [pc, #156]	@ (8006a78 <prvAddNewTaskToReadyList+0xc4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d110      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069e0:	f000 fcca 	bl	8007378 <prvInitialiseTaskLists>
 80069e4:	e00d      	b.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069e6:	4b26      	ldr	r3, [pc, #152]	@ (8006a80 <prvAddNewTaskToReadyList+0xcc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ee:	4b23      	ldr	r3, [pc, #140]	@ (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d802      	bhi.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069fc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a02:	4b20      	ldr	r3, [pc, #128]	@ (8006a84 <prvAddNewTaskToReadyList+0xd0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	4a1e      	ldr	r2, [pc, #120]	@ (8006a84 <prvAddNewTaskToReadyList+0xd0>)
 8006a0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a84 <prvAddNewTaskToReadyList+0xd0>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a18:	4b1b      	ldr	r3, [pc, #108]	@ (8006a88 <prvAddNewTaskToReadyList+0xd4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d903      	bls.n	8006a28 <prvAddNewTaskToReadyList+0x74>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	4a18      	ldr	r2, [pc, #96]	@ (8006a88 <prvAddNewTaskToReadyList+0xd4>)
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4a15      	ldr	r2, [pc, #84]	@ (8006a8c <prvAddNewTaskToReadyList+0xd8>)
 8006a36:	441a      	add	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4610      	mov	r0, r2
 8006a40:	f7fe fed9 	bl	80057f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a44:	f001 fe08 	bl	8008658 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a48:	4b0d      	ldr	r3, [pc, #52]	@ (8006a80 <prvAddNewTaskToReadyList+0xcc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a50:	4b0a      	ldr	r3, [pc, #40]	@ (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d207      	bcs.n	8006a6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a90 <prvAddNewTaskToReadyList+0xdc>)
 8006a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2000138c 	.word	0x2000138c
 8006a7c:	20000eb8 	.word	0x20000eb8
 8006a80:	20001398 	.word	0x20001398
 8006a84:	200013a8 	.word	0x200013a8
 8006a88:	20001394 	.word	0x20001394
 8006a8c:	20000ebc 	.word	0x20000ebc
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	@ 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10d      	bne.n	8006ac4 <vTaskDelayUntil+0x30>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	617b      	str	r3, [r7, #20]
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <vTaskDelayUntil+0x52>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	b672      	cpsid	i
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	b662      	cpsie	i
 8006ade:	613b      	str	r3, [r7, #16]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 8006ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8006b94 <vTaskDelayUntil+0x100>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00d      	beq.n	8006b0a <vTaskDelayUntil+0x76>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	b672      	cpsid	i
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	b662      	cpsie	i
 8006b02:	60fb      	str	r3, [r7, #12]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 8006b0a:	f000 f8f5 	bl	8006cf8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006b0e:	4b22      	ldr	r3, [pc, #136]	@ (8006b98 <vTaskDelayUntil+0x104>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d20b      	bcs.n	8006b40 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d211      	bcs.n	8006b56 <vTaskDelayUntil+0xc2>
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d90d      	bls.n	8006b56 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3e:	e00a      	b.n	8006b56 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d303      	bcc.n	8006b52 <vTaskDelayUntil+0xbe>
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d901      	bls.n	8006b56 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 f876 	bl	8007c5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006b70:	f000 f8d0 	bl	8006d14 <xTaskResumeAll>
 8006b74:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d107      	bne.n	8006b8c <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <vTaskDelayUntil+0x108>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b8c:	bf00      	nop
 8006b8e:	3728      	adds	r7, #40	@ 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	200013b4 	.word	0x200013b4
 8006b98:	20001390 	.word	0x20001390
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01a      	beq.n	8006be8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bb2:	4b15      	ldr	r3, [pc, #84]	@ (8006c08 <vTaskDelay+0x68>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <vTaskDelay+0x36>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	b672      	cpsid	i
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	b662      	cpsie	i
 8006bce:	60bb      	str	r3, [r7, #8]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006bd6:	f000 f88f 	bl	8006cf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f83d 	bl	8007c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006be2:	f000 f897 	bl	8006d14 <xTaskResumeAll>
 8006be6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d107      	bne.n	8006bfe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006bee:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <vTaskDelay+0x6c>)
 8006bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200013b4 	.word	0x200013b4
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c1e:	463a      	mov	r2, r7
 8006c20:	1d39      	adds	r1, r7, #4
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fd84 	bl	8005734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	9202      	str	r2, [sp, #8]
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	2300      	movs	r3, #0
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	460a      	mov	r2, r1
 8006c3e:	4926      	ldr	r1, [pc, #152]	@ (8006cd8 <vTaskStartScheduler+0xc8>)
 8006c40:	4826      	ldr	r0, [pc, #152]	@ (8006cdc <vTaskStartScheduler+0xcc>)
 8006c42:	f7ff fd61 	bl	8006708 <xTaskCreateStatic>
 8006c46:	4603      	mov	r3, r0
 8006c48:	4a25      	ldr	r2, [pc, #148]	@ (8006ce0 <vTaskStartScheduler+0xd0>)
 8006c4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c4c:	4b24      	ldr	r3, [pc, #144]	@ (8006ce0 <vTaskStartScheduler+0xd0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c54:	2301      	movs	r3, #1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e001      	b.n	8006c5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d102      	bne.n	8006c6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c64:	f001 f84e 	bl	8007d04 <xTimerCreateTimerTask>
 8006c68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d11d      	bne.n	8006cac <vTaskStartScheduler+0x9c>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	613b      	str	r3, [r7, #16]
}
 8006c86:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c88:	4b16      	ldr	r3, [pc, #88]	@ (8006ce4 <vTaskStartScheduler+0xd4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3354      	adds	r3, #84	@ 0x54
 8006c8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ce8 <vTaskStartScheduler+0xd8>)
 8006c90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c92:	4b16      	ldr	r3, [pc, #88]	@ (8006cec <vTaskStartScheduler+0xdc>)
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c9a:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <vTaskStartScheduler+0xe0>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ca0:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <vTaskStartScheduler+0xe4>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ca6:	f001 fc23 	bl	80084f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006caa:	e011      	b.n	8006cd0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d10d      	bne.n	8006cd0 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	b672      	cpsid	i
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	b662      	cpsie	i
 8006cc8:	60fb      	str	r3, [r7, #12]
}
 8006cca:	bf00      	nop
 8006ccc:	bf00      	nop
 8006cce:	e7fd      	b.n	8006ccc <vTaskStartScheduler+0xbc>
}
 8006cd0:	bf00      	nop
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	0800a2f4 	.word	0x0800a2f4
 8006cdc:	08007349 	.word	0x08007349
 8006ce0:	200013b0 	.word	0x200013b0
 8006ce4:	20000eb8 	.word	0x20000eb8
 8006ce8:	2000001c 	.word	0x2000001c
 8006cec:	200013ac 	.word	0x200013ac
 8006cf0:	20001398 	.word	0x20001398
 8006cf4:	20001390 	.word	0x20001390

08006cf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <vTaskSuspendAll+0x18>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3301      	adds	r3, #1
 8006d02:	4a03      	ldr	r2, [pc, #12]	@ (8006d10 <vTaskSuspendAll+0x18>)
 8006d04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006d06:	bf00      	nop
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	200013b4 	.word	0x200013b4

08006d14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d22:	4b43      	ldr	r3, [pc, #268]	@ (8006e30 <xTaskResumeAll+0x11c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10d      	bne.n	8006d46 <xTaskResumeAll+0x32>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	b672      	cpsid	i
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	b662      	cpsie	i
 8006d3e:	603b      	str	r3, [r7, #0]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d46:	f001 fc51 	bl	80085ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d4a:	4b39      	ldr	r3, [pc, #228]	@ (8006e30 <xTaskResumeAll+0x11c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	4a37      	ldr	r2, [pc, #220]	@ (8006e30 <xTaskResumeAll+0x11c>)
 8006d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d54:	4b36      	ldr	r3, [pc, #216]	@ (8006e30 <xTaskResumeAll+0x11c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d162      	bne.n	8006e22 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d5c:	4b35      	ldr	r3, [pc, #212]	@ (8006e34 <xTaskResumeAll+0x120>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d05e      	beq.n	8006e22 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d64:	e02f      	b.n	8006dc6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d66:	4b34      	ldr	r3, [pc, #208]	@ (8006e38 <xTaskResumeAll+0x124>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3318      	adds	r3, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fd9c 	bl	80058b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fd97 	bl	80058b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	4b2d      	ldr	r3, [pc, #180]	@ (8006e3c <xTaskResumeAll+0x128>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d903      	bls.n	8006d96 <xTaskResumeAll+0x82>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d92:	4a2a      	ldr	r2, [pc, #168]	@ (8006e3c <xTaskResumeAll+0x128>)
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4a27      	ldr	r2, [pc, #156]	@ (8006e40 <xTaskResumeAll+0x12c>)
 8006da4:	441a      	add	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f7fe fd22 	bl	80057f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db6:	4b23      	ldr	r3, [pc, #140]	@ (8006e44 <xTaskResumeAll+0x130>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006dc0:	4b21      	ldr	r3, [pc, #132]	@ (8006e48 <xTaskResumeAll+0x134>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <xTaskResumeAll+0x124>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1cb      	bne.n	8006d66 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dd4:	f000 fb76 	bl	80074c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e4c <xTaskResumeAll+0x138>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006de4:	f000 f846 	bl	8006e74 <xTaskIncrementTick>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006dee:	4b16      	ldr	r3, [pc, #88]	@ (8006e48 <xTaskResumeAll+0x134>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f1      	bne.n	8006de4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006e00:	4b12      	ldr	r3, [pc, #72]	@ (8006e4c <xTaskResumeAll+0x138>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <xTaskResumeAll+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e12:	4b0f      	ldr	r3, [pc, #60]	@ (8006e50 <xTaskResumeAll+0x13c>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e22:	f001 fc19 	bl	8008658 <vPortExitCritical>

	return xAlreadyYielded;
 8006e26:	68bb      	ldr	r3, [r7, #8]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200013b4 	.word	0x200013b4
 8006e34:	2000138c 	.word	0x2000138c
 8006e38:	2000134c 	.word	0x2000134c
 8006e3c:	20001394 	.word	0x20001394
 8006e40:	20000ebc 	.word	0x20000ebc
 8006e44:	20000eb8 	.word	0x20000eb8
 8006e48:	200013a0 	.word	0x200013a0
 8006e4c:	2000139c 	.word	0x2000139c
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e5a:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <xTaskGetTickCount+0x1c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e60:	687b      	ldr	r3, [r7, #4]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	20001390 	.word	0x20001390

08006e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e7e:	4b50      	ldr	r3, [pc, #320]	@ (8006fc0 <xTaskIncrementTick+0x14c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 808c 	bne.w	8006fa0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e88:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc4 <xTaskIncrementTick+0x150>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e90:	4a4c      	ldr	r2, [pc, #304]	@ (8006fc4 <xTaskIncrementTick+0x150>)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d123      	bne.n	8006ee4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc8 <xTaskIncrementTick+0x154>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00d      	beq.n	8006ec2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	b672      	cpsid	i
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	b662      	cpsie	i
 8006eba:	603b      	str	r3, [r7, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <xTaskIncrementTick+0x4a>
 8006ec2:	4b41      	ldr	r3, [pc, #260]	@ (8006fc8 <xTaskIncrementTick+0x154>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	4b40      	ldr	r3, [pc, #256]	@ (8006fcc <xTaskIncrementTick+0x158>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8006fc8 <xTaskIncrementTick+0x154>)
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8006fcc <xTaskIncrementTick+0x158>)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd0 <xTaskIncrementTick+0x15c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4a3c      	ldr	r2, [pc, #240]	@ (8006fd0 <xTaskIncrementTick+0x15c>)
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	f000 faf0 	bl	80074c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fd4 <xTaskIncrementTick+0x160>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d349      	bcc.n	8006f82 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eee:	4b36      	ldr	r3, [pc, #216]	@ (8006fc8 <xTaskIncrementTick+0x154>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef8:	4b36      	ldr	r3, [pc, #216]	@ (8006fd4 <xTaskIncrementTick+0x160>)
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	601a      	str	r2, [r3, #0]
					break;
 8006f00:	e03f      	b.n	8006f82 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f02:	4b31      	ldr	r3, [pc, #196]	@ (8006fc8 <xTaskIncrementTick+0x154>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d203      	bcs.n	8006f22 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8006fd4 <xTaskIncrementTick+0x160>)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f20:	e02f      	b.n	8006f82 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fcc2 	bl	80058b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3318      	adds	r3, #24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fcb9 	bl	80058b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f42:	4b25      	ldr	r3, [pc, #148]	@ (8006fd8 <xTaskIncrementTick+0x164>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d903      	bls.n	8006f52 <xTaskIncrementTick+0xde>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	4a22      	ldr	r2, [pc, #136]	@ (8006fd8 <xTaskIncrementTick+0x164>)
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fdc <xTaskIncrementTick+0x168>)
 8006f60:	441a      	add	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f7fe fc44 	bl	80057f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f72:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe0 <xTaskIncrementTick+0x16c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d3b8      	bcc.n	8006eee <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f80:	e7b5      	b.n	8006eee <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f82:	4b17      	ldr	r3, [pc, #92]	@ (8006fe0 <xTaskIncrementTick+0x16c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f88:	4914      	ldr	r1, [pc, #80]	@ (8006fdc <xTaskIncrementTick+0x168>)
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d907      	bls.n	8006faa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e004      	b.n	8006faa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fa0:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <xTaskIncrementTick+0x170>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8006fe4 <xTaskIncrementTick+0x170>)
 8006fa8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006faa:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <xTaskIncrementTick+0x174>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006fb6:	697b      	ldr	r3, [r7, #20]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200013b4 	.word	0x200013b4
 8006fc4:	20001390 	.word	0x20001390
 8006fc8:	20001344 	.word	0x20001344
 8006fcc:	20001348 	.word	0x20001348
 8006fd0:	200013a4 	.word	0x200013a4
 8006fd4:	200013ac 	.word	0x200013ac
 8006fd8:	20001394 	.word	0x20001394
 8006fdc:	20000ebc 	.word	0x20000ebc
 8006fe0:	20000eb8 	.word	0x20000eb8
 8006fe4:	2000139c 	.word	0x2000139c
 8006fe8:	200013a0 	.word	0x200013a0

08006fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80070a4 <vTaskSwitchContext+0xb8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80070a8 <vTaskSwitchContext+0xbc>)
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007000:	e049      	b.n	8007096 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007002:	4b29      	ldr	r3, [pc, #164]	@ (80070a8 <vTaskSwitchContext+0xbc>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <vTaskSwitchContext+0xc0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e013      	b.n	8007038 <vTaskSwitchContext+0x4c>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10d      	bne.n	8007032 <vTaskSwitchContext+0x46>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	b672      	cpsid	i
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	b662      	cpsie	i
 800702a:	607b      	str	r3, [r7, #4]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <vTaskSwitchContext+0x42>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3b01      	subs	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	491d      	ldr	r1, [pc, #116]	@ (80070b0 <vTaskSwitchContext+0xc4>)
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0e1      	beq.n	8007010 <vTaskSwitchContext+0x24>
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <vTaskSwitchContext+0xc4>)
 8007058:	4413      	add	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3308      	adds	r3, #8
 800706e:	429a      	cmp	r2, r3
 8007070:	d104      	bne.n	800707c <vTaskSwitchContext+0x90>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	605a      	str	r2, [r3, #4]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <vTaskSwitchContext+0xc8>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4a09      	ldr	r2, [pc, #36]	@ (80070ac <vTaskSwitchContext+0xc0>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800708c:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <vTaskSwitchContext+0xc8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3354      	adds	r3, #84	@ 0x54
 8007092:	4a09      	ldr	r2, [pc, #36]	@ (80070b8 <vTaskSwitchContext+0xcc>)
 8007094:	6013      	str	r3, [r2, #0]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	200013b4 	.word	0x200013b4
 80070a8:	200013a0 	.word	0x200013a0
 80070ac:	20001394 	.word	0x20001394
 80070b0:	20000ebc 	.word	0x20000ebc
 80070b4:	20000eb8 	.word	0x20000eb8
 80070b8:	2000001c 	.word	0x2000001c

080070bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10d      	bne.n	80070e8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d0:	b672      	cpsid	i
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	b662      	cpsie	i
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070e8:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <vTaskPlaceOnEventList+0x4c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fe fba4 	bl	800583e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070f6:	2101      	movs	r1, #1
 80070f8:	6838      	ldr	r0, [r7, #0]
 80070fa:	f000 fdaf 	bl	8007c5c <prvAddCurrentTaskToDelayedList>
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000eb8 	.word	0x20000eb8

0800710c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	b672      	cpsid	i
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	b662      	cpsie	i
 8007132:	617b      	str	r3, [r7, #20]
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	e7fd      	b.n	8007136 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <vTaskPlaceOnEventListRestricted+0x58>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3318      	adds	r3, #24
 8007140:	4619      	mov	r1, r3
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7fe fb57 	bl	80057f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800714e:	f04f 33ff 	mov.w	r3, #4294967295
 8007152:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	68b8      	ldr	r0, [r7, #8]
 8007158:	f000 fd80 	bl	8007c5c <prvAddCurrentTaskToDelayedList>
	}
 800715c:	bf00      	nop
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000eb8 	.word	0x20000eb8

08007168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10d      	bne.n	800719a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	b672      	cpsid	i
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	b662      	cpsie	i
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	e7fd      	b.n	8007196 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3318      	adds	r3, #24
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fb86 	bl	80058b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071a4:	4b1d      	ldr	r3, [pc, #116]	@ (800721c <xTaskRemoveFromEventList+0xb4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11d      	bne.n	80071e8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fb7d 	bl	80058b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ba:	4b19      	ldr	r3, [pc, #100]	@ (8007220 <xTaskRemoveFromEventList+0xb8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d903      	bls.n	80071ca <xTaskRemoveFromEventList+0x62>
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	4a16      	ldr	r2, [pc, #88]	@ (8007220 <xTaskRemoveFromEventList+0xb8>)
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4a13      	ldr	r2, [pc, #76]	@ (8007224 <xTaskRemoveFromEventList+0xbc>)
 80071d8:	441a      	add	r2, r3
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fe fb08 	bl	80057f6 <vListInsertEnd>
 80071e6:	e005      	b.n	80071f4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	3318      	adds	r3, #24
 80071ec:	4619      	mov	r1, r3
 80071ee:	480e      	ldr	r0, [pc, #56]	@ (8007228 <xTaskRemoveFromEventList+0xc0>)
 80071f0:	f7fe fb01 	bl	80057f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f8:	4b0c      	ldr	r3, [pc, #48]	@ (800722c <xTaskRemoveFromEventList+0xc4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	429a      	cmp	r2, r3
 8007200:	d905      	bls.n	800720e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007202:	2301      	movs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007206:	4b0a      	ldr	r3, [pc, #40]	@ (8007230 <xTaskRemoveFromEventList+0xc8>)
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e001      	b.n	8007212 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007212:	697b      	ldr	r3, [r7, #20]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200013b4 	.word	0x200013b4
 8007220:	20001394 	.word	0x20001394
 8007224:	20000ebc 	.word	0x20000ebc
 8007228:	2000134c 	.word	0x2000134c
 800722c:	20000eb8 	.word	0x20000eb8
 8007230:	200013a0 	.word	0x200013a0

08007234 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800723c:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <vTaskInternalSetTimeOutState+0x24>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007244:	4b05      	ldr	r3, [pc, #20]	@ (800725c <vTaskInternalSetTimeOutState+0x28>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	605a      	str	r2, [r3, #4]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	200013a4 	.word	0x200013a4
 800725c:	20001390 	.word	0x20001390

08007260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10d      	bne.n	800728c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	b672      	cpsid	i
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	b662      	cpsie	i
 8007284:	613b      	str	r3, [r7, #16]
}
 8007286:	bf00      	nop
 8007288:	bf00      	nop
 800728a:	e7fd      	b.n	8007288 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10d      	bne.n	80072ae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	b672      	cpsid	i
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	b662      	cpsie	i
 80072a6:	60fb      	str	r3, [r7, #12]
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	e7fd      	b.n	80072aa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80072ae:	f001 f99d 	bl	80085ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007328 <xTaskCheckForTimeOut+0xc8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d102      	bne.n	80072d2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e023      	b.n	800731a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b15      	ldr	r3, [pc, #84]	@ (800732c <xTaskCheckForTimeOut+0xcc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d007      	beq.n	80072ee <xTaskCheckForTimeOut+0x8e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d302      	bcc.n	80072ee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072e8:	2301      	movs	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	e015      	b.n	800731a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d20b      	bcs.n	8007310 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1ad2      	subs	r2, r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ff95 	bl	8007234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	e004      	b.n	800731a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007316:	2301      	movs	r3, #1
 8007318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800731a:	f001 f99d 	bl	8008658 <vPortExitCritical>

	return xReturn;
 800731e:	69fb      	ldr	r3, [r7, #28]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20001390 	.word	0x20001390
 800732c:	200013a4 	.word	0x200013a4

08007330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007334:	4b03      	ldr	r3, [pc, #12]	@ (8007344 <vTaskMissedYield+0x14>)
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	bf00      	nop
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	200013a0 	.word	0x200013a0

08007348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007350:	f000 f852 	bl	80073f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007354:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <prvIdleTask+0x28>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d9f9      	bls.n	8007350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800735c:	4b05      	ldr	r3, [pc, #20]	@ (8007374 <prvIdleTask+0x2c>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800736c:	e7f0      	b.n	8007350 <prvIdleTask+0x8>
 800736e:	bf00      	nop
 8007370:	20000ebc 	.word	0x20000ebc
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800737e:	2300      	movs	r3, #0
 8007380:	607b      	str	r3, [r7, #4]
 8007382:	e00c      	b.n	800739e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4a12      	ldr	r2, [pc, #72]	@ (80073d8 <prvInitialiseTaskLists+0x60>)
 8007390:	4413      	add	r3, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fa02 	bl	800579c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3301      	adds	r3, #1
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b37      	cmp	r3, #55	@ 0x37
 80073a2:	d9ef      	bls.n	8007384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073a4:	480d      	ldr	r0, [pc, #52]	@ (80073dc <prvInitialiseTaskLists+0x64>)
 80073a6:	f7fe f9f9 	bl	800579c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073aa:	480d      	ldr	r0, [pc, #52]	@ (80073e0 <prvInitialiseTaskLists+0x68>)
 80073ac:	f7fe f9f6 	bl	800579c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073b0:	480c      	ldr	r0, [pc, #48]	@ (80073e4 <prvInitialiseTaskLists+0x6c>)
 80073b2:	f7fe f9f3 	bl	800579c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073b6:	480c      	ldr	r0, [pc, #48]	@ (80073e8 <prvInitialiseTaskLists+0x70>)
 80073b8:	f7fe f9f0 	bl	800579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073bc:	480b      	ldr	r0, [pc, #44]	@ (80073ec <prvInitialiseTaskLists+0x74>)
 80073be:	f7fe f9ed 	bl	800579c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073c2:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <prvInitialiseTaskLists+0x78>)
 80073c4:	4a05      	ldr	r2, [pc, #20]	@ (80073dc <prvInitialiseTaskLists+0x64>)
 80073c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073c8:	4b0a      	ldr	r3, [pc, #40]	@ (80073f4 <prvInitialiseTaskLists+0x7c>)
 80073ca:	4a05      	ldr	r2, [pc, #20]	@ (80073e0 <prvInitialiseTaskLists+0x68>)
 80073cc:	601a      	str	r2, [r3, #0]
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000ebc 	.word	0x20000ebc
 80073dc:	2000131c 	.word	0x2000131c
 80073e0:	20001330 	.word	0x20001330
 80073e4:	2000134c 	.word	0x2000134c
 80073e8:	20001360 	.word	0x20001360
 80073ec:	20001378 	.word	0x20001378
 80073f0:	20001344 	.word	0x20001344
 80073f4:	20001348 	.word	0x20001348

080073f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073fe:	e019      	b.n	8007434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007400:	f001 f8f4 	bl	80085ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007404:	4b10      	ldr	r3, [pc, #64]	@ (8007448 <prvCheckTasksWaitingTermination+0x50>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fa4d 	bl	80058b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007416:	4b0d      	ldr	r3, [pc, #52]	@ (800744c <prvCheckTasksWaitingTermination+0x54>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3b01      	subs	r3, #1
 800741c:	4a0b      	ldr	r2, [pc, #44]	@ (800744c <prvCheckTasksWaitingTermination+0x54>)
 800741e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007420:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <prvCheckTasksWaitingTermination+0x58>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3b01      	subs	r3, #1
 8007426:	4a0a      	ldr	r2, [pc, #40]	@ (8007450 <prvCheckTasksWaitingTermination+0x58>)
 8007428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800742a:	f001 f915 	bl	8008658 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f810 	bl	8007454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007434:	4b06      	ldr	r3, [pc, #24]	@ (8007450 <prvCheckTasksWaitingTermination+0x58>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e1      	bne.n	8007400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20001360 	.word	0x20001360
 800744c:	2000138c 	.word	0x2000138c
 8007450:	20001374 	.word	0x20001374

08007454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3354      	adds	r3, #84	@ 0x54
 8007460:	4618      	mov	r0, r3
 8007462:	f001 ff07 	bl	8009274 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800746c:	2b00      	cmp	r3, #0
 800746e:	d108      	bne.n	8007482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007474:	4618      	mov	r0, r3
 8007476:	f001 fab5 	bl	80089e4 <vPortFree>
				vPortFree( pxTCB );
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fab2 	bl	80089e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007480:	e01b      	b.n	80074ba <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007488:	2b01      	cmp	r3, #1
 800748a:	d103      	bne.n	8007494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 faa9 	bl	80089e4 <vPortFree>
	}
 8007492:	e012      	b.n	80074ba <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800749a:	2b02      	cmp	r3, #2
 800749c:	d00d      	beq.n	80074ba <prvDeleteTCB+0x66>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	b672      	cpsid	i
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	b662      	cpsie	i
 80074b2:	60fb      	str	r3, [r7, #12]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <prvDeleteTCB+0x62>
	}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074ca:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <prvResetNextTaskUnblockTime+0x38>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <prvResetNextTaskUnblockTime+0x3c>)
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074dc:	e008      	b.n	80074f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074de:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <prvResetNextTaskUnblockTime+0x38>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4a04      	ldr	r2, [pc, #16]	@ (8007500 <prvResetNextTaskUnblockTime+0x3c>)
 80074ee:	6013      	str	r3, [r2, #0]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20001344 	.word	0x20001344
 8007500:	200013ac 	.word	0x200013ac

08007504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <xTaskGetSchedulerState+0x34>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007512:	2301      	movs	r3, #1
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e008      	b.n	800752a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <xTaskGetSchedulerState+0x38>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007520:	2302      	movs	r3, #2
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	e001      	b.n	800752a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007526:	2300      	movs	r3, #0
 8007528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800752a:	687b      	ldr	r3, [r7, #4]
	}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	20001398 	.word	0x20001398
 800753c:	200013b4 	.word	0x200013b4

08007540 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d051      	beq.n	80075fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755a:	4b2a      	ldr	r3, [pc, #168]	@ (8007604 <xTaskPriorityInherit+0xc4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	429a      	cmp	r2, r3
 8007562:	d241      	bcs.n	80075e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	db06      	blt.n	800757a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756c:	4b25      	ldr	r3, [pc, #148]	@ (8007604 <xTaskPriorityInherit+0xc4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007572:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6959      	ldr	r1, [r3, #20]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4a1f      	ldr	r2, [pc, #124]	@ (8007608 <xTaskPriorityInherit+0xc8>)
 800758c:	4413      	add	r3, r2
 800758e:	4299      	cmp	r1, r3
 8007590:	d122      	bne.n	80075d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	3304      	adds	r3, #4
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe f98a 	bl	80058b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800759c:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <xTaskPriorityInherit+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	4b18      	ldr	r3, [pc, #96]	@ (800760c <xTaskPriorityInherit+0xcc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <xTaskPriorityInherit+0x7a>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a15      	ldr	r2, [pc, #84]	@ (800760c <xTaskPriorityInherit+0xcc>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a10      	ldr	r2, [pc, #64]	@ (8007608 <xTaskPriorityInherit+0xc8>)
 80075c8:	441a      	add	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe f910 	bl	80057f6 <vListInsertEnd>
 80075d6:	e004      	b.n	80075e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <xTaskPriorityInherit+0xc4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075e2:	2301      	movs	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	e008      	b.n	80075fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <xTaskPriorityInherit+0xc4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d201      	bcs.n	80075fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075fa:	68fb      	ldr	r3, [r7, #12]
	}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000eb8 	.word	0x20000eb8
 8007608:	20000ebc 	.word	0x20000ebc
 800760c:	20001394 	.word	0x20001394

08007610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800761c:	2300      	movs	r3, #0
 800761e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d05c      	beq.n	80076e0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007626:	4b31      	ldr	r3, [pc, #196]	@ (80076ec <xTaskPriorityDisinherit+0xdc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d00d      	beq.n	800764c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	b672      	cpsid	i
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	b662      	cpsie	i
 8007644:	60fb      	str	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	bf00      	nop
 800764a:	e7fd      	b.n	8007648 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10d      	bne.n	8007670 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	b672      	cpsid	i
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	b662      	cpsie	i
 8007668:	60bb      	str	r3, [r7, #8]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007674:	1e5a      	subs	r2, r3, #1
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007682:	429a      	cmp	r2, r3
 8007684:	d02c      	beq.n	80076e0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768a:	2b00      	cmp	r3, #0
 800768c:	d128      	bne.n	80076e0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe f90c 	bl	80058b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b0:	4b0f      	ldr	r3, [pc, #60]	@ (80076f0 <xTaskPriorityDisinherit+0xe0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d903      	bls.n	80076c0 <xTaskPriorityDisinherit+0xb0>
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <xTaskPriorityDisinherit+0xe0>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a09      	ldr	r2, [pc, #36]	@ (80076f4 <xTaskPriorityDisinherit+0xe4>)
 80076ce:	441a      	add	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7fe f88d 	bl	80057f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e0:	697b      	ldr	r3, [r7, #20]
	}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000eb8 	.word	0x20000eb8
 80076f0:	20001394 	.word	0x20001394
 80076f4:	20000ebc 	.word	0x20000ebc

080076f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007706:	2301      	movs	r3, #1
 8007708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d070      	beq.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10d      	bne.n	8007734 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	b672      	cpsid	i
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	b662      	cpsie	i
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d902      	bls.n	8007744 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	61fb      	str	r3, [r7, #28]
 8007742:	e002      	b.n	800774a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007748:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	429a      	cmp	r2, r3
 8007752:	d04e      	beq.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	429a      	cmp	r2, r3
 800775c:	d149      	bne.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800775e:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	429a      	cmp	r2, r3
 8007766:	d10d      	bne.n	8007784 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	b672      	cpsid	i
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	b662      	cpsie	i
 800777c:	60bb      	str	r3, [r7, #8]
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	db04      	blt.n	80077a2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	6959      	ldr	r1, [r3, #20]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a13      	ldr	r2, [pc, #76]	@ (8007800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80077b2:	4413      	add	r3, r2
 80077b4:	4299      	cmp	r1, r3
 80077b6:	d11c      	bne.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe f877 	bl	80058b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d903      	bls.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007804 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4a07      	ldr	r2, [pc, #28]	@ (8007800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80077e4:	441a      	add	r2, r3
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7fe f802 	bl	80057f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077f2:	bf00      	nop
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000eb8 	.word	0x20000eb8
 8007800:	20000ebc 	.word	0x20000ebc
 8007804:	20001394 	.word	0x20001394

08007808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800780c:	4b07      	ldr	r3, [pc, #28]	@ (800782c <pvTaskIncrementMutexHeldCount+0x24>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007814:	4b05      	ldr	r3, [pc, #20]	@ (800782c <pvTaskIncrementMutexHeldCount+0x24>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800781a:	3201      	adds	r2, #1
 800781c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800781e:	4b03      	ldr	r3, [pc, #12]	@ (800782c <pvTaskIncrementMutexHeldCount+0x24>)
 8007820:	681b      	ldr	r3, [r3, #0]
	}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20000eb8 	.word	0x20000eb8

08007830 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800783e:	f000 fed5 	bl	80085ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007842:	4b29      	ldr	r3, [pc, #164]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d01c      	beq.n	800788a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007850:	4b25      	ldr	r3, [pc, #148]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	43d2      	mvns	r2, r2
 800785c:	400a      	ands	r2, r1
 800785e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007862:	4b21      	ldr	r3, [pc, #132]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007872:	2101      	movs	r1, #1
 8007874:	6838      	ldr	r0, [r7, #0]
 8007876:	f000 f9f1 	bl	8007c5c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800787a:	4b1c      	ldr	r3, [pc, #112]	@ (80078ec <xTaskNotifyWait+0xbc>)
 800787c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800788a:	f000 fee5 	bl	8008658 <vPortExitCritical>

		taskENTER_CRITICAL();
 800788e:	f000 fead 	bl	80085ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007898:	4b13      	ldr	r3, [pc, #76]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80078a4:	4b10      	ldr	r3, [pc, #64]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d002      	beq.n	80078b8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e00a      	b.n	80078ce <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80078b8:	4b0b      	ldr	r3, [pc, #44]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	43d2      	mvns	r2, r2
 80078c4:	400a      	ands	r2, r1
 80078c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80078ca:	2301      	movs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078ce:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <xTaskNotifyWait+0xb8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80078d8:	f000 febe 	bl	8008658 <vPortExitCritical>

		return xReturn;
 80078dc:	697b      	ldr	r3, [r7, #20]
	}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000eb8 	.word	0x20000eb8
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	@ 0x28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	4613      	mov	r3, r2
 80078fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007900:	2301      	movs	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10d      	bne.n	8007926 <xTaskGenericNotify+0x36>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	b672      	cpsid	i
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	b662      	cpsie	i
 800791e:	61bb      	str	r3, [r7, #24]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800792a:	f000 fe5f 	bl	80085ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007944:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	2b04      	cmp	r3, #4
 8007952:	d82e      	bhi.n	80079b2 <xTaskGenericNotify+0xc2>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <xTaskGenericNotify+0x6c>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	080079db 	.word	0x080079db
 8007960:	08007971 	.word	0x08007971
 8007964:	08007983 	.word	0x08007983
 8007968:	08007993 	.word	0x08007993
 800796c:	0800799d 	.word	0x0800799d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	431a      	orrs	r2, r3
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007980:	e02e      	b.n	80079e0 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007990:	e026      	b.n	80079e0 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800799a:	e021      	b.n	80079e0 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800799c:	7ffb      	ldrb	r3, [r7, #31]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d004      	beq.n	80079ac <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80079aa:	e019      	b.n	80079e0 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80079b0:	e016      	b.n	80079e0 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d00f      	beq.n	80079de <xTaskGenericNotify+0xee>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	b672      	cpsid	i
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	b662      	cpsie	i
 80079d2:	617b      	str	r3, [r7, #20]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <xTaskGenericNotify+0xe6>
					break;
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <xTaskGenericNotify+0xf0>

					break;
 80079de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079e0:	7ffb      	ldrb	r3, [r7, #31]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d13d      	bne.n	8007a62 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd ff60 	bl	80058b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007a70 <xTaskGenericNotify+0x180>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d903      	bls.n	8007a04 <xTaskGenericNotify+0x114>
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4a1b      	ldr	r2, [pc, #108]	@ (8007a70 <xTaskGenericNotify+0x180>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a18      	ldr	r2, [pc, #96]	@ (8007a74 <xTaskGenericNotify+0x184>)
 8007a12:	441a      	add	r2, r3
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fd feeb 	bl	80057f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <xTaskGenericNotify+0x154>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	613b      	str	r3, [r7, #16]
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	e7fd      	b.n	8007a40 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a48:	4b0b      	ldr	r3, [pc, #44]	@ (8007a78 <xTaskGenericNotify+0x188>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d907      	bls.n	8007a62 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007a52:	4b0a      	ldr	r3, [pc, #40]	@ (8007a7c <xTaskGenericNotify+0x18c>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007a62:	f000 fdf9 	bl	8008658 <vPortExitCritical>

		return xReturn;
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3728      	adds	r7, #40	@ 0x28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20001394 	.word	0x20001394
 8007a74:	20000ebc 	.word	0x20000ebc
 8007a78:	20000eb8 	.word	0x20000eb8
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08e      	sub	sp, #56	@ 0x38
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007a90:	2301      	movs	r3, #1
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10d      	bne.n	8007ab6 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	b672      	cpsid	i
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	b662      	cpsie	i
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	e7fd      	b.n	8007ab2 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ab6:	f000 fe81 	bl	80087bc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007abe:	f3ef 8211 	mrs	r2, BASEPRI
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	b672      	cpsid	i
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	b662      	cpsie	i
 8007ad6:	623a      	str	r2, [r7, #32]
 8007ad8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007ada:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d82e      	bhi.n	8007b64 <xTaskGenericNotifyFromISR+0xe4>
 8007b06:	a201      	add	r2, pc, #4	@ (adr r2, 8007b0c <xTaskGenericNotifyFromISR+0x8c>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b8d 	.word	0x08007b8d
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b33 	.word	0x08007b33
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b4d 	.word	0x08007b4d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007b30:	e02f      	b.n	8007b92 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007b40:	e027      	b.n	8007b92 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007b4a:	e022      	b.n	8007b92 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d004      	beq.n	8007b5e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007b5c:	e019      	b.n	8007b92 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007b62:	e016      	b.n	8007b92 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d00f      	beq.n	8007b90 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	61bb      	str	r3, [r7, #24]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <xTaskGenericNotifyFromISR+0x108>
					break;
 8007b8c:	bf00      	nop
 8007b8e:	e000      	b.n	8007b92 <xTaskGenericNotifyFromISR+0x112>
					break;
 8007b90:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d149      	bne.n	8007c2e <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00d      	beq.n	8007bbe <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	617b      	str	r3, [r7, #20]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbe:	4b21      	ldr	r3, [pc, #132]	@ (8007c44 <xTaskGenericNotifyFromISR+0x1c4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d11d      	bne.n	8007c02 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fd fe70 	bl	80058b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <xTaskGenericNotifyFromISR+0x1c8>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d903      	bls.n	8007be4 <xTaskGenericNotifyFromISR+0x164>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be0:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <xTaskGenericNotifyFromISR+0x1c8>)
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4a16      	ldr	r2, [pc, #88]	@ (8007c4c <xTaskGenericNotifyFromISR+0x1cc>)
 8007bf2:	441a      	add	r2, r3
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f7fd fdfb 	bl	80057f6 <vListInsertEnd>
 8007c00:	e005      	b.n	8007c0e <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	3318      	adds	r3, #24
 8007c06:	4619      	mov	r1, r3
 8007c08:	4811      	ldr	r0, [pc, #68]	@ (8007c50 <xTaskGenericNotifyFromISR+0x1d0>)
 8007c0a:	f7fd fdf4 	bl	80057f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c12:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <xTaskGenericNotifyFromISR+0x1d4>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d908      	bls.n	8007c2e <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007c28:	4b0b      	ldr	r3, [pc, #44]	@ (8007c58 <xTaskGenericNotifyFromISR+0x1d8>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f383 8811 	msr	BASEPRI, r3
}
 8007c38:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3738      	adds	r7, #56	@ 0x38
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	200013b4 	.word	0x200013b4
 8007c48:	20001394 	.word	0x20001394
 8007c4c:	20000ebc 	.word	0x20000ebc
 8007c50:	2000134c 	.word	0x2000134c
 8007c54:	20000eb8 	.word	0x20000eb8
 8007c58:	200013a0 	.word	0x200013a0

08007c5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c66:	4b21      	ldr	r3, [pc, #132]	@ (8007cec <prvAddCurrentTaskToDelayedList+0x90>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c6c:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd fe1c 	bl	80058b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d10a      	bne.n	8007c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c86:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4819      	ldr	r0, [pc, #100]	@ (8007cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c90:	f7fd fdb1 	bl	80057f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c94:	e026      	b.n	8007ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c9e:	4b14      	ldr	r3, [pc, #80]	@ (8007cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d209      	bcs.n	8007cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cae:	4b12      	ldr	r3, [pc, #72]	@ (8007cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7fd fdbf 	bl	800583e <vListInsert>
}
 8007cc0:	e010      	b.n	8007ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fd fdb5 	bl	800583e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d202      	bcs.n	8007ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007cde:	4a08      	ldr	r2, [pc, #32]	@ (8007d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6013      	str	r3, [r2, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20001390 	.word	0x20001390
 8007cf0:	20000eb8 	.word	0x20000eb8
 8007cf4:	20001378 	.word	0x20001378
 8007cf8:	20001348 	.word	0x20001348
 8007cfc:	20001344 	.word	0x20001344
 8007d00:	200013ac 	.word	0x200013ac

08007d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08a      	sub	sp, #40	@ 0x28
 8007d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d0e:	f000 fb21 	bl	8008354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d12:	4b1e      	ldr	r3, [pc, #120]	@ (8007d8c <xTimerCreateTimerTask+0x88>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d021      	beq.n	8007d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d22:	1d3a      	adds	r2, r7, #4
 8007d24:	f107 0108 	add.w	r1, r7, #8
 8007d28:	f107 030c 	add.w	r3, r7, #12
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fd fd1b 	bl	8005768 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	9202      	str	r2, [sp, #8]
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2300      	movs	r3, #0
 8007d42:	460a      	mov	r2, r1
 8007d44:	4912      	ldr	r1, [pc, #72]	@ (8007d90 <xTimerCreateTimerTask+0x8c>)
 8007d46:	4813      	ldr	r0, [pc, #76]	@ (8007d94 <xTimerCreateTimerTask+0x90>)
 8007d48:	f7fe fcde 	bl	8006708 <xTaskCreateStatic>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	4a12      	ldr	r2, [pc, #72]	@ (8007d98 <xTimerCreateTimerTask+0x94>)
 8007d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d52:	4b11      	ldr	r3, [pc, #68]	@ (8007d98 <xTimerCreateTimerTask+0x94>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10d      	bne.n	8007d80 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	b672      	cpsid	i
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	b662      	cpsie	i
 8007d78:	613b      	str	r3, [r7, #16]
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007d80:	697b      	ldr	r3, [r7, #20]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	200013e8 	.word	0x200013e8
 8007d90:	0800a2fc 	.word	0x0800a2fc
 8007d94:	08007edd 	.word	0x08007edd
 8007d98:	200013ec 	.word	0x200013ec

08007d9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	@ 0x28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10d      	bne.n	8007dd0 <xTimerGenericCommand+0x34>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db8:	b672      	cpsid	i
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	b662      	cpsie	i
 8007dc8:	623b      	str	r3, [r7, #32]
}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	e7fd      	b.n	8007dcc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007dd0:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <xTimerGenericCommand+0x9c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d02a      	beq.n	8007e2e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	dc18      	bgt.n	8007e1c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dea:	f7ff fb8b 	bl	8007504 <xTaskGetSchedulerState>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d109      	bne.n	8007e08 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007df4:	4b10      	ldr	r3, [pc, #64]	@ (8007e38 <xTimerGenericCommand+0x9c>)
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	f107 0110 	add.w	r1, r7, #16
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e00:	f7fd ff0c 	bl	8005c1c <xQueueGenericSend>
 8007e04:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e06:	e012      	b.n	8007e2e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e08:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <xTimerGenericCommand+0x9c>)
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	f107 0110 	add.w	r1, r7, #16
 8007e10:	2300      	movs	r3, #0
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7fd ff02 	bl	8005c1c <xQueueGenericSend>
 8007e18:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e1a:	e008      	b.n	8007e2e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <xTimerGenericCommand+0x9c>)
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	f107 0110 	add.w	r1, r7, #16
 8007e24:	2300      	movs	r3, #0
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	f7fe f802 	bl	8005e30 <xQueueGenericSendFromISR>
 8007e2c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3728      	adds	r7, #40	@ 0x28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	200013e8 	.word	0x200013e8

08007e3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e46:	4b24      	ldr	r3, [pc, #144]	@ (8007ed8 <prvProcessExpiredTimer+0x9c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3304      	adds	r3, #4
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fd fd2b 	bl	80058b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d025      	beq.n	8007eb4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	18d1      	adds	r1, r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	6978      	ldr	r0, [r7, #20]
 8007e76:	f000 f8d7 	bl	8008028 <prvInsertTimerInActiveList>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d022      	beq.n	8007ec6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e80:	2300      	movs	r3, #0
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6978      	ldr	r0, [r7, #20]
 8007e8c:	f7ff ff86 	bl	8007d9c <xTimerGenericCommand>
 8007e90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d116      	bne.n	8007ec6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	b672      	cpsid	i
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	b662      	cpsie	i
 8007eac:	60fb      	str	r3, [r7, #12]
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eba:	f023 0301 	bic.w	r3, r3, #1
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	6978      	ldr	r0, [r7, #20]
 8007ecc:	4798      	blx	r3
}
 8007ece:	bf00      	nop
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200013e0 	.word	0x200013e0

08007edc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ee4:	f107 0308 	add.w	r3, r7, #8
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 f859 	bl	8007fa0 <prvGetNextExpireTime>
 8007eee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f805 	bl	8007f04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007efa:	f000 f8d7 	bl	80080ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007efe:	bf00      	nop
 8007f00:	e7f0      	b.n	8007ee4 <prvTimerTask+0x8>
	...

08007f04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f0e:	f7fe fef3 	bl	8006cf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f12:	f107 0308 	add.w	r3, r7, #8
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f866 	bl	8007fe8 <prvSampleTimeNow>
 8007f1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d130      	bne.n	8007f86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <prvProcessTimerOrBlockTask+0x3c>
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d806      	bhi.n	8007f40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f32:	f7fe feef 	bl	8006d14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f36:	68f9      	ldr	r1, [r7, #12]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ff7f 	bl	8007e3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f3e:	e024      	b.n	8007f8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d008      	beq.n	8007f58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f46:	4b13      	ldr	r3, [pc, #76]	@ (8007f94 <prvProcessTimerOrBlockTask+0x90>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <prvProcessTimerOrBlockTask+0x50>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <prvProcessTimerOrBlockTask+0x52>
 8007f54:	2300      	movs	r3, #0
 8007f56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f58:	4b0f      	ldr	r3, [pc, #60]	@ (8007f98 <prvProcessTimerOrBlockTask+0x94>)
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	f7fe fb9b 	bl	80066a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f6a:	f7fe fed3 	bl	8006d14 <xTaskResumeAll>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f74:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <prvProcessTimerOrBlockTask+0x98>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
}
 8007f84:	e001      	b.n	8007f8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f86:	f7fe fec5 	bl	8006d14 <xTaskResumeAll>
}
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	200013e4 	.word	0x200013e4
 8007f98:	200013e8 	.word	0x200013e8
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe4 <prvGetNextExpireTime+0x44>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <prvGetNextExpireTime+0x16>
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	e000      	b.n	8007fb8 <prvGetNextExpireTime+0x18>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fc4:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <prvGetNextExpireTime+0x44>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	e001      	b.n	8007fd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	200013e0 	.word	0x200013e0

08007fe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ff0:	f7fe ff30 	bl	8006e54 <xTaskGetTickCount>
 8007ff4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8008024 <prvSampleTimeNow+0x3c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d205      	bcs.n	800800c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008000:	f000 f940 	bl	8008284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e002      	b.n	8008012 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008012:	4a04      	ldr	r2, [pc, #16]	@ (8008024 <prvSampleTimeNow+0x3c>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008018:	68fb      	ldr	r3, [r7, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200013f0 	.word	0x200013f0

08008028 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	429a      	cmp	r2, r3
 800804c:	d812      	bhi.n	8008074 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	1ad2      	subs	r2, r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	429a      	cmp	r2, r3
 800805a:	d302      	bcc.n	8008062 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800805c:	2301      	movs	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e01b      	b.n	800809a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <prvInsertTimerInActiveList+0x7c>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3304      	adds	r3, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f7fd fbe6 	bl	800583e <vListInsert>
 8008072:	e012      	b.n	800809a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d206      	bcs.n	800808a <prvInsertTimerInActiveList+0x62>
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d302      	bcc.n	800808a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e007      	b.n	800809a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <prvInsertTimerInActiveList+0x80>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3304      	adds	r3, #4
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f7fd fbd2 	bl	800583e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800809a:	697b      	ldr	r3, [r7, #20]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200013e4 	.word	0x200013e4
 80080a8:	200013e0 	.word	0x200013e0

080080ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08e      	sub	sp, #56	@ 0x38
 80080b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080b2:	e0d4      	b.n	800825e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	da1b      	bge.n	80080f2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	3304      	adds	r3, #4
 80080be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	b672      	cpsid	i
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	b662      	cpsie	i
 80080da:	61fb      	str	r3, [r7, #28]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080e8:	6850      	ldr	r0, [r2, #4]
 80080ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ec:	6892      	ldr	r2, [r2, #8]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f2c0 80b2 	blt.w	800825e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7fd fbd0 	bl	80058b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008110:	463b      	mov	r3, r7
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff ff68 	bl	8007fe8 <prvSampleTimeNow>
 8008118:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b09      	cmp	r3, #9
 800811e:	f200 809b 	bhi.w	8008258 <prvProcessReceivedCommands+0x1ac>
 8008122:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <prvProcessReceivedCommands+0x7c>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	08008151 	.word	0x08008151
 800812c:	08008151 	.word	0x08008151
 8008130:	08008151 	.word	0x08008151
 8008134:	080081cb 	.word	0x080081cb
 8008138:	080081df 	.word	0x080081df
 800813c:	0800822f 	.word	0x0800822f
 8008140:	08008151 	.word	0x08008151
 8008144:	08008151 	.word	0x08008151
 8008148:	080081cb 	.word	0x080081cb
 800814c:	080081df 	.word	0x080081df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008156:	f043 0301 	orr.w	r3, r3, #1
 800815a:	b2da      	uxtb	r2, r3
 800815c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	18d1      	adds	r1, r2, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800816e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008170:	f7ff ff5a 	bl	8008028 <prvInsertTimerInActiveList>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d070      	beq.n	800825c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d065      	beq.n	800825c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	441a      	add	r2, r3
 8008198:	2300      	movs	r3, #0
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	2300      	movs	r3, #0
 800819e:	2100      	movs	r1, #0
 80081a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a2:	f7ff fdfb 	bl	8007d9c <xTimerGenericCommand>
 80081a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d156      	bne.n	800825c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	b672      	cpsid	i
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	b662      	cpsie	i
 80081c2:	61bb      	str	r3, [r7, #24]
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d0:	f023 0301 	bic.w	r3, r3, #1
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081dc:	e03f      	b.n	800825e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10d      	bne.n	800821a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	b672      	cpsid	i
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	b662      	cpsie	i
 8008212:	617b      	str	r3, [r7, #20]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	18d1      	adds	r1, r2, r3
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008228:	f7ff fefe 	bl	8008028 <prvInsertTimerInActiveList>
					break;
 800822c:	e017      	b.n	800825e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800823c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800823e:	f000 fbd1 	bl	80089e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008242:	e00c      	b.n	800825e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800824a:	f023 0301 	bic.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008256:	e002      	b.n	800825e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008258:	bf00      	nop
 800825a:	e000      	b.n	800825e <prvProcessReceivedCommands+0x1b2>
					break;
 800825c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800825e:	4b08      	ldr	r3, [pc, #32]	@ (8008280 <prvProcessReceivedCommands+0x1d4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	1d39      	adds	r1, r7, #4
 8008264:	2200      	movs	r2, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f7fd fe86 	bl	8005f78 <xQueueReceive>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	f47f af20 	bne.w	80080b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	3730      	adds	r7, #48	@ 0x30
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	200013e8 	.word	0x200013e8

08008284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800828a:	e04b      	b.n	8008324 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800828c:	4b2f      	ldr	r3, [pc, #188]	@ (800834c <prvSwitchTimerLists+0xc8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008296:	4b2d      	ldr	r3, [pc, #180]	@ (800834c <prvSwitchTimerLists+0xc8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fd fb03 	bl	80058b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d031      	beq.n	8008324 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d90e      	bls.n	80082f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082de:	4b1b      	ldr	r3, [pc, #108]	@ (800834c <prvSwitchTimerLists+0xc8>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3304      	adds	r3, #4
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f7fd faa8 	bl	800583e <vListInsert>
 80082ee:	e019      	b.n	8008324 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082f0:	2300      	movs	r3, #0
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	2100      	movs	r1, #0
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fd4e 	bl	8007d9c <xTimerGenericCommand>
 8008300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10d      	bne.n	8008324 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	b672      	cpsid	i
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	b662      	cpsie	i
 800831c:	603b      	str	r3, [r7, #0]
}
 800831e:	bf00      	nop
 8008320:	bf00      	nop
 8008322:	e7fd      	b.n	8008320 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008324:	4b09      	ldr	r3, [pc, #36]	@ (800834c <prvSwitchTimerLists+0xc8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1ae      	bne.n	800828c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <prvSwitchTimerLists+0xc8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008334:	4b06      	ldr	r3, [pc, #24]	@ (8008350 <prvSwitchTimerLists+0xcc>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a04      	ldr	r2, [pc, #16]	@ (800834c <prvSwitchTimerLists+0xc8>)
 800833a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800833c:	4a04      	ldr	r2, [pc, #16]	@ (8008350 <prvSwitchTimerLists+0xcc>)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6013      	str	r3, [r2, #0]
}
 8008342:	bf00      	nop
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	200013e0 	.word	0x200013e0
 8008350:	200013e4 	.word	0x200013e4

08008354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800835a:	f000 f947 	bl	80085ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800835e:	4b15      	ldr	r3, [pc, #84]	@ (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d120      	bne.n	80083a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008366:	4814      	ldr	r0, [pc, #80]	@ (80083b8 <prvCheckForValidListAndQueue+0x64>)
 8008368:	f7fd fa18 	bl	800579c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800836c:	4813      	ldr	r0, [pc, #76]	@ (80083bc <prvCheckForValidListAndQueue+0x68>)
 800836e:	f7fd fa15 	bl	800579c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008372:	4b13      	ldr	r3, [pc, #76]	@ (80083c0 <prvCheckForValidListAndQueue+0x6c>)
 8008374:	4a10      	ldr	r2, [pc, #64]	@ (80083b8 <prvCheckForValidListAndQueue+0x64>)
 8008376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008378:	4b12      	ldr	r3, [pc, #72]	@ (80083c4 <prvCheckForValidListAndQueue+0x70>)
 800837a:	4a10      	ldr	r2, [pc, #64]	@ (80083bc <prvCheckForValidListAndQueue+0x68>)
 800837c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800837e:	2300      	movs	r3, #0
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	4b11      	ldr	r3, [pc, #68]	@ (80083c8 <prvCheckForValidListAndQueue+0x74>)
 8008384:	4a11      	ldr	r2, [pc, #68]	@ (80083cc <prvCheckForValidListAndQueue+0x78>)
 8008386:	2110      	movs	r1, #16
 8008388:	200a      	movs	r0, #10
 800838a:	f7fd fb27 	bl	80059dc <xQueueGenericCreateStatic>
 800838e:	4603      	mov	r3, r0
 8008390:	4a08      	ldr	r2, [pc, #32]	@ (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008394:	4b07      	ldr	r3, [pc, #28]	@ (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <prvCheckForValidListAndQueue+0x60>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	490b      	ldr	r1, [pc, #44]	@ (80083d0 <prvCheckForValidListAndQueue+0x7c>)
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe f952 	bl	800664c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083a8:	f000 f956 	bl	8008658 <vPortExitCritical>
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200013e8 	.word	0x200013e8
 80083b8:	200013b8 	.word	0x200013b8
 80083bc:	200013cc 	.word	0x200013cc
 80083c0:	200013e0 	.word	0x200013e0
 80083c4:	200013e4 	.word	0x200013e4
 80083c8:	20001494 	.word	0x20001494
 80083cc:	200013f4 	.word	0x200013f4
 80083d0:	0800a304 	.word	0x0800a304

080083d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3b04      	subs	r3, #4
 80083e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3b04      	subs	r3, #4
 80083f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3b04      	subs	r3, #4
 8008402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008404:	4a0c      	ldr	r2, [pc, #48]	@ (8008438 <pxPortInitialiseStack+0x64>)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3b14      	subs	r3, #20
 800840e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3b04      	subs	r3, #4
 800841a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f06f 0202 	mvn.w	r2, #2
 8008422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3b20      	subs	r3, #32
 8008428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	0800843d 	.word	0x0800843d

0800843c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008446:	4b15      	ldr	r3, [pc, #84]	@ (800849c <prvTaskExitError+0x60>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844e:	d00d      	beq.n	800846c <prvTaskExitError+0x30>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	b672      	cpsid	i
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	b662      	cpsie	i
 8008464:	60fb      	str	r3, [r7, #12]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <prvTaskExitError+0x2c>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	60bb      	str	r3, [r7, #8]
}
 8008482:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008484:	bf00      	nop
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0fc      	beq.n	8008486 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	2000000c 	.word	0x2000000c

080084a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084a0:	4b07      	ldr	r3, [pc, #28]	@ (80084c0 <pxCurrentTCBConst2>)
 80084a2:	6819      	ldr	r1, [r3, #0]
 80084a4:	6808      	ldr	r0, [r1, #0]
 80084a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084aa:	f380 8809 	msr	PSP, r0
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f380 8811 	msr	BASEPRI, r0
 80084ba:	4770      	bx	lr
 80084bc:	f3af 8000 	nop.w

080084c0 <pxCurrentTCBConst2>:
 80084c0:	20000eb8 	.word	0x20000eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop

080084c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084c8:	4808      	ldr	r0, [pc, #32]	@ (80084ec <prvPortStartFirstTask+0x24>)
 80084ca:	6800      	ldr	r0, [r0, #0]
 80084cc:	6800      	ldr	r0, [r0, #0]
 80084ce:	f380 8808 	msr	MSP, r0
 80084d2:	f04f 0000 	mov.w	r0, #0
 80084d6:	f380 8814 	msr	CONTROL, r0
 80084da:	b662      	cpsie	i
 80084dc:	b661      	cpsie	f
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	df00      	svc	0
 80084e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ea:	bf00      	nop
 80084ec:	e000ed08 	.word	0xe000ed08

080084f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084f6:	4b37      	ldr	r3, [pc, #220]	@ (80085d4 <xPortStartScheduler+0xe4>)
 80084f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	22ff      	movs	r2, #255	@ 0xff
 8008506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008518:	b2da      	uxtb	r2, r3
 800851a:	4b2f      	ldr	r3, [pc, #188]	@ (80085d8 <xPortStartScheduler+0xe8>)
 800851c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800851e:	4b2f      	ldr	r3, [pc, #188]	@ (80085dc <xPortStartScheduler+0xec>)
 8008520:	2207      	movs	r2, #7
 8008522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008524:	e009      	b.n	800853a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008526:	4b2d      	ldr	r3, [pc, #180]	@ (80085dc <xPortStartScheduler+0xec>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3b01      	subs	r3, #1
 800852c:	4a2b      	ldr	r2, [pc, #172]	@ (80085dc <xPortStartScheduler+0xec>)
 800852e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	b2db      	uxtb	r3, r3
 8008538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008542:	2b80      	cmp	r3, #128	@ 0x80
 8008544:	d0ef      	beq.n	8008526 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008546:	4b25      	ldr	r3, [pc, #148]	@ (80085dc <xPortStartScheduler+0xec>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1c3 0307 	rsb	r3, r3, #7
 800854e:	2b04      	cmp	r3, #4
 8008550:	d00d      	beq.n	800856e <xPortStartScheduler+0x7e>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	b672      	cpsid	i
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	b662      	cpsie	i
 8008566:	60bb      	str	r3, [r7, #8]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800856e:	4b1b      	ldr	r3, [pc, #108]	@ (80085dc <xPortStartScheduler+0xec>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	4a19      	ldr	r2, [pc, #100]	@ (80085dc <xPortStartScheduler+0xec>)
 8008576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008578:	4b18      	ldr	r3, [pc, #96]	@ (80085dc <xPortStartScheduler+0xec>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008580:	4a16      	ldr	r2, [pc, #88]	@ (80085dc <xPortStartScheduler+0xec>)
 8008582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	b2da      	uxtb	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <xPortStartScheduler+0xf0>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a13      	ldr	r2, [pc, #76]	@ (80085e0 <xPortStartScheduler+0xf0>)
 8008592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008598:	4b11      	ldr	r3, [pc, #68]	@ (80085e0 <xPortStartScheduler+0xf0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a10      	ldr	r2, [pc, #64]	@ (80085e0 <xPortStartScheduler+0xf0>)
 800859e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085a4:	f000 f8dc 	bl	8008760 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085a8:	4b0e      	ldr	r3, [pc, #56]	@ (80085e4 <xPortStartScheduler+0xf4>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085ae:	f000 f8fb 	bl	80087a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <xPortStartScheduler+0xf8>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a0c      	ldr	r2, [pc, #48]	@ (80085e8 <xPortStartScheduler+0xf8>)
 80085b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085be:	f7ff ff83 	bl	80084c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085c2:	f7fe fd13 	bl	8006fec <vTaskSwitchContext>
	prvTaskExitError();
 80085c6:	f7ff ff39 	bl	800843c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	e000e400 	.word	0xe000e400
 80085d8:	200014e4 	.word	0x200014e4
 80085dc:	200014e8 	.word	0x200014e8
 80085e0:	e000ed20 	.word	0xe000ed20
 80085e4:	2000000c 	.word	0x2000000c
 80085e8:	e000ef34 	.word	0xe000ef34

080085ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	b672      	cpsid	i
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	b662      	cpsie	i
 8008606:	607b      	str	r3, [r7, #4]
}
 8008608:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800860a:	4b11      	ldr	r3, [pc, #68]	@ (8008650 <vPortEnterCritical+0x64>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	4a0f      	ldr	r2, [pc, #60]	@ (8008650 <vPortEnterCritical+0x64>)
 8008612:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008614:	4b0e      	ldr	r3, [pc, #56]	@ (8008650 <vPortEnterCritical+0x64>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d112      	bne.n	8008642 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800861c:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <vPortEnterCritical+0x68>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <vPortEnterCritical+0x56>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	b672      	cpsid	i
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	b662      	cpsie	i
 800863a:	603b      	str	r3, [r7, #0]
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	e7fd      	b.n	800863e <vPortEnterCritical+0x52>
	}
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	2000000c 	.word	0x2000000c
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800865e:	4b13      	ldr	r3, [pc, #76]	@ (80086ac <vPortExitCritical+0x54>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10d      	bne.n	8008682 <vPortExitCritical+0x2a>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	b672      	cpsid	i
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	b662      	cpsie	i
 800867a:	607b      	str	r3, [r7, #4]
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	e7fd      	b.n	800867e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008682:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <vPortExitCritical+0x54>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3b01      	subs	r3, #1
 8008688:	4a08      	ldr	r2, [pc, #32]	@ (80086ac <vPortExitCritical+0x54>)
 800868a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800868c:	4b07      	ldr	r3, [pc, #28]	@ (80086ac <vPortExitCritical+0x54>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d105      	bne.n	80086a0 <vPortExitCritical+0x48>
 8008694:	2300      	movs	r3, #0
 8008696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f383 8811 	msr	BASEPRI, r3
}
 800869e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	2000000c 	.word	0x2000000c

080086b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086b0:	f3ef 8009 	mrs	r0, PSP
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <pxCurrentTCBConst>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	f01e 0f10 	tst.w	lr, #16
 80086c0:	bf08      	it	eq
 80086c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086d4:	b672      	cpsid	i
 80086d6:	f380 8811 	msr	BASEPRI, r0
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	b662      	cpsie	i
 80086e4:	f7fe fc82 	bl	8006fec <vTaskSwitchContext>
 80086e8:	f04f 0000 	mov.w	r0, #0
 80086ec:	f380 8811 	msr	BASEPRI, r0
 80086f0:	bc09      	pop	{r0, r3}
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f01e 0f10 	tst.w	lr, #16
 80086fe:	bf08      	it	eq
 8008700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008704:	f380 8809 	msr	PSP, r0
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop

08008710 <pxCurrentTCBConst>:
 8008710:	20000eb8 	.word	0x20000eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	b672      	cpsid	i
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	b662      	cpsie	i
 8008732:	607b      	str	r3, [r7, #4]
}
 8008734:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008736:	f7fe fb9d 	bl	8006e74 <xTaskIncrementTick>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008740:	4b06      	ldr	r3, [pc, #24]	@ (800875c <SysTick_Handler+0x44>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	2300      	movs	r3, #0
 800874a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f383 8811 	msr	BASEPRI, r3
}
 8008752:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	e000ed04 	.word	0xe000ed04

08008760 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008764:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <vPortSetupTimerInterrupt+0x34>)
 8008766:	2200      	movs	r2, #0
 8008768:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800876a:	4b0b      	ldr	r3, [pc, #44]	@ (8008798 <vPortSetupTimerInterrupt+0x38>)
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008770:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <vPortSetupTimerInterrupt+0x3c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a0a      	ldr	r2, [pc, #40]	@ (80087a0 <vPortSetupTimerInterrupt+0x40>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	099b      	lsrs	r3, r3, #6
 800877c:	4a09      	ldr	r2, [pc, #36]	@ (80087a4 <vPortSetupTimerInterrupt+0x44>)
 800877e:	3b01      	subs	r3, #1
 8008780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008782:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <vPortSetupTimerInterrupt+0x34>)
 8008784:	2207      	movs	r2, #7
 8008786:	601a      	str	r2, [r3, #0]
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	e000e010 	.word	0xe000e010
 8008798:	e000e018 	.word	0xe000e018
 800879c:	20000000 	.word	0x20000000
 80087a0:	10624dd3 	.word	0x10624dd3
 80087a4:	e000e014 	.word	0xe000e014

080087a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087b8 <vPortEnableVFP+0x10>
 80087ac:	6801      	ldr	r1, [r0, #0]
 80087ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087b2:	6001      	str	r1, [r0, #0]
 80087b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087b6:	bf00      	nop
 80087b8:	e000ed88 	.word	0xe000ed88

080087bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087c2:	f3ef 8305 	mrs	r3, IPSR
 80087c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	d917      	bls.n	80087fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008838 <vPortValidateInterruptPriority+0x7c>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087d8:	4b18      	ldr	r3, [pc, #96]	@ (800883c <vPortValidateInterruptPriority+0x80>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	7afa      	ldrb	r2, [r7, #11]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d20d      	bcs.n	80087fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	b672      	cpsid	i
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	b662      	cpsie	i
 80087f6:	607b      	str	r3, [r7, #4]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087fe:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <vPortValidateInterruptPriority+0x84>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <vPortValidateInterruptPriority+0x88>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d90d      	bls.n	800882a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	b672      	cpsid	i
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	b662      	cpsie	i
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <vPortValidateInterruptPriority+0x6a>
	}
 800882a:	bf00      	nop
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	e000e3f0 	.word	0xe000e3f0
 800883c:	200014e4 	.word	0x200014e4
 8008840:	e000ed0c 	.word	0xe000ed0c
 8008844:	200014e8 	.word	0x200014e8

08008848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08a      	sub	sp, #40	@ 0x28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008854:	f7fe fa50 	bl	8006cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008858:	4b5d      	ldr	r3, [pc, #372]	@ (80089d0 <pvPortMalloc+0x188>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008860:	f000 f920 	bl	8008aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008864:	4b5b      	ldr	r3, [pc, #364]	@ (80089d4 <pvPortMalloc+0x18c>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	f040 8094 	bne.w	800899a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d020      	beq.n	80088ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008878:	2208      	movs	r2, #8
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b00      	cmp	r3, #0
 8008888:	d017      	beq.n	80088ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f023 0307 	bic.w	r3, r3, #7
 8008890:	3308      	adds	r3, #8
 8008892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00d      	beq.n	80088ba <pvPortMalloc+0x72>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	b672      	cpsid	i
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	b662      	cpsie	i
 80088b2:	617b      	str	r3, [r7, #20]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d06c      	beq.n	800899a <pvPortMalloc+0x152>
 80088c0:	4b45      	ldr	r3, [pc, #276]	@ (80089d8 <pvPortMalloc+0x190>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d867      	bhi.n	800899a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ca:	4b44      	ldr	r3, [pc, #272]	@ (80089dc <pvPortMalloc+0x194>)
 80088cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ce:	4b43      	ldr	r3, [pc, #268]	@ (80089dc <pvPortMalloc+0x194>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088d4:	e004      	b.n	80088e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d903      	bls.n	80088f2 <pvPortMalloc+0xaa>
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1f1      	bne.n	80088d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088f2:	4b37      	ldr	r3, [pc, #220]	@ (80089d0 <pvPortMalloc+0x188>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d04e      	beq.n	800899a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2208      	movs	r2, #8
 8008902:	4413      	add	r3, r2
 8008904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	2308      	movs	r3, #8
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	429a      	cmp	r2, r3
 800891c:	d922      	bls.n	8008964 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800891e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00d      	beq.n	800894c <pvPortMalloc+0x104>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	b672      	cpsid	i
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	b662      	cpsie	i
 8008944:	613b      	str	r3, [r7, #16]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	1ad2      	subs	r2, r2, r3
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800895e:	69b8      	ldr	r0, [r7, #24]
 8008960:	f000 f904 	bl	8008b6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008964:	4b1c      	ldr	r3, [pc, #112]	@ (80089d8 <pvPortMalloc+0x190>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	4a1a      	ldr	r2, [pc, #104]	@ (80089d8 <pvPortMalloc+0x190>)
 8008970:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008972:	4b19      	ldr	r3, [pc, #100]	@ (80089d8 <pvPortMalloc+0x190>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4b1a      	ldr	r3, [pc, #104]	@ (80089e0 <pvPortMalloc+0x198>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d203      	bcs.n	8008986 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800897e:	4b16      	ldr	r3, [pc, #88]	@ (80089d8 <pvPortMalloc+0x190>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a17      	ldr	r2, [pc, #92]	@ (80089e0 <pvPortMalloc+0x198>)
 8008984:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	4b12      	ldr	r3, [pc, #72]	@ (80089d4 <pvPortMalloc+0x18c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	431a      	orrs	r2, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800899a:	f7fe f9bb 	bl	8006d14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00d      	beq.n	80089c4 <pvPortMalloc+0x17c>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	b672      	cpsid	i
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	b662      	cpsie	i
 80089bc:	60fb      	str	r3, [r7, #12]
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	e7fd      	b.n	80089c0 <pvPortMalloc+0x178>
	return pvReturn;
 80089c4:	69fb      	ldr	r3, [r7, #28]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3728      	adds	r7, #40	@ 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20019b94 	.word	0x20019b94
 80089d4:	20019ba0 	.word	0x20019ba0
 80089d8:	20019b98 	.word	0x20019b98
 80089dc:	20019b8c 	.word	0x20019b8c
 80089e0:	20019b9c 	.word	0x20019b9c

080089e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d04e      	beq.n	8008a94 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089f6:	2308      	movs	r3, #8
 80089f8:	425b      	negs	r3, r3
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4413      	add	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	4b24      	ldr	r3, [pc, #144]	@ (8008a9c <vPortFree+0xb8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10d      	bne.n	8008a2e <vPortFree+0x4a>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a16:	b672      	cpsid	i
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	b662      	cpsie	i
 8008a26:	60fb      	str	r3, [r7, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00d      	beq.n	8008a52 <vPortFree+0x6e>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	b672      	cpsid	i
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	b662      	cpsie	i
 8008a4a:	60bb      	str	r3, [r7, #8]
}
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
 8008a50:	e7fd      	b.n	8008a4e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	4b11      	ldr	r3, [pc, #68]	@ (8008a9c <vPortFree+0xb8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d019      	beq.n	8008a94 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d115      	bne.n	8008a94 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a9c <vPortFree+0xb8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	43db      	mvns	r3, r3
 8008a72:	401a      	ands	r2, r3
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a78:	f7fe f93e 	bl	8006cf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <vPortFree+0xbc>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4413      	add	r3, r2
 8008a86:	4a06      	ldr	r2, [pc, #24]	@ (8008aa0 <vPortFree+0xbc>)
 8008a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a8a:	6938      	ldr	r0, [r7, #16]
 8008a8c:	f000 f86e 	bl	8008b6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a90:	f7fe f940 	bl	8006d14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a94:	bf00      	nop
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20019ba0 	.word	0x20019ba0
 8008aa0:	20019b98 	.word	0x20019b98

08008aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008aaa:	4b29      	ldr	r3, [pc, #164]	@ (8008b50 <prvHeapInit+0xac>)
 8008aac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aae:	4b29      	ldr	r3, [pc, #164]	@ (8008b54 <prvHeapInit+0xb0>)
 8008ab0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00c      	beq.n	8008ad6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3307      	adds	r3, #7
 8008ac0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f023 0307 	bic.w	r3, r3, #7
 8008ac8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	4a20      	ldr	r2, [pc, #128]	@ (8008b54 <prvHeapInit+0xb0>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ada:	4a1f      	ldr	r2, [pc, #124]	@ (8008b58 <prvHeapInit+0xb4>)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b58 <prvHeapInit+0xb4>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4413      	add	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008aee:	2208      	movs	r2, #8
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1a9b      	subs	r3, r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f023 0307 	bic.w	r3, r3, #7
 8008afc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4a16      	ldr	r2, [pc, #88]	@ (8008b5c <prvHeapInit+0xb8>)
 8008b02:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b04:	4b15      	ldr	r3, [pc, #84]	@ (8008b5c <prvHeapInit+0xb8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b0c:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <prvHeapInit+0xb8>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	1ad2      	subs	r2, r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b22:	4b0e      	ldr	r3, [pc, #56]	@ (8008b5c <prvHeapInit+0xb8>)
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b60 <prvHeapInit+0xbc>)
 8008b30:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4a0b      	ldr	r2, [pc, #44]	@ (8008b64 <prvHeapInit+0xc0>)
 8008b38:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b68 <prvHeapInit+0xc4>)
 8008b3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b40:	601a      	str	r2, [r3, #0]
}
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	000186a0 	.word	0x000186a0
 8008b54:	200014ec 	.word	0x200014ec
 8008b58:	20019b8c 	.word	0x20019b8c
 8008b5c:	20019b94 	.word	0x20019b94
 8008b60:	20019b9c 	.word	0x20019b9c
 8008b64:	20019b98 	.word	0x20019b98
 8008b68:	20019ba0 	.word	0x20019ba0

08008b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b74:	4b28      	ldr	r3, [pc, #160]	@ (8008c18 <prvInsertBlockIntoFreeList+0xac>)
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	e002      	b.n	8008b80 <prvInsertBlockIntoFreeList+0x14>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d8f7      	bhi.n	8008b7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	4413      	add	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d108      	bne.n	8008bae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	441a      	add	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d118      	bne.n	8008bf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4b15      	ldr	r3, [pc, #84]	@ (8008c1c <prvInsertBlockIntoFreeList+0xb0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d00d      	beq.n	8008bea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	441a      	add	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	e008      	b.n	8008bfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bea:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <prvInsertBlockIntoFreeList+0xb0>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	e003      	b.n	8008bfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d002      	beq.n	8008c0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20019b8c 	.word	0x20019b8c
 8008c1c:	20019b94 	.word	0x20019b94

08008c20 <__sflush_r>:
 8008c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c28:	0716      	lsls	r6, r2, #28
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	d454      	bmi.n	8008cda <__sflush_r+0xba>
 8008c30:	684b      	ldr	r3, [r1, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dc02      	bgt.n	8008c3c <__sflush_r+0x1c>
 8008c36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dd48      	ble.n	8008cce <__sflush_r+0xae>
 8008c3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c3e:	2e00      	cmp	r6, #0
 8008c40:	d045      	beq.n	8008cce <__sflush_r+0xae>
 8008c42:	2300      	movs	r3, #0
 8008c44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c48:	682f      	ldr	r7, [r5, #0]
 8008c4a:	6a21      	ldr	r1, [r4, #32]
 8008c4c:	602b      	str	r3, [r5, #0]
 8008c4e:	d030      	beq.n	8008cb2 <__sflush_r+0x92>
 8008c50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	0759      	lsls	r1, r3, #29
 8008c56:	d505      	bpl.n	8008c64 <__sflush_r+0x44>
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c5e:	b10b      	cbz	r3, 8008c64 <__sflush_r+0x44>
 8008c60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c62:	1ad2      	subs	r2, r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c68:	6a21      	ldr	r1, [r4, #32]
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b0      	blx	r6
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	d106      	bne.n	8008c82 <__sflush_r+0x62>
 8008c74:	6829      	ldr	r1, [r5, #0]
 8008c76:	291d      	cmp	r1, #29
 8008c78:	d82b      	bhi.n	8008cd2 <__sflush_r+0xb2>
 8008c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008d24 <__sflush_r+0x104>)
 8008c7c:	410a      	asrs	r2, r1
 8008c7e:	07d6      	lsls	r6, r2, #31
 8008c80:	d427      	bmi.n	8008cd2 <__sflush_r+0xb2>
 8008c82:	2200      	movs	r2, #0
 8008c84:	6062      	str	r2, [r4, #4]
 8008c86:	04d9      	lsls	r1, r3, #19
 8008c88:	6922      	ldr	r2, [r4, #16]
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	d504      	bpl.n	8008c98 <__sflush_r+0x78>
 8008c8e:	1c42      	adds	r2, r0, #1
 8008c90:	d101      	bne.n	8008c96 <__sflush_r+0x76>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	b903      	cbnz	r3, 8008c98 <__sflush_r+0x78>
 8008c96:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c9a:	602f      	str	r7, [r5, #0]
 8008c9c:	b1b9      	cbz	r1, 8008cce <__sflush_r+0xae>
 8008c9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	d002      	beq.n	8008cac <__sflush_r+0x8c>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f000 fbac 	bl	8009404 <_free_r>
 8008cac:	2300      	movs	r3, #0
 8008cae:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cb0:	e00d      	b.n	8008cce <__sflush_r+0xae>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b0      	blx	r6
 8008cb8:	4602      	mov	r2, r0
 8008cba:	1c50      	adds	r0, r2, #1
 8008cbc:	d1c9      	bne.n	8008c52 <__sflush_r+0x32>
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0c6      	beq.n	8008c52 <__sflush_r+0x32>
 8008cc4:	2b1d      	cmp	r3, #29
 8008cc6:	d001      	beq.n	8008ccc <__sflush_r+0xac>
 8008cc8:	2b16      	cmp	r3, #22
 8008cca:	d11e      	bne.n	8008d0a <__sflush_r+0xea>
 8008ccc:	602f      	str	r7, [r5, #0]
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e022      	b.n	8008d18 <__sflush_r+0xf8>
 8008cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd6:	b21b      	sxth	r3, r3
 8008cd8:	e01b      	b.n	8008d12 <__sflush_r+0xf2>
 8008cda:	690f      	ldr	r7, [r1, #16]
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	d0f6      	beq.n	8008cce <__sflush_r+0xae>
 8008ce0:	0793      	lsls	r3, r2, #30
 8008ce2:	680e      	ldr	r6, [r1, #0]
 8008ce4:	bf08      	it	eq
 8008ce6:	694b      	ldreq	r3, [r1, #20]
 8008ce8:	600f      	str	r7, [r1, #0]
 8008cea:	bf18      	it	ne
 8008cec:	2300      	movne	r3, #0
 8008cee:	eba6 0807 	sub.w	r8, r6, r7
 8008cf2:	608b      	str	r3, [r1, #8]
 8008cf4:	f1b8 0f00 	cmp.w	r8, #0
 8008cf8:	dde9      	ble.n	8008cce <__sflush_r+0xae>
 8008cfa:	6a21      	ldr	r1, [r4, #32]
 8008cfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cfe:	4643      	mov	r3, r8
 8008d00:	463a      	mov	r2, r7
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b0      	blx	r6
 8008d06:	2800      	cmp	r0, #0
 8008d08:	dc08      	bgt.n	8008d1c <__sflush_r+0xfc>
 8008d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	4407      	add	r7, r0
 8008d1e:	eba8 0800 	sub.w	r8, r8, r0
 8008d22:	e7e7      	b.n	8008cf4 <__sflush_r+0xd4>
 8008d24:	dfbffffe 	.word	0xdfbffffe

08008d28 <_fflush_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	690b      	ldr	r3, [r1, #16]
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	b913      	cbnz	r3, 8008d38 <_fflush_r+0x10>
 8008d32:	2500      	movs	r5, #0
 8008d34:	4628      	mov	r0, r5
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	b118      	cbz	r0, 8008d42 <_fflush_r+0x1a>
 8008d3a:	6a03      	ldr	r3, [r0, #32]
 8008d3c:	b90b      	cbnz	r3, 8008d42 <_fflush_r+0x1a>
 8008d3e:	f000 f8bb 	bl	8008eb8 <__sinit>
 8008d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f3      	beq.n	8008d32 <_fflush_r+0xa>
 8008d4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d4c:	07d0      	lsls	r0, r2, #31
 8008d4e:	d404      	bmi.n	8008d5a <_fflush_r+0x32>
 8008d50:	0599      	lsls	r1, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_fflush_r+0x32>
 8008d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d56:	f000 fb44 	bl	80093e2 <__retarget_lock_acquire_recursive>
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f7ff ff5f 	bl	8008c20 <__sflush_r>
 8008d62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d64:	07da      	lsls	r2, r3, #31
 8008d66:	4605      	mov	r5, r0
 8008d68:	d4e4      	bmi.n	8008d34 <_fflush_r+0xc>
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	059b      	lsls	r3, r3, #22
 8008d6e:	d4e1      	bmi.n	8008d34 <_fflush_r+0xc>
 8008d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d72:	f000 fb37 	bl	80093e4 <__retarget_lock_release_recursive>
 8008d76:	e7dd      	b.n	8008d34 <_fflush_r+0xc>

08008d78 <fflush>:
 8008d78:	4601      	mov	r1, r0
 8008d7a:	b920      	cbnz	r0, 8008d86 <fflush+0xe>
 8008d7c:	4a04      	ldr	r2, [pc, #16]	@ (8008d90 <fflush+0x18>)
 8008d7e:	4905      	ldr	r1, [pc, #20]	@ (8008d94 <fflush+0x1c>)
 8008d80:	4805      	ldr	r0, [pc, #20]	@ (8008d98 <fflush+0x20>)
 8008d82:	f000 b8b1 	b.w	8008ee8 <_fwalk_sglue>
 8008d86:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <fflush+0x24>)
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff bfcd 	b.w	8008d28 <_fflush_r>
 8008d8e:	bf00      	nop
 8008d90:	20000010 	.word	0x20000010
 8008d94:	08008d29 	.word	0x08008d29
 8008d98:	20000020 	.word	0x20000020
 8008d9c:	2000001c 	.word	0x2000001c

08008da0 <std>:
 8008da0:	2300      	movs	r3, #0
 8008da2:	b510      	push	{r4, lr}
 8008da4:	4604      	mov	r4, r0
 8008da6:	e9c0 3300 	strd	r3, r3, [r0]
 8008daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dae:	6083      	str	r3, [r0, #8]
 8008db0:	8181      	strh	r1, [r0, #12]
 8008db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008db4:	81c2      	strh	r2, [r0, #14]
 8008db6:	6183      	str	r3, [r0, #24]
 8008db8:	4619      	mov	r1, r3
 8008dba:	2208      	movs	r2, #8
 8008dbc:	305c      	adds	r0, #92	@ 0x5c
 8008dbe:	f000 fa2d 	bl	800921c <memset>
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008df8 <std+0x58>)
 8008dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <std+0x5c>)
 8008dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dca:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <std+0x60>)
 8008dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dce:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <std+0x64>)
 8008dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <std+0x68>)
 8008dd4:	6224      	str	r4, [r4, #32]
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d006      	beq.n	8008de8 <std+0x48>
 8008dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dde:	4294      	cmp	r4, r2
 8008de0:	d002      	beq.n	8008de8 <std+0x48>
 8008de2:	33d0      	adds	r3, #208	@ 0xd0
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d105      	bne.n	8008df4 <std+0x54>
 8008de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df0:	f000 baf6 	b.w	80093e0 <__retarget_lock_init_recursive>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	bf00      	nop
 8008df8:	0800906d 	.word	0x0800906d
 8008dfc:	0800908f 	.word	0x0800908f
 8008e00:	080090c7 	.word	0x080090c7
 8008e04:	080090eb 	.word	0x080090eb
 8008e08:	20019ba4 	.word	0x20019ba4

08008e0c <stdio_exit_handler>:
 8008e0c:	4a02      	ldr	r2, [pc, #8]	@ (8008e18 <stdio_exit_handler+0xc>)
 8008e0e:	4903      	ldr	r1, [pc, #12]	@ (8008e1c <stdio_exit_handler+0x10>)
 8008e10:	4803      	ldr	r0, [pc, #12]	@ (8008e20 <stdio_exit_handler+0x14>)
 8008e12:	f000 b869 	b.w	8008ee8 <_fwalk_sglue>
 8008e16:	bf00      	nop
 8008e18:	20000010 	.word	0x20000010
 8008e1c:	08008d29 	.word	0x08008d29
 8008e20:	20000020 	.word	0x20000020

08008e24 <cleanup_stdio>:
 8008e24:	6841      	ldr	r1, [r0, #4]
 8008e26:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <cleanup_stdio+0x34>)
 8008e28:	4299      	cmp	r1, r3
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	d001      	beq.n	8008e34 <cleanup_stdio+0x10>
 8008e30:	f7ff ff7a 	bl	8008d28 <_fflush_r>
 8008e34:	68a1      	ldr	r1, [r4, #8]
 8008e36:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <cleanup_stdio+0x38>)
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	d002      	beq.n	8008e42 <cleanup_stdio+0x1e>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7ff ff73 	bl	8008d28 <_fflush_r>
 8008e42:	68e1      	ldr	r1, [r4, #12]
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <cleanup_stdio+0x3c>)
 8008e46:	4299      	cmp	r1, r3
 8008e48:	d004      	beq.n	8008e54 <cleanup_stdio+0x30>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e50:	f7ff bf6a 	b.w	8008d28 <_fflush_r>
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	20019ba4 	.word	0x20019ba4
 8008e5c:	20019c0c 	.word	0x20019c0c
 8008e60:	20019c74 	.word	0x20019c74

08008e64 <global_stdio_init.part.0>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <global_stdio_init.part.0+0x30>)
 8008e68:	4c0b      	ldr	r4, [pc, #44]	@ (8008e98 <global_stdio_init.part.0+0x34>)
 8008e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e9c <global_stdio_init.part.0+0x38>)
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	2200      	movs	r2, #0
 8008e72:	2104      	movs	r1, #4
 8008e74:	f7ff ff94 	bl	8008da0 <std>
 8008e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	2109      	movs	r1, #9
 8008e80:	f7ff ff8e 	bl	8008da0 <std>
 8008e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e88:	2202      	movs	r2, #2
 8008e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e8e:	2112      	movs	r1, #18
 8008e90:	f7ff bf86 	b.w	8008da0 <std>
 8008e94:	20019cdc 	.word	0x20019cdc
 8008e98:	20019ba4 	.word	0x20019ba4
 8008e9c:	08008e0d 	.word	0x08008e0d

08008ea0 <__sfp_lock_acquire>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	@ (8008ea8 <__sfp_lock_acquire+0x8>)
 8008ea2:	f000 ba9e 	b.w	80093e2 <__retarget_lock_acquire_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20019ce5 	.word	0x20019ce5

08008eac <__sfp_lock_release>:
 8008eac:	4801      	ldr	r0, [pc, #4]	@ (8008eb4 <__sfp_lock_release+0x8>)
 8008eae:	f000 ba99 	b.w	80093e4 <__retarget_lock_release_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20019ce5 	.word	0x20019ce5

08008eb8 <__sinit>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	f7ff fff0 	bl	8008ea0 <__sfp_lock_acquire>
 8008ec0:	6a23      	ldr	r3, [r4, #32]
 8008ec2:	b11b      	cbz	r3, 8008ecc <__sinit+0x14>
 8008ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec8:	f7ff bff0 	b.w	8008eac <__sfp_lock_release>
 8008ecc:	4b04      	ldr	r3, [pc, #16]	@ (8008ee0 <__sinit+0x28>)
 8008ece:	6223      	str	r3, [r4, #32]
 8008ed0:	4b04      	ldr	r3, [pc, #16]	@ (8008ee4 <__sinit+0x2c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f5      	bne.n	8008ec4 <__sinit+0xc>
 8008ed8:	f7ff ffc4 	bl	8008e64 <global_stdio_init.part.0>
 8008edc:	e7f2      	b.n	8008ec4 <__sinit+0xc>
 8008ede:	bf00      	nop
 8008ee0:	08008e25 	.word	0x08008e25
 8008ee4:	20019cdc 	.word	0x20019cdc

08008ee8 <_fwalk_sglue>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	4607      	mov	r7, r0
 8008eee:	4688      	mov	r8, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8008efc:	d505      	bpl.n	8008f0a <_fwalk_sglue+0x22>
 8008efe:	6824      	ldr	r4, [r4, #0]
 8008f00:	2c00      	cmp	r4, #0
 8008f02:	d1f7      	bne.n	8008ef4 <_fwalk_sglue+0xc>
 8008f04:	4630      	mov	r0, r6
 8008f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d907      	bls.n	8008f20 <_fwalk_sglue+0x38>
 8008f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f14:	3301      	adds	r3, #1
 8008f16:	d003      	beq.n	8008f20 <_fwalk_sglue+0x38>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c0      	blx	r8
 8008f1e:	4306      	orrs	r6, r0
 8008f20:	3568      	adds	r5, #104	@ 0x68
 8008f22:	e7e9      	b.n	8008ef8 <_fwalk_sglue+0x10>

08008f24 <iprintf>:
 8008f24:	b40f      	push	{r0, r1, r2, r3}
 8008f26:	b507      	push	{r0, r1, r2, lr}
 8008f28:	4906      	ldr	r1, [pc, #24]	@ (8008f44 <iprintf+0x20>)
 8008f2a:	ab04      	add	r3, sp, #16
 8008f2c:	6808      	ldr	r0, [r1, #0]
 8008f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f32:	6881      	ldr	r1, [r0, #8]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	f000 fcdf 	bl	80098f8 <_vfiprintf_r>
 8008f3a:	b003      	add	sp, #12
 8008f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f40:	b004      	add	sp, #16
 8008f42:	4770      	bx	lr
 8008f44:	2000001c 	.word	0x2000001c

08008f48 <_puts_r>:
 8008f48:	6a03      	ldr	r3, [r0, #32]
 8008f4a:	b570      	push	{r4, r5, r6, lr}
 8008f4c:	6884      	ldr	r4, [r0, #8]
 8008f4e:	4605      	mov	r5, r0
 8008f50:	460e      	mov	r6, r1
 8008f52:	b90b      	cbnz	r3, 8008f58 <_puts_r+0x10>
 8008f54:	f7ff ffb0 	bl	8008eb8 <__sinit>
 8008f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f5a:	07db      	lsls	r3, r3, #31
 8008f5c:	d405      	bmi.n	8008f6a <_puts_r+0x22>
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	0598      	lsls	r0, r3, #22
 8008f62:	d402      	bmi.n	8008f6a <_puts_r+0x22>
 8008f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f66:	f000 fa3c 	bl	80093e2 <__retarget_lock_acquire_recursive>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	0719      	lsls	r1, r3, #28
 8008f6e:	d502      	bpl.n	8008f76 <_puts_r+0x2e>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d135      	bne.n	8008fe2 <_puts_r+0x9a>
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 f8f9 	bl	8009170 <__swsetup_r>
 8008f7e:	b380      	cbz	r0, 8008fe2 <_puts_r+0x9a>
 8008f80:	f04f 35ff 	mov.w	r5, #4294967295
 8008f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f86:	07da      	lsls	r2, r3, #31
 8008f88:	d405      	bmi.n	8008f96 <_puts_r+0x4e>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	059b      	lsls	r3, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_puts_r+0x4e>
 8008f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f92:	f000 fa27 	bl	80093e4 <__retarget_lock_release_recursive>
 8008f96:	4628      	mov	r0, r5
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da04      	bge.n	8008fa8 <_puts_r+0x60>
 8008f9e:	69a2      	ldr	r2, [r4, #24]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	dc17      	bgt.n	8008fd4 <_puts_r+0x8c>
 8008fa4:	290a      	cmp	r1, #10
 8008fa6:	d015      	beq.n	8008fd4 <_puts_r+0x8c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	7019      	strb	r1, [r3, #0]
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	60a3      	str	r3, [r4, #8]
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d1ed      	bne.n	8008f9a <_puts_r+0x52>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da11      	bge.n	8008fe6 <_puts_r+0x9e>
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	210a      	movs	r1, #10
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f893 	bl	80090f2 <__swbuf_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d0d7      	beq.n	8008f80 <_puts_r+0x38>
 8008fd0:	250a      	movs	r5, #10
 8008fd2:	e7d7      	b.n	8008f84 <_puts_r+0x3c>
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f000 f88b 	bl	80090f2 <__swbuf_r>
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d1e7      	bne.n	8008fb0 <_puts_r+0x68>
 8008fe0:	e7ce      	b.n	8008f80 <_puts_r+0x38>
 8008fe2:	3e01      	subs	r6, #1
 8008fe4:	e7e4      	b.n	8008fb0 <_puts_r+0x68>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	220a      	movs	r2, #10
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e7ee      	b.n	8008fd0 <_puts_r+0x88>
	...

08008ff4 <puts>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	@ (8009000 <puts+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bfa5 	b.w	8008f48 <_puts_r>
 8008ffe:	bf00      	nop
 8009000:	2000001c 	.word	0x2000001c

08009004 <sniprintf>:
 8009004:	b40c      	push	{r2, r3}
 8009006:	b530      	push	{r4, r5, lr}
 8009008:	4b17      	ldr	r3, [pc, #92]	@ (8009068 <sniprintf+0x64>)
 800900a:	1e0c      	subs	r4, r1, #0
 800900c:	681d      	ldr	r5, [r3, #0]
 800900e:	b09d      	sub	sp, #116	@ 0x74
 8009010:	da08      	bge.n	8009024 <sniprintf+0x20>
 8009012:	238b      	movs	r3, #139	@ 0x8b
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	b01d      	add	sp, #116	@ 0x74
 800901c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009020:	b002      	add	sp, #8
 8009022:	4770      	bx	lr
 8009024:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009028:	f8ad 3014 	strh.w	r3, [sp, #20]
 800902c:	bf14      	ite	ne
 800902e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009032:	4623      	moveq	r3, r4
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800903c:	9002      	str	r0, [sp, #8]
 800903e:	9006      	str	r0, [sp, #24]
 8009040:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009044:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009046:	ab21      	add	r3, sp, #132	@ 0x84
 8009048:	a902      	add	r1, sp, #8
 800904a:	4628      	mov	r0, r5
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	f000 fb2d 	bl	80096ac <_svfiprintf_r>
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	bfbc      	itt	lt
 8009056:	238b      	movlt	r3, #139	@ 0x8b
 8009058:	602b      	strlt	r3, [r5, #0]
 800905a:	2c00      	cmp	r4, #0
 800905c:	d0dd      	beq.n	800901a <sniprintf+0x16>
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e7d9      	b.n	800901a <sniprintf+0x16>
 8009066:	bf00      	nop
 8009068:	2000001c 	.word	0x2000001c

0800906c <__sread>:
 800906c:	b510      	push	{r4, lr}
 800906e:	460c      	mov	r4, r1
 8009070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009074:	f000 f966 	bl	8009344 <_read_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	bfab      	itete	ge
 800907c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800907e:	89a3      	ldrhlt	r3, [r4, #12]
 8009080:	181b      	addge	r3, r3, r0
 8009082:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009086:	bfac      	ite	ge
 8009088:	6563      	strge	r3, [r4, #84]	@ 0x54
 800908a:	81a3      	strhlt	r3, [r4, #12]
 800908c:	bd10      	pop	{r4, pc}

0800908e <__swrite>:
 800908e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	461f      	mov	r7, r3
 8009094:	898b      	ldrh	r3, [r1, #12]
 8009096:	05db      	lsls	r3, r3, #23
 8009098:	4605      	mov	r5, r0
 800909a:	460c      	mov	r4, r1
 800909c:	4616      	mov	r6, r2
 800909e:	d505      	bpl.n	80090ac <__swrite+0x1e>
 80090a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a4:	2302      	movs	r3, #2
 80090a6:	2200      	movs	r2, #0
 80090a8:	f000 f93a 	bl	8009320 <_lseek_r>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	4632      	mov	r2, r6
 80090ba:	463b      	mov	r3, r7
 80090bc:	4628      	mov	r0, r5
 80090be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c2:	f000 b951 	b.w	8009368 <_write_r>

080090c6 <__sseek>:
 80090c6:	b510      	push	{r4, lr}
 80090c8:	460c      	mov	r4, r1
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 f927 	bl	8009320 <_lseek_r>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	bf15      	itete	ne
 80090d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090e2:	81a3      	strheq	r3, [r4, #12]
 80090e4:	bf18      	it	ne
 80090e6:	81a3      	strhne	r3, [r4, #12]
 80090e8:	bd10      	pop	{r4, pc}

080090ea <__sclose>:
 80090ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ee:	f000 b8b1 	b.w	8009254 <_close_r>

080090f2 <__swbuf_r>:
 80090f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f4:	460e      	mov	r6, r1
 80090f6:	4614      	mov	r4, r2
 80090f8:	4605      	mov	r5, r0
 80090fa:	b118      	cbz	r0, 8009104 <__swbuf_r+0x12>
 80090fc:	6a03      	ldr	r3, [r0, #32]
 80090fe:	b90b      	cbnz	r3, 8009104 <__swbuf_r+0x12>
 8009100:	f7ff feda 	bl	8008eb8 <__sinit>
 8009104:	69a3      	ldr	r3, [r4, #24]
 8009106:	60a3      	str	r3, [r4, #8]
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	071a      	lsls	r2, r3, #28
 800910c:	d501      	bpl.n	8009112 <__swbuf_r+0x20>
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	b943      	cbnz	r3, 8009124 <__swbuf_r+0x32>
 8009112:	4621      	mov	r1, r4
 8009114:	4628      	mov	r0, r5
 8009116:	f000 f82b 	bl	8009170 <__swsetup_r>
 800911a:	b118      	cbz	r0, 8009124 <__swbuf_r+0x32>
 800911c:	f04f 37ff 	mov.w	r7, #4294967295
 8009120:	4638      	mov	r0, r7
 8009122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	6922      	ldr	r2, [r4, #16]
 8009128:	1a98      	subs	r0, r3, r2
 800912a:	6963      	ldr	r3, [r4, #20]
 800912c:	b2f6      	uxtb	r6, r6
 800912e:	4283      	cmp	r3, r0
 8009130:	4637      	mov	r7, r6
 8009132:	dc05      	bgt.n	8009140 <__swbuf_r+0x4e>
 8009134:	4621      	mov	r1, r4
 8009136:	4628      	mov	r0, r5
 8009138:	f7ff fdf6 	bl	8008d28 <_fflush_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	d1ed      	bne.n	800911c <__swbuf_r+0x2a>
 8009140:	68a3      	ldr	r3, [r4, #8]
 8009142:	3b01      	subs	r3, #1
 8009144:	60a3      	str	r3, [r4, #8]
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	701e      	strb	r6, [r3, #0]
 800914e:	6962      	ldr	r2, [r4, #20]
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	429a      	cmp	r2, r3
 8009154:	d004      	beq.n	8009160 <__swbuf_r+0x6e>
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	07db      	lsls	r3, r3, #31
 800915a:	d5e1      	bpl.n	8009120 <__swbuf_r+0x2e>
 800915c:	2e0a      	cmp	r6, #10
 800915e:	d1df      	bne.n	8009120 <__swbuf_r+0x2e>
 8009160:	4621      	mov	r1, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f7ff fde0 	bl	8008d28 <_fflush_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0d9      	beq.n	8009120 <__swbuf_r+0x2e>
 800916c:	e7d6      	b.n	800911c <__swbuf_r+0x2a>
	...

08009170 <__swsetup_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4b29      	ldr	r3, [pc, #164]	@ (8009218 <__swsetup_r+0xa8>)
 8009174:	4605      	mov	r5, r0
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	460c      	mov	r4, r1
 800917a:	b118      	cbz	r0, 8009184 <__swsetup_r+0x14>
 800917c:	6a03      	ldr	r3, [r0, #32]
 800917e:	b90b      	cbnz	r3, 8009184 <__swsetup_r+0x14>
 8009180:	f7ff fe9a 	bl	8008eb8 <__sinit>
 8009184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009188:	0719      	lsls	r1, r3, #28
 800918a:	d422      	bmi.n	80091d2 <__swsetup_r+0x62>
 800918c:	06da      	lsls	r2, r3, #27
 800918e:	d407      	bmi.n	80091a0 <__swsetup_r+0x30>
 8009190:	2209      	movs	r2, #9
 8009192:	602a      	str	r2, [r5, #0]
 8009194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	f04f 30ff 	mov.w	r0, #4294967295
 800919e:	e033      	b.n	8009208 <__swsetup_r+0x98>
 80091a0:	0758      	lsls	r0, r3, #29
 80091a2:	d512      	bpl.n	80091ca <__swsetup_r+0x5a>
 80091a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091a6:	b141      	cbz	r1, 80091ba <__swsetup_r+0x4a>
 80091a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091ac:	4299      	cmp	r1, r3
 80091ae:	d002      	beq.n	80091b6 <__swsetup_r+0x46>
 80091b0:	4628      	mov	r0, r5
 80091b2:	f000 f927 	bl	8009404 <_free_r>
 80091b6:	2300      	movs	r3, #0
 80091b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	2300      	movs	r3, #0
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f043 0308 	orr.w	r3, r3, #8
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	b94b      	cbnz	r3, 80091ea <__swsetup_r+0x7a>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e0:	d003      	beq.n	80091ea <__swsetup_r+0x7a>
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 fe53 	bl	8009e90 <__smakebuf_r>
 80091ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ee:	f013 0201 	ands.w	r2, r3, #1
 80091f2:	d00a      	beq.n	800920a <__swsetup_r+0x9a>
 80091f4:	2200      	movs	r2, #0
 80091f6:	60a2      	str	r2, [r4, #8]
 80091f8:	6962      	ldr	r2, [r4, #20]
 80091fa:	4252      	negs	r2, r2
 80091fc:	61a2      	str	r2, [r4, #24]
 80091fe:	6922      	ldr	r2, [r4, #16]
 8009200:	b942      	cbnz	r2, 8009214 <__swsetup_r+0xa4>
 8009202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009206:	d1c5      	bne.n	8009194 <__swsetup_r+0x24>
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	0799      	lsls	r1, r3, #30
 800920c:	bf58      	it	pl
 800920e:	6962      	ldrpl	r2, [r4, #20]
 8009210:	60a2      	str	r2, [r4, #8]
 8009212:	e7f4      	b.n	80091fe <__swsetup_r+0x8e>
 8009214:	2000      	movs	r0, #0
 8009216:	e7f7      	b.n	8009208 <__swsetup_r+0x98>
 8009218:	2000001c 	.word	0x2000001c

0800921c <memset>:
 800921c:	4402      	add	r2, r0
 800921e:	4603      	mov	r3, r0
 8009220:	4293      	cmp	r3, r2
 8009222:	d100      	bne.n	8009226 <memset+0xa>
 8009224:	4770      	bx	lr
 8009226:	f803 1b01 	strb.w	r1, [r3], #1
 800922a:	e7f9      	b.n	8009220 <memset+0x4>

0800922c <strncpy>:
 800922c:	b510      	push	{r4, lr}
 800922e:	3901      	subs	r1, #1
 8009230:	4603      	mov	r3, r0
 8009232:	b132      	cbz	r2, 8009242 <strncpy+0x16>
 8009234:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009238:	f803 4b01 	strb.w	r4, [r3], #1
 800923c:	3a01      	subs	r2, #1
 800923e:	2c00      	cmp	r4, #0
 8009240:	d1f7      	bne.n	8009232 <strncpy+0x6>
 8009242:	441a      	add	r2, r3
 8009244:	2100      	movs	r1, #0
 8009246:	4293      	cmp	r3, r2
 8009248:	d100      	bne.n	800924c <strncpy+0x20>
 800924a:	bd10      	pop	{r4, pc}
 800924c:	f803 1b01 	strb.w	r1, [r3], #1
 8009250:	e7f9      	b.n	8009246 <strncpy+0x1a>
	...

08009254 <_close_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d06      	ldr	r5, [pc, #24]	@ (8009270 <_close_r+0x1c>)
 8009258:	2300      	movs	r3, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7f8 fbc9 	bl	80019f6 <_close>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_close_r+0x1a>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_close_r+0x1a>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20019ce0 	.word	0x20019ce0

08009274 <_reclaim_reent>:
 8009274:	4b29      	ldr	r3, [pc, #164]	@ (800931c <_reclaim_reent+0xa8>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4283      	cmp	r3, r0
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	4604      	mov	r4, r0
 800927e:	d04b      	beq.n	8009318 <_reclaim_reent+0xa4>
 8009280:	69c3      	ldr	r3, [r0, #28]
 8009282:	b1ab      	cbz	r3, 80092b0 <_reclaim_reent+0x3c>
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	b16b      	cbz	r3, 80092a4 <_reclaim_reent+0x30>
 8009288:	2500      	movs	r5, #0
 800928a:	69e3      	ldr	r3, [r4, #28]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	5959      	ldr	r1, [r3, r5]
 8009290:	2900      	cmp	r1, #0
 8009292:	d13b      	bne.n	800930c <_reclaim_reent+0x98>
 8009294:	3504      	adds	r5, #4
 8009296:	2d80      	cmp	r5, #128	@ 0x80
 8009298:	d1f7      	bne.n	800928a <_reclaim_reent+0x16>
 800929a:	69e3      	ldr	r3, [r4, #28]
 800929c:	4620      	mov	r0, r4
 800929e:	68d9      	ldr	r1, [r3, #12]
 80092a0:	f000 f8b0 	bl	8009404 <_free_r>
 80092a4:	69e3      	ldr	r3, [r4, #28]
 80092a6:	6819      	ldr	r1, [r3, #0]
 80092a8:	b111      	cbz	r1, 80092b0 <_reclaim_reent+0x3c>
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 f8aa 	bl	8009404 <_free_r>
 80092b0:	6961      	ldr	r1, [r4, #20]
 80092b2:	b111      	cbz	r1, 80092ba <_reclaim_reent+0x46>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 f8a5 	bl	8009404 <_free_r>
 80092ba:	69e1      	ldr	r1, [r4, #28]
 80092bc:	b111      	cbz	r1, 80092c4 <_reclaim_reent+0x50>
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 f8a0 	bl	8009404 <_free_r>
 80092c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80092c6:	b111      	cbz	r1, 80092ce <_reclaim_reent+0x5a>
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 f89b 	bl	8009404 <_free_r>
 80092ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092d0:	b111      	cbz	r1, 80092d8 <_reclaim_reent+0x64>
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f896 	bl	8009404 <_free_r>
 80092d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80092da:	b111      	cbz	r1, 80092e2 <_reclaim_reent+0x6e>
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 f891 	bl	8009404 <_free_r>
 80092e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80092e4:	b111      	cbz	r1, 80092ec <_reclaim_reent+0x78>
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 f88c 	bl	8009404 <_free_r>
 80092ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80092ee:	b111      	cbz	r1, 80092f6 <_reclaim_reent+0x82>
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 f887 	bl	8009404 <_free_r>
 80092f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80092f8:	b111      	cbz	r1, 8009300 <_reclaim_reent+0x8c>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f882 	bl	8009404 <_free_r>
 8009300:	6a23      	ldr	r3, [r4, #32]
 8009302:	b14b      	cbz	r3, 8009318 <_reclaim_reent+0xa4>
 8009304:	4620      	mov	r0, r4
 8009306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800930a:	4718      	bx	r3
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	4620      	mov	r0, r4
 8009310:	f000 f878 	bl	8009404 <_free_r>
 8009314:	4631      	mov	r1, r6
 8009316:	e7bb      	b.n	8009290 <_reclaim_reent+0x1c>
 8009318:	bd70      	pop	{r4, r5, r6, pc}
 800931a:	bf00      	nop
 800931c:	2000001c 	.word	0x2000001c

08009320 <_lseek_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	@ (8009340 <_lseek_r+0x20>)
 8009324:	4604      	mov	r4, r0
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	2200      	movs	r2, #0
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7f8 fb88 	bl	8001a44 <_lseek>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_lseek_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_lseek_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	20019ce0 	.word	0x20019ce0

08009344 <_read_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d07      	ldr	r5, [pc, #28]	@ (8009364 <_read_r+0x20>)
 8009348:	4604      	mov	r4, r0
 800934a:	4608      	mov	r0, r1
 800934c:	4611      	mov	r1, r2
 800934e:	2200      	movs	r2, #0
 8009350:	602a      	str	r2, [r5, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	f7f8 fb16 	bl	8001984 <_read>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_read_r+0x1e>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_read_r+0x1e>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	20019ce0 	.word	0x20019ce0

08009368 <_write_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d07      	ldr	r5, [pc, #28]	@ (8009388 <_write_r+0x20>)
 800936c:	4604      	mov	r4, r0
 800936e:	4608      	mov	r0, r1
 8009370:	4611      	mov	r1, r2
 8009372:	2200      	movs	r2, #0
 8009374:	602a      	str	r2, [r5, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	f7f8 fb21 	bl	80019be <_write>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_write_r+0x1e>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_write_r+0x1e>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	20019ce0 	.word	0x20019ce0

0800938c <__errno>:
 800938c:	4b01      	ldr	r3, [pc, #4]	@ (8009394 <__errno+0x8>)
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	2000001c 	.word	0x2000001c

08009398 <__libc_init_array>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	4d0d      	ldr	r5, [pc, #52]	@ (80093d0 <__libc_init_array+0x38>)
 800939c:	4c0d      	ldr	r4, [pc, #52]	@ (80093d4 <__libc_init_array+0x3c>)
 800939e:	1b64      	subs	r4, r4, r5
 80093a0:	10a4      	asrs	r4, r4, #2
 80093a2:	2600      	movs	r6, #0
 80093a4:	42a6      	cmp	r6, r4
 80093a6:	d109      	bne.n	80093bc <__libc_init_array+0x24>
 80093a8:	4d0b      	ldr	r5, [pc, #44]	@ (80093d8 <__libc_init_array+0x40>)
 80093aa:	4c0c      	ldr	r4, [pc, #48]	@ (80093dc <__libc_init_array+0x44>)
 80093ac:	f000 fe2e 	bl	800a00c <_init>
 80093b0:	1b64      	subs	r4, r4, r5
 80093b2:	10a4      	asrs	r4, r4, #2
 80093b4:	2600      	movs	r6, #0
 80093b6:	42a6      	cmp	r6, r4
 80093b8:	d105      	bne.n	80093c6 <__libc_init_array+0x2e>
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c0:	4798      	blx	r3
 80093c2:	3601      	adds	r6, #1
 80093c4:	e7ee      	b.n	80093a4 <__libc_init_array+0xc>
 80093c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ca:	4798      	blx	r3
 80093cc:	3601      	adds	r6, #1
 80093ce:	e7f2      	b.n	80093b6 <__libc_init_array+0x1e>
 80093d0:	0800af18 	.word	0x0800af18
 80093d4:	0800af18 	.word	0x0800af18
 80093d8:	0800af18 	.word	0x0800af18
 80093dc:	0800af1c 	.word	0x0800af1c

080093e0 <__retarget_lock_init_recursive>:
 80093e0:	4770      	bx	lr

080093e2 <__retarget_lock_acquire_recursive>:
 80093e2:	4770      	bx	lr

080093e4 <__retarget_lock_release_recursive>:
 80093e4:	4770      	bx	lr

080093e6 <memcpy>:
 80093e6:	440a      	add	r2, r1
 80093e8:	4291      	cmp	r1, r2
 80093ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ee:	d100      	bne.n	80093f2 <memcpy+0xc>
 80093f0:	4770      	bx	lr
 80093f2:	b510      	push	{r4, lr}
 80093f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093fc:	4291      	cmp	r1, r2
 80093fe:	d1f9      	bne.n	80093f4 <memcpy+0xe>
 8009400:	bd10      	pop	{r4, pc}
	...

08009404 <_free_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4605      	mov	r5, r0
 8009408:	2900      	cmp	r1, #0
 800940a:	d041      	beq.n	8009490 <_free_r+0x8c>
 800940c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009410:	1f0c      	subs	r4, r1, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	bfb8      	it	lt
 8009416:	18e4      	addlt	r4, r4, r3
 8009418:	f000 f8e0 	bl	80095dc <__malloc_lock>
 800941c:	4a1d      	ldr	r2, [pc, #116]	@ (8009494 <_free_r+0x90>)
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	b933      	cbnz	r3, 8009430 <_free_r+0x2c>
 8009422:	6063      	str	r3, [r4, #4]
 8009424:	6014      	str	r4, [r2, #0]
 8009426:	4628      	mov	r0, r5
 8009428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942c:	f000 b8dc 	b.w	80095e8 <__malloc_unlock>
 8009430:	42a3      	cmp	r3, r4
 8009432:	d908      	bls.n	8009446 <_free_r+0x42>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	1821      	adds	r1, r4, r0
 8009438:	428b      	cmp	r3, r1
 800943a:	bf01      	itttt	eq
 800943c:	6819      	ldreq	r1, [r3, #0]
 800943e:	685b      	ldreq	r3, [r3, #4]
 8009440:	1809      	addeq	r1, r1, r0
 8009442:	6021      	streq	r1, [r4, #0]
 8009444:	e7ed      	b.n	8009422 <_free_r+0x1e>
 8009446:	461a      	mov	r2, r3
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	b10b      	cbz	r3, 8009450 <_free_r+0x4c>
 800944c:	42a3      	cmp	r3, r4
 800944e:	d9fa      	bls.n	8009446 <_free_r+0x42>
 8009450:	6811      	ldr	r1, [r2, #0]
 8009452:	1850      	adds	r0, r2, r1
 8009454:	42a0      	cmp	r0, r4
 8009456:	d10b      	bne.n	8009470 <_free_r+0x6c>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	4401      	add	r1, r0
 800945c:	1850      	adds	r0, r2, r1
 800945e:	4283      	cmp	r3, r0
 8009460:	6011      	str	r1, [r2, #0]
 8009462:	d1e0      	bne.n	8009426 <_free_r+0x22>
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	6053      	str	r3, [r2, #4]
 800946a:	4408      	add	r0, r1
 800946c:	6010      	str	r0, [r2, #0]
 800946e:	e7da      	b.n	8009426 <_free_r+0x22>
 8009470:	d902      	bls.n	8009478 <_free_r+0x74>
 8009472:	230c      	movs	r3, #12
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	e7d6      	b.n	8009426 <_free_r+0x22>
 8009478:	6820      	ldr	r0, [r4, #0]
 800947a:	1821      	adds	r1, r4, r0
 800947c:	428b      	cmp	r3, r1
 800947e:	bf04      	itt	eq
 8009480:	6819      	ldreq	r1, [r3, #0]
 8009482:	685b      	ldreq	r3, [r3, #4]
 8009484:	6063      	str	r3, [r4, #4]
 8009486:	bf04      	itt	eq
 8009488:	1809      	addeq	r1, r1, r0
 800948a:	6021      	streq	r1, [r4, #0]
 800948c:	6054      	str	r4, [r2, #4]
 800948e:	e7ca      	b.n	8009426 <_free_r+0x22>
 8009490:	bd38      	pop	{r3, r4, r5, pc}
 8009492:	bf00      	nop
 8009494:	20019cec 	.word	0x20019cec

08009498 <sbrk_aligned>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4e0f      	ldr	r6, [pc, #60]	@ (80094d8 <sbrk_aligned+0x40>)
 800949c:	460c      	mov	r4, r1
 800949e:	6831      	ldr	r1, [r6, #0]
 80094a0:	4605      	mov	r5, r0
 80094a2:	b911      	cbnz	r1, 80094aa <sbrk_aligned+0x12>
 80094a4:	f000 fd6c 	bl	8009f80 <_sbrk_r>
 80094a8:	6030      	str	r0, [r6, #0]
 80094aa:	4621      	mov	r1, r4
 80094ac:	4628      	mov	r0, r5
 80094ae:	f000 fd67 	bl	8009f80 <_sbrk_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d103      	bne.n	80094be <sbrk_aligned+0x26>
 80094b6:	f04f 34ff 	mov.w	r4, #4294967295
 80094ba:	4620      	mov	r0, r4
 80094bc:	bd70      	pop	{r4, r5, r6, pc}
 80094be:	1cc4      	adds	r4, r0, #3
 80094c0:	f024 0403 	bic.w	r4, r4, #3
 80094c4:	42a0      	cmp	r0, r4
 80094c6:	d0f8      	beq.n	80094ba <sbrk_aligned+0x22>
 80094c8:	1a21      	subs	r1, r4, r0
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 fd58 	bl	8009f80 <_sbrk_r>
 80094d0:	3001      	adds	r0, #1
 80094d2:	d1f2      	bne.n	80094ba <sbrk_aligned+0x22>
 80094d4:	e7ef      	b.n	80094b6 <sbrk_aligned+0x1e>
 80094d6:	bf00      	nop
 80094d8:	20019ce8 	.word	0x20019ce8

080094dc <_malloc_r>:
 80094dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e0:	1ccd      	adds	r5, r1, #3
 80094e2:	f025 0503 	bic.w	r5, r5, #3
 80094e6:	3508      	adds	r5, #8
 80094e8:	2d0c      	cmp	r5, #12
 80094ea:	bf38      	it	cc
 80094ec:	250c      	movcc	r5, #12
 80094ee:	2d00      	cmp	r5, #0
 80094f0:	4606      	mov	r6, r0
 80094f2:	db01      	blt.n	80094f8 <_malloc_r+0x1c>
 80094f4:	42a9      	cmp	r1, r5
 80094f6:	d904      	bls.n	8009502 <_malloc_r+0x26>
 80094f8:	230c      	movs	r3, #12
 80094fa:	6033      	str	r3, [r6, #0]
 80094fc:	2000      	movs	r0, #0
 80094fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095d8 <_malloc_r+0xfc>
 8009506:	f000 f869 	bl	80095dc <__malloc_lock>
 800950a:	f8d8 3000 	ldr.w	r3, [r8]
 800950e:	461c      	mov	r4, r3
 8009510:	bb44      	cbnz	r4, 8009564 <_malloc_r+0x88>
 8009512:	4629      	mov	r1, r5
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ffbf 	bl	8009498 <sbrk_aligned>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	4604      	mov	r4, r0
 800951e:	d158      	bne.n	80095d2 <_malloc_r+0xf6>
 8009520:	f8d8 4000 	ldr.w	r4, [r8]
 8009524:	4627      	mov	r7, r4
 8009526:	2f00      	cmp	r7, #0
 8009528:	d143      	bne.n	80095b2 <_malloc_r+0xd6>
 800952a:	2c00      	cmp	r4, #0
 800952c:	d04b      	beq.n	80095c6 <_malloc_r+0xea>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	4639      	mov	r1, r7
 8009532:	4630      	mov	r0, r6
 8009534:	eb04 0903 	add.w	r9, r4, r3
 8009538:	f000 fd22 	bl	8009f80 <_sbrk_r>
 800953c:	4581      	cmp	r9, r0
 800953e:	d142      	bne.n	80095c6 <_malloc_r+0xea>
 8009540:	6821      	ldr	r1, [r4, #0]
 8009542:	1a6d      	subs	r5, r5, r1
 8009544:	4629      	mov	r1, r5
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff ffa6 	bl	8009498 <sbrk_aligned>
 800954c:	3001      	adds	r0, #1
 800954e:	d03a      	beq.n	80095c6 <_malloc_r+0xea>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	442b      	add	r3, r5
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	f8d8 3000 	ldr.w	r3, [r8]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	bb62      	cbnz	r2, 80095b8 <_malloc_r+0xdc>
 800955e:	f8c8 7000 	str.w	r7, [r8]
 8009562:	e00f      	b.n	8009584 <_malloc_r+0xa8>
 8009564:	6822      	ldr	r2, [r4, #0]
 8009566:	1b52      	subs	r2, r2, r5
 8009568:	d420      	bmi.n	80095ac <_malloc_r+0xd0>
 800956a:	2a0b      	cmp	r2, #11
 800956c:	d917      	bls.n	800959e <_malloc_r+0xc2>
 800956e:	1961      	adds	r1, r4, r5
 8009570:	42a3      	cmp	r3, r4
 8009572:	6025      	str	r5, [r4, #0]
 8009574:	bf18      	it	ne
 8009576:	6059      	strne	r1, [r3, #4]
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	bf08      	it	eq
 800957c:	f8c8 1000 	streq.w	r1, [r8]
 8009580:	5162      	str	r2, [r4, r5]
 8009582:	604b      	str	r3, [r1, #4]
 8009584:	4630      	mov	r0, r6
 8009586:	f000 f82f 	bl	80095e8 <__malloc_unlock>
 800958a:	f104 000b 	add.w	r0, r4, #11
 800958e:	1d23      	adds	r3, r4, #4
 8009590:	f020 0007 	bic.w	r0, r0, #7
 8009594:	1ac2      	subs	r2, r0, r3
 8009596:	bf1c      	itt	ne
 8009598:	1a1b      	subne	r3, r3, r0
 800959a:	50a3      	strne	r3, [r4, r2]
 800959c:	e7af      	b.n	80094fe <_malloc_r+0x22>
 800959e:	6862      	ldr	r2, [r4, #4]
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	bf0c      	ite	eq
 80095a4:	f8c8 2000 	streq.w	r2, [r8]
 80095a8:	605a      	strne	r2, [r3, #4]
 80095aa:	e7eb      	b.n	8009584 <_malloc_r+0xa8>
 80095ac:	4623      	mov	r3, r4
 80095ae:	6864      	ldr	r4, [r4, #4]
 80095b0:	e7ae      	b.n	8009510 <_malloc_r+0x34>
 80095b2:	463c      	mov	r4, r7
 80095b4:	687f      	ldr	r7, [r7, #4]
 80095b6:	e7b6      	b.n	8009526 <_malloc_r+0x4a>
 80095b8:	461a      	mov	r2, r3
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	42a3      	cmp	r3, r4
 80095be:	d1fb      	bne.n	80095b8 <_malloc_r+0xdc>
 80095c0:	2300      	movs	r3, #0
 80095c2:	6053      	str	r3, [r2, #4]
 80095c4:	e7de      	b.n	8009584 <_malloc_r+0xa8>
 80095c6:	230c      	movs	r3, #12
 80095c8:	6033      	str	r3, [r6, #0]
 80095ca:	4630      	mov	r0, r6
 80095cc:	f000 f80c 	bl	80095e8 <__malloc_unlock>
 80095d0:	e794      	b.n	80094fc <_malloc_r+0x20>
 80095d2:	6005      	str	r5, [r0, #0]
 80095d4:	e7d6      	b.n	8009584 <_malloc_r+0xa8>
 80095d6:	bf00      	nop
 80095d8:	20019cec 	.word	0x20019cec

080095dc <__malloc_lock>:
 80095dc:	4801      	ldr	r0, [pc, #4]	@ (80095e4 <__malloc_lock+0x8>)
 80095de:	f7ff bf00 	b.w	80093e2 <__retarget_lock_acquire_recursive>
 80095e2:	bf00      	nop
 80095e4:	20019ce4 	.word	0x20019ce4

080095e8 <__malloc_unlock>:
 80095e8:	4801      	ldr	r0, [pc, #4]	@ (80095f0 <__malloc_unlock+0x8>)
 80095ea:	f7ff befb 	b.w	80093e4 <__retarget_lock_release_recursive>
 80095ee:	bf00      	nop
 80095f0:	20019ce4 	.word	0x20019ce4

080095f4 <__ssputs_r>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	688e      	ldr	r6, [r1, #8]
 80095fa:	461f      	mov	r7, r3
 80095fc:	42be      	cmp	r6, r7
 80095fe:	680b      	ldr	r3, [r1, #0]
 8009600:	4682      	mov	sl, r0
 8009602:	460c      	mov	r4, r1
 8009604:	4690      	mov	r8, r2
 8009606:	d82d      	bhi.n	8009664 <__ssputs_r+0x70>
 8009608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800960c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009610:	d026      	beq.n	8009660 <__ssputs_r+0x6c>
 8009612:	6965      	ldr	r5, [r4, #20]
 8009614:	6909      	ldr	r1, [r1, #16]
 8009616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800961a:	eba3 0901 	sub.w	r9, r3, r1
 800961e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009622:	1c7b      	adds	r3, r7, #1
 8009624:	444b      	add	r3, r9
 8009626:	106d      	asrs	r5, r5, #1
 8009628:	429d      	cmp	r5, r3
 800962a:	bf38      	it	cc
 800962c:	461d      	movcc	r5, r3
 800962e:	0553      	lsls	r3, r2, #21
 8009630:	d527      	bpl.n	8009682 <__ssputs_r+0x8e>
 8009632:	4629      	mov	r1, r5
 8009634:	f7ff ff52 	bl	80094dc <_malloc_r>
 8009638:	4606      	mov	r6, r0
 800963a:	b360      	cbz	r0, 8009696 <__ssputs_r+0xa2>
 800963c:	6921      	ldr	r1, [r4, #16]
 800963e:	464a      	mov	r2, r9
 8009640:	f7ff fed1 	bl	80093e6 <memcpy>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800964a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	6126      	str	r6, [r4, #16]
 8009652:	6165      	str	r5, [r4, #20]
 8009654:	444e      	add	r6, r9
 8009656:	eba5 0509 	sub.w	r5, r5, r9
 800965a:	6026      	str	r6, [r4, #0]
 800965c:	60a5      	str	r5, [r4, #8]
 800965e:	463e      	mov	r6, r7
 8009660:	42be      	cmp	r6, r7
 8009662:	d900      	bls.n	8009666 <__ssputs_r+0x72>
 8009664:	463e      	mov	r6, r7
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	4632      	mov	r2, r6
 800966a:	4641      	mov	r1, r8
 800966c:	f000 fc4c 	bl	8009f08 <memmove>
 8009670:	68a3      	ldr	r3, [r4, #8]
 8009672:	1b9b      	subs	r3, r3, r6
 8009674:	60a3      	str	r3, [r4, #8]
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	4433      	add	r3, r6
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	2000      	movs	r0, #0
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	462a      	mov	r2, r5
 8009684:	f000 fc8c 	bl	8009fa0 <_realloc_r>
 8009688:	4606      	mov	r6, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d1e0      	bne.n	8009650 <__ssputs_r+0x5c>
 800968e:	6921      	ldr	r1, [r4, #16]
 8009690:	4650      	mov	r0, sl
 8009692:	f7ff feb7 	bl	8009404 <_free_r>
 8009696:	230c      	movs	r3, #12
 8009698:	f8ca 3000 	str.w	r3, [sl]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	e7e9      	b.n	800967e <__ssputs_r+0x8a>
	...

080096ac <_svfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	4698      	mov	r8, r3
 80096b2:	898b      	ldrh	r3, [r1, #12]
 80096b4:	061b      	lsls	r3, r3, #24
 80096b6:	b09d      	sub	sp, #116	@ 0x74
 80096b8:	4607      	mov	r7, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	d510      	bpl.n	80096e2 <_svfiprintf_r+0x36>
 80096c0:	690b      	ldr	r3, [r1, #16]
 80096c2:	b973      	cbnz	r3, 80096e2 <_svfiprintf_r+0x36>
 80096c4:	2140      	movs	r1, #64	@ 0x40
 80096c6:	f7ff ff09 	bl	80094dc <_malloc_r>
 80096ca:	6028      	str	r0, [r5, #0]
 80096cc:	6128      	str	r0, [r5, #16]
 80096ce:	b930      	cbnz	r0, 80096de <_svfiprintf_r+0x32>
 80096d0:	230c      	movs	r3, #12
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	b01d      	add	sp, #116	@ 0x74
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	2340      	movs	r3, #64	@ 0x40
 80096e0:	616b      	str	r3, [r5, #20]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e6:	2320      	movs	r3, #32
 80096e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f0:	2330      	movs	r3, #48	@ 0x30
 80096f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009890 <_svfiprintf_r+0x1e4>
 80096f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096fa:	f04f 0901 	mov.w	r9, #1
 80096fe:	4623      	mov	r3, r4
 8009700:	469a      	mov	sl, r3
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	b10a      	cbz	r2, 800970c <_svfiprintf_r+0x60>
 8009708:	2a25      	cmp	r2, #37	@ 0x25
 800970a:	d1f9      	bne.n	8009700 <_svfiprintf_r+0x54>
 800970c:	ebba 0b04 	subs.w	fp, sl, r4
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x7e>
 8009712:	465b      	mov	r3, fp
 8009714:	4622      	mov	r2, r4
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff6b 	bl	80095f4 <__ssputs_r>
 800971e:	3001      	adds	r0, #1
 8009720:	f000 80a7 	beq.w	8009872 <_svfiprintf_r+0x1c6>
 8009724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009726:	445a      	add	r2, fp
 8009728:	9209      	str	r2, [sp, #36]	@ 0x24
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 809f 	beq.w	8009872 <_svfiprintf_r+0x1c6>
 8009734:	2300      	movs	r3, #0
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973e:	f10a 0a01 	add.w	sl, sl, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800974a:	931a      	str	r3, [sp, #104]	@ 0x68
 800974c:	4654      	mov	r4, sl
 800974e:	2205      	movs	r2, #5
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	484e      	ldr	r0, [pc, #312]	@ (8009890 <_svfiprintf_r+0x1e4>)
 8009756:	f7f6 fd5b 	bl	8000210 <memchr>
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	b9d8      	cbnz	r0, 8009796 <_svfiprintf_r+0xea>
 800975e:	06d0      	lsls	r0, r2, #27
 8009760:	bf44      	itt	mi
 8009762:	2320      	movmi	r3, #32
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009768:	0711      	lsls	r1, r2, #28
 800976a:	bf44      	itt	mi
 800976c:	232b      	movmi	r3, #43	@ 0x2b
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b2a      	cmp	r3, #42	@ 0x2a
 8009778:	d015      	beq.n	80097a6 <_svfiprintf_r+0xfa>
 800977a:	9a07      	ldr	r2, [sp, #28]
 800977c:	4654      	mov	r4, sl
 800977e:	2000      	movs	r0, #0
 8009780:	f04f 0c0a 	mov.w	ip, #10
 8009784:	4621      	mov	r1, r4
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	@ 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d94b      	bls.n	8009828 <_svfiprintf_r+0x17c>
 8009790:	b1b0      	cbz	r0, 80097c0 <_svfiprintf_r+0x114>
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	e014      	b.n	80097c0 <_svfiprintf_r+0x114>
 8009796:	eba0 0308 	sub.w	r3, r0, r8
 800979a:	fa09 f303 	lsl.w	r3, r9, r3
 800979e:	4313      	orrs	r3, r2
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	46a2      	mov	sl, r4
 80097a4:	e7d2      	b.n	800974c <_svfiprintf_r+0xa0>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	1d19      	adds	r1, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9103      	str	r1, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbb      	ittet	lt
 80097b2:	425b      	neglt	r3, r3
 80097b4:	f042 0202 	orrlt.w	r2, r2, #2
 80097b8:	9307      	strge	r3, [sp, #28]
 80097ba:	9307      	strlt	r3, [sp, #28]
 80097bc:	bfb8      	it	lt
 80097be:	9204      	strlt	r2, [sp, #16]
 80097c0:	7823      	ldrb	r3, [r4, #0]
 80097c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80097c4:	d10a      	bne.n	80097dc <_svfiprintf_r+0x130>
 80097c6:	7863      	ldrb	r3, [r4, #1]
 80097c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ca:	d132      	bne.n	8009832 <_svfiprintf_r+0x186>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9203      	str	r2, [sp, #12]
 80097d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097d8:	3402      	adds	r4, #2
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098a0 <_svfiprintf_r+0x1f4>
 80097e0:	7821      	ldrb	r1, [r4, #0]
 80097e2:	2203      	movs	r2, #3
 80097e4:	4650      	mov	r0, sl
 80097e6:	f7f6 fd13 	bl	8000210 <memchr>
 80097ea:	b138      	cbz	r0, 80097fc <_svfiprintf_r+0x150>
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	eba0 000a 	sub.w	r0, r0, sl
 80097f2:	2240      	movs	r2, #64	@ 0x40
 80097f4:	4082      	lsls	r2, r0
 80097f6:	4313      	orrs	r3, r2
 80097f8:	3401      	adds	r4, #1
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009800:	4824      	ldr	r0, [pc, #144]	@ (8009894 <_svfiprintf_r+0x1e8>)
 8009802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009806:	2206      	movs	r2, #6
 8009808:	f7f6 fd02 	bl	8000210 <memchr>
 800980c:	2800      	cmp	r0, #0
 800980e:	d036      	beq.n	800987e <_svfiprintf_r+0x1d2>
 8009810:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <_svfiprintf_r+0x1ec>)
 8009812:	bb1b      	cbnz	r3, 800985c <_svfiprintf_r+0x1b0>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	3307      	adds	r3, #7
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	3308      	adds	r3, #8
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009822:	4433      	add	r3, r6
 8009824:	9309      	str	r3, [sp, #36]	@ 0x24
 8009826:	e76a      	b.n	80096fe <_svfiprintf_r+0x52>
 8009828:	fb0c 3202 	mla	r2, ip, r2, r3
 800982c:	460c      	mov	r4, r1
 800982e:	2001      	movs	r0, #1
 8009830:	e7a8      	b.n	8009784 <_svfiprintf_r+0xd8>
 8009832:	2300      	movs	r3, #0
 8009834:	3401      	adds	r4, #1
 8009836:	9305      	str	r3, [sp, #20]
 8009838:	4619      	mov	r1, r3
 800983a:	f04f 0c0a 	mov.w	ip, #10
 800983e:	4620      	mov	r0, r4
 8009840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009844:	3a30      	subs	r2, #48	@ 0x30
 8009846:	2a09      	cmp	r2, #9
 8009848:	d903      	bls.n	8009852 <_svfiprintf_r+0x1a6>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0c6      	beq.n	80097dc <_svfiprintf_r+0x130>
 800984e:	9105      	str	r1, [sp, #20]
 8009850:	e7c4      	b.n	80097dc <_svfiprintf_r+0x130>
 8009852:	fb0c 2101 	mla	r1, ip, r1, r2
 8009856:	4604      	mov	r4, r0
 8009858:	2301      	movs	r3, #1
 800985a:	e7f0      	b.n	800983e <_svfiprintf_r+0x192>
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4b0e      	ldr	r3, [pc, #56]	@ (800989c <_svfiprintf_r+0x1f0>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4638      	mov	r0, r7
 8009868:	f3af 8000 	nop.w
 800986c:	1c42      	adds	r2, r0, #1
 800986e:	4606      	mov	r6, r0
 8009870:	d1d6      	bne.n	8009820 <_svfiprintf_r+0x174>
 8009872:	89ab      	ldrh	r3, [r5, #12]
 8009874:	065b      	lsls	r3, r3, #25
 8009876:	f53f af2d 	bmi.w	80096d4 <_svfiprintf_r+0x28>
 800987a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800987c:	e72c      	b.n	80096d8 <_svfiprintf_r+0x2c>
 800987e:	ab03      	add	r3, sp, #12
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	462a      	mov	r2, r5
 8009884:	4b05      	ldr	r3, [pc, #20]	@ (800989c <_svfiprintf_r+0x1f0>)
 8009886:	a904      	add	r1, sp, #16
 8009888:	4638      	mov	r0, r7
 800988a:	f000 f9bb 	bl	8009c04 <_printf_i>
 800988e:	e7ed      	b.n	800986c <_svfiprintf_r+0x1c0>
 8009890:	0800aedc 	.word	0x0800aedc
 8009894:	0800aee6 	.word	0x0800aee6
 8009898:	00000000 	.word	0x00000000
 800989c:	080095f5 	.word	0x080095f5
 80098a0:	0800aee2 	.word	0x0800aee2

080098a4 <__sfputc_r>:
 80098a4:	6893      	ldr	r3, [r2, #8]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	b410      	push	{r4}
 80098ac:	6093      	str	r3, [r2, #8]
 80098ae:	da08      	bge.n	80098c2 <__sfputc_r+0x1e>
 80098b0:	6994      	ldr	r4, [r2, #24]
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	db01      	blt.n	80098ba <__sfputc_r+0x16>
 80098b6:	290a      	cmp	r1, #10
 80098b8:	d103      	bne.n	80098c2 <__sfputc_r+0x1e>
 80098ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098be:	f7ff bc18 	b.w	80090f2 <__swbuf_r>
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	1c58      	adds	r0, r3, #1
 80098c6:	6010      	str	r0, [r2, #0]
 80098c8:	7019      	strb	r1, [r3, #0]
 80098ca:	4608      	mov	r0, r1
 80098cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <__sfputs_r>:
 80098d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	4614      	mov	r4, r2
 80098da:	18d5      	adds	r5, r2, r3
 80098dc:	42ac      	cmp	r4, r5
 80098de:	d101      	bne.n	80098e4 <__sfputs_r+0x12>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e007      	b.n	80098f4 <__sfputs_r+0x22>
 80098e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e8:	463a      	mov	r2, r7
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff ffda 	bl	80098a4 <__sfputc_r>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d1f3      	bne.n	80098dc <__sfputs_r+0xa>
 80098f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098f8 <_vfiprintf_r>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	460d      	mov	r5, r1
 80098fe:	b09d      	sub	sp, #116	@ 0x74
 8009900:	4614      	mov	r4, r2
 8009902:	4698      	mov	r8, r3
 8009904:	4606      	mov	r6, r0
 8009906:	b118      	cbz	r0, 8009910 <_vfiprintf_r+0x18>
 8009908:	6a03      	ldr	r3, [r0, #32]
 800990a:	b90b      	cbnz	r3, 8009910 <_vfiprintf_r+0x18>
 800990c:	f7ff fad4 	bl	8008eb8 <__sinit>
 8009910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009912:	07d9      	lsls	r1, r3, #31
 8009914:	d405      	bmi.n	8009922 <_vfiprintf_r+0x2a>
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	059a      	lsls	r2, r3, #22
 800991a:	d402      	bmi.n	8009922 <_vfiprintf_r+0x2a>
 800991c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800991e:	f7ff fd60 	bl	80093e2 <__retarget_lock_acquire_recursive>
 8009922:	89ab      	ldrh	r3, [r5, #12]
 8009924:	071b      	lsls	r3, r3, #28
 8009926:	d501      	bpl.n	800992c <_vfiprintf_r+0x34>
 8009928:	692b      	ldr	r3, [r5, #16]
 800992a:	b99b      	cbnz	r3, 8009954 <_vfiprintf_r+0x5c>
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f7ff fc1e 	bl	8009170 <__swsetup_r>
 8009934:	b170      	cbz	r0, 8009954 <_vfiprintf_r+0x5c>
 8009936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009938:	07dc      	lsls	r4, r3, #31
 800993a:	d504      	bpl.n	8009946 <_vfiprintf_r+0x4e>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b01d      	add	sp, #116	@ 0x74
 8009942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	0598      	lsls	r0, r3, #22
 800994a:	d4f7      	bmi.n	800993c <_vfiprintf_r+0x44>
 800994c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800994e:	f7ff fd49 	bl	80093e4 <__retarget_lock_release_recursive>
 8009952:	e7f3      	b.n	800993c <_vfiprintf_r+0x44>
 8009954:	2300      	movs	r3, #0
 8009956:	9309      	str	r3, [sp, #36]	@ 0x24
 8009958:	2320      	movs	r3, #32
 800995a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800995e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009962:	2330      	movs	r3, #48	@ 0x30
 8009964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b14 <_vfiprintf_r+0x21c>
 8009968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800996c:	f04f 0901 	mov.w	r9, #1
 8009970:	4623      	mov	r3, r4
 8009972:	469a      	mov	sl, r3
 8009974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009978:	b10a      	cbz	r2, 800997e <_vfiprintf_r+0x86>
 800997a:	2a25      	cmp	r2, #37	@ 0x25
 800997c:	d1f9      	bne.n	8009972 <_vfiprintf_r+0x7a>
 800997e:	ebba 0b04 	subs.w	fp, sl, r4
 8009982:	d00b      	beq.n	800999c <_vfiprintf_r+0xa4>
 8009984:	465b      	mov	r3, fp
 8009986:	4622      	mov	r2, r4
 8009988:	4629      	mov	r1, r5
 800998a:	4630      	mov	r0, r6
 800998c:	f7ff ffa1 	bl	80098d2 <__sfputs_r>
 8009990:	3001      	adds	r0, #1
 8009992:	f000 80a7 	beq.w	8009ae4 <_vfiprintf_r+0x1ec>
 8009996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009998:	445a      	add	r2, fp
 800999a:	9209      	str	r2, [sp, #36]	@ 0x24
 800999c:	f89a 3000 	ldrb.w	r3, [sl]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 809f 	beq.w	8009ae4 <_vfiprintf_r+0x1ec>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b0:	f10a 0a01 	add.w	sl, sl, #1
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	9307      	str	r3, [sp, #28]
 80099b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80099be:	4654      	mov	r4, sl
 80099c0:	2205      	movs	r2, #5
 80099c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c6:	4853      	ldr	r0, [pc, #332]	@ (8009b14 <_vfiprintf_r+0x21c>)
 80099c8:	f7f6 fc22 	bl	8000210 <memchr>
 80099cc:	9a04      	ldr	r2, [sp, #16]
 80099ce:	b9d8      	cbnz	r0, 8009a08 <_vfiprintf_r+0x110>
 80099d0:	06d1      	lsls	r1, r2, #27
 80099d2:	bf44      	itt	mi
 80099d4:	2320      	movmi	r3, #32
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099da:	0713      	lsls	r3, r2, #28
 80099dc:	bf44      	itt	mi
 80099de:	232b      	movmi	r3, #43	@ 0x2b
 80099e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099e4:	f89a 3000 	ldrb.w	r3, [sl]
 80099e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ea:	d015      	beq.n	8009a18 <_vfiprintf_r+0x120>
 80099ec:	9a07      	ldr	r2, [sp, #28]
 80099ee:	4654      	mov	r4, sl
 80099f0:	2000      	movs	r0, #0
 80099f2:	f04f 0c0a 	mov.w	ip, #10
 80099f6:	4621      	mov	r1, r4
 80099f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099fc:	3b30      	subs	r3, #48	@ 0x30
 80099fe:	2b09      	cmp	r3, #9
 8009a00:	d94b      	bls.n	8009a9a <_vfiprintf_r+0x1a2>
 8009a02:	b1b0      	cbz	r0, 8009a32 <_vfiprintf_r+0x13a>
 8009a04:	9207      	str	r2, [sp, #28]
 8009a06:	e014      	b.n	8009a32 <_vfiprintf_r+0x13a>
 8009a08:	eba0 0308 	sub.w	r3, r0, r8
 8009a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a10:	4313      	orrs	r3, r2
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	46a2      	mov	sl, r4
 8009a16:	e7d2      	b.n	80099be <_vfiprintf_r+0xc6>
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	1d19      	adds	r1, r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	9103      	str	r1, [sp, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bfbb      	ittet	lt
 8009a24:	425b      	neglt	r3, r3
 8009a26:	f042 0202 	orrlt.w	r2, r2, #2
 8009a2a:	9307      	strge	r3, [sp, #28]
 8009a2c:	9307      	strlt	r3, [sp, #28]
 8009a2e:	bfb8      	it	lt
 8009a30:	9204      	strlt	r2, [sp, #16]
 8009a32:	7823      	ldrb	r3, [r4, #0]
 8009a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a36:	d10a      	bne.n	8009a4e <_vfiprintf_r+0x156>
 8009a38:	7863      	ldrb	r3, [r4, #1]
 8009a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a3c:	d132      	bne.n	8009aa4 <_vfiprintf_r+0x1ac>
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	1d1a      	adds	r2, r3, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	9203      	str	r2, [sp, #12]
 8009a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a4a:	3402      	adds	r4, #2
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b24 <_vfiprintf_r+0x22c>
 8009a52:	7821      	ldrb	r1, [r4, #0]
 8009a54:	2203      	movs	r2, #3
 8009a56:	4650      	mov	r0, sl
 8009a58:	f7f6 fbda 	bl	8000210 <memchr>
 8009a5c:	b138      	cbz	r0, 8009a6e <_vfiprintf_r+0x176>
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	eba0 000a 	sub.w	r0, r0, sl
 8009a64:	2240      	movs	r2, #64	@ 0x40
 8009a66:	4082      	lsls	r2, r0
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	3401      	adds	r4, #1
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a72:	4829      	ldr	r0, [pc, #164]	@ (8009b18 <_vfiprintf_r+0x220>)
 8009a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a78:	2206      	movs	r2, #6
 8009a7a:	f7f6 fbc9 	bl	8000210 <memchr>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d03f      	beq.n	8009b02 <_vfiprintf_r+0x20a>
 8009a82:	4b26      	ldr	r3, [pc, #152]	@ (8009b1c <_vfiprintf_r+0x224>)
 8009a84:	bb1b      	cbnz	r3, 8009ace <_vfiprintf_r+0x1d6>
 8009a86:	9b03      	ldr	r3, [sp, #12]
 8009a88:	3307      	adds	r3, #7
 8009a8a:	f023 0307 	bic.w	r3, r3, #7
 8009a8e:	3308      	adds	r3, #8
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a94:	443b      	add	r3, r7
 8009a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a98:	e76a      	b.n	8009970 <_vfiprintf_r+0x78>
 8009a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	e7a8      	b.n	80099f6 <_vfiprintf_r+0xfe>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	3401      	adds	r4, #1
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	f04f 0c0a 	mov.w	ip, #10
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab6:	3a30      	subs	r2, #48	@ 0x30
 8009ab8:	2a09      	cmp	r2, #9
 8009aba:	d903      	bls.n	8009ac4 <_vfiprintf_r+0x1cc>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0c6      	beq.n	8009a4e <_vfiprintf_r+0x156>
 8009ac0:	9105      	str	r1, [sp, #20]
 8009ac2:	e7c4      	b.n	8009a4e <_vfiprintf_r+0x156>
 8009ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac8:	4604      	mov	r4, r0
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7f0      	b.n	8009ab0 <_vfiprintf_r+0x1b8>
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4b12      	ldr	r3, [pc, #72]	@ (8009b20 <_vfiprintf_r+0x228>)
 8009ad6:	a904      	add	r1, sp, #16
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f3af 8000 	nop.w
 8009ade:	4607      	mov	r7, r0
 8009ae0:	1c78      	adds	r0, r7, #1
 8009ae2:	d1d6      	bne.n	8009a92 <_vfiprintf_r+0x19a>
 8009ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ae6:	07d9      	lsls	r1, r3, #31
 8009ae8:	d405      	bmi.n	8009af6 <_vfiprintf_r+0x1fe>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	059a      	lsls	r2, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_vfiprintf_r+0x1fe>
 8009af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009af2:	f7ff fc77 	bl	80093e4 <__retarget_lock_release_recursive>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	065b      	lsls	r3, r3, #25
 8009afa:	f53f af1f 	bmi.w	800993c <_vfiprintf_r+0x44>
 8009afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b00:	e71e      	b.n	8009940 <_vfiprintf_r+0x48>
 8009b02:	ab03      	add	r3, sp, #12
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	462a      	mov	r2, r5
 8009b08:	4b05      	ldr	r3, [pc, #20]	@ (8009b20 <_vfiprintf_r+0x228>)
 8009b0a:	a904      	add	r1, sp, #16
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f000 f879 	bl	8009c04 <_printf_i>
 8009b12:	e7e4      	b.n	8009ade <_vfiprintf_r+0x1e6>
 8009b14:	0800aedc 	.word	0x0800aedc
 8009b18:	0800aee6 	.word	0x0800aee6
 8009b1c:	00000000 	.word	0x00000000
 8009b20:	080098d3 	.word	0x080098d3
 8009b24:	0800aee2 	.word	0x0800aee2

08009b28 <_printf_common>:
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	4698      	mov	r8, r3
 8009b30:	688a      	ldr	r2, [r1, #8]
 8009b32:	690b      	ldr	r3, [r1, #16]
 8009b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	bfb8      	it	lt
 8009b3c:	4613      	movlt	r3, r2
 8009b3e:	6033      	str	r3, [r6, #0]
 8009b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b44:	4607      	mov	r7, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	b10a      	cbz	r2, 8009b4e <_printf_common+0x26>
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	6033      	str	r3, [r6, #0]
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	0699      	lsls	r1, r3, #26
 8009b52:	bf42      	ittt	mi
 8009b54:	6833      	ldrmi	r3, [r6, #0]
 8009b56:	3302      	addmi	r3, #2
 8009b58:	6033      	strmi	r3, [r6, #0]
 8009b5a:	6825      	ldr	r5, [r4, #0]
 8009b5c:	f015 0506 	ands.w	r5, r5, #6
 8009b60:	d106      	bne.n	8009b70 <_printf_common+0x48>
 8009b62:	f104 0a19 	add.w	sl, r4, #25
 8009b66:	68e3      	ldr	r3, [r4, #12]
 8009b68:	6832      	ldr	r2, [r6, #0]
 8009b6a:	1a9b      	subs	r3, r3, r2
 8009b6c:	42ab      	cmp	r3, r5
 8009b6e:	dc26      	bgt.n	8009bbe <_printf_common+0x96>
 8009b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	3b00      	subs	r3, #0
 8009b78:	bf18      	it	ne
 8009b7a:	2301      	movne	r3, #1
 8009b7c:	0692      	lsls	r2, r2, #26
 8009b7e:	d42b      	bmi.n	8009bd8 <_printf_common+0xb0>
 8009b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b84:	4641      	mov	r1, r8
 8009b86:	4638      	mov	r0, r7
 8009b88:	47c8      	blx	r9
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d01e      	beq.n	8009bcc <_printf_common+0xa4>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	f003 0306 	and.w	r3, r3, #6
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	bf02      	ittt	eq
 8009b9a:	68e5      	ldreq	r5, [r4, #12]
 8009b9c:	6833      	ldreq	r3, [r6, #0]
 8009b9e:	1aed      	subeq	r5, r5, r3
 8009ba0:	68a3      	ldr	r3, [r4, #8]
 8009ba2:	bf0c      	ite	eq
 8009ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ba8:	2500      	movne	r5, #0
 8009baa:	4293      	cmp	r3, r2
 8009bac:	bfc4      	itt	gt
 8009bae:	1a9b      	subgt	r3, r3, r2
 8009bb0:	18ed      	addgt	r5, r5, r3
 8009bb2:	2600      	movs	r6, #0
 8009bb4:	341a      	adds	r4, #26
 8009bb6:	42b5      	cmp	r5, r6
 8009bb8:	d11a      	bne.n	8009bf0 <_printf_common+0xc8>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e008      	b.n	8009bd0 <_printf_common+0xa8>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	4652      	mov	r2, sl
 8009bc2:	4641      	mov	r1, r8
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	47c8      	blx	r9
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d103      	bne.n	8009bd4 <_printf_common+0xac>
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd4:	3501      	adds	r5, #1
 8009bd6:	e7c6      	b.n	8009b66 <_printf_common+0x3e>
 8009bd8:	18e1      	adds	r1, r4, r3
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	2030      	movs	r0, #48	@ 0x30
 8009bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009be2:	4422      	add	r2, r4
 8009be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bec:	3302      	adds	r3, #2
 8009bee:	e7c7      	b.n	8009b80 <_printf_common+0x58>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	4641      	mov	r1, r8
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	47c8      	blx	r9
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d0e6      	beq.n	8009bcc <_printf_common+0xa4>
 8009bfe:	3601      	adds	r6, #1
 8009c00:	e7d9      	b.n	8009bb6 <_printf_common+0x8e>
	...

08009c04 <_printf_i>:
 8009c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	7e0f      	ldrb	r7, [r1, #24]
 8009c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c0c:	2f78      	cmp	r7, #120	@ 0x78
 8009c0e:	4691      	mov	r9, r2
 8009c10:	4680      	mov	r8, r0
 8009c12:	460c      	mov	r4, r1
 8009c14:	469a      	mov	sl, r3
 8009c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c1a:	d807      	bhi.n	8009c2c <_printf_i+0x28>
 8009c1c:	2f62      	cmp	r7, #98	@ 0x62
 8009c1e:	d80a      	bhi.n	8009c36 <_printf_i+0x32>
 8009c20:	2f00      	cmp	r7, #0
 8009c22:	f000 80d2 	beq.w	8009dca <_printf_i+0x1c6>
 8009c26:	2f58      	cmp	r7, #88	@ 0x58
 8009c28:	f000 80b9 	beq.w	8009d9e <_printf_i+0x19a>
 8009c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c34:	e03a      	b.n	8009cac <_printf_i+0xa8>
 8009c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c3a:	2b15      	cmp	r3, #21
 8009c3c:	d8f6      	bhi.n	8009c2c <_printf_i+0x28>
 8009c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8009c44 <_printf_i+0x40>)
 8009c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009cb1 	.word	0x08009cb1
 8009c4c:	08009c2d 	.word	0x08009c2d
 8009c50:	08009c2d 	.word	0x08009c2d
 8009c54:	08009c2d 	.word	0x08009c2d
 8009c58:	08009c2d 	.word	0x08009c2d
 8009c5c:	08009cb1 	.word	0x08009cb1
 8009c60:	08009c2d 	.word	0x08009c2d
 8009c64:	08009c2d 	.word	0x08009c2d
 8009c68:	08009c2d 	.word	0x08009c2d
 8009c6c:	08009c2d 	.word	0x08009c2d
 8009c70:	08009db1 	.word	0x08009db1
 8009c74:	08009cdb 	.word	0x08009cdb
 8009c78:	08009d6b 	.word	0x08009d6b
 8009c7c:	08009c2d 	.word	0x08009c2d
 8009c80:	08009c2d 	.word	0x08009c2d
 8009c84:	08009dd3 	.word	0x08009dd3
 8009c88:	08009c2d 	.word	0x08009c2d
 8009c8c:	08009cdb 	.word	0x08009cdb
 8009c90:	08009c2d 	.word	0x08009c2d
 8009c94:	08009c2d 	.word	0x08009c2d
 8009c98:	08009d73 	.word	0x08009d73
 8009c9c:	6833      	ldr	r3, [r6, #0]
 8009c9e:	1d1a      	adds	r2, r3, #4
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6032      	str	r2, [r6, #0]
 8009ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cac:	2301      	movs	r3, #1
 8009cae:	e09d      	b.n	8009dec <_printf_i+0x1e8>
 8009cb0:	6833      	ldr	r3, [r6, #0]
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	1d19      	adds	r1, r3, #4
 8009cb6:	6031      	str	r1, [r6, #0]
 8009cb8:	0606      	lsls	r6, r0, #24
 8009cba:	d501      	bpl.n	8009cc0 <_printf_i+0xbc>
 8009cbc:	681d      	ldr	r5, [r3, #0]
 8009cbe:	e003      	b.n	8009cc8 <_printf_i+0xc4>
 8009cc0:	0645      	lsls	r5, r0, #25
 8009cc2:	d5fb      	bpl.n	8009cbc <_printf_i+0xb8>
 8009cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cc8:	2d00      	cmp	r5, #0
 8009cca:	da03      	bge.n	8009cd4 <_printf_i+0xd0>
 8009ccc:	232d      	movs	r3, #45	@ 0x2d
 8009cce:	426d      	negs	r5, r5
 8009cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cd4:	4859      	ldr	r0, [pc, #356]	@ (8009e3c <_printf_i+0x238>)
 8009cd6:	230a      	movs	r3, #10
 8009cd8:	e011      	b.n	8009cfe <_printf_i+0xfa>
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	6833      	ldr	r3, [r6, #0]
 8009cde:	0608      	lsls	r0, r1, #24
 8009ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ce4:	d402      	bmi.n	8009cec <_printf_i+0xe8>
 8009ce6:	0649      	lsls	r1, r1, #25
 8009ce8:	bf48      	it	mi
 8009cea:	b2ad      	uxthmi	r5, r5
 8009cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cee:	4853      	ldr	r0, [pc, #332]	@ (8009e3c <_printf_i+0x238>)
 8009cf0:	6033      	str	r3, [r6, #0]
 8009cf2:	bf14      	ite	ne
 8009cf4:	230a      	movne	r3, #10
 8009cf6:	2308      	moveq	r3, #8
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cfe:	6866      	ldr	r6, [r4, #4]
 8009d00:	60a6      	str	r6, [r4, #8]
 8009d02:	2e00      	cmp	r6, #0
 8009d04:	bfa2      	ittt	ge
 8009d06:	6821      	ldrge	r1, [r4, #0]
 8009d08:	f021 0104 	bicge.w	r1, r1, #4
 8009d0c:	6021      	strge	r1, [r4, #0]
 8009d0e:	b90d      	cbnz	r5, 8009d14 <_printf_i+0x110>
 8009d10:	2e00      	cmp	r6, #0
 8009d12:	d04b      	beq.n	8009dac <_printf_i+0x1a8>
 8009d14:	4616      	mov	r6, r2
 8009d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8009d1e:	5dc7      	ldrb	r7, [r0, r7]
 8009d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d24:	462f      	mov	r7, r5
 8009d26:	42bb      	cmp	r3, r7
 8009d28:	460d      	mov	r5, r1
 8009d2a:	d9f4      	bls.n	8009d16 <_printf_i+0x112>
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d10b      	bne.n	8009d48 <_printf_i+0x144>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	07df      	lsls	r7, r3, #31
 8009d34:	d508      	bpl.n	8009d48 <_printf_i+0x144>
 8009d36:	6923      	ldr	r3, [r4, #16]
 8009d38:	6861      	ldr	r1, [r4, #4]
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	bfde      	ittt	le
 8009d3e:	2330      	movle	r3, #48	@ 0x30
 8009d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d48:	1b92      	subs	r2, r2, r6
 8009d4a:	6122      	str	r2, [r4, #16]
 8009d4c:	f8cd a000 	str.w	sl, [sp]
 8009d50:	464b      	mov	r3, r9
 8009d52:	aa03      	add	r2, sp, #12
 8009d54:	4621      	mov	r1, r4
 8009d56:	4640      	mov	r0, r8
 8009d58:	f7ff fee6 	bl	8009b28 <_printf_common>
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	d14a      	bne.n	8009df6 <_printf_i+0x1f2>
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	b004      	add	sp, #16
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	f043 0320 	orr.w	r3, r3, #32
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	4833      	ldr	r0, [pc, #204]	@ (8009e40 <_printf_i+0x23c>)
 8009d74:	2778      	movs	r7, #120	@ 0x78
 8009d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	6831      	ldr	r1, [r6, #0]
 8009d7e:	061f      	lsls	r7, r3, #24
 8009d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d84:	d402      	bmi.n	8009d8c <_printf_i+0x188>
 8009d86:	065f      	lsls	r7, r3, #25
 8009d88:	bf48      	it	mi
 8009d8a:	b2ad      	uxthmi	r5, r5
 8009d8c:	6031      	str	r1, [r6, #0]
 8009d8e:	07d9      	lsls	r1, r3, #31
 8009d90:	bf44      	itt	mi
 8009d92:	f043 0320 	orrmi.w	r3, r3, #32
 8009d96:	6023      	strmi	r3, [r4, #0]
 8009d98:	b11d      	cbz	r5, 8009da2 <_printf_i+0x19e>
 8009d9a:	2310      	movs	r3, #16
 8009d9c:	e7ac      	b.n	8009cf8 <_printf_i+0xf4>
 8009d9e:	4827      	ldr	r0, [pc, #156]	@ (8009e3c <_printf_i+0x238>)
 8009da0:	e7e9      	b.n	8009d76 <_printf_i+0x172>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	f023 0320 	bic.w	r3, r3, #32
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	e7f6      	b.n	8009d9a <_printf_i+0x196>
 8009dac:	4616      	mov	r6, r2
 8009dae:	e7bd      	b.n	8009d2c <_printf_i+0x128>
 8009db0:	6833      	ldr	r3, [r6, #0]
 8009db2:	6825      	ldr	r5, [r4, #0]
 8009db4:	6961      	ldr	r1, [r4, #20]
 8009db6:	1d18      	adds	r0, r3, #4
 8009db8:	6030      	str	r0, [r6, #0]
 8009dba:	062e      	lsls	r6, r5, #24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0x1c0>
 8009dc0:	6019      	str	r1, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <_printf_i+0x1c6>
 8009dc4:	0668      	lsls	r0, r5, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0x1bc>
 8009dc8:	8019      	strh	r1, [r3, #0]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	4616      	mov	r6, r2
 8009dd0:	e7bc      	b.n	8009d4c <_printf_i+0x148>
 8009dd2:	6833      	ldr	r3, [r6, #0]
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	6032      	str	r2, [r6, #0]
 8009dd8:	681e      	ldr	r6, [r3, #0]
 8009dda:	6862      	ldr	r2, [r4, #4]
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4630      	mov	r0, r6
 8009de0:	f7f6 fa16 	bl	8000210 <memchr>
 8009de4:	b108      	cbz	r0, 8009dea <_printf_i+0x1e6>
 8009de6:	1b80      	subs	r0, r0, r6
 8009de8:	6060      	str	r0, [r4, #4]
 8009dea:	6863      	ldr	r3, [r4, #4]
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	2300      	movs	r3, #0
 8009df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df4:	e7aa      	b.n	8009d4c <_printf_i+0x148>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	47d0      	blx	sl
 8009e00:	3001      	adds	r0, #1
 8009e02:	d0ad      	beq.n	8009d60 <_printf_i+0x15c>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	079b      	lsls	r3, r3, #30
 8009e08:	d413      	bmi.n	8009e32 <_printf_i+0x22e>
 8009e0a:	68e0      	ldr	r0, [r4, #12]
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	4298      	cmp	r0, r3
 8009e10:	bfb8      	it	lt
 8009e12:	4618      	movlt	r0, r3
 8009e14:	e7a6      	b.n	8009d64 <_printf_i+0x160>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d09d      	beq.n	8009d60 <_printf_i+0x15c>
 8009e24:	3501      	adds	r5, #1
 8009e26:	68e3      	ldr	r3, [r4, #12]
 8009e28:	9903      	ldr	r1, [sp, #12]
 8009e2a:	1a5b      	subs	r3, r3, r1
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dcf2      	bgt.n	8009e16 <_printf_i+0x212>
 8009e30:	e7eb      	b.n	8009e0a <_printf_i+0x206>
 8009e32:	2500      	movs	r5, #0
 8009e34:	f104 0619 	add.w	r6, r4, #25
 8009e38:	e7f5      	b.n	8009e26 <_printf_i+0x222>
 8009e3a:	bf00      	nop
 8009e3c:	0800aeed 	.word	0x0800aeed
 8009e40:	0800aefe 	.word	0x0800aefe

08009e44 <__swhatbuf_r>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	460c      	mov	r4, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	b096      	sub	sp, #88	@ 0x58
 8009e50:	4615      	mov	r5, r2
 8009e52:	461e      	mov	r6, r3
 8009e54:	da0d      	bge.n	8009e72 <__swhatbuf_r+0x2e>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e5c:	f04f 0100 	mov.w	r1, #0
 8009e60:	bf14      	ite	ne
 8009e62:	2340      	movne	r3, #64	@ 0x40
 8009e64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e68:	2000      	movs	r0, #0
 8009e6a:	6031      	str	r1, [r6, #0]
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	b016      	add	sp, #88	@ 0x58
 8009e70:	bd70      	pop	{r4, r5, r6, pc}
 8009e72:	466a      	mov	r2, sp
 8009e74:	f000 f862 	bl	8009f3c <_fstat_r>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	dbec      	blt.n	8009e56 <__swhatbuf_r+0x12>
 8009e7c:	9901      	ldr	r1, [sp, #4]
 8009e7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e86:	4259      	negs	r1, r3
 8009e88:	4159      	adcs	r1, r3
 8009e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e8e:	e7eb      	b.n	8009e68 <__swhatbuf_r+0x24>

08009e90 <__smakebuf_r>:
 8009e90:	898b      	ldrh	r3, [r1, #12]
 8009e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e94:	079d      	lsls	r5, r3, #30
 8009e96:	4606      	mov	r6, r0
 8009e98:	460c      	mov	r4, r1
 8009e9a:	d507      	bpl.n	8009eac <__smakebuf_r+0x1c>
 8009e9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	6123      	str	r3, [r4, #16]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	6163      	str	r3, [r4, #20]
 8009ea8:	b003      	add	sp, #12
 8009eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eac:	ab01      	add	r3, sp, #4
 8009eae:	466a      	mov	r2, sp
 8009eb0:	f7ff ffc8 	bl	8009e44 <__swhatbuf_r>
 8009eb4:	9f00      	ldr	r7, [sp, #0]
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	4639      	mov	r1, r7
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff fb0e 	bl	80094dc <_malloc_r>
 8009ec0:	b948      	cbnz	r0, 8009ed6 <__smakebuf_r+0x46>
 8009ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec6:	059a      	lsls	r2, r3, #22
 8009ec8:	d4ee      	bmi.n	8009ea8 <__smakebuf_r+0x18>
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	f043 0302 	orr.w	r3, r3, #2
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	e7e2      	b.n	8009e9c <__smakebuf_r+0xc>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	6020      	str	r0, [r4, #0]
 8009eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ee6:	b15b      	cbz	r3, 8009f00 <__smakebuf_r+0x70>
 8009ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eec:	4630      	mov	r0, r6
 8009eee:	f000 f837 	bl	8009f60 <_isatty_r>
 8009ef2:	b128      	cbz	r0, 8009f00 <__smakebuf_r+0x70>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f023 0303 	bic.w	r3, r3, #3
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	431d      	orrs	r5, r3
 8009f04:	81a5      	strh	r5, [r4, #12]
 8009f06:	e7cf      	b.n	8009ea8 <__smakebuf_r+0x18>

08009f08 <memmove>:
 8009f08:	4288      	cmp	r0, r1
 8009f0a:	b510      	push	{r4, lr}
 8009f0c:	eb01 0402 	add.w	r4, r1, r2
 8009f10:	d902      	bls.n	8009f18 <memmove+0x10>
 8009f12:	4284      	cmp	r4, r0
 8009f14:	4623      	mov	r3, r4
 8009f16:	d807      	bhi.n	8009f28 <memmove+0x20>
 8009f18:	1e43      	subs	r3, r0, #1
 8009f1a:	42a1      	cmp	r1, r4
 8009f1c:	d008      	beq.n	8009f30 <memmove+0x28>
 8009f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f26:	e7f8      	b.n	8009f1a <memmove+0x12>
 8009f28:	4402      	add	r2, r0
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	428a      	cmp	r2, r1
 8009f2e:	d100      	bne.n	8009f32 <memmove+0x2a>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f3a:	e7f7      	b.n	8009f2c <memmove+0x24>

08009f3c <_fstat_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	@ (8009f5c <_fstat_r+0x20>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	4611      	mov	r1, r2
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	f7f7 fd60 	bl	8001a0e <_fstat>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d102      	bne.n	8009f58 <_fstat_r+0x1c>
 8009f52:	682b      	ldr	r3, [r5, #0]
 8009f54:	b103      	cbz	r3, 8009f58 <_fstat_r+0x1c>
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20019ce0 	.word	0x20019ce0

08009f60 <_isatty_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d06      	ldr	r5, [pc, #24]	@ (8009f7c <_isatty_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f7 fd5f 	bl	8001a2e <_isatty>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_isatty_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_isatty_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20019ce0 	.word	0x20019ce0

08009f80 <_sbrk_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d06      	ldr	r5, [pc, #24]	@ (8009f9c <_sbrk_r+0x1c>)
 8009f84:	2300      	movs	r3, #0
 8009f86:	4604      	mov	r4, r0
 8009f88:	4608      	mov	r0, r1
 8009f8a:	602b      	str	r3, [r5, #0]
 8009f8c:	f7f7 fd68 	bl	8001a60 <_sbrk>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_sbrk_r+0x1a>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_sbrk_r+0x1a>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	20019ce0 	.word	0x20019ce0

08009fa0 <_realloc_r>:
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	4680      	mov	r8, r0
 8009fa6:	4615      	mov	r5, r2
 8009fa8:	460c      	mov	r4, r1
 8009faa:	b921      	cbnz	r1, 8009fb6 <_realloc_r+0x16>
 8009fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	f7ff ba93 	b.w	80094dc <_malloc_r>
 8009fb6:	b92a      	cbnz	r2, 8009fc4 <_realloc_r+0x24>
 8009fb8:	f7ff fa24 	bl	8009404 <_free_r>
 8009fbc:	2400      	movs	r4, #0
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc4:	f000 f81a 	bl	8009ffc <_malloc_usable_size_r>
 8009fc8:	4285      	cmp	r5, r0
 8009fca:	4606      	mov	r6, r0
 8009fcc:	d802      	bhi.n	8009fd4 <_realloc_r+0x34>
 8009fce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fd2:	d8f4      	bhi.n	8009fbe <_realloc_r+0x1e>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	f7ff fa80 	bl	80094dc <_malloc_r>
 8009fdc:	4607      	mov	r7, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d0ec      	beq.n	8009fbc <_realloc_r+0x1c>
 8009fe2:	42b5      	cmp	r5, r6
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	bf28      	it	cs
 8009fea:	4632      	movcs	r2, r6
 8009fec:	f7ff f9fb 	bl	80093e6 <memcpy>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f7ff fa06 	bl	8009404 <_free_r>
 8009ff8:	463c      	mov	r4, r7
 8009ffa:	e7e0      	b.n	8009fbe <_realloc_r+0x1e>

08009ffc <_malloc_usable_size_r>:
 8009ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a000:	1f18      	subs	r0, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfbc      	itt	lt
 800a006:	580b      	ldrlt	r3, [r1, r0]
 800a008:	18c0      	addlt	r0, r0, r3
 800a00a:	4770      	bx	lr

0800a00c <_init>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	bf00      	nop
 800a010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a012:	bc08      	pop	{r3}
 800a014:	469e      	mov	lr, r3
 800a016:	4770      	bx	lr

0800a018 <_fini>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	bf00      	nop
 800a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01e:	bc08      	pop	{r3}
 800a020:	469e      	mov	lr, r3
 800a022:	4770      	bx	lr

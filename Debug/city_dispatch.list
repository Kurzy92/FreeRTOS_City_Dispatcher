
city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001788  0800d030  0800d030  0000e030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7b8  0800e7b8  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7b8  0800e7b8  0000f7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7c0  0800e7c0  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7c0  0800e7c0  0000f7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e7c4  0800e7c4  0000f7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e7c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019da8  200001dc  0800e9a4  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019f84  0800e9a4  00010f84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e02  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce5  00000000  00000000  0003300e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00037cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001467  00000000  00000000  00039758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd55  00000000  00000000  0003abbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238e5  00000000  00000000  00066914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100307  00000000  00000000  0008a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fe4  00000000  00000000  0018a544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00192528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d018 	.word	0x0800d018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800d018 	.word	0x0800d018

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <getTasksStatus>:
/**
 * @brief Task to get and print the status of all tasks.
 *
 * @param pvParameters Parameters passed to the task (unused).
 */
void getTasksStatus(void *pvParameters) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0a0      	sub	sp, #128	@ 0x80
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
    uint32_t ulNotificationValue;
    bool printedStatus = false;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    char logBuffer[MAX_MSG_LENGTH];

    for (;;) {
        if (!btnFlag) {
 8000ee6:	4bba      	ldr	r3, [pc, #744]	@ (80011d0 <getTasksStatus+0x2f8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f083 0301 	eor.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00a      	beq.n	8000f0a <getTasksStatus+0x32>
            printedStatus = false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8000efa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f007 fec3 	bl	8008c90 <xTaskNotifyWait>
        }
        if (!printedStatus) {
 8000f0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0e6      	beq.n	8000ee6 <getTasksStatus+0xe>

            vTaskSuspend(vTasksManagerTask);
 8000f18:	4bae      	ldr	r3, [pc, #696]	@ (80011d4 <getTasksStatus+0x2fc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f006 ff6d 	bl	8007dfc <vTaskSuspend>
            while(uxQueueMessagesWaiting(qLogger) != 0) {
 8000f22:	e002      	b.n	8000f2a <getTasksStatus+0x52>
            	vTaskDelay(15);
 8000f24:	200f      	movs	r0, #15
 8000f26:	f006 ff31 	bl	8007d8c <vTaskDelay>
            while(uxQueueMessagesWaiting(qLogger) != 0) {
 8000f2a:	4bab      	ldr	r3, [pc, #684]	@ (80011d8 <getTasksStatus+0x300>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 fb9e 	bl	8007670 <uxQueueMessagesWaiting>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f4      	bne.n	8000f24 <getTasksStatus+0x4c>
            }
            taskENTER_CRITICAL();
 8000f3a:	f008 fe05 	bl	8009b48 <vPortEnterCritical>
            vTaskSuspend(vLoggerTask);
 8000f3e:	4ba7      	ldr	r3, [pc, #668]	@ (80011dc <getTasksStatus+0x304>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 ff5a 	bl	8007dfc <vTaskSuspend>


            snprintf(logBuffer, MAX_MSG_LENGTH, "\n\n************** Tasks Status Report **************\r\n");
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4aa4      	ldr	r2, [pc, #656]	@ (80011e0 <getTasksStatus+0x308>)
 8000f4e:	2164      	movs	r1, #100	@ 0x64
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 ff5f 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 ff04 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current Running tasks: %d\r\n", (int)current_running_tasks);
 8000f60:	4ba0      	ldr	r3, [pc, #640]	@ (80011e4 <getTasksStatus+0x30c>)
 8000f62:	f993 3000 	ldrsb.w	r3, [r3]
 8000f66:	f107 000c 	add.w	r0, r7, #12
 8000f6a:	4a9f      	ldr	r2, [pc, #636]	@ (80011e8 <getTasksStatus+0x310>)
 8000f6c:	2164      	movs	r1, #100	@ 0x64
 8000f6e:	f009 ff51 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fef6 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "              Total Ran Tasks: %d\r\n", (int)total_tasks_ran);
 8000f7c:	4b9b      	ldr	r3, [pc, #620]	@ (80011ec <getTasksStatus+0x314>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f107 000c 	add.w	r0, r7, #12
 8000f84:	4a9a      	ldr	r2, [pc, #616]	@ (80011f0 <getTasksStatus+0x318>)
 8000f86:	2164      	movs	r1, #100	@ 0x64
 8000f88:	f009 ff44 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fee9 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "     Total tasks running time: %.3f seconds\r\n", total_tasks_time);
 8000f96:	4b97      	ldr	r3, [pc, #604]	@ (80011f4 <getTasksStatus+0x31c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff faf4 	bl	8000588 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	f107 000c 	add.w	r0, r7, #12
 8000fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8000fac:	4a92      	ldr	r2, [pc, #584]	@ (80011f8 <getTasksStatus+0x320>)
 8000fae:	2164      	movs	r1, #100	@ 0x64
 8000fb0:	f009 ff30 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fed5 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "     Average task running time: %.3f seconds\r\n", average_task_time);
 8000fbe:	4b8f      	ldr	r3, [pc, #572]	@ (80011fc <getTasksStatus+0x324>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fae0 	bl	8000588 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	f107 000c 	add.w	r0, r7, #12
 8000fd0:	e9cd 2300 	strd	r2, r3, [sp]
 8000fd4:	4a8a      	ldr	r2, [pc, #552]	@ (8001200 <getTasksStatus+0x328>)
 8000fd6:	2164      	movs	r1, #100	@ 0x64
 8000fd8:	f009 ff1c 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fec1 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n********* Ambulances Tasks Status Report *********\r\n");
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	4a86      	ldr	r2, [pc, #536]	@ (8001204 <getTasksStatus+0x32c>)
 8000fec:	2164      	movs	r1, #100	@ 0x64
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f009 ff10 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 feb5 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total ambulance tasks: %d\r\n", (int)AMBULANCE_TASKS);
 8000ffe:	f107 000c 	add.w	r0, r7, #12
 8001002:	2308      	movs	r3, #8
 8001004:	4a80      	ldr	r2, [pc, #512]	@ (8001208 <getTasksStatus+0x330>)
 8001006:	2164      	movs	r1, #100	@ 0x64
 8001008:	f009 ff04 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fea9 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(AMBULANCE_TASKS - available_amb_tasks));
 8001016:	4b7d      	ldr	r3, [pc, #500]	@ (800120c <getTasksStatus+0x334>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f1c3 0308 	rsb	r3, r3, #8
 800101e:	f107 000c 	add.w	r0, r7, #12
 8001022:	4a7b      	ldr	r2, [pc, #492]	@ (8001210 <getTasksStatus+0x338>)
 8001024:	2164      	movs	r1, #100	@ 0x64
 8001026:	f009 fef5 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fe9a 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n", (int)available_amb_tasks);
 8001034:	4b75      	ldr	r3, [pc, #468]	@ (800120c <getTasksStatus+0x334>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f107 000c 	add.w	r0, r7, #12
 800103c:	4a75      	ldr	r2, [pc, #468]	@ (8001214 <getTasksStatus+0x33c>)
 800103e:	2164      	movs	r1, #100	@ 0x64
 8001040:	f009 fee8 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fe8d 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n*********** Police Tasks Status Report ***********\r\n");
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4a71      	ldr	r2, [pc, #452]	@ (8001218 <getTasksStatus+0x340>)
 8001054:	2164      	movs	r1, #100	@ 0x64
 8001056:	4618      	mov	r0, r3
 8001058:	f009 fedc 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fe81 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total police tasks: %d\r\n", (int)POLICE_TASKS);
 8001066:	f107 000c 	add.w	r0, r7, #12
 800106a:	2305      	movs	r3, #5
 800106c:	4a6b      	ldr	r2, [pc, #428]	@ (800121c <getTasksStatus+0x344>)
 800106e:	2164      	movs	r1, #100	@ 0x64
 8001070:	f009 fed0 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fe75 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(POLICE_TASKS - available_police_tasks));
 800107e:	4b68      	ldr	r3, [pc, #416]	@ (8001220 <getTasksStatus+0x348>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	f1c3 0305 	rsb	r3, r3, #5
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	4a61      	ldr	r2, [pc, #388]	@ (8001210 <getTasksStatus+0x338>)
 800108c:	2164      	movs	r1, #100	@ 0x64
 800108e:	f009 fec1 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fe66 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n", (int)available_police_tasks);
 800109c:	4b60      	ldr	r3, [pc, #384]	@ (8001220 <getTasksStatus+0x348>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f107 000c 	add.w	r0, r7, #12
 80010a4:	4a5b      	ldr	r2, [pc, #364]	@ (8001214 <getTasksStatus+0x33c>)
 80010a6:	2164      	movs	r1, #100	@ 0x64
 80010a8:	f009 feb4 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fe59 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n********** Fire Dep Tasks Status Report **********\r\n");
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001224 <getTasksStatus+0x34c>)
 80010bc:	2164      	movs	r1, #100	@ 0x64
 80010be:	4618      	mov	r0, r3
 80010c0:	f009 fea8 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fe4d 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total fire dep tasks: %d\r\n", (int)FIRE_TASKS);
 80010ce:	f107 000c 	add.w	r0, r7, #12
 80010d2:	2305      	movs	r3, #5
 80010d4:	4a54      	ldr	r2, [pc, #336]	@ (8001228 <getTasksStatus+0x350>)
 80010d6:	2164      	movs	r1, #100	@ 0x64
 80010d8:	f009 fe9c 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe41 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(FIRE_TASKS - available_fire_tasks));
 80010e6:	4b51      	ldr	r3, [pc, #324]	@ (800122c <getTasksStatus+0x354>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f1c3 0305 	rsb	r3, r3, #5
 80010ee:	f107 000c 	add.w	r0, r7, #12
 80010f2:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <getTasksStatus+0x338>)
 80010f4:	2164      	movs	r1, #100	@ 0x64
 80010f6:	f009 fe8d 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fe32 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n", (int)available_fire_tasks);
 8001104:	4b49      	ldr	r3, [pc, #292]	@ (800122c <getTasksStatus+0x354>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f107 000c 	add.w	r0, r7, #12
 800110c:	4a41      	ldr	r2, [pc, #260]	@ (8001214 <getTasksStatus+0x33c>)
 800110e:	2164      	movs	r1, #100	@ 0x64
 8001110:	f009 fe80 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fe25 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n*********** Corona Tasks Status Report ************\r\n");
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4a43      	ldr	r2, [pc, #268]	@ (8001230 <getTasksStatus+0x358>)
 8001124:	2164      	movs	r1, #100	@ 0x64
 8001126:	4618      	mov	r0, r3
 8001128:	f009 fe74 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fe19 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total corona tasks: %d\r\n", (int)CORONA_TASKS);
 8001136:	f107 000c 	add.w	r0, r7, #12
 800113a:	2305      	movs	r3, #5
 800113c:	4a3d      	ldr	r2, [pc, #244]	@ (8001234 <getTasksStatus+0x35c>)
 800113e:	2164      	movs	r1, #100	@ 0x64
 8001140:	f009 fe68 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fe0d 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(CORONA_TASKS - available_corona_tasks));
 800114e:	4b3a      	ldr	r3, [pc, #232]	@ (8001238 <getTasksStatus+0x360>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f1c3 0305 	rsb	r3, r3, #5
 8001156:	f107 000c 	add.w	r0, r7, #12
 800115a:	4a2d      	ldr	r2, [pc, #180]	@ (8001210 <getTasksStatus+0x338>)
 800115c:	2164      	movs	r1, #100	@ 0x64
 800115e:	f009 fe59 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fdfe 	bl	8001d68 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n\n\n", (int)available_corona_tasks);
 800116c:	4b32      	ldr	r3, [pc, #200]	@ (8001238 <getTasksStatus+0x360>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f107 000c 	add.w	r0, r7, #12
 8001174:	4a31      	ldr	r2, [pc, #196]	@ (800123c <getTasksStatus+0x364>)
 8001176:	2164      	movs	r1, #100	@ 0x64
 8001178:	f009 fe4c 	bl	800ae14 <sniprintf>
            SendDataMessage(logBuffer);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fdf1 	bl	8001d68 <SendDataMessage>
            xTaskNotify(vBtnDataTask, 0x00, eNoAction);
 8001186:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <getTasksStatus+0x368>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	f007 fdde 	bl	8008d50 <xTaskGenericNotify>
            //vTaskSuspend(vBtnDataTask);
            taskEXIT_CRITICAL();
 8001194:	f008 fd0e 	bl	8009bb4 <vPortExitCritical>
            printedStatus = !printedStatus;
 8001198:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f083 0301 	eor.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80011b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 80011bc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	2100      	movs	r1, #0
 80011c6:	2000      	movs	r0, #0
 80011c8:	f007 fd62 	bl	8008c90 <xTaskNotifyWait>
        if (!btnFlag) {
 80011cc:	e68b      	b.n	8000ee6 <getTasksStatus+0xe>
 80011ce:	bf00      	nop
 80011d0:	2000095c 	.word	0x2000095c
 80011d4:	20000904 	.word	0x20000904
 80011d8:	20000898 	.word	0x20000898
 80011dc:	2000090c 	.word	0x2000090c
 80011e0:	0800d030 	.word	0x0800d030
 80011e4:	20000954 	.word	0x20000954
 80011e8:	0800d068 	.word	0x0800d068
 80011ec:	2000094c 	.word	0x2000094c
 80011f0:	0800d090 	.word	0x0800d090
 80011f4:	20000948 	.word	0x20000948
 80011f8:	0800d0b4 	.word	0x0800d0b4
 80011fc:	20000950 	.word	0x20000950
 8001200:	0800d0e4 	.word	0x0800d0e4
 8001204:	0800d114 	.word	0x0800d114
 8001208:	0800d14c 	.word	0x0800d14c
 800120c:	20000000 	.word	0x20000000
 8001210:	0800d174 	.word	0x0800d174
 8001214:	0800d19c 	.word	0x0800d19c
 8001218:	0800d1c8 	.word	0x0800d1c8
 800121c:	0800d200 	.word	0x0800d200
 8001220:	20000001 	.word	0x20000001
 8001224:	0800d224 	.word	0x0800d224
 8001228:	0800d25c 	.word	0x0800d25c
 800122c:	20000002 	.word	0x20000002
 8001230:	0800d284 	.word	0x0800d284
 8001234:	0800d2bc 	.word	0x0800d2bc
 8001238:	20000003 	.word	0x20000003
 800123c:	0800d2e0 	.word	0x0800d2e0
 8001240:	20000910 	.word	0x20000910

08001244 <vDispatcherCode>:
 * This function implements the dispatcher task, which waits for notifications
 * to process and route incoming dispatcher packets to the appropriate department queues.
 *
 * @param pvParameters Parameters passed to the task (expected to be `1`).
 */
void vDispatcherCode(void *pvParameters) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b0a0      	sub	sp, #128	@ 0x80
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d00d      	beq.n	800126e <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001256:	b672      	cpsid	i
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f3bf 8f4f 	dsb	sy
 8001264:	b662      	cpsie	i
 8001266:	67fb      	str	r3, [r7, #124]	@ 0x7c
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	e7fd      	b.n	800126a <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;
	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2180      	movs	r1, #128	@ 0x80
 8001272:	480e      	ldr	r0, [pc, #56]	@ (80012ac <vDispatcherCode+0x68>)
 8001274:	f002 fb98 	bl	80039a8 <HAL_GPIO_WritePin>

		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001278:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2100      	movs	r1, #0
 8001282:	2000      	movs	r0, #0
 8001284:	f007 fd04 	bl	8008c90 <xTaskNotifyWait>

		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <vDispatcherCode+0x6c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f107 010c 	add.w	r1, r7, #12
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	4618      	mov	r0, r3
 8001296:	f005 ffeb 	bl	8007270 <xQueueReceive>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d1e6      	bne.n	800126e <vDispatcherCode+0x2a>
			packetRouting(&new_packet);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f805 	bl	80012b4 <packetRouting>
	for(;;) {
 80012aa:	e7e0      	b.n	800126e <vDispatcherCode+0x2a>
 80012ac:	40020400 	.word	0x40020400
 80012b0:	20000894 	.word	0x20000894

080012b4 <packetRouting>:
 * This function sends the given dispatcher packet to the queue corresponding
 * to its department.
 *
 * @param new_packet Pointer to the DispatcherPacket to be routed.
 */
void packetRouting(DispatcherPacket* new_packet) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	switch(new_packet->department) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d82f      	bhi.n	8001324 <packetRouting+0x70>
 80012c4:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <packetRouting+0x18>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	080012ef 	.word	0x080012ef
 80012d4:	08001301 	.word	0x08001301
 80012d8:	08001313 	.word	0x08001313
		case AMBULANCE:
			xQueueSend(qAmbulance, new_packet, portMAX_DELAY);
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <packetRouting+0x78>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	f04f 32ff 	mov.w	r2, #4294967295
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f005 fe14 	bl	8006f14 <xQueueGenericSend>
			break;
 80012ec:	e01a      	b.n	8001324 <packetRouting+0x70>
		case POLICE:
			xQueueSend(qPolice, new_packet, portMAX_DELAY);
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <packetRouting+0x7c>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	f005 fe0b 	bl	8006f14 <xQueueGenericSend>
			break;
 80012fe:	e011      	b.n	8001324 <packetRouting+0x70>
		case FIRE:
			xQueueSend(qFire, new_packet, portMAX_DELAY);
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <packetRouting+0x80>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	f04f 32ff 	mov.w	r2, #4294967295
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f005 fe02 	bl	8006f14 <xQueueGenericSend>
			break;
 8001310:	e008      	b.n	8001324 <packetRouting+0x70>
		case CORONA:
			xQueueSend(qCorona, new_packet, portMAX_DELAY);
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <packetRouting+0x84>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	f005 fdf9 	bl	8006f14 <xQueueGenericSend>
			break;
 8001322:	bf00      	nop
	}
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000884 	.word	0x20000884
 8001330:	20000888 	.word	0x20000888
 8001334:	2000088c 	.word	0x2000088c
 8001338:	20000890 	.word	0x20000890

0800133c <generateDispatcherMSG>:
 * This function generates a dispatcher message based on a random department and message.
 * It also sets the time required to handle the task in ticks.
 *
 * @param hDispPacket Pointer to the DispatcherPacket to be filled with generated data.
 */
void generateDispatcherMSG(DispatcherPacket* hDispPacket) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	DepartmentsEnum dep;
	uint8_t msgIdx = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	73bb      	strb	r3, [r7, #14]
	uint16_t range = LONGEST_TASK_DURATION_IN_TICKS - SHORTEST_TASK_DURATION_IN_TICKS + 1;
 8001348:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 800134c:	81bb      	strh	r3, [r7, #12]

	// Generate Department
	uint32_t random_number = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4619      	mov	r1, r3
 8001358:	4866      	ldr	r0, [pc, #408]	@ (80014f4 <generateDispatcherMSG+0x1b8>)
 800135a:	f003 fdf7 	bl	8004f4c <HAL_RNG_GenerateRandomNumber>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <generateDispatcherMSG+0x38>
	        dep = (random_number % 4);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	73fb      	strb	r3, [r7, #15]
	        hDispPacket->department = dep;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	701a      	strb	r2, [r3, #0]
	}

	// Pick a message and set counter
	switch(dep) {
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b03      	cmp	r3, #3
 8001378:	f200 80a0 	bhi.w	80014bc <generateDispatcherMSG+0x180>
 800137c:	a201      	add	r2, pc, #4	@ (adr r2, 8001384 <generateDispatcherMSG+0x48>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001395 	.word	0x08001395
 8001388:	080013d9 	.word	0x080013d9
 800138c:	08001429 	.word	0x08001429
 8001390:	08001479 	.word	0x08001479
		case AMBULANCE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4619      	mov	r1, r3
 800139a:	4856      	ldr	r0, [pc, #344]	@ (80014f4 <generateDispatcherMSG+0x1b8>)
 800139c:	f003 fdd6 	bl	8004f4c <HAL_RNG_GenerateRandomNumber>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <generateDispatcherMSG+0x74>
				msgIdx = (uint8_t)(random_number % AMB_STRINGS_LEN);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vAMBstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1c58      	adds	r0, r3, #1
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	2264      	movs	r2, #100	@ 0x64
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	4a4e      	ldr	r2, [pc, #312]	@ (80014f8 <generateDispatcherMSG+0x1bc>)
 80013be:	4413      	add	r3, r2
 80013c0:	2263      	movs	r2, #99	@ 0x63
 80013c2:	4619      	mov	r1, r3
 80013c4:	f009 fe3a 	bl	800b03c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_amb_tasks;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <generateDispatcherMSG+0x1c0>)
 80013d4:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 80013d6:	e072      	b.n	80014be <generateDispatcherMSG+0x182>


		case POLICE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	4845      	ldr	r0, [pc, #276]	@ (80014f4 <generateDispatcherMSG+0x1b8>)
 80013e0:	f003 fdb4 	bl	8004f4c <HAL_RNG_GenerateRandomNumber>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <generateDispatcherMSG+0xc4>
				msgIdx = (uint8_t)(random_number % POLICE_STRINGS_LEN);
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	4b44      	ldr	r3, [pc, #272]	@ (8001500 <generateDispatcherMSG+0x1c4>)
 80013ee:	fba3 2301 	umull	r2, r3, r3, r1
 80013f2:	089a      	lsrs	r2, r3, #2
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	1aca      	subs	r2, r1, r3
 80013fc:	4613      	mov	r3, r2
 80013fe:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vPOLstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1c58      	adds	r0, r3, #1
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	2264      	movs	r2, #100	@ 0x64
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4a3d      	ldr	r2, [pc, #244]	@ (8001504 <generateDispatcherMSG+0x1c8>)
 800140e:	4413      	add	r3, r2
 8001410:	2263      	movs	r2, #99	@ 0x63
 8001412:	4619      	mov	r1, r3
 8001414:	f009 fe12 	bl	800b03c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_police_tasks;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a39      	ldr	r2, [pc, #228]	@ (8001508 <generateDispatcherMSG+0x1cc>)
 8001424:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001426:	e04a      	b.n	80014be <generateDispatcherMSG+0x182>


		case FIRE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4619      	mov	r1, r3
 800142e:	4831      	ldr	r0, [pc, #196]	@ (80014f4 <generateDispatcherMSG+0x1b8>)
 8001430:	f003 fd8c 	bl	8004f4c <HAL_RNG_GenerateRandomNumber>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <generateDispatcherMSG+0x114>
				msgIdx = (uint8_t)(random_number % FIRE_STRINGS_LEN);
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	4b33      	ldr	r3, [pc, #204]	@ (800150c <generateDispatcherMSG+0x1d0>)
 800143e:	fba3 2301 	umull	r2, r3, r3, r1
 8001442:	085a      	lsrs	r2, r3, #1
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	1aca      	subs	r2, r1, r3
 800144c:	4613      	mov	r3, r2
 800144e:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vFIREstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1c58      	adds	r0, r3, #1
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	2264      	movs	r2, #100	@ 0x64
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	4a2c      	ldr	r2, [pc, #176]	@ (8001510 <generateDispatcherMSG+0x1d4>)
 800145e:	4413      	add	r3, r2
 8001460:	2263      	movs	r2, #99	@ 0x63
 8001462:	4619      	mov	r1, r3
 8001464:	f009 fdea 	bl	800b03c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_fire_tasks;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <generateDispatcherMSG+0x1d8>)
 8001474:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001476:	e022      	b.n	80014be <generateDispatcherMSG+0x182>


		case CORONA:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4619      	mov	r1, r3
 800147e:	481d      	ldr	r0, [pc, #116]	@ (80014f4 <generateDispatcherMSG+0x1b8>)
 8001480:	f003 fd64 	bl	8004f4c <HAL_RNG_GenerateRandomNumber>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <generateDispatcherMSG+0x158>
				msgIdx = (uint8_t)(random_number % CORONA_STRINGS_LEN);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vCORstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c58      	adds	r0, r3, #1
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2264      	movs	r2, #100	@ 0x64
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <generateDispatcherMSG+0x1dc>)
 80014a2:	4413      	add	r3, r2
 80014a4:	2263      	movs	r2, #99	@ 0x63
 80014a6:	4619      	mov	r1, r3
 80014a8:	f009 fdc8 	bl	800b03c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_corona_tasks;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a19      	ldr	r2, [pc, #100]	@ (800151c <generateDispatcherMSG+0x1e0>)
 80014b8:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 80014ba:	e000      	b.n	80014be <generateDispatcherMSG+0x182>


		default:
			break;
 80014bc:	bf00      	nop
	}

	// Pick handling time
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4619      	mov	r1, r3
 80014c4:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <generateDispatcherMSG+0x1b8>)
 80014c6:	f003 fd41 	bl	8004f4c <HAL_RNG_GenerateRandomNumber>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10d      	bne.n	80014ec <generateDispatcherMSG+0x1b0>
		hDispPacket->timeToHandleInTicks = (uint16_t)(random_number % range) +
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	89ba      	ldrh	r2, [r7, #12]
 80014d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d8:	fb01 f202 	mul.w	r2, r1, r2
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	b29b      	uxth	r3, r3
 80014e0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
													SHORTEST_TASK_DURATION_IN_TICKS;
	}
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002c0 	.word	0x200002c0
 80014f8:	0800d874 	.word	0x0800d874
 80014fc:	20000000 	.word	0x20000000
 8001500:	cccccccd 	.word	0xcccccccd
 8001504:	0800db94 	.word	0x0800db94
 8001508:	20000001 	.word	0x20000001
 800150c:	38e38e39 	.word	0x38e38e39
 8001510:	0800dd88 	.word	0x0800dd88
 8001514:	20000002 	.word	0x20000002
 8001518:	0800e10c 	.word	0x0800e10c
 800151c:	20000003 	.word	0x20000003

08001520 <error_handling>:
 *      Author: eyalk
 */

#include "error_handling.h"

void error_handling(char* err_msg) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	if (err_msg != NULL) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01b      	beq.n	8001566 <error_handling+0x46>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800152e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <error_handling+0x8c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f04f 31ff 	mov.w	r1, #4294967295
 8001536:	4618      	mov	r0, r3
 8001538:	f005 ff82 	bl	8007440 <xQueueSemaphoreTake>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d12b      	bne.n	800159a <error_handling+0x7a>
			printf("%s\r\n", err_msg);
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	481a      	ldr	r0, [pc, #104]	@ (80015b0 <error_handling+0x90>)
 8001546:	f009 fbf5 	bl	800ad34 <iprintf>
			fflush(stdout);
 800154a:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <error_handling+0x94>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f009 fb19 	bl	800ab88 <fflush>
			xSemaphoreGive(printfMutex);
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <error_handling+0x8c>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	f005 fcd8 	bl	8006f14 <xQueueGenericSend>
 8001564:	e019      	b.n	800159a <error_handling+0x7a>
		}
	} else {
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <error_handling+0x8c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f04f 31ff 	mov.w	r1, #4294967295
 800156e:	4618      	mov	r0, r3
 8001570:	f005 ff66 	bl	8007440 <xQueueSemaphoreTake>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d10f      	bne.n	800159a <error_handling+0x7a>
			printf("Unknown error");
 800157a:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <error_handling+0x98>)
 800157c:	f009 fbda 	bl	800ad34 <iprintf>
			fflush(stdout);
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <error_handling+0x94>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	4618      	mov	r0, r3
 8001588:	f009 fafe 	bl	800ab88 <fflush>
			xSemaphoreGive(printfMutex);
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <error_handling+0x8c>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	f005 fcbd 	bl	8006f14 <xQueueGenericSend>
		}
	}
	printf("Program Terminated. \r\n");
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <error_handling+0x9c>)
 800159c:	f009 fc32 	bl	800ae04 <puts>
	Error_Handler();
 80015a0:	f001 fbaa 	bl	8002cf8 <Error_Handler>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000944 	.word	0x20000944
 80015b0:	0800d30c 	.word	0x0800d30c
 80015b4:	20000020 	.word	0x20000020
 80015b8:	0800d314 	.word	0x0800d314
 80015bc:	0800d324 	.word	0x0800d324

080015c0 <initTasks>:
 * @brief Initialize and start the various system tasks.
 */

char logBuffer[MAX_MSG_LENGTH];

void initTasks(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af02      	add	r7, sp, #8
	/* AMBULANCE TASK INIT */
	if(initAmbTasks() == -1) {
 80015c6:	f000 f983 	bl	80018d0 <initAmbTasks>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d102      	bne.n	80015d8 <initTasks+0x18>
		error_handling("Ambulance tasks creation error!\r\n");
 80015d2:	4834      	ldr	r0, [pc, #208]	@ (80016a4 <initTasks+0xe4>)
 80015d4:	f7ff ffa4 	bl	8001520 <error_handling>
	}

	/* POLICE TASK INIT */
	if(initPolTasks() == -1) {
 80015d8:	f000 f9fa 	bl	80019d0 <initPolTasks>
 80015dc:	4603      	mov	r3, r0
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e2:	d102      	bne.n	80015ea <initTasks+0x2a>
		error_handling("Police tasks creation error!\r\n");
 80015e4:	4830      	ldr	r0, [pc, #192]	@ (80016a8 <initTasks+0xe8>)
 80015e6:	f7ff ff9b 	bl	8001520 <error_handling>
	}

	/* FIRE DEP TASK INIT */
	if(initFireTasks() == -1) {
 80015ea:	f000 fa71 	bl	8001ad0 <initFireTasks>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d102      	bne.n	80015fc <initTasks+0x3c>
		error_handling("Fire Dep tasks creation error!\r\n");
 80015f6:	482d      	ldr	r0, [pc, #180]	@ (80016ac <initTasks+0xec>)
 80015f8:	f7ff ff92 	bl	8001520 <error_handling>
	}

	/* CORONA TASK INIT */
	if(initCoronaTasks() == -1) {
 80015fc:	f000 fae8 	bl	8001bd0 <initCoronaTasks>
 8001600:	4603      	mov	r3, r0
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001606:	d102      	bne.n	800160e <initTasks+0x4e>
		error_handling("Corona tasks creation error!\r\n");
 8001608:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <initTasks+0xf0>)
 800160a:	f7ff ff89 	bl	8001520 <error_handling>
	}

	vTaskDelay(100);
 800160e:	2064      	movs	r0, #100	@ 0x64
 8001610:	f006 fbbc 	bl	8007d8c <vTaskDelay>

	BaseType_t status = xTaskCreate((TaskFunction_t)vDispatcherCode,
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <initTasks+0xf4>)
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	232b      	movs	r3, #43	@ 0x2b
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001622:	4925      	ldr	r1, [pc, #148]	@ (80016b8 <initTasks+0xf8>)
 8001624:	4825      	ldr	r0, [pc, #148]	@ (80016bc <initTasks+0xfc>)
 8001626:	f006 fa51 	bl	8007acc <xTaskCreate>
 800162a:	6078      	str	r0, [r7, #4]
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							DISPATCHER_TASK_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d002      	beq.n	8001638 <initTasks+0x78>
		error_handling("Dispatcher task creation error!\r\n");
 8001632:	4823      	ldr	r0, [pc, #140]	@ (80016c0 <initTasks+0x100>)
 8001634:	f7ff ff74 	bl	8001520 <error_handling>
	}

	status = xTaskCreate((TaskFunction_t)tasksManagerTask,
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <initTasks+0x104>)
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2329      	movs	r3, #41	@ 0x29
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001646:	4920      	ldr	r1, [pc, #128]	@ (80016c8 <initTasks+0x108>)
 8001648:	4820      	ldr	r0, [pc, #128]	@ (80016cc <initTasks+0x10c>)
 800164a:	f006 fa3f 	bl	8007acc <xTaskCreate>
 800164e:	6078      	str	r0, [r7, #4]
						"tasks_manager",
						TASKS_MEMORY_SIZE,
						(void*)1,
						MANAGER_TASK_PRIORITY,
						&vTasksManagerTask);
	if(status != pdTRUE) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <initTasks+0x9c>
		error_handling("Task Manager task creation error!\r\n");
 8001656:	481e      	ldr	r0, [pc, #120]	@ (80016d0 <initTasks+0x110>)
 8001658:	f7ff ff62 	bl	8001520 <error_handling>
	}
	status = xTaskCreate((TaskFunction_t)getTasksStatus,
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <initTasks+0x114>)
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	232c      	movs	r3, #44	@ 0x2c
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800166a:	491b      	ldr	r1, [pc, #108]	@ (80016d8 <initTasks+0x118>)
 800166c:	481b      	ldr	r0, [pc, #108]	@ (80016dc <initTasks+0x11c>)
 800166e:	f006 fa2d 	bl	8007acc <xTaskCreate>
 8001672:	6078      	str	r0, [r7, #4]
						"get_data_task",
						TASKS_MEMORY_SIZE,
						(void*)1,
						GET_DATA_TASK_PRIORITY,
						&vGetDataTask);
	if(status != pdTRUE) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d002      	beq.n	8001680 <initTasks+0xc0>
		error_handling("Get Data task creation error!\r\n");
 800167a:	4819      	ldr	r0, [pc, #100]	@ (80016e0 <initTasks+0x120>)
 800167c:	f7ff ff50 	bl	8001520 <error_handling>
	}


	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001680:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <initTasks+0x124>)
 8001682:	f003 fd79 	bl	8005178 <HAL_TIM_Base_Start_IT>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <initTasks+0xd2>
		error_handling("Failed to start timer2!\r\n");
 800168c:	4816      	ldr	r0, [pc, #88]	@ (80016e8 <initTasks+0x128>)
 800168e:	f7ff ff47 	bl	8001520 <error_handling>
	}

	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001692:	463a      	mov	r2, r7
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	2100      	movs	r1, #0
 800169a:	2000      	movs	r0, #0
 800169c:	f007 faf8 	bl	8008c90 <xTaskNotifyWait>
	for(;;) {
 80016a0:	bf00      	nop
 80016a2:	e7f6      	b.n	8001692 <initTasks+0xd2>
 80016a4:	0800d33c 	.word	0x0800d33c
 80016a8:	0800d360 	.word	0x0800d360
 80016ac:	0800d380 	.word	0x0800d380
 80016b0:	0800d3a4 	.word	0x0800d3a4
 80016b4:	200008fc 	.word	0x200008fc
 80016b8:	0800d3c4 	.word	0x0800d3c4
 80016bc:	08001245 	.word	0x08001245
 80016c0:	0800d3d4 	.word	0x0800d3d4
 80016c4:	20000904 	.word	0x20000904
 80016c8:	0800d3f8 	.word	0x0800d3f8
 80016cc:	08001e25 	.word	0x08001e25
 80016d0:	0800d408 	.word	0x0800d408
 80016d4:	20000908 	.word	0x20000908
 80016d8:	0800d42c 	.word	0x0800d42c
 80016dc:	08000ed9 	.word	0x08000ed9
 80016e0:	0800d43c 	.word	0x0800d43c
 80016e4:	200002d0 	.word	0x200002d0
 80016e8:	0800d45c 	.word	0x0800d45c

080016ec <initQueues>:
}

/**
 * @brief Initialize all required queues.
 */
void initQueues(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	qAmbulance = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80016f0:	2200      	movs	r2, #0
 80016f2:	216c      	movs	r1, #108	@ 0x6c
 80016f4:	200a      	movs	r0, #10
 80016f6:	f005 fb74 	bl	8006de2 <xQueueGenericCreate>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a32      	ldr	r2, [pc, #200]	@ (80017c8 <initQueues+0xdc>)
 80016fe:	6013      	str	r3, [r2, #0]
	if(qAmbulance == NULL) {
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <initQueues+0xdc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <initQueues+0x22>
		error_handling("Ambulance queue creation failed!\r\n");
 8001708:	4830      	ldr	r0, [pc, #192]	@ (80017cc <initQueues+0xe0>)
 800170a:	f7ff ff09 	bl	8001520 <error_handling>
	}
	qPolice = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 800170e:	2200      	movs	r2, #0
 8001710:	216c      	movs	r1, #108	@ 0x6c
 8001712:	200a      	movs	r0, #10
 8001714:	f005 fb65 	bl	8006de2 <xQueueGenericCreate>
 8001718:	4603      	mov	r3, r0
 800171a:	4a2d      	ldr	r2, [pc, #180]	@ (80017d0 <initQueues+0xe4>)
 800171c:	6013      	str	r3, [r2, #0]
	if(qPolice == NULL) {
 800171e:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <initQueues+0xe4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <initQueues+0x40>
		error_handling("Police queue creation failed!\r\n");
 8001726:	482b      	ldr	r0, [pc, #172]	@ (80017d4 <initQueues+0xe8>)
 8001728:	f7ff fefa 	bl	8001520 <error_handling>
	}
	qFire = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 800172c:	2200      	movs	r2, #0
 800172e:	216c      	movs	r1, #108	@ 0x6c
 8001730:	200a      	movs	r0, #10
 8001732:	f005 fb56 	bl	8006de2 <xQueueGenericCreate>
 8001736:	4603      	mov	r3, r0
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <initQueues+0xec>)
 800173a:	6013      	str	r3, [r2, #0]
	if(qFire == NULL) {
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <initQueues+0xec>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <initQueues+0x5e>
		error_handling("Fire Dep queue creation failed!\r\n");
 8001744:	4825      	ldr	r0, [pc, #148]	@ (80017dc <initQueues+0xf0>)
 8001746:	f7ff feeb 	bl	8001520 <error_handling>
	}
	qCorona = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 800174a:	2200      	movs	r2, #0
 800174c:	216c      	movs	r1, #108	@ 0x6c
 800174e:	200a      	movs	r0, #10
 8001750:	f005 fb47 	bl	8006de2 <xQueueGenericCreate>
 8001754:	4603      	mov	r3, r0
 8001756:	4a22      	ldr	r2, [pc, #136]	@ (80017e0 <initQueues+0xf4>)
 8001758:	6013      	str	r3, [r2, #0]
	if(qCorona == NULL) {
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <initQueues+0xf4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <initQueues+0x7c>
		error_handling("Corona queue creation failed!\r\n");
 8001762:	4820      	ldr	r0, [pc, #128]	@ (80017e4 <initQueues+0xf8>)
 8001764:	f7ff fedc 	bl	8001520 <error_handling>
	}
	qDispatcher = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8001768:	2200      	movs	r2, #0
 800176a:	216c      	movs	r1, #108	@ 0x6c
 800176c:	200a      	movs	r0, #10
 800176e:	f005 fb38 	bl	8006de2 <xQueueGenericCreate>
 8001772:	4603      	mov	r3, r0
 8001774:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <initQueues+0xfc>)
 8001776:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <initQueues+0xfc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <initQueues+0x9a>
		error_handling("Dispatcher queue creation failed!\r\n");
 8001780:	481a      	ldr	r0, [pc, #104]	@ (80017ec <initQueues+0x100>)
 8001782:	f7ff fecd 	bl	8001520 <error_handling>
	}
	qLogger = xQueueCreate(LOGGER_QUEUE_SIZE, sizeof(char[MAX_MSG_LENGTH]));
 8001786:	2200      	movs	r2, #0
 8001788:	2164      	movs	r1, #100	@ 0x64
 800178a:	2019      	movs	r0, #25
 800178c:	f005 fb29 	bl	8006de2 <xQueueGenericCreate>
 8001790:	4603      	mov	r3, r0
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <initQueues+0x104>)
 8001794:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <initQueues+0xfc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <initQueues+0xb8>
		error_handling("Logger queue creation failed!\r\n");
 800179e:	4815      	ldr	r0, [pc, #84]	@ (80017f4 <initQueues+0x108>)
 80017a0:	f7ff febe 	bl	8001520 <error_handling>
	}
	qBtnData = xQueueCreate(LOGGER_QUEUE_SIZE, sizeof(char[MAX_MSG_LENGTH]));
 80017a4:	2200      	movs	r2, #0
 80017a6:	2164      	movs	r1, #100	@ 0x64
 80017a8:	2019      	movs	r0, #25
 80017aa:	f005 fb1a 	bl	8006de2 <xQueueGenericCreate>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a11      	ldr	r2, [pc, #68]	@ (80017f8 <initQueues+0x10c>)
 80017b2:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <initQueues+0xfc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <initQueues+0xd6>
		error_handling("Logger queue creation failed!\r\n");
 80017bc:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <initQueues+0x108>)
 80017be:	f7ff feaf 	bl	8001520 <error_handling>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000884 	.word	0x20000884
 80017cc:	0800d478 	.word	0x0800d478
 80017d0:	20000888 	.word	0x20000888
 80017d4:	0800d49c 	.word	0x0800d49c
 80017d8:	2000088c 	.word	0x2000088c
 80017dc:	0800d4bc 	.word	0x0800d4bc
 80017e0:	20000890 	.word	0x20000890
 80017e4:	0800d4e0 	.word	0x0800d4e0
 80017e8:	20000894 	.word	0x20000894
 80017ec:	0800d500 	.word	0x0800d500
 80017f0:	20000898 	.word	0x20000898
 80017f4:	0800d524 	.word	0x0800d524
 80017f8:	2000089c 	.word	0x2000089c

080017fc <initSemaphores>:


/**
 * @brief Initialize all required semaphores.
 */
void initSemaphores(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	printfMutex = xSemaphoreCreateMutex();
 8001800:	2001      	movs	r0, #1
 8001802:	f005 fb6e 	bl	8006ee2 <xQueueCreateMutex>
 8001806:	4603      	mov	r3, r0
 8001808:	4a25      	ldr	r2, [pc, #148]	@ (80018a0 <initSemaphores+0xa4>)
 800180a:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 800180c:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <initSemaphores+0xa4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <initSemaphores+0x1e>
		error_handling("Print mutex creation failed!\r\n");
 8001814:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <initSemaphores+0xa8>)
 8001816:	f7ff fe83 	bl	8001520 <error_handling>
	}
	xTasksDataMutex = xSemaphoreCreateMutex();
 800181a:	2001      	movs	r0, #1
 800181c:	f005 fb61 	bl	8006ee2 <xQueueCreateMutex>
 8001820:	4603      	mov	r3, r0
 8001822:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <initSemaphores+0xac>)
 8001824:	6013      	str	r3, [r2, #0]
	if(xTasksDataMutex == NULL) {
 8001826:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <initSemaphores+0xac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <initSemaphores+0x38>
		error_handling("Tasks data mutex creation failed!\r\n");
 800182e:	481f      	ldr	r0, [pc, #124]	@ (80018ac <initSemaphores+0xb0>)
 8001830:	f7ff fe76 	bl	8001520 <error_handling>
	}
	AmbTasksStatusMutex = xSemaphoreCreateMutex();
 8001834:	2001      	movs	r0, #1
 8001836:	f005 fb54 	bl	8006ee2 <xQueueCreateMutex>
 800183a:	4603      	mov	r3, r0
 800183c:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <initSemaphores+0xb4>)
 800183e:	6013      	str	r3, [r2, #0]
	if(AmbTasksStatusMutex == NULL) {
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <initSemaphores+0xb4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <initSemaphores+0x52>
		error_handling("Ambulance tasks mutex creation failed!\r\n");
 8001848:	481a      	ldr	r0, [pc, #104]	@ (80018b4 <initSemaphores+0xb8>)
 800184a:	f7ff fe69 	bl	8001520 <error_handling>
	}
	PolTasksStatusMutex = xSemaphoreCreateMutex();
 800184e:	2001      	movs	r0, #1
 8001850:	f005 fb47 	bl	8006ee2 <xQueueCreateMutex>
 8001854:	4603      	mov	r3, r0
 8001856:	4a18      	ldr	r2, [pc, #96]	@ (80018b8 <initSemaphores+0xbc>)
 8001858:	6013      	str	r3, [r2, #0]
	if(PolTasksStatusMutex == NULL) {
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <initSemaphores+0xbc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <initSemaphores+0x6c>
		error_handling("Police tasks mutex creation failed!\r\n");
 8001862:	4816      	ldr	r0, [pc, #88]	@ (80018bc <initSemaphores+0xc0>)
 8001864:	f7ff fe5c 	bl	8001520 <error_handling>
	}
	FireTasksStatusMutex = xSemaphoreCreateMutex();
 8001868:	2001      	movs	r0, #1
 800186a:	f005 fb3a 	bl	8006ee2 <xQueueCreateMutex>
 800186e:	4603      	mov	r3, r0
 8001870:	4a13      	ldr	r2, [pc, #76]	@ (80018c0 <initSemaphores+0xc4>)
 8001872:	6013      	str	r3, [r2, #0]
	if(FireTasksStatusMutex == NULL) {
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <initSemaphores+0xc4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <initSemaphores+0x86>
		error_handling("Fire Dep tasks mutex creation failed!\r\n");
 800187c:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <initSemaphores+0xc8>)
 800187e:	f7ff fe4f 	bl	8001520 <error_handling>
	}
	CorTasksStatusMutex = xSemaphoreCreateMutex();
 8001882:	2001      	movs	r0, #1
 8001884:	f005 fb2d 	bl	8006ee2 <xQueueCreateMutex>
 8001888:	4603      	mov	r3, r0
 800188a:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <initSemaphores+0xcc>)
 800188c:	6013      	str	r3, [r2, #0]
	if(CorTasksStatusMutex == NULL) {
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <initSemaphores+0xcc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <initSemaphores+0xa0>
		error_handling("Corona tasks mutex creation failed!\r\n");
 8001896:	480d      	ldr	r0, [pc, #52]	@ (80018cc <initSemaphores+0xd0>)
 8001898:	f7ff fe42 	bl	8001520 <error_handling>
	}
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000944 	.word	0x20000944
 80018a4:	0800d544 	.word	0x0800d544
 80018a8:	20000958 	.word	0x20000958
 80018ac:	0800d564 	.word	0x0800d564
 80018b0:	2000091c 	.word	0x2000091c
 80018b4:	0800d588 	.word	0x0800d588
 80018b8:	20000928 	.word	0x20000928
 80018bc:	0800d5b4 	.word	0x0800d5b4
 80018c0:	20000934 	.word	0x20000934
 80018c4:	0800d5dc 	.word	0x0800d5dc
 80018c8:	20000940 	.word	0x20000940
 80018cc:	0800d604 	.word	0x0800d604

080018d0 <initAmbTasks>:
/**
 * @brief Initialize and start Ambulance tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initAmbTasks(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af02      	add	r7, sp, #8
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e046      	b.n	800196a <initAmbTasks+0x9a>
		taskInit_t* ambulance_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80018dc:	2014      	movs	r0, #20
 80018de:	f008 fa63 	bl	8009da8 <pvPortMalloc>
 80018e2:	61b8      	str	r0, [r7, #24]
		configASSERT(ambulance_taskInit != NULL);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <initAmbTasks+0x36>
	__asm volatile
 80018ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ee:	b672      	cpsid	i
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	b662      	cpsie	i
 80018fe:	613b      	str	r3, [r7, #16]
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	e7fd      	b.n	8001902 <initAmbTasks+0x32>

		ambulance_taskInit->department = AMBULANCE;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
		ambulance_taskInit->taskIdentifier = i;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	705a      	strb	r2, [r3, #1]
		ambulance_taskInit->pQhandler = &qAmbulance;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	4a25      	ldr	r2, [pc, #148]	@ (80019ac <initAmbTasks+0xdc>)
 8001918:	605a      	str	r2, [r3, #4]
		ambulance_taskInit->pSemHandler = &AmbTasksStatusMutex;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <initAmbTasks+0xe0>)
 800191e:	609a      	str	r2, [r3, #8]
		ambulance_taskInit->bTaskStatusArr = bAmbTasksStatus;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4a24      	ldr	r2, [pc, #144]	@ (80019b4 <initAmbTasks+0xe4>)
 8001924:	60da      	str	r2, [r3, #12]
		ambulance_taskInit->numOfTasks = AMBULANCE_TASKS;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2208      	movs	r2, #8
 800192a:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i+1);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	4638      	mov	r0, r7
 8001932:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <initAmbTasks+0xe8>)
 8001934:	2110      	movs	r1, #16
 8001936:	f009 fa6d 	bl	800ae14 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <initAmbTasks+0xec>)
 8001940:	4413      	add	r3, r2
 8001942:	4639      	mov	r1, r7
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	232a      	movs	r3, #42	@ 0x2a
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001950:	481b      	ldr	r0, [pc, #108]	@ (80019c0 <initAmbTasks+0xf0>)
 8001952:	f006 f8bb 	bl	8007acc <xTaskCreate>
 8001956:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*)ambulance_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d002      	beq.n	8001964 <initAmbTasks+0x94>
	 		return -1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e01f      	b.n	80019a4 <initAmbTasks+0xd4>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3301      	adds	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b07      	cmp	r3, #7
 800196e:	ddb5      	ble.n	80018dc <initAmbTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <initAmbTasks+0xf4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	4618      	mov	r0, r3
 800197a:	f005 fd61 	bl	8007440 <xQueueSemaphoreTake>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10e      	bne.n	80019a2 <initAmbTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH,"Started Ambulance Threads! \r\n");
 8001984:	4a10      	ldr	r2, [pc, #64]	@ (80019c8 <initAmbTasks+0xf8>)
 8001986:	2164      	movs	r1, #100	@ 0x64
 8001988:	4810      	ldr	r0, [pc, #64]	@ (80019cc <initAmbTasks+0xfc>)
 800198a:	f009 fa43 	bl	800ae14 <sniprintf>
		SendLogMessage(logBuffer);
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <initAmbTasks+0xfc>)
 8001990:	f000 f9ce 	bl	8001d30 <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <initAmbTasks+0xf4>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	f005 fab9 	bl	8006f14 <xQueueGenericSend>
	}
	return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000884 	.word	0x20000884
 80019b0:	2000091c 	.word	0x2000091c
 80019b4:	20000914 	.word	0x20000914
 80019b8:	0800d62c 	.word	0x0800d62c
 80019bc:	200008a0 	.word	0x200008a0
 80019c0:	08002069 	.word	0x08002069
 80019c4:	20000944 	.word	0x20000944
 80019c8:	0800d63c 	.word	0x0800d63c
 80019cc:	200001f8 	.word	0x200001f8

080019d0 <initPolTasks>:
/**
 * @brief Initialize and start Police tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initPolTasks(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af02      	add	r7, sp, #8
	for(int i=0; i<POLICE_TASKS; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e046      	b.n	8001a6a <initPolTasks+0x9a>
		taskInit_t* police_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80019dc:	2014      	movs	r0, #20
 80019de:	f008 f9e3 	bl	8009da8 <pvPortMalloc>
 80019e2:	61b8      	str	r0, [r7, #24]
		configASSERT(police_taskInit != NULL);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10d      	bne.n	8001a06 <initPolTasks+0x36>
	__asm volatile
 80019ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ee:	b672      	cpsid	i
 80019f0:	f383 8811 	msr	BASEPRI, r3
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	f3bf 8f4f 	dsb	sy
 80019fc:	b662      	cpsie	i
 80019fe:	613b      	str	r3, [r7, #16]
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <initPolTasks+0x32>

		police_taskInit->department = POLICE;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
		police_taskInit->taskIdentifier = i;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	705a      	strb	r2, [r3, #1]
		police_taskInit->pQhandler = &qPolice;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	4a25      	ldr	r2, [pc, #148]	@ (8001aac <initPolTasks+0xdc>)
 8001a18:	605a      	str	r2, [r3, #4]
		police_taskInit->pSemHandler = &PolTasksStatusMutex;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4a24      	ldr	r2, [pc, #144]	@ (8001ab0 <initPolTasks+0xe0>)
 8001a1e:	609a      	str	r2, [r3, #8]
		police_taskInit->bTaskStatusArr = bPolTasksStatus;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <initPolTasks+0xe4>)
 8001a24:	60da      	str	r2, [r3, #12]
		police_taskInit->numOfTasks = POLICE_TASKS;
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2205      	movs	r2, #5
 8001a2a:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i+1);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4638      	mov	r0, r7
 8001a32:	4a21      	ldr	r2, [pc, #132]	@ (8001ab8 <initPolTasks+0xe8>)
 8001a34:	2110      	movs	r1, #16
 8001a36:	f009 f9ed 	bl	800ae14 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001abc <initPolTasks+0xec>)
 8001a40:	4413      	add	r3, r2
 8001a42:	4639      	mov	r1, r7
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	232a      	movs	r3, #42	@ 0x2a
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a50:	481b      	ldr	r0, [pc, #108]	@ (8001ac0 <initPolTasks+0xf0>)
 8001a52:	f006 f83b 	bl	8007acc <xTaskCreate>
 8001a56:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) police_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d002      	beq.n	8001a64 <initPolTasks+0x94>
	 		return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e01f      	b.n	8001aa4 <initPolTasks+0xd4>
	for(int i=0; i<POLICE_TASKS; i++) {
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	3301      	adds	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	ddb5      	ble.n	80019dc <initPolTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <initPolTasks+0xf4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f005 fce1 	bl	8007440 <xQueueSemaphoreTake>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10e      	bne.n	8001aa2 <initPolTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH, "Started Police Threads! \r\n");
 8001a84:	4a10      	ldr	r2, [pc, #64]	@ (8001ac8 <initPolTasks+0xf8>)
 8001a86:	2164      	movs	r1, #100	@ 0x64
 8001a88:	4810      	ldr	r0, [pc, #64]	@ (8001acc <initPolTasks+0xfc>)
 8001a8a:	f009 f9c3 	bl	800ae14 <sniprintf>
		SendLogMessage(logBuffer);
 8001a8e:	480f      	ldr	r0, [pc, #60]	@ (8001acc <initPolTasks+0xfc>)
 8001a90:	f000 f94e 	bl	8001d30 <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <initPolTasks+0xf4>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f005 fa39 	bl	8006f14 <xQueueGenericSend>
	}
	return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000888 	.word	0x20000888
 8001ab0:	20000928 	.word	0x20000928
 8001ab4:	20000920 	.word	0x20000920
 8001ab8:	0800d65c 	.word	0x0800d65c
 8001abc:	200008c0 	.word	0x200008c0
 8001ac0:	08002069 	.word	0x08002069
 8001ac4:	20000944 	.word	0x20000944
 8001ac8:	0800d668 	.word	0x0800d668
 8001acc:	200001f8 	.word	0x200001f8

08001ad0 <initFireTasks>:
/**
 * @brief Initialize and start Fire Dep tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initFireTasks(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af02      	add	r7, sp, #8
	for(int i=0; i<FIRE_TASKS; i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e046      	b.n	8001b6a <initFireTasks+0x9a>
		taskInit_t* fire_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001adc:	2014      	movs	r0, #20
 8001ade:	f008 f963 	bl	8009da8 <pvPortMalloc>
 8001ae2:	61b8      	str	r0, [r7, #24]
		configASSERT(fire_taskInit != NULL);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10d      	bne.n	8001b06 <initFireTasks+0x36>
	__asm volatile
 8001aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aee:	b672      	cpsid	i
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	b662      	cpsie	i
 8001afe:	613b      	str	r3, [r7, #16]
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <initFireTasks+0x32>

		fire_taskInit->department = FIRE;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	701a      	strb	r2, [r3, #0]
		fire_taskInit->taskIdentifier = i;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	705a      	strb	r2, [r3, #1]
		fire_taskInit->pQhandler = &qFire;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4a25      	ldr	r2, [pc, #148]	@ (8001bac <initFireTasks+0xdc>)
 8001b18:	605a      	str	r2, [r3, #4]
		fire_taskInit->pSemHandler = &FireTasksStatusMutex;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4a24      	ldr	r2, [pc, #144]	@ (8001bb0 <initFireTasks+0xe0>)
 8001b1e:	609a      	str	r2, [r3, #8]
		fire_taskInit->bTaskStatusArr = bFireTasksStatus;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	4a24      	ldr	r2, [pc, #144]	@ (8001bb4 <initFireTasks+0xe4>)
 8001b24:	60da      	str	r2, [r3, #12]
		fire_taskInit->numOfTasks = FIRE_TASKS;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2205      	movs	r2, #5
 8001b2a:	741a      	strb	r2, [r3, #16]
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i+1);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4638      	mov	r0, r7
 8001b32:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <initFireTasks+0xe8>)
 8001b34:	2110      	movs	r1, #16
 8001b36:	f009 f96d 	bl	800ae14 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bbc <initFireTasks+0xec>)
 8001b40:	4413      	add	r3, r2
 8001b42:	4639      	mov	r1, r7
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	232a      	movs	r3, #42	@ 0x2a
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b50:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <initFireTasks+0xf0>)
 8001b52:	f005 ffbb 	bl	8007acc <xTaskCreate>
 8001b56:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) fire_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d002      	beq.n	8001b64 <initFireTasks+0x94>
	 		return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e01f      	b.n	8001ba4 <initFireTasks+0xd4>
	for(int i=0; i<FIRE_TASKS; i++) {
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	ddb5      	ble.n	8001adc <initFireTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <initFireTasks+0xf4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f005 fc61 	bl	8007440 <xQueueSemaphoreTake>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10e      	bne.n	8001ba2 <initFireTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH,"Started Fire Dep Threads! \r\n");
 8001b84:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <initFireTasks+0xf8>)
 8001b86:	2164      	movs	r1, #100	@ 0x64
 8001b88:	4810      	ldr	r0, [pc, #64]	@ (8001bcc <initFireTasks+0xfc>)
 8001b8a:	f009 f943 	bl	800ae14 <sniprintf>
		SendLogMessage(logBuffer);
 8001b8e:	480f      	ldr	r0, [pc, #60]	@ (8001bcc <initFireTasks+0xfc>)
 8001b90:	f000 f8ce 	bl	8001d30 <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <initFireTasks+0xf4>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f005 f9b9 	bl	8006f14 <xQueueGenericSend>
	}
	return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000088c 	.word	0x2000088c
 8001bb0:	20000934 	.word	0x20000934
 8001bb4:	2000092c 	.word	0x2000092c
 8001bb8:	0800d684 	.word	0x0800d684
 8001bbc:	200008d4 	.word	0x200008d4
 8001bc0:	08002069 	.word	0x08002069
 8001bc4:	20000944 	.word	0x20000944
 8001bc8:	0800d68c 	.word	0x0800d68c
 8001bcc:	200001f8 	.word	0x200001f8

08001bd0 <initCoronaTasks>:
/**
 * @brief Initialize and start Corona tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initCoronaTasks(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af02      	add	r7, sp, #8
	for(int i=0; i<CORONA_TASKS; i++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e046      	b.n	8001c6a <initCoronaTasks+0x9a>
		taskInit_t* corona_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001bdc:	2014      	movs	r0, #20
 8001bde:	f008 f8e3 	bl	8009da8 <pvPortMalloc>
 8001be2:	61b8      	str	r0, [r7, #24]
		configASSERT(corona_taskInit != NULL);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <initCoronaTasks+0x36>
	__asm volatile
 8001bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bee:	b672      	cpsid	i
 8001bf0:	f383 8811 	msr	BASEPRI, r3
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	b662      	cpsie	i
 8001bfe:	613b      	str	r3, [r7, #16]
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <initCoronaTasks+0x32>

		corona_taskInit->department = CORONA;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	701a      	strb	r2, [r3, #0]
		corona_taskInit->taskIdentifier = i;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	705a      	strb	r2, [r3, #1]
		corona_taskInit->pQhandler = &qCorona;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <initCoronaTasks+0xdc>)
 8001c18:	605a      	str	r2, [r3, #4]
		corona_taskInit->pSemHandler = &CorTasksStatusMutex;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <initCoronaTasks+0xe0>)
 8001c1e:	609a      	str	r2, [r3, #8]
		corona_taskInit->bTaskStatusArr = bCorTasksStatus;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <initCoronaTasks+0xe4>)
 8001c24:	60da      	str	r2, [r3, #12]
		corona_taskInit->numOfTasks = CORONA_TASKS;
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2205      	movs	r2, #5
 8001c2a:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i+1);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4638      	mov	r0, r7
 8001c32:	4a21      	ldr	r2, [pc, #132]	@ (8001cb8 <initCoronaTasks+0xe8>)
 8001c34:	2110      	movs	r1, #16
 8001c36:	f009 f8ed 	bl	800ae14 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <initCoronaTasks+0xec>)
 8001c40:	4413      	add	r3, r2
 8001c42:	4639      	mov	r1, r7
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	232a      	movs	r3, #42	@ 0x2a
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c50:	481b      	ldr	r0, [pc, #108]	@ (8001cc0 <initCoronaTasks+0xf0>)
 8001c52:	f005 ff3b 	bl	8007acc <xTaskCreate>
 8001c56:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) corona_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <initCoronaTasks+0x94>
	 		return -1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e01f      	b.n	8001ca4 <initCoronaTasks+0xd4>
	for(int i=0; i<CORONA_TASKS; i++) {
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	3301      	adds	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	ddb5      	ble.n	8001bdc <initCoronaTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <initCoronaTasks+0xf4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 fbe1 	bl	8007440 <xQueueSemaphoreTake>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d10e      	bne.n	8001ca2 <initCoronaTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH,"Started Corona Threads! \r\n");
 8001c84:	4a10      	ldr	r2, [pc, #64]	@ (8001cc8 <initCoronaTasks+0xf8>)
 8001c86:	2164      	movs	r1, #100	@ 0x64
 8001c88:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <initCoronaTasks+0xfc>)
 8001c8a:	f009 f8c3 	bl	800ae14 <sniprintf>
		SendLogMessage(logBuffer);
 8001c8e:	480f      	ldr	r0, [pc, #60]	@ (8001ccc <initCoronaTasks+0xfc>)
 8001c90:	f000 f84e 	bl	8001d30 <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <initCoronaTasks+0xf4>)
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f005 f939 	bl	8006f14 <xQueueGenericSend>
	}
	return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000890 	.word	0x20000890
 8001cb0:	20000940 	.word	0x20000940
 8001cb4:	20000938 	.word	0x20000938
 8001cb8:	0800d6ac 	.word	0x0800d6ac
 8001cbc:	200008e8 	.word	0x200008e8
 8001cc0:	08002069 	.word	0x08002069
 8001cc4:	20000944 	.word	0x20000944
 8001cc8:	0800d6b8 	.word	0x0800d6b8
 8001ccc:	200001f8 	.word	0x200001f8

08001cd0 <Logger_Print>:
 * This task continuously receives messages from the log queue (`qLogger`)
 * and transmits them over UART.
 *
 * @param pvParameters Parameters passed to the task (unused).
 */
void Logger_Print(void *pvParameters) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09c      	sub	sp, #112	@ 0x70
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    char msg[MAX_MSG_LENGTH];

    for (;;) {
        if (xQueueReceive(qLogger, &msg, portMAX_DELAY) == pdPASS) {
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <Logger_Print+0x58>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f107 010c 	add.w	r1, r7, #12
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 fac3 	bl	8007270 <xQueueReceive>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d1f3      	bne.n	8001cd8 <Logger_Print+0x8>
        	taskENTER_CRITICAL();
 8001cf0:	f007 ff2a 	bl	8009b48 <vPortEnterCritical>
            if(HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200) != HAL_OK) {
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fad9 	bl	80002b0 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	f107 010c 	add.w	r1, r7, #12
 8001d06:	23c8      	movs	r3, #200	@ 0xc8
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <Logger_Print+0x5c>)
 8001d0a:	f003 fee7 	bl	8005adc <HAL_UART_Transmit>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <Logger_Print+0x4a>
            	vTaskDelay(20);
 8001d14:	2014      	movs	r0, #20
 8001d16:	f006 f839 	bl	8007d8c <vTaskDelay>
            }
            taskEXIT_CRITICAL();
 8001d1a:	f007 ff4b 	bl	8009bb4 <vPortExitCritical>
            vTaskDelay(pdMS_TO_TICKS(20));
 8001d1e:	2014      	movs	r0, #20
 8001d20:	f006 f834 	bl	8007d8c <vTaskDelay>
        if (xQueueReceive(qLogger, &msg, portMAX_DELAY) == pdPASS) {
 8001d24:	e7d8      	b.n	8001cd8 <Logger_Print+0x8>
 8001d26:	bf00      	nop
 8001d28:	20000898 	.word	0x20000898
 8001d2c:	2000031c 	.word	0x2000031c

08001d30 <SendLogMessage>:
 * This function copies the provided message into a local buffer
 * and sends it to the log queue (`qLogger`).
 *
 * @param message The message to log.
 */
void SendLogMessage(const char *message) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b09c      	sub	sp, #112	@ 0x70
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    char logMessage[MAX_MSG_LENGTH];

    // Ensure the message fits into the logMessage buffer
    strncpy(logMessage, message, MAX_MSG_LENGTH - 1);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2263      	movs	r2, #99	@ 0x63
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f009 f97b 	bl	800b03c <strncpy>
    logMessage[MAX_MSG_LENGTH - 1] = '\0';  // Null-terminate to avoid overflow
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    if (xQueueSend(qLogger, logMessage, 100) != pdPASS) {
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <SendLogMessage+0x34>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	f107 010c 	add.w	r1, r7, #12
 8001d54:	2300      	movs	r3, #0
 8001d56:	2264      	movs	r2, #100	@ 0x64
 8001d58:	f005 f8dc 	bl	8006f14 <xQueueGenericSend>
        // Failed to send to queue
    }
}
 8001d5c:	bf00      	nop
 8001d5e:	3770      	adds	r7, #112	@ 0x70
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000898 	.word	0x20000898

08001d68 <SendDataMessage>:
 * This function copies the provided message into a local buffer
 * and sends it to the button data queue (`qBtnData`).
 *
 * @param message The message to send.
 */
void SendDataMessage(const char *message) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09c      	sub	sp, #112	@ 0x70
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    char dataMessage[MAX_MSG_LENGTH];

    // Ensure the message fits into the logMessage buffer
    strncpy(dataMessage, message, MAX_MSG_LENGTH - 1);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2263      	movs	r2, #99	@ 0x63
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 f95f 	bl	800b03c <strncpy>
    dataMessage[MAX_MSG_LENGTH - 1] = '\0';  // Null-terminate to avoid overflow
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    if (xQueueSend(qBtnData, dataMessage, 100) != pdPASS) {
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <SendDataMessage+0x34>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	f107 010c 	add.w	r1, r7, #12
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2264      	movs	r2, #100	@ 0x64
 8001d90:	f005 f8c0 	bl	8006f14 <xQueueGenericSend>
        // Failed to send to queue
    }
}
 8001d94:	bf00      	nop
 8001d96:	3770      	adds	r7, #112	@ 0x70
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000089c 	.word	0x2000089c

08001da0 <Data_Print>:
 * If the queue is empty, it waits for a notification. When a message is received,
 * it is transmitted over UART.
 *
 * @param pvParameters Parameters passed to the task (unused).
 */
void Data_Print(void *pvParameters) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b09e      	sub	sp, #120	@ 0x78
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    char msg[MAX_MSG_LENGTH];
    uint32_t ulNotificationValue;
    for (;;) {
    	UBaseType_t qItems = uxQueueMessagesWaiting(qBtnData);
 8001da8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <Data_Print+0x7c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 fc5f 	bl	8007670 <uxQueueMessagesWaiting>
 8001db2:	6778      	str	r0, [r7, #116]	@ 0x74
    	if((uint32_t)qItems == 0) {
 8001db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <Data_Print+0x2c>
    		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f006 ff63 	bl	8008c90 <xTaskNotifyWait>
 8001dca:	e7ed      	b.n	8001da8 <Data_Print+0x8>
    	} else {
    		if (xQueueReceive(qBtnData, &msg, portMAX_DELAY) == pdPASS) {
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <Data_Print+0x7c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f107 0110 	add.w	r1, r7, #16
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f005 fa49 	bl	8007270 <xQueueReceive>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d1e1      	bne.n	8001da8 <Data_Print+0x8>
    			taskENTER_CRITICAL();
 8001de4:	f007 feb0 	bl	8009b48 <vPortEnterCritical>
    			if(HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200) != HAL_OK) {
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fa5f 	bl	80002b0 <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f107 0110 	add.w	r1, r7, #16
 8001dfa:	23c8      	movs	r3, #200	@ 0xc8
 8001dfc:	4808      	ldr	r0, [pc, #32]	@ (8001e20 <Data_Print+0x80>)
 8001dfe:	f003 fe6d 	bl	8005adc <HAL_UART_Transmit>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <Data_Print+0x6e>
    				vTaskDelay(20);
 8001e08:	2014      	movs	r0, #20
 8001e0a:	f005 ffbf 	bl	8007d8c <vTaskDelay>
    			}
    			taskEXIT_CRITICAL();
 8001e0e:	f007 fed1 	bl	8009bb4 <vPortExitCritical>
    			vTaskDelay(pdMS_TO_TICKS(20));
 8001e12:	2014      	movs	r0, #20
 8001e14:	f005 ffba 	bl	8007d8c <vTaskDelay>
    for (;;) {
 8001e18:	e7c6      	b.n	8001da8 <Data_Print+0x8>
 8001e1a:	bf00      	nop
 8001e1c:	2000089c 	.word	0x2000089c
 8001e20:	2000031c 	.word	0x2000031c

08001e24 <tasksManagerTask>:
 * This function continuously checks for available tasks in the queues for
 * Ambulance, Police, Fire Department, and Corona services. If there are
 * available tasks and the current running tasks are below the maximum allowed,
 * it assigns tasks to the appropriate handlers.
 */
void tasksManagerTask(void *pvParameters) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	int8_t newTaskIndex;
	for(;;) {
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001e2c:	4b7a      	ldr	r3, [pc, #488]	@ (8002018 <tasksManagerTask+0x1f4>)
 8001e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e32:	2b13      	cmp	r3, #19
 8001e34:	dd07      	ble.n	8001e46 <tasksManagerTask+0x22>
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, TASK_MANAGER_TICKS_TO_WAIT);
 8001e36:	f107 0208 	add.w	r2, r7, #8
 8001e3a:	2328      	movs	r3, #40	@ 0x28
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f006 ff26 	bl	8008c90 <xTaskNotifyWait>
 8001e44:	e7f2      	b.n	8001e2c <tasksManagerTask+0x8>
		} else {
			// Check if there are Ambulance tasks to perform
			if(uxQueueMessagesWaiting( qAmbulance ) > 0) {
 8001e46:	4b75      	ldr	r3, [pc, #468]	@ (800201c <tasksManagerTask+0x1f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 fc10 	bl	8007670 <uxQueueMessagesWaiting>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d02f      	beq.n	8001eb6 <tasksManagerTask+0x92>
				newTaskIndex = getAvailableAmbulanceTask();
 8001e56:	f000 fa9f 	bl	8002398 <getAvailableAmbulanceTask>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
				if(newTaskIndex != -1) {
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d026      	beq.n	8001eb6 <tasksManagerTask+0x92>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001e68:	4b6d      	ldr	r3, [pc, #436]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 fae5 	bl	8007440 <xQueueSemaphoreTake>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10e      	bne.n	8001e9a <tasksManagerTask+0x76>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Ambulance handler number %d is now active\r\n", newTaskIndex+1);
 8001e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a68      	ldr	r2, [pc, #416]	@ (8002024 <tasksManagerTask+0x200>)
 8001e84:	2164      	movs	r1, #100	@ 0x64
 8001e86:	4868      	ldr	r0, [pc, #416]	@ (8002028 <tasksManagerTask+0x204>)
 8001e88:	f008 ffc4 	bl	800ae14 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001e8c:	4b64      	ldr	r3, [pc, #400]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	2300      	movs	r3, #0
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	f005 f83d 	bl	8006f14 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_amb_tasks);
 8001e9a:	4864      	ldr	r0, [pc, #400]	@ (800202c <tasksManagerTask+0x208>)
 8001e9c:	f000 fa1c 	bl	80022d8 <addCurrentRunningTask>
					xTaskNotify(vAmbulanceTasks[newTaskIndex], 0, eNoAction);
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	4a62      	ldr	r2, [pc, #392]	@ (8002030 <tasksManagerTask+0x20c>)
 8001ea6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	f006 ff4e 	bl	8008d50 <xTaskGenericNotify>
					continue;
 8001eb4:	e0af      	b.n	8002016 <tasksManagerTask+0x1f2>
				}
			}
			// Check if there are Police tasks to perform
			if(uxQueueMessagesWaiting( qPolice ) > 0) {
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <tasksManagerTask+0x210>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fbd8 	bl	8007670 <uxQueueMessagesWaiting>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02f      	beq.n	8001f26 <tasksManagerTask+0x102>
				newTaskIndex = getAvailablePoliceeTask();
 8001ec6:	f000 faa7 	bl	8002418 <getAvailablePoliceeTask>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
				if(newTaskIndex != -1) {
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d026      	beq.n	8001f26 <tasksManagerTask+0x102>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001ed8:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f005 faad 	bl	8007440 <xQueueSemaphoreTake>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10e      	bne.n	8001f0a <tasksManagerTask+0xe6>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Police handler number %d is now active\r\n", newTaskIndex+1);
 8001eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	4a51      	ldr	r2, [pc, #324]	@ (8002038 <tasksManagerTask+0x214>)
 8001ef4:	2164      	movs	r1, #100	@ 0x64
 8001ef6:	484c      	ldr	r0, [pc, #304]	@ (8002028 <tasksManagerTask+0x204>)
 8001ef8:	f008 ff8c 	bl	800ae14 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001efc:	4b48      	ldr	r3, [pc, #288]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	f005 f805 	bl	8006f14 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_police_tasks);
 8001f0a:	484c      	ldr	r0, [pc, #304]	@ (800203c <tasksManagerTask+0x218>)
 8001f0c:	f000 f9e4 	bl	80022d8 <addCurrentRunningTask>
					xTaskNotify(vPoliceTasks[newTaskIndex], 0, eNoAction);
 8001f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f14:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <tasksManagerTask+0x21c>)
 8001f16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	f006 ff16 	bl	8008d50 <xTaskGenericNotify>
					continue;
 8001f24:	e077      	b.n	8002016 <tasksManagerTask+0x1f2>
				}
			}

			// Check if there are Fire Dep tasks to perform
			if(uxQueueMessagesWaiting( qFire ) > 0) {
 8001f26:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <tasksManagerTask+0x220>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 fba0 	bl	8007670 <uxQueueMessagesWaiting>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02f      	beq.n	8001f96 <tasksManagerTask+0x172>
				newTaskIndex = getAvailableFireTask();
 8001f36:	f000 faaf 	bl	8002498 <getAvailableFireTask>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]
				if(newTaskIndex != -1) {
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d026      	beq.n	8001f96 <tasksManagerTask+0x172>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001f48:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 fa75 	bl	8007440 <xQueueSemaphoreTake>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10e      	bne.n	8001f7a <tasksManagerTask+0x156>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Fire dep handler number %d is now active\r\n", newTaskIndex+1);
 8001f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f60:	3301      	adds	r3, #1
 8001f62:	4a39      	ldr	r2, [pc, #228]	@ (8002048 <tasksManagerTask+0x224>)
 8001f64:	2164      	movs	r1, #100	@ 0x64
 8001f66:	4830      	ldr	r0, [pc, #192]	@ (8002028 <tasksManagerTask+0x204>)
 8001f68:	f008 ff54 	bl	800ae14 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	2300      	movs	r3, #0
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	f004 ffcd 	bl	8006f14 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_fire_tasks);
 8001f7a:	4834      	ldr	r0, [pc, #208]	@ (800204c <tasksManagerTask+0x228>)
 8001f7c:	f000 f9ac 	bl	80022d8 <addCurrentRunningTask>
					xTaskNotify(vFireTasks[newTaskIndex], 0, eNoAction);
 8001f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f84:	4a32      	ldr	r2, [pc, #200]	@ (8002050 <tasksManagerTask+0x22c>)
 8001f86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f006 fede 	bl	8008d50 <xTaskGenericNotify>
					continue;
 8001f94:	e03f      	b.n	8002016 <tasksManagerTask+0x1f2>
				}
			}

			// Check if there are Corona tasks to perform
			if(uxQueueMessagesWaiting( qCorona ) > 0) {
 8001f96:	4b2f      	ldr	r3, [pc, #188]	@ (8002054 <tasksManagerTask+0x230>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f005 fb68 	bl	8007670 <uxQueueMessagesWaiting>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02f      	beq.n	8002006 <tasksManagerTask+0x1e2>
				newTaskIndex = getAvailableCoronaTask();
 8001fa6:	f000 fab7 	bl	8002518 <getAvailableCoronaTask>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]
				if(newTaskIndex != -1) {
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d026      	beq.n	8002006 <tasksManagerTask+0x1e2>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f005 fa3d 	bl	8007440 <xQueueSemaphoreTake>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10e      	bne.n	8001fea <tasksManagerTask+0x1c6>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Corona handler number %d is now active\r\n", newTaskIndex+1);
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <tasksManagerTask+0x234>)
 8001fd4:	2164      	movs	r1, #100	@ 0x64
 8001fd6:	4814      	ldr	r0, [pc, #80]	@ (8002028 <tasksManagerTask+0x204>)
 8001fd8:	f008 ff1c 	bl	800ae14 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001fdc:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <tasksManagerTask+0x1fc>)
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f004 ff95 	bl	8006f14 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_corona_tasks);
 8001fea:	481c      	ldr	r0, [pc, #112]	@ (800205c <tasksManagerTask+0x238>)
 8001fec:	f000 f974 	bl	80022d8 <addCurrentRunningTask>
					xTaskNotify(vCoronaTasks[newTaskIndex], 0, eNoAction);
 8001ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8002060 <tasksManagerTask+0x23c>)
 8001ff6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	f006 fea6 	bl	8008d50 <xTaskGenericNotify>
					continue;
 8002004:	e007      	b.n	8002016 <tasksManagerTask+0x1f2>
				}
			}
			portYIELD();
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <tasksManagerTask+0x240>)
 8002008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	f3bf 8f6f 	isb	sy
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8002016:	e709      	b.n	8001e2c <tasksManagerTask+0x8>
 8002018:	20000954 	.word	0x20000954
 800201c:	20000884 	.word	0x20000884
 8002020:	20000944 	.word	0x20000944
 8002024:	0800d6d4 	.word	0x0800d6d4
 8002028:	2000025c 	.word	0x2000025c
 800202c:	20000000 	.word	0x20000000
 8002030:	200008a0 	.word	0x200008a0
 8002034:	20000888 	.word	0x20000888
 8002038:	0800d700 	.word	0x0800d700
 800203c:	20000001 	.word	0x20000001
 8002040:	200008c0 	.word	0x200008c0
 8002044:	2000088c 	.word	0x2000088c
 8002048:	0800d72c 	.word	0x0800d72c
 800204c:	20000002 	.word	0x20000002
 8002050:	200008d4 	.word	0x200008d4
 8002054:	20000890 	.word	0x20000890
 8002058:	0800d758 	.word	0x0800d758
 800205c:	20000003 	.word	0x20000003
 8002060:	200008e8 	.word	0x200008e8
 8002064:	e000ed04 	.word	0xe000ed04

08002068 <vHandleCall>:
 * notifications indicating a new task to process, executes the task, and updates
 * the shared data with the results.
 *
 * @param pvParameters Pointer to the task initialization parameters.
 */
void vHandleCall(void* pvParameters) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b0c2      	sub	sp, #264	@ 0x108
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifictionValue;
	TickType_t startTick, endTick, totalTicks;
	taskInit_t* pTaskInit = (taskInit_t*)pvParameters;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	DispatcherPacket new_packet = {0};
 8002076:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800207a:	226c      	movs	r2, #108	@ 0x6c
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f008 ffd4 	bl	800b02c <memset>
	size_t max_message_length = MAX_MSG_LENGTH - 3;
 8002084:	2361      	movs	r3, #97	@ 0x61
 8002086:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	char printMSG[100];
	char departmentSTR[12];
	strncpy(departmentSTR, GET_ENUM_DEPARTMENT_STR(pTaskInit->department), sizeof(departmentSTR)-1);
 800208a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d016      	beq.n	80020c2 <vHandleCall+0x5a>
 8002094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00f      	beq.n	80020be <vHandleCall+0x56>
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d008      	beq.n	80020ba <vHandleCall+0x52>
 80020a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d101      	bne.n	80020b6 <vHandleCall+0x4e>
 80020b2:	4b7a      	ldr	r3, [pc, #488]	@ (800229c <vHandleCall+0x234>)
 80020b4:	e006      	b.n	80020c4 <vHandleCall+0x5c>
 80020b6:	4b7a      	ldr	r3, [pc, #488]	@ (80022a0 <vHandleCall+0x238>)
 80020b8:	e004      	b.n	80020c4 <vHandleCall+0x5c>
 80020ba:	4b7a      	ldr	r3, [pc, #488]	@ (80022a4 <vHandleCall+0x23c>)
 80020bc:	e002      	b.n	80020c4 <vHandleCall+0x5c>
 80020be:	4b7a      	ldr	r3, [pc, #488]	@ (80022a8 <vHandleCall+0x240>)
 80020c0:	e000      	b.n	80020c4 <vHandleCall+0x5c>
 80020c2:	4b7a      	ldr	r3, [pc, #488]	@ (80022ac <vHandleCall+0x244>)
 80020c4:	f107 000c 	add.w	r0, r7, #12
 80020c8:	220b      	movs	r2, #11
 80020ca:	4619      	mov	r1, r3
 80020cc:	f008 ffb6 	bl	800b03c <strncpy>
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
			,departmentSTR
			, (pTaskInit->taskIdentifier+1));
 80020d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020d4:	785b      	ldrb	r3, [r3, #1]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 80020d6:	3301      	adds	r3, #1
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	f107 0018 	add.w	r0, r7, #24
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	4a72      	ldr	r2, [pc, #456]	@ (80022b0 <vHandleCall+0x248>)
 80020e6:	2164      	movs	r1, #100	@ 0x64
 80020e8:	f008 fe94 	bl	800ae14 <sniprintf>
	SendLogMessage(printMSG);
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe1d 	bl	8001d30 <SendLogMessage>
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80020f6:	4b6f      	ldr	r3, [pc, #444]	@ (80022b4 <vHandleCall+0x24c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f04f 31ff 	mov.w	r1, #4294967295
 80020fe:	4618      	mov	r0, r3
 8002100:	f005 f99e 	bl	8007440 <xQueueSemaphoreTake>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10b      	bne.n	8002122 <vHandleCall+0xba>
		SendLogMessage(printMSG);
 800210a:	f107 0318 	add.w	r3, r7, #24
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe0e 	bl	8001d30 <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8002114:	4b67      	ldr	r3, [pc, #412]	@ (80022b4 <vHandleCall+0x24c>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	2300      	movs	r3, #0
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	f004 fef9 	bl	8006f14 <xQueueGenericSend>
	}
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8002122:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	2100      	movs	r1, #0
 800212c:	2000      	movs	r0, #0
 800212e:	f006 fdaf 	bl	8008c90 <xTaskNotifyWait>

		startTick = xTaskGetTickCount();
 8002132:	f006 f8ad 	bl	8008290 <xTaskGetTickCount>
 8002136:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4

		if(!(xQueueReceive(*(pTaskInit->pQhandler), &new_packet, portMAX_DELAY) == pdTRUE)) {
 800213a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8002146:	f04f 32ff 	mov.w	r2, #4294967295
 800214a:	4618      	mov	r0, r3
 800214c:	f005 f890 	bl	8007270 <xQueueReceive>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 80a0 	bne.w	8002298 <vHandleCall+0x230>
			continue;
		}

		// Wait for the job to get done.
		vTaskDelay(new_packet.timeToHandleInTicks);
 8002158:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800215c:	4618      	mov	r0, r3
 800215e:	f005 fe15 	bl	8007d8c <vTaskDelay>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8002162:	4b54      	ldr	r3, [pc, #336]	@ (80022b4 <vHandleCall+0x24c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 31ff 	mov.w	r1, #4294967295
 800216a:	4618      	mov	r0, r3
 800216c:	f005 f968 	bl	8007440 <xQueueSemaphoreTake>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d11f      	bne.n	80021b6 <vHandleCall+0x14e>
			snprintf(logInitBuffer, MAX_MSG_LENGTH,"%s - Handled task: ", departmentSTR);
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4a4f      	ldr	r2, [pc, #316]	@ (80022b8 <vHandleCall+0x250>)
 800217c:	2164      	movs	r1, #100	@ 0x64
 800217e:	484f      	ldr	r0, [pc, #316]	@ (80022bc <vHandleCall+0x254>)
 8002180:	f008 fe48 	bl	800ae14 <sniprintf>
			SendLogMessage(logInitBuffer);
 8002184:	484d      	ldr	r0, [pc, #308]	@ (80022bc <vHandleCall+0x254>)
 8002186:	f7ff fdd3 	bl	8001d30 <SendLogMessage>
			snprintf(logInitBuffer, MAX_MSG_LENGTH, "%.*s \r\n", (int)max_message_length, new_packet.message);
 800218a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800218e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002192:	3301      	adds	r3, #1
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	4a49      	ldr	r2, [pc, #292]	@ (80022c0 <vHandleCall+0x258>)
 800219a:	2164      	movs	r1, #100	@ 0x64
 800219c:	4847      	ldr	r0, [pc, #284]	@ (80022bc <vHandleCall+0x254>)
 800219e:	f008 fe39 	bl	800ae14 <sniprintf>
			SendLogMessage(logInitBuffer);
 80021a2:	4846      	ldr	r0, [pc, #280]	@ (80022bc <vHandleCall+0x254>)
 80021a4:	f7ff fdc4 	bl	8001d30 <SendLogMessage>
			xSemaphoreGive(printfMutex);
 80021a8:	4b42      	ldr	r3, [pc, #264]	@ (80022b4 <vHandleCall+0x24c>)
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	f004 feaf 	bl	8006f14 <xQueueGenericSend>
		}

		// Update shared app data
		if(xTasksDataMutex != NULL) {
 80021b6:	4b43      	ldr	r3, [pc, #268]	@ (80022c4 <vHandleCall+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <vHandleCall+0x1d8>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 80021be:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <vHandleCall+0x25c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f04f 31ff 	mov.w	r1, #4294967295
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 f93a 	bl	8007440 <xQueueSemaphoreTake>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d136      	bne.n	8002240 <vHandleCall+0x1d8>
				total_tasks_ran++;
 80021d2:	4b3d      	ldr	r3, [pc, #244]	@ (80022c8 <vHandleCall+0x260>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	4a3b      	ldr	r2, [pc, #236]	@ (80022c8 <vHandleCall+0x260>)
 80021da:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 80021dc:	f006 f858 	bl	8008290 <xTaskGetTickCount>
 80021e0:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
				totalTicks = endTick - startTick;
 80021e4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
				total_tasks_time += (float)totalTicks / configTICK_RATE_HZ;
 80021f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fe:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80022cc <vHandleCall+0x264>
 8002202:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002206:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <vHandleCall+0x268>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <vHandleCall+0x268>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
				average_task_time = (float)total_tasks_time/total_tasks_ran;
 8002216:	4b2e      	ldr	r3, [pc, #184]	@ (80022d0 <vHandleCall+0x268>)
 8002218:	edd3 6a00 	vldr	s13, [r3]
 800221c:	4b2a      	ldr	r3, [pc, #168]	@ (80022c8 <vHandleCall+0x260>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222c:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <vHandleCall+0x26c>)
 800222e:	edc3 7a00 	vstr	s15, [r3]
				 * TODO: Calculating the average_task_time in this task is a waste
				 * 		 of resources. Data calculation should be done in its own
				 * 		 lower priority task and only run when printing of data
				 * 		 is required.
				 */
				xSemaphoreGive(xTasksDataMutex);
 8002232:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <vHandleCall+0x25c>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	f004 fe6a 	bl	8006f14 <xQueueGenericSend>
			}
		}
		// Indicate the task is now available for the next incoming packet.
		if(*pTaskInit->pSemHandler != NULL) {
 8002240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f43f af6a 	beq.w	8002122 <vHandleCall+0xba>
			if(xSemaphoreTake(*(pTaskInit->pSemHandler), portMAX_DELAY) ==  pdTRUE) {
 800224e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f04f 31ff 	mov.w	r1, #4294967295
 800225a:	4618      	mov	r0, r3
 800225c:	f005 f8f0 	bl	8007440 <xQueueSemaphoreTake>
 8002260:	4603      	mov	r3, r0
 8002262:	2b01      	cmp	r3, #1
 8002264:	f47f af5d 	bne.w	8002122 <vHandleCall+0xba>
				removeCurrentRunningTask(new_packet.available_tasks_counter);
 8002268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f863 	bl	8002338 <removeCurrentRunningTask>
				pTaskInit->bTaskStatusArr[pTaskInit->taskIdentifier] = false;
 8002272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800227c:	7852      	ldrb	r2, [r2, #1]
 800227e:	4413      	add	r3, r2
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(*(pTaskInit->pSemHandler));
 8002284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	2300      	movs	r3, #0
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	f004 fe3f 	bl	8006f14 <xQueueGenericSend>
 8002296:	e744      	b.n	8002122 <vHandleCall+0xba>
			continue;
 8002298:	bf00      	nop
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 800229a:	e742      	b.n	8002122 <vHandleCall+0xba>
 800229c:	0800d784 	.word	0x0800d784
 80022a0:	0800d78c 	.word	0x0800d78c
 80022a4:	0800d798 	.word	0x0800d798
 80022a8:	0800d7a4 	.word	0x0800d7a4
 80022ac:	0800d7ac 	.word	0x0800d7ac
 80022b0:	0800d7b8 	.word	0x0800d7b8
 80022b4:	20000944 	.word	0x20000944
 80022b8:	0800d7e4 	.word	0x0800d7e4
 80022bc:	2000025c 	.word	0x2000025c
 80022c0:	0800d7f8 	.word	0x0800d7f8
 80022c4:	20000958 	.word	0x20000958
 80022c8:	2000094c 	.word	0x2000094c
 80022cc:	447a0000 	.word	0x447a0000
 80022d0:	20000948 	.word	0x20000948
 80022d4:	20000950 	.word	0x20000950

080022d8 <addCurrentRunningTask>:
 * @brief Increments the count of currently running tasks.
 *
 * This function safely increments the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void addCurrentRunningTask(uint8_t* avail_dep_tasks) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	if(xTasksDataMutex != NULL) {
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <addCurrentRunningTask+0x58>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <addCurrentRunningTask+0x50>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <addCurrentRunningTask+0x58>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	4618      	mov	r0, r3
 80022f2:	f005 f8a5 	bl	8007440 <xQueueSemaphoreTake>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d115      	bne.n	8002328 <addCurrentRunningTask+0x50>
			current_running_tasks++;
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <addCurrentRunningTask+0x5c>)
 80022fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	b25a      	sxtb	r2, r3
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <addCurrentRunningTask+0x5c>)
 800230c:	701a      	strb	r2, [r3, #0]
			*(avail_dep_tasks)-=1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 800231a:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <addCurrentRunningTask+0x58>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	f004 fdf6 	bl	8006f14 <xQueueGenericSend>
		}
	}
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000958 	.word	0x20000958
 8002334:	20000954 	.word	0x20000954

08002338 <removeCurrentRunningTask>:
 * @brief Decrements the count of currently running tasks.
 *
 * This function safely decrements the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void removeCurrentRunningTask(uint8_t* avail_dep_tasks) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if(xTasksDataMutex != NULL) {
 8002340:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <removeCurrentRunningTask+0x58>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01f      	beq.n	8002388 <removeCurrentRunningTask+0x50>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <removeCurrentRunningTask+0x58>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	4618      	mov	r0, r3
 8002352:	f005 f875 	bl	8007440 <xQueueSemaphoreTake>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d115      	bne.n	8002388 <removeCurrentRunningTask+0x50>
			current_running_tasks--;
 800235c:	4b0d      	ldr	r3, [pc, #52]	@ (8002394 <removeCurrentRunningTask+0x5c>)
 800235e:	f993 3000 	ldrsb.w	r3, [r3]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	b25a      	sxtb	r2, r3
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <removeCurrentRunningTask+0x5c>)
 800236c:	701a      	strb	r2, [r3, #0]
			*(avail_dep_tasks)+=1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <removeCurrentRunningTask+0x58>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	f004 fdc6 	bl	8006f14 <xQueueGenericSend>
		}
	}
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000958 	.word	0x20000958
 8002394:	20000954 	.word	0x20000954

08002398 <getAvailableAmbulanceTask>:
 * This function iterates through the ambulance task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available ambulance tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableAmbulanceTask(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(AmbTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <getAvailableAmbulanceTask+0x78>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f04f 31ff 	mov.w	r1, #4294967295
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 f84a 	bl	8007440 <xQueueSemaphoreTake>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d127      	bne.n	8002402 <getAvailableAmbulanceTask+0x6a>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e01a      	b.n	80023ee <getAvailableAmbulanceTask+0x56>
			if(bAmbTasksStatus[i] == false) {
 80023b8:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <getAvailableAmbulanceTask+0x7c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <getAvailableAmbulanceTask+0x50>
				bAmbTasksStatus[i] = true;
 80023ca:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <getAvailableAmbulanceTask+0x7c>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(AmbTasksStatusMutex);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <getAvailableAmbulanceTask+0x78>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	2300      	movs	r3, #0
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	f004 fd99 	bl	8006f14 <xQueueGenericSend>
				return (int8_t)i;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	e00e      	b.n	8002406 <getAvailableAmbulanceTask+0x6e>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3301      	adds	r3, #1
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b07      	cmp	r3, #7
 80023f2:	dde1      	ble.n	80023b8 <getAvailableAmbulanceTask+0x20>
			}
		}
		xSemaphoreGive(AmbTasksStatusMutex);
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <getAvailableAmbulanceTask+0x78>)
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	f004 fd89 	bl	8006f14 <xQueueGenericSend>
	}
	return -1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000091c 	.word	0x2000091c
 8002414:	20000914 	.word	0x20000914

08002418 <getAvailablePoliceeTask>:
 * This function iterates through the police task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available police tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailablePoliceeTask(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(PolTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 800241e:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <getAvailablePoliceeTask+0x78>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f04f 31ff 	mov.w	r1, #4294967295
 8002426:	4618      	mov	r0, r3
 8002428:	f005 f80a 	bl	8007440 <xQueueSemaphoreTake>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d127      	bne.n	8002482 <getAvailablePoliceeTask+0x6a>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	e01a      	b.n	800246e <getAvailablePoliceeTask+0x56>
			if(bPolTasksStatus[i] == false) {
 8002438:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <getAvailablePoliceeTask+0x7c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f083 0301 	eor.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <getAvailablePoliceeTask+0x50>
				bPolTasksStatus[i] = true;
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <getAvailablePoliceeTask+0x7c>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(PolTasksStatusMutex);
 8002454:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <getAvailablePoliceeTask+0x78>)
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	f004 fd59 	bl	8006f14 <xQueueGenericSend>
				return (int8_t)i;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	b25b      	sxtb	r3, r3
 8002466:	e00e      	b.n	8002486 <getAvailablePoliceeTask+0x6e>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b04      	cmp	r3, #4
 8002472:	dde1      	ble.n	8002438 <getAvailablePoliceeTask+0x20>
			}
		}
		xSemaphoreGive(PolTasksStatusMutex);
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <getAvailablePoliceeTask+0x78>)
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	f004 fd49 	bl	8006f14 <xQueueGenericSend>
	}
	return -1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000928 	.word	0x20000928
 8002494:	20000920 	.word	0x20000920

08002498 <getAvailableFireTask>:
 * This function iterates through the fire department task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available fire department tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableFireTask(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(FireTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 800249e:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <getAvailableFireTask+0x78>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 31ff 	mov.w	r1, #4294967295
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 ffca 	bl	8007440 <xQueueSemaphoreTake>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d127      	bne.n	8002502 <getAvailableFireTask+0x6a>
		for(int i = 0; i < FIRE_TASKS; i++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	e01a      	b.n	80024ee <getAvailableFireTask+0x56>
			if(bFireTasksStatus[i] == false) {
 80024b8:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <getAvailableFireTask+0x7c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <getAvailableFireTask+0x50>
				bFireTasksStatus[i] = true;
 80024ca:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <getAvailableFireTask+0x7c>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(FireTasksStatusMutex);
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <getAvailableFireTask+0x78>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	f004 fd19 	bl	8006f14 <xQueueGenericSend>
				return (int8_t)i;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	e00e      	b.n	8002506 <getAvailableFireTask+0x6e>
		for(int i = 0; i < FIRE_TASKS; i++) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3301      	adds	r3, #1
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	dde1      	ble.n	80024b8 <getAvailableFireTask+0x20>
			}
		}
		xSemaphoreGive(FireTasksStatusMutex);
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <getAvailableFireTask+0x78>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	f004 fd09 	bl	8006f14 <xQueueGenericSend>
	}
	return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000934 	.word	0x20000934
 8002514:	2000092c 	.word	0x2000092c

08002518 <getAvailableCoronaTask>:
 * This function iterates through the corona task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available corona tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableCoronaTask(void) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(CorTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <getAvailableCoronaTask+0x78>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f04f 31ff 	mov.w	r1, #4294967295
 8002526:	4618      	mov	r0, r3
 8002528:	f004 ff8a 	bl	8007440 <xQueueSemaphoreTake>
 800252c:	4603      	mov	r3, r0
 800252e:	2b01      	cmp	r3, #1
 8002530:	d127      	bne.n	8002582 <getAvailableCoronaTask+0x6a>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	e01a      	b.n	800256e <getAvailableCoronaTask+0x56>
			if(bCorTasksStatus[i] == false) {
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <getAvailableCoronaTask+0x7c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00e      	beq.n	8002568 <getAvailableCoronaTask+0x50>
				bCorTasksStatus[i] = true;
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <getAvailableCoronaTask+0x7c>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(CorTasksStatusMutex);
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <getAvailableCoronaTask+0x78>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	2300      	movs	r3, #0
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	f004 fcd9 	bl	8006f14 <xQueueGenericSend>
				return (int8_t)i;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	e00e      	b.n	8002586 <getAvailableCoronaTask+0x6e>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3301      	adds	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b04      	cmp	r3, #4
 8002572:	dde1      	ble.n	8002538 <getAvailableCoronaTask+0x20>
			}
		}
		xSemaphoreGive(CorTasksStatusMutex);
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <getAvailableCoronaTask+0x78>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	2300      	movs	r3, #0
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	f004 fcc9 	bl	8006f14 <xQueueGenericSend>
	}
	return -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000940 	.word	0x20000940
 8002594:	20000938 	.word	0x20000938

08002598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800259e:	f000 ff0c 	bl	80033ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a2:	f000 f88b 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a6:	f000 f9b5 	bl	8002914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80025aa:	f000 f955 	bl	8002858 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80025ae:	f000 f983 	bl	80028b8 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80025b2:	f000 f8ef 	bl	8002794 <MX_RNG_Init>
  MX_TIM2_Init();
 80025b6:	f000 f901 	bl	80027bc <MX_TIM2_Init>

  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  initQueues();
 80025ba:	f7ff f897 	bl	80016ec <initQueues>
  initSemaphores();
 80025be:	f7ff f91d 	bl	80017fc <initSemaphores>
  xDebounceTimer = xTimerCreate("DebounceTimer",
 80025c2:	4b32      	ldr	r3, [pc, #200]	@ (800268c <main+0xf4>)
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	2200      	movs	r2, #0
 80025ca:	2132      	movs	r1, #50	@ 0x32
 80025cc:	4830      	ldr	r0, [pc, #192]	@ (8002690 <main+0xf8>)
 80025ce:	f006 fe15 	bl	80091fc <xTimerCreate>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002694 <main+0xfc>)
 80025d6:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  	 pdMS_TO_TICKS(50),
								 pdFALSE,
								 (void*)0,
								 DebounceTimerCallback);
  BaseType_t status;
  status = xTaskCreate((TaskFunction_t)initTasks,
 80025d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <main+0x100>)
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2338      	movs	r3, #56	@ 0x38
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	492d      	ldr	r1, [pc, #180]	@ (800269c <main+0x104>)
 80025e6:	482e      	ldr	r0, [pc, #184]	@ (80026a0 <main+0x108>)
 80025e8:	f005 fa70 	bl	8007acc <xTaskCreate>
 80025ec:	60f8      	str	r0, [r7, #12]
		  "init_task",
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);
  configASSERT(status ==  pdTRUE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d00d      	beq.n	8002610 <main+0x78>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f8:	b672      	cpsid	i
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	b662      	cpsie	i
 8002608:	60bb      	str	r3, [r7, #8]
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <main+0x74>

  status = xTaskCreate((TaskFunction_t)Logger_Print,
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <main+0x10c>)
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	232d      	movs	r3, #45	@ 0x2d
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2301      	movs	r3, #1
 800261a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800261e:	4922      	ldr	r1, [pc, #136]	@ (80026a8 <main+0x110>)
 8002620:	4822      	ldr	r0, [pc, #136]	@ (80026ac <main+0x114>)
 8002622:	f005 fa53 	bl	8007acc <xTaskCreate>
 8002626:	60f8      	str	r0, [r7, #12]
		  "Logger",
		  TASKS_MEMORY_SIZE,
		  (void*) 1,
		  LOGGER_TASK_PRIORITY,
		  &vLoggerTask);
  configASSERT(status ==  pdTRUE);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d00d      	beq.n	800264a <main+0xb2>
	__asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002632:	b672      	cpsid	i
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	b662      	cpsie	i
 8002642:	607b      	str	r3, [r7, #4]
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <main+0xae>

  status = xTaskCreate((TaskFunction_t)Data_Print,
 800264a:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <main+0x118>)
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	232d      	movs	r3, #45	@ 0x2d
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002658:	4916      	ldr	r1, [pc, #88]	@ (80026b4 <main+0x11c>)
 800265a:	4817      	ldr	r0, [pc, #92]	@ (80026b8 <main+0x120>)
 800265c:	f005 fa36 	bl	8007acc <xTaskCreate>
 8002660:	60f8      	str	r0, [r7, #12]
		  "Print Data",
		  TASKS_MEMORY_SIZE,
		  (void*) 1,
		  LOGGER_TASK_PRIORITY,
		  &vBtnDataTask);
  configASSERT(status ==  pdTRUE);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d00d      	beq.n	8002684 <main+0xec>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266c:	b672      	cpsid	i
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	b662      	cpsie	i
 800267c:	603b      	str	r3, [r7, #0]
}
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <main+0xe8>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 8002684:	f005 fcc8 	bl	8008018 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <main+0xf0>
 800268c:	08002af1 	.word	0x08002af1
 8002690:	0800d80c 	.word	0x0800d80c
 8002694:	20000960 	.word	0x20000960
 8002698:	20000900 	.word	0x20000900
 800269c:	0800d81c 	.word	0x0800d81c
 80026a0:	080015c1 	.word	0x080015c1
 80026a4:	2000090c 	.word	0x2000090c
 80026a8:	0800d828 	.word	0x0800d828
 80026ac:	08001cd1 	.word	0x08001cd1
 80026b0:	20000910 	.word	0x20000910
 80026b4:	0800d830 	.word	0x0800d830
 80026b8:	08001da1 	.word	0x08001da1

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	@ 0x50
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	2230      	movs	r2, #48	@ 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f008 fcae 	bl	800b02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b2a      	ldr	r3, [pc, #168]	@ (800278c <SystemClock_Config+0xd0>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	4a29      	ldr	r2, [pc, #164]	@ (800278c <SystemClock_Config+0xd0>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <SystemClock_Config+0xd0>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f8:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <SystemClock_Config+0xd4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <SystemClock_Config+0xd4>)
 80026fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <SystemClock_Config+0xd4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002710:	2301      	movs	r3, #1
 8002712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271a:	2302      	movs	r3, #2
 800271c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800271e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002724:	2304      	movs	r3, #4
 8002726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002728:	23d8      	movs	r3, #216	@ 0xd8
 800272a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800272c:	2302      	movs	r3, #2
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002730:	2309      	movs	r3, #9
 8002732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	4618      	mov	r0, r3
 800273a:	f001 faf1 	bl	8003d20 <HAL_RCC_OscConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002744:	f000 fad8 	bl	8002cf8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002748:	f001 fa9a 	bl	8003c80 <HAL_PWREx_EnableOverDrive>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002752:	f000 fad1 	bl	8002cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002756:	230f      	movs	r3, #15
 8002758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275a:	2302      	movs	r3, #2
 800275c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002762:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	2107      	movs	r1, #7
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fd77 	bl	8004268 <HAL_RCC_ClockConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002780:	f000 faba 	bl	8002cf8 <Error_Handler>
  }
}
 8002784:	bf00      	nop
 8002786:	3750      	adds	r7, #80	@ 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <MX_RNG_Init+0x20>)
 800279a:	4a07      	ldr	r2, [pc, #28]	@ (80027b8 <MX_RNG_Init+0x24>)
 800279c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_RNG_Init+0x20>)
 80027a0:	f002 fbaa 	bl	8004ef8 <HAL_RNG_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80027aa:	f000 faa5 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200002c0 	.word	0x200002c0
 80027b8:	50060800 	.word	0x50060800

080027bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027da:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <MX_TIM2_Init+0x98>)
 80027dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER_SET;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <MX_TIM2_Init+0x98>)
 80027e4:	f240 221b 	movw	r2, #539	@ 0x21b
 80027e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <MX_TIM2_Init+0x98>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD_SET;
 80027f0:	4b18      	ldr	r3, [pc, #96]	@ (8002854 <MX_TIM2_Init+0x98>)
 80027f2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80027f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f8:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <MX_TIM2_Init+0x98>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <MX_TIM2_Init+0x98>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002804:	4813      	ldr	r0, [pc, #76]	@ (8002854 <MX_TIM2_Init+0x98>)
 8002806:	f002 fc60 	bl	80050ca <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002810:	f000 fa72 	bl	8002cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <MX_TIM2_Init+0x98>)
 8002822:	f002 fe29 	bl	8005478 <HAL_TIM_ConfigClockSource>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800282c:	f000 fa64 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	@ (8002854 <MX_TIM2_Init+0x98>)
 800283e:	f003 f853 	bl	80058e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002848:	f000 fa56 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200002d0 	.word	0x200002d0

08002858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 800285e:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <MX_USART3_UART_Init+0x5c>)
 8002860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002862:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 8002864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800286a:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002870:	4b0f      	ldr	r3, [pc, #60]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002876:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 800287e:	220c      	movs	r2, #12
 8002880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002882:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 8002896:	2200      	movs	r2, #0
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <MX_USART3_UART_Init+0x58>)
 800289c:	f003 f8d0 	bl	8005a40 <HAL_UART_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80028a6:	f000 fa27 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000031c 	.word	0x2000031c
 80028b4:	40004800 	.word	0x40004800

080028b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80028c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028c6:	2206      	movs	r2, #6
 80028c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028cc:	2202      	movs	r2, #2
 80028ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028d8:	2202      	movs	r2, #2
 80028da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028de:	2201      	movs	r2, #1
 80028e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	@ (8002910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028fc:	f001 f886 	bl	8003a0c <HAL_PCD_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002906:	f000 f9f7 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200003a4 	.word	0x200003a4

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	@ 0x30
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	4b6c      	ldr	r3, [pc, #432]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a6b      	ldr	r2, [pc, #428]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b69      	ldr	r3, [pc, #420]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002942:	4b66      	ldr	r3, [pc, #408]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	4a65      	ldr	r2, [pc, #404]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294c:	6313      	str	r3, [r2, #48]	@ 0x30
 800294e:	4b63      	ldr	r3, [pc, #396]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b60      	ldr	r3, [pc, #384]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a5f      	ldr	r2, [pc, #380]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b5d      	ldr	r3, [pc, #372]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b5a      	ldr	r3, [pc, #360]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a59      	ldr	r2, [pc, #356]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b57      	ldr	r3, [pc, #348]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298a:	4b54      	ldr	r3, [pc, #336]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a53      	ldr	r2, [pc, #332]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002990:	f043 0308 	orr.w	r3, r3, #8
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b51      	ldr	r3, [pc, #324]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029a2:	4b4e      	ldr	r3, [pc, #312]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	4a4d      	ldr	r2, [pc, #308]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 80029a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ae:	4b4b      	ldr	r3, [pc, #300]	@ (8002adc <MX_GPIO_Init+0x1c8>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80029c0:	4847      	ldr	r0, [pc, #284]	@ (8002ae0 <MX_GPIO_Init+0x1cc>)
 80029c2:	f000 fff1 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2140      	movs	r1, #64	@ 0x40
 80029ca:	4846      	ldr	r0, [pc, #280]	@ (8002ae4 <MX_GPIO_Init+0x1d0>)
 80029cc:	f000 ffec 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80029d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80029da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	4619      	mov	r1, r3
 80029e6:	4840      	ldr	r0, [pc, #256]	@ (8002ae8 <MX_GPIO_Init+0x1d4>)
 80029e8:	f000 fe1a 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029ec:	2332      	movs	r3, #50	@ 0x32
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029fc:	230b      	movs	r3, #11
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	4838      	ldr	r0, [pc, #224]	@ (8002ae8 <MX_GPIO_Init+0x1d4>)
 8002a08:	f000 fe0a 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a0c:	2386      	movs	r3, #134	@ 0x86
 8002a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a1c:	230b      	movs	r3, #11
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	4831      	ldr	r0, [pc, #196]	@ (8002aec <MX_GPIO_Init+0x1d8>)
 8002a28:	f000 fdfa 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002a2c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	4619      	mov	r1, r3
 8002a44:	4826      	ldr	r0, [pc, #152]	@ (8002ae0 <MX_GPIO_Init+0x1cc>)
 8002a46:	f000 fdeb 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a5c:	230b      	movs	r3, #11
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4619      	mov	r1, r3
 8002a66:	481e      	ldr	r0, [pc, #120]	@ (8002ae0 <MX_GPIO_Init+0x1cc>)
 8002a68:	f000 fdda 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4818      	ldr	r0, [pc, #96]	@ (8002ae4 <MX_GPIO_Init+0x1d0>)
 8002a84:	f000 fdcc 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4812      	ldr	r0, [pc, #72]	@ (8002ae4 <MX_GPIO_Init+0x1d0>)
 8002a9c:	f000 fdc0 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002aa0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ab2:	230b      	movs	r3, #11
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	4619      	mov	r1, r3
 8002abc:	4809      	ldr	r0, [pc, #36]	@ (8002ae4 <MX_GPIO_Init+0x1d0>)
 8002abe:	f000 fdaf 	bl	8003620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2105      	movs	r1, #5
 8002ac6:	2028      	movs	r0, #40	@ 0x28
 8002ac8:	f000 fd80 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002acc:	2028      	movs	r0, #40	@ 0x28
 8002ace:	f000 fd99 	bl	8003604 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ad2:	bf00      	nop
 8002ad4:	3730      	adds	r7, #48	@ 0x30
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020000 	.word	0x40020000

08002af0 <DebounceTimerCallback>:

/**
 * @brief Timer callback function for debouncing.
 * @param xTimer: Timer handle
 */
void DebounceTimerCallback(TimerHandle_t xTimer) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
    // Check the pin state after debounce period
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002afc:	4820      	ldr	r0, [pc, #128]	@ (8002b80 <DebounceTimerCallback+0x90>)
 8002afe:	f000 ff3b 	bl	8003978 <HAL_GPIO_ReadPin>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d136      	bne.n	8002b76 <DebounceTimerCallback+0x86>
        // Notify the task if the button is still pressed
    	if(btnFlag) {
 8002b08:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <DebounceTimerCallback+0x94>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <DebounceTimerCallback+0x34>
    		vTaskResume(vTasksManagerTask);
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <DebounceTimerCallback+0x98>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 fa1d 	bl	8007f54 <vTaskResume>
    		vTaskResume(vLoggerTask);
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <DebounceTimerCallback+0x9c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 fa18 	bl	8007f54 <vTaskResume>
    	}
    	btnFlag = !btnFlag;
 8002b24:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <DebounceTimerCallback+0x94>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <DebounceTimerCallback+0x94>)
 8002b40:	701a      	strb	r2, [r3, #0]
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
    	xTaskNotifyFromISR(vGetDataTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8002b46:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <DebounceTimerCallback+0xa0>)
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	f107 030c 	add.w	r3, r7, #12
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2300      	movs	r3, #0
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	f006 f9c3 	bl	8008ee0 <xTaskGenericNotifyFromISR>
    	 if (xHigherPriorityTaskWoken == pdTRUE) {
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10a      	bne.n	8002b76 <DebounceTimerCallback+0x86>
    		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <DebounceTimerCallback+0x86>
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <DebounceTimerCallback+0xa4>)
 8002b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	f3bf 8f6f 	isb	sy
    	 }
    }
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40020800 	.word	0x40020800
 8002b84:	2000095c 	.word	0x2000095c
 8002b88:	20000904 	.word	0x20000904
 8002b8c:	2000090c 	.word	0x2000090c
 8002b90:	20000908 	.word	0x20000908
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba8:	d142      	bne.n	8002c30 <HAL_GPIO_EXTI_Callback+0x98>
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 8002baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bae:	4822      	ldr	r0, [pc, #136]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002bb0:	f000 fee2 	bl	8003978 <HAL_GPIO_ReadPin>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d13a      	bne.n	8002c30 <HAL_GPIO_EXTI_Callback+0x98>
			if(!btnTimerUsed) {
 8002bba:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d021      	beq.n	8002c0c <HAL_GPIO_EXTI_Callback+0x74>
				btnTimerUsed = !btnTimerUsed;
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f083 0301 	eor.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0xa4>)
 8002be4:	701a      	strb	r2, [r3, #0]
				if(xTimerStartFromISR(xDebounceTimer, 0)!=pdPASS) {
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002be8:	681c      	ldr	r4, [r3, #0]
 8002bea:	f005 fb61 	bl	80082b0 <xTaskGetTickCountFromISR>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2106      	movs	r1, #6
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f006 fb5f 	bl	80092bc <xTimerGenericCommand>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d015      	beq.n	8002c30 <HAL_GPIO_EXTI_Callback+0x98>
					error_handling("Couldn't start button timer\r\n");
 8002c04:	480f      	ldr	r0, [pc, #60]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xac>)
 8002c06:	f7fe fc8b 	bl	8001520 <error_handling>
					error_handling("Couldn't start button timer\r\n");
				}
			}
		}
	}
}
 8002c0a:	e011      	b.n	8002c30 <HAL_GPIO_EXTI_Callback+0x98>
				if(xTimerResetFromISR(xDebounceTimer, 0)!=pdPASS) {
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002c0e:	681c      	ldr	r4, [r3, #0]
 8002c10:	f005 fb4e 	bl	80082b0 <xTaskGetTickCountFromISR>
 8002c14:	4602      	mov	r2, r0
 8002c16:	2300      	movs	r3, #0
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2107      	movs	r1, #7
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f006 fb4c 	bl	80092bc <xTimerGenericCommand>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d002      	beq.n	8002c30 <HAL_GPIO_EXTI_Callback+0x98>
					error_handling("Couldn't start button timer\r\n");
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0xac>)
 8002c2c:	f7fe fc78 	bl	8001520 <error_handling>
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	20000964 	.word	0x20000964
 8002c40:	20000960 	.word	0x20000960
 8002c44:	0800d83c 	.word	0x0800d83c

08002c48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0a2      	sub	sp, #136	@ 0x88
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c58:	d13a      	bne.n	8002cd0 <HAL_TIM_PeriodElapsedCallback+0x88>
		DispatcherPacket new_packet;
		generateDispatcherMSG(&new_packet);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fb6c 	bl	800133c <generateDispatcherMSG>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	67bb      	str	r3, [r7, #120]	@ 0x78
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 8002c68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fd20 	bl	80076b2 <uxQueueMessagesWaitingFromISR>
 8002c72:	67f8      	str	r0, [r7, #124]	@ 0x7c
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
		if( qItems != TASKS_QUEUE_SIZE) {
 8002c74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d012      	beq.n	8002ca0 <HAL_TIM_PeriodElapsedCallback+0x58>
			xQueueSendFromISR(qDispatcher, &new_packet, NULL);
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	f107 010c 	add.w	r1, r7, #12
 8002c82:	2300      	movs	r3, #0
 8002c84:	2200      	movs	r2, #0
 8002c86:	f004 fa4f 	bl	8007128 <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8002c8a:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f006 f921 	bl	8008ee0 <xTaskGenericNotifyFromISR>
 8002c9e:	e009      	b.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x6c>
			//printf("Added to queue! \r\n");
			//fflush(stdout);
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8002ca0:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f006 f916 	bl	8008ee0 <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 8002cb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_TIM_PeriodElapsedCallback+0x88>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002cba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_TIM_PeriodElapsedCallback+0x88>
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	f3bf 8f6f 	isb	sy
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a07      	ldr	r2, [pc, #28]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x96>
    HAL_IncTick();
 8002cda:	f000 fb7b 	bl	80033d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	3780      	adds	r7, #128	@ 0x80
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000894 	.word	0x20000894
 8002cec:	200008fc 	.word	0x200008fc
 8002cf0:	e000ed04 	.word	0xe000ed04
 8002cf4:	40001000 	.word	0x40001000

08002cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  vTaskEndScheduler();
 8002d00:	f005 f9fe 	bl	8008100 <vTaskEndScheduler>
	  return;
 8002d04:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_MspInit+0x70>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <HAL_MspInit+0x70>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1a:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_MspInit+0x70>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_MspInit+0x70>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4a13      	ldr	r2, [pc, #76]	@ (8002d78 <HAL_MspInit+0x70>)
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d32:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_MspInit+0x70>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	210f      	movs	r1, #15
 8002d42:	f06f 0001 	mvn.w	r0, #1
 8002d46:	f000 fc41 	bl	80035cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1  , 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	2050      	movs	r0, #80	@ 0x50
 8002d50:	f000 fc3c 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8002d54:	2050      	movs	r0, #80	@ 0x50
 8002d56:	f000 fc55 	bl	8003604 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	201c      	movs	r0, #28
 8002d60:	f000 fc34 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d64:	201c      	movs	r0, #28
 8002d66:	f000 fc4d 	bl	8003604 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	f000 fc23 	bl	80035b6 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0a4      	sub	sp, #144	@ 0x90
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2284      	movs	r2, #132	@ 0x84
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f008 f94d 	bl	800b02c <memset>
  if(hrng->Instance==RNG)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a15      	ldr	r2, [pc, #84]	@ (8002dec <HAL_RNG_MspInit+0x70>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d123      	bne.n	8002de4 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002da0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fcb3 	bl	8004718 <HAL_RCCEx_PeriphCLKConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002db8:	f7ff ff9e 	bl	8002cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_RNG_MspInit+0x74>)
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <HAL_RNG_MspInit+0x74>)
 8002dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc6:	6353      	str	r3, [r2, #52]	@ 0x34
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_RNG_MspInit+0x74>)
 8002dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	2050      	movs	r0, #80	@ 0x50
 8002dda:	f000 fbf7 	bl	80035cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8002dde:	2050      	movs	r0, #80	@ 0x50
 8002de0:	f000 fc10 	bl	8003604 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002de4:	bf00      	nop
 8002de6:	3790      	adds	r7, #144	@ 0x90
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	50060800 	.word	0x50060800
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e04:	d113      	bne.n	8002e2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e06:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <HAL_TIM_Base_MspInit+0x44>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e38 <HAL_TIM_Base_MspInit+0x44>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <HAL_TIM_Base_MspInit+0x44>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	210a      	movs	r1, #10
 8002e22:	201c      	movs	r0, #28
 8002e24:	f000 fbd2 	bl	80035cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e28:	201c      	movs	r0, #28
 8002e2a:	f000 fbeb 	bl	8003604 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0aa      	sub	sp, #168	@ 0xa8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	2284      	movs	r2, #132	@ 0x84
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f008 f8e5 	bl	800b02c <memset>
  if(huart->Instance==USART3)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <HAL_UART_MspInit+0xb4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d13c      	bne.n	8002ee6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e72:	2300      	movs	r3, #0
 8002e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 fc4c 	bl	8004718 <HAL_RCCEx_PeriphCLKConfig>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e86:	f7ff ff37 	bl	8002cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_UART_MspInit+0xb8>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_UART_MspInit+0xb8>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e96:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_UART_MspInit+0xb8>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea2:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <HAL_UART_MspInit+0xb8>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	4a13      	ldr	r2, [pc, #76]	@ (8002ef4 <HAL_UART_MspInit+0xb8>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eae:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_UART_MspInit+0xb8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002eba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ed4:	2307      	movs	r3, #7
 8002ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eda:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4805      	ldr	r0, [pc, #20]	@ (8002ef8 <HAL_UART_MspInit+0xbc>)
 8002ee2:	f000 fb9d 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002ee6:	bf00      	nop
 8002ee8:	37a8      	adds	r7, #168	@ 0xa8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40004800 	.word	0x40004800
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40020c00 	.word	0x40020c00

08002efc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b0ac      	sub	sp, #176	@ 0xb0
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	2284      	movs	r2, #132	@ 0x84
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f008 f885 	bl	800b02c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f2a:	d159      	bne.n	8002fe0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002f2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f38:	f107 0318 	add.w	r3, r7, #24
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fbeb 	bl	8004718 <HAL_RCCEx_PeriphCLKConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002f48:	f7ff fed6 	bl	8002cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4c:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f58:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002f64:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f7e:	230a      	movs	r3, #10
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4818      	ldr	r0, [pc, #96]	@ (8002fec <HAL_PCD_MspInit+0xf0>)
 8002f8c:	f000 fb48 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4810      	ldr	r0, [pc, #64]	@ (8002fec <HAL_PCD_MspInit+0xf0>)
 8002fac:	f000 fb38 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fba:	6353      	str	r3, [r2, #52]	@ 0x34
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fcc:	4a06      	ldr	r2, [pc, #24]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_PCD_MspInit+0xec>)
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002fe0:	bf00      	nop
 8002fe2:	37b0      	adds	r7, #176	@ 0xb0
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020000 	.word	0x40020000

08002ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	@ 0x38
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003000:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <HAL_InitTick+0xe0>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <HAL_InitTick+0xe0>)
 8003006:	f043 0310 	orr.w	r3, r3, #16
 800300a:	6413      	str	r3, [r2, #64]	@ 0x40
 800300c:	4b30      	ldr	r3, [pc, #192]	@ (80030d0 <HAL_InitTick+0xe0>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003018:	f107 0210 	add.w	r2, r7, #16
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f001 fb46 	bl	80046b4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003032:	f001 fb17 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8003036:	6378      	str	r0, [r7, #52]	@ 0x34
 8003038:	e004      	b.n	8003044 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800303a:	f001 fb13 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 800303e:	4603      	mov	r3, r0
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003046:	4a23      	ldr	r2, [pc, #140]	@ (80030d4 <HAL_InitTick+0xe4>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	0c9b      	lsrs	r3, r3, #18
 800304e:	3b01      	subs	r3, #1
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003052:	4b21      	ldr	r3, [pc, #132]	@ (80030d8 <HAL_InitTick+0xe8>)
 8003054:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <HAL_InitTick+0xec>)
 8003056:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003058:	4b1f      	ldr	r3, [pc, #124]	@ (80030d8 <HAL_InitTick+0xe8>)
 800305a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800305e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003060:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_InitTick+0xe8>)
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003066:	4b1c      	ldr	r3, [pc, #112]	@ (80030d8 <HAL_InitTick+0xe8>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306c:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HAL_InitTick+0xe8>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003072:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_InitTick+0xe8>)
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003078:	4817      	ldr	r0, [pc, #92]	@ (80030d8 <HAL_InitTick+0xe8>)
 800307a:	f002 f826 	bl	80050ca <HAL_TIM_Base_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003084:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11b      	bne.n	80030c4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800308c:	4812      	ldr	r0, [pc, #72]	@ (80030d8 <HAL_InitTick+0xe8>)
 800308e:	f002 f873 	bl	8005178 <HAL_TIM_Base_Start_IT>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003098:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030a0:	2036      	movs	r0, #54	@ 0x36
 80030a2:	f000 faaf 	bl	8003604 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d808      	bhi.n	80030be <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	2036      	movs	r0, #54	@ 0x36
 80030b2:	f000 fa8b 	bl	80035cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b6:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <HAL_InitTick+0xf0>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e002      	b.n	80030c4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80030c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3738      	adds	r7, #56	@ 0x38
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	431bde83 	.word	0x431bde83
 80030d8:	20000968 	.word	0x20000968
 80030dc:	40001000 	.word	0x40001000
 80030e0:	20000008 	.word	0x20000008

080030e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <NMI_Handler+0x4>

080030ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <HardFault_Handler+0x4>

080030f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <MemManage_Handler+0x4>

080030fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <UsageFault_Handler+0x4>

0800310c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003120:	4802      	ldr	r0, [pc, #8]	@ (800312c <TIM2_IRQHandler+0x10>)
 8003122:	f002 f8a1 	bl	8005268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200002d0 	.word	0x200002d0

08003130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003134:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003138:	f000 fc50 	bl	80039dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}

08003140 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003144:	4802      	ldr	r0, [pc, #8]	@ (8003150 <TIM6_DAC_IRQHandler+0x10>)
 8003146:	f002 f88f 	bl	8005268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000968 	.word	0x20000968

08003154 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8003158:	4802      	ldr	r0, [pc, #8]	@ (8003164 <RNG_IRQHandler+0x10>)
 800315a:	f001 ff4d 	bl	8004ff8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200002c0 	.word	0x200002c0

08003168 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8003172:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <ITM_SendChar+0x48>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0e      	ldr	r2, [pc, #56]	@ (80031b0 <ITM_SendChar+0x48>)
 8003178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <ITM_SendChar+0x4c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a0c      	ldr	r2, [pc, #48]	@ (80031b4 <ITM_SendChar+0x4c>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 800318a:	bf00      	nop
 800318c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f8      	beq.n	800318c <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800319a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	6013      	str	r3, [r2, #0]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000edfc 	.word	0xe000edfc
 80031b4:	e0000e00 	.word	0xe0000e00

080031b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return 1;
 80031bc:	2301      	movs	r3, #1
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_kill>:

int _kill(int pid, int sig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031d2:	f007 ffe7 	bl	800b1a4 <__errno>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2216      	movs	r2, #22
 80031da:	601a      	str	r2, [r3, #0]
  return -1;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_exit>:

void _exit (int status)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ffe7 	bl	80031c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <_exit+0x12>

080031fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e00a      	b.n	8003226 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003210:	f3af 8000 	nop.w
 8003214:	4601      	mov	r1, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	60ba      	str	r2, [r7, #8]
 800321c:	b2ca      	uxtb	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	dbf0      	blt.n	8003210 <_read+0x12>
  }

  return len;
 800322e:	687b      	ldr	r3, [r7, #4]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e009      	b.n	800325e <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	60ba      	str	r2, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff88 	bl	8003168 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3301      	adds	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	dbf1      	blt.n	800324a <_write+0x12>
  }
  return len;
 8003266:	687b      	ldr	r3, [r7, #4]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_close>:

int _close(int file)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003298:	605a      	str	r2, [r3, #4]
  return 0;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_isatty>:

int _isatty(int file)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032b0:	2301      	movs	r3, #1
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032e0:	4a14      	ldr	r2, [pc, #80]	@ (8003334 <_sbrk+0x5c>)
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <_sbrk+0x60>)
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032ec:	4b13      	ldr	r3, [pc, #76]	@ (800333c <_sbrk+0x64>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f4:	4b11      	ldr	r3, [pc, #68]	@ (800333c <_sbrk+0x64>)
 80032f6:	4a12      	ldr	r2, [pc, #72]	@ (8003340 <_sbrk+0x68>)
 80032f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032fa:	4b10      	ldr	r3, [pc, #64]	@ (800333c <_sbrk+0x64>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	429a      	cmp	r2, r3
 8003306:	d207      	bcs.n	8003318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003308:	f007 ff4c 	bl	800b1a4 <__errno>
 800330c:	4603      	mov	r3, r0
 800330e:	220c      	movs	r2, #12
 8003310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	e009      	b.n	800332c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003318:	4b08      	ldr	r3, [pc, #32]	@ (800333c <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800331e:	4b07      	ldr	r3, [pc, #28]	@ (800333c <_sbrk+0x64>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	4a05      	ldr	r2, [pc, #20]	@ (800333c <_sbrk+0x64>)
 8003328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20050000 	.word	0x20050000
 8003338:	00000400 	.word	0x00000400
 800333c:	200009b4 	.word	0x200009b4
 8003340:	20019f88 	.word	0x20019f88

08003344 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <SystemInit+0x20>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	4a05      	ldr	r2, [pc, #20]	@ (8003364 <SystemInit+0x20>)
 8003350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800336c:	f7ff ffea 	bl	8003344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003370:	480c      	ldr	r0, [pc, #48]	@ (80033a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003372:	490d      	ldr	r1, [pc, #52]	@ (80033a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003374:	4a0d      	ldr	r2, [pc, #52]	@ (80033ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003378:	e002      	b.n	8003380 <LoopCopyDataInit>

0800337a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800337a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800337c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800337e:	3304      	adds	r3, #4

08003380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003384:	d3f9      	bcc.n	800337a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003386:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003388:	4c0a      	ldr	r4, [pc, #40]	@ (80033b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800338c:	e001      	b.n	8003392 <LoopFillZerobss>

0800338e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800338e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003390:	3204      	adds	r2, #4

08003392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003394:	d3fb      	bcc.n	800338e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003396:	f007 ff0b 	bl	800b1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800339a:	f7ff f8fd 	bl	8002598 <main>
  bx  lr    
 800339e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80033a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80033ac:	0800e7c8 	.word	0x0800e7c8
  ldr r2, =_sbss
 80033b0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80033b4:	20019f84 	.word	0x20019f84

080033b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b8:	e7fe      	b.n	80033b8 <ADC_IRQHandler>

080033ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033be:	2003      	movs	r0, #3
 80033c0:	f000 f8f9 	bl	80035b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033c4:	200f      	movs	r0, #15
 80033c6:	f7ff fe13 	bl	8002ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ca:	f7ff fc9d 	bl	8002d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_IncTick+0x20>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <HAL_IncTick+0x24>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <HAL_IncTick+0x24>)
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	2000000c 	.word	0x2000000c
 80033f8:	200009b8 	.word	0x200009b8

080033fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <HAL_GetTick+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	200009b8 	.word	0x200009b8

08003414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800341c:	f7ff ffee 	bl	80033fc <HAL_GetTick>
 8003420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d005      	beq.n	800343a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800342e:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <HAL_Delay+0x44>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800343a:	bf00      	nop
 800343c:	f7ff ffde 	bl	80033fc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	429a      	cmp	r2, r3
 800344a:	d8f7      	bhi.n	800343c <HAL_Delay+0x28>
  {
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000000c 	.word	0x2000000c

0800345c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <__NVIC_SetPriorityGrouping+0x40>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003484:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	4313      	orrs	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	@ (800349c <__NVIC_SetPriorityGrouping+0x40>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00
 80034a0:	05fa0000 	.word	0x05fa0000

080034a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a8:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <__NVIC_GetPriorityGrouping+0x18>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 0307 	and.w	r3, r3, #7
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4907      	ldr	r1, [pc, #28]	@ (80034f8 <__NVIC_EnableIRQ+0x38>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100

080034fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	db0a      	blt.n	8003526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	490c      	ldr	r1, [pc, #48]	@ (8003548 <__NVIC_SetPriority+0x4c>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	440b      	add	r3, r1
 8003520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003524:	e00a      	b.n	800353c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4908      	ldr	r1, [pc, #32]	@ (800354c <__NVIC_SetPriority+0x50>)
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3b04      	subs	r3, #4
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	440b      	add	r3, r1
 800353a:	761a      	strb	r2, [r3, #24]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000e100 	.word	0xe000e100
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	@ 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f1c3 0307 	rsb	r3, r3, #7
 800356a:	2b04      	cmp	r3, #4
 800356c:	bf28      	it	cs
 800356e:	2304      	movcs	r3, #4
 8003570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3304      	adds	r3, #4
 8003576:	2b06      	cmp	r3, #6
 8003578:	d902      	bls.n	8003580 <NVIC_EncodePriority+0x30>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3b03      	subs	r3, #3
 800357e:	e000      	b.n	8003582 <NVIC_EncodePriority+0x32>
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	401a      	ands	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003598:	f04f 31ff 	mov.w	r1, #4294967295
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	4313      	orrs	r3, r2
         );
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	@ 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff4c 	bl	800345c <__NVIC_SetPriorityGrouping>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035de:	f7ff ff61 	bl	80034a4 <__NVIC_GetPriorityGrouping>
 80035e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	6978      	ldr	r0, [r7, #20]
 80035ea:	f7ff ffb1 	bl	8003550 <NVIC_EncodePriority>
 80035ee:	4602      	mov	r2, r0
 80035f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff80 	bl	80034fc <__NVIC_SetPriority>
}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff54 	bl	80034c0 <__NVIC_EnableIRQ>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e175      	b.n	800392c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 8164 	bne.w	8003926 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d005      	beq.n	8003676 <HAL_GPIO_Init+0x56>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d130      	bne.n	80036d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d017      	beq.n	8003714 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80be 	beq.w	8003926 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_GPIO_Init+0x324>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_GPIO_Init+0x324>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037b6:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_GPIO_Init+0x324>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037c2:	4a61      	ldr	r2, [pc, #388]	@ (8003948 <HAL_GPIO_Init+0x328>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	@ (800394c <HAL_GPIO_Init+0x32c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d037      	beq.n	800385e <HAL_GPIO_Init+0x23e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a57      	ldr	r2, [pc, #348]	@ (8003950 <HAL_GPIO_Init+0x330>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d031      	beq.n	800385a <HAL_GPIO_Init+0x23a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a56      	ldr	r2, [pc, #344]	@ (8003954 <HAL_GPIO_Init+0x334>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02b      	beq.n	8003856 <HAL_GPIO_Init+0x236>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a55      	ldr	r2, [pc, #340]	@ (8003958 <HAL_GPIO_Init+0x338>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d025      	beq.n	8003852 <HAL_GPIO_Init+0x232>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_GPIO_Init+0x33c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d01f      	beq.n	800384e <HAL_GPIO_Init+0x22e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_GPIO_Init+0x340>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_GPIO_Init+0x22a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	@ (8003964 <HAL_GPIO_Init+0x344>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_GPIO_Init+0x226>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a51      	ldr	r2, [pc, #324]	@ (8003968 <HAL_GPIO_Init+0x348>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_GPIO_Init+0x222>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a50      	ldr	r2, [pc, #320]	@ (800396c <HAL_GPIO_Init+0x34c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <HAL_GPIO_Init+0x21e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4f      	ldr	r2, [pc, #316]	@ (8003970 <HAL_GPIO_Init+0x350>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_GPIO_Init+0x21a>
 8003836:	2309      	movs	r3, #9
 8003838:	e012      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800383a:	230a      	movs	r3, #10
 800383c:	e010      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800383e:	2308      	movs	r3, #8
 8003840:	e00e      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003842:	2307      	movs	r3, #7
 8003844:	e00c      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003846:	2306      	movs	r3, #6
 8003848:	e00a      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800384a:	2305      	movs	r3, #5
 800384c:	e008      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800384e:	2304      	movs	r3, #4
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003852:	2303      	movs	r3, #3
 8003854:	e004      	b.n	8003860 <HAL_GPIO_Init+0x240>
 8003856:	2302      	movs	r3, #2
 8003858:	e002      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_GPIO_Init+0x240>
 800385e:	2300      	movs	r3, #0
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	f002 0203 	and.w	r2, r2, #3
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	4093      	lsls	r3, r2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003870:	4935      	ldr	r1, [pc, #212]	@ (8003948 <HAL_GPIO_Init+0x328>)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387e:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <HAL_GPIO_Init+0x354>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a2:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <HAL_GPIO_Init+0x354>)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <HAL_GPIO_Init+0x354>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038cc:	4a29      	ldr	r2, [pc, #164]	@ (8003974 <HAL_GPIO_Init+0x354>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d2:	4b28      	ldr	r3, [pc, #160]	@ (8003974 <HAL_GPIO_Init+0x354>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <HAL_GPIO_Init+0x354>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003920:	4a14      	ldr	r2, [pc, #80]	@ (8003974 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3301      	adds	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	f67f ae86 	bls.w	8003640 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3724      	adds	r7, #36	@ 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40013800 	.word	0x40013800
 800394c:	40020000 	.word	0x40020000
 8003950:	40020400 	.word	0x40020400
 8003954:	40020800 	.word	0x40020800
 8003958:	40020c00 	.word	0x40020c00
 800395c:	40021000 	.word	0x40021000
 8003960:	40021400 	.word	0x40021400
 8003964:	40021800 	.word	0x40021800
 8003968:	40021c00 	.word	0x40021c00
 800396c:	40022000 	.word	0x40022000
 8003970:	40022400 	.word	0x40022400
 8003974:	40013c00 	.word	0x40013c00

08003978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e001      	b.n	800399a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
 80039b4:	4613      	mov	r3, r2
 80039b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039b8:	787b      	ldrb	r3, [r7, #1]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039c4:	e003      	b.n	80039ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	041a      	lsls	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039e6:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039f2:	4a05      	ldr	r2, [pc, #20]	@ (8003a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f8cc 	bl	8002b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e108      	b.n	8003c30 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fa5f 	bl	8002efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a4c:	d102      	bne.n	8003a54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 fd51 	bl	8006500 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7c1a      	ldrb	r2, [r3, #16]
 8003a66:	f88d 2000 	strb.w	r2, [sp]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a6e:	f002 fced 	bl	800644c <USB_CoreInit>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0d5      	b.n	8003c30 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f002 fd49 	bl	8006522 <USB_SetCurrentMode>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0c6      	b.n	8003c30 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	e04a      	b.n	8003b3e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3315      	adds	r3, #21
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3314      	adds	r3, #20
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	b298      	uxth	r0, r3
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	332e      	adds	r3, #46	@ 0x2e
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3318      	adds	r3, #24
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	331c      	adds	r3, #28
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3320      	adds	r3, #32
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	3324      	adds	r3, #36	@ 0x24
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	791b      	ldrb	r3, [r3, #4]
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3af      	bcc.n	8003aa8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e044      	b.n	8003bd8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b76:	7bfa      	ldrb	r2, [r7, #15]
 8003b78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3b5      	bcc.n	8003b4e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7c1a      	ldrb	r2, [r3, #16]
 8003bea:	f88d 2000 	strb.w	r2, [sp]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf2:	f002 fce3 	bl	80065bc <USB_DevInit>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e013      	b.n	8003c30 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7b1b      	ldrb	r3, [r3, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f80a 	bl	8003c38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 fe9e 	bl	800696a <USB_DevDisconnect>

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c66:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	10000003 	.word	0x10000003

08003c80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	4b23      	ldr	r3, [pc, #140]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c96:	4b20      	ldr	r3, [pc, #128]	@ (8003d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cae:	f7ff fba5 	bl	80033fc <HAL_GetTick>
 8003cb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cb4:	e009      	b.n	8003cca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cb6:	f7ff fba1 	bl	80033fc <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cc4:	d901      	bls.n	8003cca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e022      	b.n	8003d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd6:	d1ee      	bne.n	8003cb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8003d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce4:	f7ff fb8a 	bl	80033fc <HAL_GetTick>
 8003ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cea:	e009      	b.n	8003d00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cec:	f7ff fb86 	bl	80033fc <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cfa:	d901      	bls.n	8003d00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e007      	b.n	8003d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d0c:	d1ee      	bne.n	8003cec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e291      	b.n	800425a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8087 	beq.w	8003e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d44:	4b96      	ldr	r3, [pc, #600]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d00c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d50:	4b93      	ldr	r3, [pc, #588]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d112      	bne.n	8003d82 <HAL_RCC_OscConfig+0x62>
 8003d5c:	4b90      	ldr	r3, [pc, #576]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d68:	d10b      	bne.n	8003d82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d06c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x130>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d168      	bne.n	8003e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e26b      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCC_OscConfig+0x7a>
 8003d8c:	4b84      	ldr	r3, [pc, #528]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a83      	ldr	r2, [pc, #524]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	e02e      	b.n	8003df8 <HAL_RCC_OscConfig+0xd8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x9c>
 8003da2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e01d      	b.n	8003df8 <HAL_RCC_OscConfig+0xd8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	4b76      	ldr	r3, [pc, #472]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a75      	ldr	r2, [pc, #468]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b73      	ldr	r3, [pc, #460]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a72      	ldr	r2, [pc, #456]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e00b      	b.n	8003df8 <HAL_RCC_OscConfig+0xd8>
 8003de0:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7ff fafc 	bl	80033fc <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e08:	f7ff faf8 	bl	80033fc <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	@ 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e21f      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	4b61      	ldr	r3, [pc, #388]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0xe8>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7ff fae8 	bl	80033fc <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7ff fae4 	bl	80033fc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	@ 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e20b      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b57      	ldr	r3, [pc, #348]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x110>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d069      	beq.n	8003f32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e5e:	4b50      	ldr	r3, [pc, #320]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d11c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x190>
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d116      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_RCC_OscConfig+0x17a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e1df      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9a:	4b41      	ldr	r3, [pc, #260]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	493d      	ldr	r1, [pc, #244]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	e040      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d023      	beq.n	8003f00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb8:	4b39      	ldr	r3, [pc, #228]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a38      	ldr	r2, [pc, #224]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7ff fa9a 	bl	80033fc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7ff fa96 	bl	80033fc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1bd      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	4b30      	ldr	r3, [pc, #192]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eea:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4929      	ldr	r1, [pc, #164]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
 8003efe:	e018      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f00:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a26      	ldr	r2, [pc, #152]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7ff fa76 	bl	80033fc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7ff fa72 	bl	80033fc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e199      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d038      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4a:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7ff fa53 	bl	80033fc <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7ff fa4f 	bl	80033fc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e176      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x23a>
 8003f78:	e01a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7ff fa39 	bl	80033fc <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8e:	f7ff fa35 	bl	80033fc <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d903      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e15c      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
 8003fa0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa4:	4b91      	ldr	r3, [pc, #580]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ee      	bne.n	8003f8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a4 	beq.w	8004106 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b8b      	ldr	r3, [pc, #556]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	4a87      	ldr	r2, [pc, #540]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd6:	4b85      	ldr	r3, [pc, #532]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe6:	4b82      	ldr	r3, [pc, #520]	@ (80041f0 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d118      	bne.n	8004024 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80041f0 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80041f0 <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffe:	f7ff f9fd 	bl	80033fc <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004006:	f7ff f9f9 	bl	80033fc <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	@ 0x64
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e120      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004018:	4b75      	ldr	r3, [pc, #468]	@ (80041f0 <HAL_RCC_OscConfig+0x4d0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0x31a>
 800402c:	4b6f      	ldr	r3, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4a6e      	ldr	r2, [pc, #440]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	@ 0x70
 8004038:	e02d      	b.n	8004096 <HAL_RCC_OscConfig+0x376>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x33c>
 8004042:	4b6a      	ldr	r3, [pc, #424]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004046:	4a69      	ldr	r2, [pc, #420]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	@ 0x70
 800404e:	4b67      	ldr	r3, [pc, #412]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	4a66      	ldr	r2, [pc, #408]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	6713      	str	r3, [r2, #112]	@ 0x70
 800405a:	e01c      	b.n	8004096 <HAL_RCC_OscConfig+0x376>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x35e>
 8004064:	4b61      	ldr	r3, [pc, #388]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	4a60      	ldr	r2, [pc, #384]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004070:	4b5e      	ldr	r3, [pc, #376]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004074:	4a5d      	ldr	r2, [pc, #372]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	@ 0x70
 800407c:	e00b      	b.n	8004096 <HAL_RCC_OscConfig+0x376>
 800407e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	4a5a      	ldr	r2, [pc, #360]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	@ 0x70
 800408a:	4b58      	ldr	r3, [pc, #352]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408e:	4a57      	ldr	r2, [pc, #348]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7ff f9ad 	bl	80033fc <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7ff f9a9 	bl	80033fc <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0ce      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040bc:	4b4b      	ldr	r3, [pc, #300]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ee      	beq.n	80040a6 <HAL_RCC_OscConfig+0x386>
 80040c8:	e014      	b.n	80040f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7ff f997 	bl	80033fc <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7ff f993 	bl	80033fc <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e8:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ee      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fa:	4b3c      	ldr	r3, [pc, #240]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	4a3b      	ldr	r2, [pc, #236]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a4 	beq.w	8004258 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004110:	4b36      	ldr	r3, [pc, #216]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b08      	cmp	r3, #8
 800411a:	d06b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d149      	bne.n	80041b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b31      	ldr	r3, [pc, #196]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a30      	ldr	r2, [pc, #192]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7ff f964 	bl	80033fc <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7ff f960 	bl	80033fc <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e087      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	019b      	lsls	r3, r3, #6
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	3b01      	subs	r3, #1
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	061b      	lsls	r3, r3, #24
 800417a:	4313      	orrs	r3, r2
 800417c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800417e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004182:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7ff f934 	bl	80033fc <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7ff f930 	bl	80033fc <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e057      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041aa:	4b10      	ldr	r3, [pc, #64]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x478>
 80041b6:	e04f      	b.n	8004258 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80041be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7ff f91a 	bl	80033fc <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7ff f916 	bl	80033fc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e03d      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_OscConfig+0x4cc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x4ac>
 80041ea:	e035      	b.n	8004258 <HAL_RCC_OscConfig+0x538>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x544>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d028      	beq.n	8004254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d121      	bne.n	8004254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d11a      	bne.n	8004254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800422a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422c:	4293      	cmp	r3, r2
 800422e:	d111      	bne.n	8004254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	3b01      	subs	r3, #1
 800423e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d0      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b6a      	ldr	r3, [pc, #424]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d910      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b67      	ldr	r3, [pc, #412]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	4965      	ldr	r1, [pc, #404]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b63      	ldr	r3, [pc, #396]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0b8      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c8:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a58      	ldr	r2, [pc, #352]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e0:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a52      	ldr	r2, [pc, #328]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b50      	ldr	r3, [pc, #320]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	494d      	ldr	r1, [pc, #308]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d040      	beq.n	800438c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d115      	bne.n	800434a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b41      	ldr	r3, [pc, #260]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e073      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06b      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4936      	ldr	r1, [pc, #216]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435c:	f7ff f84e 	bl	80033fc <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7ff f84a 	bl	80033fc <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e053      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2d      	ldr	r3, [pc, #180]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b27      	ldr	r3, [pc, #156]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d210      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 020f 	bic.w	r2, r3, #15
 80043a2:	4922      	ldr	r1, [pc, #136]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e032      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4916      	ldr	r1, [pc, #88]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	490e      	ldr	r1, [pc, #56]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043fa:	f000 f821 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	490a      	ldr	r1, [pc, #40]	@ (8004434 <HAL_RCC_ClockConfig+0x1cc>)
 800440c:	5ccb      	ldrb	r3, [r1, r3]
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a09      	ldr	r2, [pc, #36]	@ (8004438 <HAL_RCC_ClockConfig+0x1d0>)
 8004414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004416:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_ClockConfig+0x1d4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fde8 	bl	8002ff0 <HAL_InitTick>

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023c00 	.word	0x40023c00
 8004430:	40023800 	.word	0x40023800
 8004434:	0800e42c 	.word	0x0800e42c
 8004438:	20000004 	.word	0x20000004
 800443c:	20000008 	.word	0x20000008

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004444:	b094      	sub	sp, #80	@ 0x50
 8004446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	647b      	str	r3, [r7, #68]	@ 0x44
 800444c:	2300      	movs	r3, #0
 800444e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004450:	2300      	movs	r3, #0
 8004452:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004458:	4b79      	ldr	r3, [pc, #484]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b08      	cmp	r3, #8
 8004462:	d00d      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x40>
 8004464:	2b08      	cmp	r3, #8
 8004466:	f200 80e1 	bhi.w	800462c <HAL_RCC_GetSysClockFreq+0x1ec>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x34>
 800446e:	2b04      	cmp	r3, #4
 8004470:	d003      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0x3a>
 8004472:	e0db      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004474:	4b73      	ldr	r3, [pc, #460]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x204>)
 8004476:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004478:	e0db      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800447a:	4b73      	ldr	r3, [pc, #460]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x208>)
 800447c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800447e:	e0d8      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004480:	4b6f      	ldr	r3, [pc, #444]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800448a:	4b6d      	ldr	r3, [pc, #436]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d063      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004496:	4b6a      	ldr	r3, [pc, #424]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	2200      	movs	r2, #0
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044aa:	2300      	movs	r3, #0
 80044ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	f04f 0000 	mov.w	r0, #0
 80044ba:	f04f 0100 	mov.w	r1, #0
 80044be:	0159      	lsls	r1, r3, #5
 80044c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c4:	0150      	lsls	r0, r2, #5
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4621      	mov	r1, r4
 80044cc:	1a51      	subs	r1, r2, r1
 80044ce:	6139      	str	r1, [r7, #16]
 80044d0:	4629      	mov	r1, r5
 80044d2:	eb63 0301 	sbc.w	r3, r3, r1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e4:	4659      	mov	r1, fp
 80044e6:	018b      	lsls	r3, r1, #6
 80044e8:	4651      	mov	r1, sl
 80044ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ee:	4651      	mov	r1, sl
 80044f0:	018a      	lsls	r2, r1, #6
 80044f2:	4651      	mov	r1, sl
 80044f4:	ebb2 0801 	subs.w	r8, r2, r1
 80044f8:	4659      	mov	r1, fp
 80044fa:	eb63 0901 	sbc.w	r9, r3, r1
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800450e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004512:	4690      	mov	r8, r2
 8004514:	4699      	mov	r9, r3
 8004516:	4623      	mov	r3, r4
 8004518:	eb18 0303 	adds.w	r3, r8, r3
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	462b      	mov	r3, r5
 8004520:	eb49 0303 	adc.w	r3, r9, r3
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004532:	4629      	mov	r1, r5
 8004534:	024b      	lsls	r3, r1, #9
 8004536:	4621      	mov	r1, r4
 8004538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800453c:	4621      	mov	r1, r4
 800453e:	024a      	lsls	r2, r1, #9
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004546:	2200      	movs	r2, #0
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800454c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004550:	f7fc fb4a 	bl	8000be8 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800455c:	e058      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	2200      	movs	r2, #0
 8004566:	4618      	mov	r0, r3
 8004568:	4611      	mov	r1, r2
 800456a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
 8004574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	f04f 0000 	mov.w	r0, #0
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	0159      	lsls	r1, r3, #5
 8004586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458a:	0150      	lsls	r0, r2, #5
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4641      	mov	r1, r8
 8004592:	ebb2 0a01 	subs.w	sl, r2, r1
 8004596:	4649      	mov	r1, r9
 8004598:	eb63 0b01 	sbc.w	fp, r3, r1
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045b0:	ebb2 040a 	subs.w	r4, r2, sl
 80045b4:	eb63 050b 	sbc.w	r5, r3, fp
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	00eb      	lsls	r3, r5, #3
 80045c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c6:	00e2      	lsls	r2, r4, #3
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	18e3      	adds	r3, r4, r3
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	464b      	mov	r3, r9
 80045d4:	eb45 0303 	adc.w	r3, r5, r3
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045e6:	4629      	mov	r1, r5
 80045e8:	028b      	lsls	r3, r1, #10
 80045ea:	4621      	mov	r1, r4
 80045ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045f0:	4621      	mov	r1, r4
 80045f2:	028a      	lsls	r2, r1, #10
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045fa:	2200      	movs	r2, #0
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	61fa      	str	r2, [r7, #28]
 8004600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004604:	f7fc faf0 	bl	8000be8 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4613      	mov	r3, r2
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	3301      	adds	r3, #1
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800462a:	e002      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4b05      	ldr	r3, [pc, #20]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x204>)
 800462e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004634:	4618      	mov	r0, r3
 8004636:	3750      	adds	r7, #80	@ 0x50
 8004638:	46bd      	mov	sp, r7
 800463a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	00f42400 	.word	0x00f42400
 8004648:	007a1200 	.word	0x007a1200

0800464c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004650:	4b03      	ldr	r3, [pc, #12]	@ (8004660 <HAL_RCC_GetHCLKFreq+0x14>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000004 	.word	0x20000004

08004664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004668:	f7ff fff0 	bl	800464c <HAL_RCC_GetHCLKFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	0a9b      	lsrs	r3, r3, #10
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	4903      	ldr	r1, [pc, #12]	@ (8004688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	0800e43c 	.word	0x0800e43c

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004690:	f7ff ffdc 	bl	800464c <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	0b5b      	lsrs	r3, r3, #13
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4903      	ldr	r1, [pc, #12]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	0800e43c 	.word	0x0800e43c

080046b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	220f      	movs	r2, #15
 80046c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046c4:	4b12      	ldr	r3, [pc, #72]	@ (8004710 <HAL_RCC_GetClockConfig+0x5c>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <HAL_RCC_GetClockConfig+0x5c>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <HAL_RCC_GetClockConfig+0x5c>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <HAL_RCC_GetClockConfig+0x5c>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046f6:	4b07      	ldr	r3, [pc, #28]	@ (8004714 <HAL_RCC_GetClockConfig+0x60>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800
 8004714:	40023c00 	.word	0x40023c00

08004718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004740:	4b69      	ldr	r3, [pc, #420]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a68      	ldr	r2, [pc, #416]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004746:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	4b66      	ldr	r3, [pc, #408]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004754:	4964      	ldr	r1, [pc, #400]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d017      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004772:	4b5d      	ldr	r3, [pc, #372]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004778:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	4959      	ldr	r1, [pc, #356]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004790:	d101      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004792:	2301      	movs	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ae:	4b4e      	ldr	r3, [pc, #312]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	494a      	ldr	r1, [pc, #296]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047cc:	d101      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047da:	2301      	movs	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 808b 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047fc:	4b3a      	ldr	r3, [pc, #232]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	4a39      	ldr	r2, [pc, #228]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6413      	str	r3, [r2, #64]	@ 0x40
 8004808:	4b37      	ldr	r3, [pc, #220]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004814:	4b35      	ldr	r3, [pc, #212]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a34      	ldr	r2, [pc, #208]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800481a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fe fdec 	bl	80033fc <HAL_GetTick>
 8004824:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7fe fde8 	bl	80033fc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	@ 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e357      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800483a:	4b2c      	ldr	r3, [pc, #176]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004846:	4b28      	ldr	r3, [pc, #160]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d035      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	d02e      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004864:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800486e:	4b1e      	ldr	r3, [pc, #120]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004878:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800487a:	4b1b      	ldr	r3, [pc, #108]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004884:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004886:	4a18      	ldr	r2, [pc, #96]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800488c:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b01      	cmp	r3, #1
 8004896:	d114      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe fdb0 	bl	80033fc <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	e00a      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fe fdac 	bl	80033fc <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e319      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ee      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ce:	d111      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048dc:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048de:	400b      	ands	r3, r1
 80048e0:	4901      	ldr	r1, [pc, #4]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
 80048e6:	e00b      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40007000 	.word	0x40007000
 80048f0:	0ffffcff 	.word	0x0ffffcff
 80048f4:	4baa      	ldr	r3, [pc, #680]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4aa9      	ldr	r2, [pc, #676]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048fe:	6093      	str	r3, [r2, #8]
 8004900:	4ba7      	ldr	r3, [pc, #668]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004902:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	49a4      	ldr	r1, [pc, #656]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490e:	4313      	orrs	r3, r2
 8004910:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d010      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800491e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004924:	4a9e      	ldr	r2, [pc, #632]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800492a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800492e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004930:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	4999      	ldr	r1, [pc, #612]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800494c:	4b94      	ldr	r3, [pc, #592]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800495a:	4991      	ldr	r1, [pc, #580]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800496e:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800497c:	4988      	ldr	r1, [pc, #544]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004990:	4b83      	ldr	r3, [pc, #524]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499e:	4980      	ldr	r1, [pc, #512]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	4977      	ldr	r1, [pc, #476]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d4:	4b72      	ldr	r3, [pc, #456]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f023 0203 	bic.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	496f      	ldr	r1, [pc, #444]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	f023 020c 	bic.w	r2, r3, #12
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a04:	4966      	ldr	r1, [pc, #408]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a18:	4b61      	ldr	r3, [pc, #388]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	495e      	ldr	r1, [pc, #376]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a3a:	4b59      	ldr	r3, [pc, #356]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a40:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a48:	4955      	ldr	r1, [pc, #340]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a5c:	4b50      	ldr	r3, [pc, #320]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6a:	494d      	ldr	r1, [pc, #308]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8c:	4944      	ldr	r1, [pc, #272]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	493c      	ldr	r1, [pc, #240]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ac2:	4b37      	ldr	r3, [pc, #220]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad0:	4933      	ldr	r1, [pc, #204]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af2:	492b      	ldr	r1, [pc, #172]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d011      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b06:	4b26      	ldr	r3, [pc, #152]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b14:	4922      	ldr	r1, [pc, #136]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b46:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b54:	4912      	ldr	r1, [pc, #72]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b78:	4909      	ldr	r1, [pc, #36]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d006      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80d9 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b94:	4b02      	ldr	r3, [pc, #8]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a01      	ldr	r2, [pc, #4]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba6:	f7fe fc29 	bl	80033fc <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bae:	f7fe fc25 	bl	80033fc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	@ 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e194      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d021      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11d      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004be0:	4b64      	ldr	r3, [pc, #400]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bee:	4b61      	ldr	r3, [pc, #388]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf4:	0e1b      	lsrs	r3, r3, #24
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	019a      	lsls	r2, r3, #6
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	071b      	lsls	r3, r3, #28
 8004c14:	4957      	ldr	r1, [pc, #348]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d02e      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c46:	d129      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c48:	4b4a      	ldr	r3, [pc, #296]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c56:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c5c:	0f1b      	lsrs	r3, r3, #28
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	019a      	lsls	r2, r3, #6
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	071b      	lsls	r3, r3, #28
 8004c7c:	493d      	ldr	r1, [pc, #244]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c84:	4b3b      	ldr	r3, [pc, #236]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8a:	f023 021f 	bic.w	r2, r3, #31
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	3b01      	subs	r3, #1
 8004c94:	4937      	ldr	r1, [pc, #220]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ca8:	4b32      	ldr	r3, [pc, #200]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cae:	0e1b      	lsrs	r3, r3, #24
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbc:	0f1b      	lsrs	r3, r3, #28
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	019a      	lsls	r2, r3, #6
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	071b      	lsls	r3, r3, #28
 8004cdc:	4925      	ldr	r1, [pc, #148]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d011      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	071b      	lsls	r3, r3, #28
 8004d0c:	4919      	ldr	r1, [pc, #100]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d14:	4b17      	ldr	r3, [pc, #92]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a16      	ldr	r2, [pc, #88]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d20:	f7fe fb6c 	bl	80033fc <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d28:	f7fe fb68 	bl	80033fc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	@ 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0d7      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	f040 80cd 	bne.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d4e:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fe fb4f 	bl	80033fc <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d62:	f7fe fb4b 	bl	80033fc <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d903      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0ba      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d78:	4b5e      	ldr	r3, [pc, #376]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d84:	d0ed      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02e      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d12a      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dae:	4b51      	ldr	r3, [pc, #324]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc2:	0f1b      	lsrs	r3, r3, #28
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	019a      	lsls	r2, r3, #6
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	061b      	lsls	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	4944      	ldr	r1, [pc, #272]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dea:	4b42      	ldr	r3, [pc, #264]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004df0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	493d      	ldr	r1, [pc, #244]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d022      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e18:	d11d      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e1a:	4b36      	ldr	r3, [pc, #216]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e20:	0e1b      	lsrs	r3, r3, #24
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e28:	4b32      	ldr	r3, [pc, #200]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2e:	0f1b      	lsrs	r3, r3, #28
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	019a      	lsls	r2, r3, #6
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	431a      	orrs	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	071b      	lsls	r3, r3, #28
 8004e4e:	4929      	ldr	r1, [pc, #164]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d028      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	019a      	lsls	r2, r3, #6
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	071b      	lsls	r3, r3, #28
 8004e96:	4917      	ldr	r1, [pc, #92]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	4911      	ldr	r1, [pc, #68]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fe fa9c 	bl	80033fc <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ec8:	f7fe fa98 	bl	80033fc <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e007      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee6:	d1ef      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800

08004ef8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e01c      	b.n	8004f44 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	795b      	ldrb	r3, [r3, #5]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fd ff2e 	bl	8002d7c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0204 	orr.w	r2, r2, #4
 8004f34:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	791b      	ldrb	r3, [r3, #4]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e044      	b.n	8004ff0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	795b      	ldrb	r3, [r3, #5]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d133      	bne.n	8004fde <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7fe fa3e 	bl	80033fc <HAL_GetTick>
 8004f80:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f82:	e018      	b.n	8004fb6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f84:	f7fe fa3a 	bl	80033fc <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d911      	bls.n	8004fb6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d1df      	bne.n	8004f84 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	715a      	strb	r2, [r3, #5]
 8004fdc:	e004      	b.n	8004fe8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	711a      	strb	r2, [r3, #4]

  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2210      	movs	r2, #16
 800501a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e009      	b.n	8005036 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2208      	movs	r2, #8
 8005030:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005032:	2301      	movs	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d10b      	bne.n	8005054 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2204      	movs	r2, #4
 8005040:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f837 	bl	80050b6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8005050:	605a      	str	r2, [r3, #4]

    return;
 8005052:	e022      	b.n	800509a <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01d      	beq.n	800509a <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0208 	bic.w	r2, r2, #8
 800506c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	795b      	ldrb	r3, [r3, #5]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b04      	cmp	r3, #4
 8005080:	d00b      	beq.n	800509a <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f803 	bl	80050a0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e049      	b.n	8005170 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fd fe7f 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 faa7 	bl	800565c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	d001      	beq.n	8005190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e054      	b.n	800523a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a26      	ldr	r2, [pc, #152]	@ (8005248 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ba:	d01d      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a22      	ldr	r2, [pc, #136]	@ (800524c <HAL_TIM_Base_Start_IT+0xd4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a21      	ldr	r2, [pc, #132]	@ (8005250 <HAL_TIM_Base_Start_IT+0xd8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005254 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	@ (8005258 <HAL_TIM_Base_Start_IT+0xe0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	@ (800525c <HAL_TIM_Base_Start_IT+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x80>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005260 <HAL_TIM_Base_Start_IT+0xe8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d115      	bne.n	8005224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	4b19      	ldr	r3, [pc, #100]	@ (8005264 <HAL_TIM_Base_Start_IT+0xec>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b06      	cmp	r3, #6
 8005208:	d015      	beq.n	8005236 <HAL_TIM_Base_Start_IT+0xbe>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005210:	d011      	beq.n	8005236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	e008      	b.n	8005236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e000      	b.n	8005238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40010400 	.word	0x40010400
 800525c:	40014000 	.word	0x40014000
 8005260:	40001800 	.word	0x40001800
 8005264:	00010007 	.word	0x00010007

08005268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d020      	beq.n	80052cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0202 	mvn.w	r2, #2
 800529c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9b4 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f9a6 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f9b7 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d020      	beq.n	8005318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0204 	mvn.w	r2, #4
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f98e 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f980 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f991 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d020      	beq.n	8005364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0208 	mvn.w	r2, #8
 8005334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2204      	movs	r2, #4
 800533a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f968 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f95a 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f96b 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	2b00      	cmp	r3, #0
 800536c:	d020      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0210 	mvn.w	r2, #16
 8005380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2208      	movs	r2, #8
 8005386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f942 	bl	8005620 <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f934 	bl	800560c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f945 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00c      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0201 	mvn.w	r2, #1
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fd fc3a 	bl	8002c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00c      	beq.n	8005402 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fb0b 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00c      	beq.n	8005426 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fb03 	bl	8005a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8ff 	bl	8005648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00c      	beq.n	800546e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0220 	mvn.w	r2, #32
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 facb 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIM_ConfigClockSource+0x1c>
 8005490:	2302      	movs	r3, #2
 8005492:	e0b4      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x186>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	4b56      	ldr	r3, [pc, #344]	@ (8005608 <HAL_TIM_ConfigClockSource+0x190>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054cc:	d03e      	beq.n	800554c <HAL_TIM_ConfigClockSource+0xd4>
 80054ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d2:	f200 8087 	bhi.w	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054da:	f000 8086 	beq.w	80055ea <HAL_TIM_ConfigClockSource+0x172>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e2:	d87f      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b70      	cmp	r3, #112	@ 0x70
 80054e6:	d01a      	beq.n	800551e <HAL_TIM_ConfigClockSource+0xa6>
 80054e8:	2b70      	cmp	r3, #112	@ 0x70
 80054ea:	d87b      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b60      	cmp	r3, #96	@ 0x60
 80054ee:	d050      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x11a>
 80054f0:	2b60      	cmp	r3, #96	@ 0x60
 80054f2:	d877      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b50      	cmp	r3, #80	@ 0x50
 80054f6:	d03c      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0xfa>
 80054f8:	2b50      	cmp	r3, #80	@ 0x50
 80054fa:	d873      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d058      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005500:	2b40      	cmp	r3, #64	@ 0x40
 8005502:	d86f      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b30      	cmp	r3, #48	@ 0x30
 8005506:	d064      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005508:	2b30      	cmp	r3, #48	@ 0x30
 800550a:	d86b      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d060      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b20      	cmp	r3, #32
 8005512:	d867      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d05c      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b10      	cmp	r3, #16
 800551a:	d05a      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 800551c:	e062      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	f000 f9bb 	bl	80058a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	609a      	str	r2, [r3, #8]
      break;
 800554a:	e04f      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	f000 f9a4 	bl	80058a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800556e:	609a      	str	r2, [r3, #8]
      break;
 8005570:	e03c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	461a      	mov	r2, r3
 8005580:	f000 f918 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2150      	movs	r1, #80	@ 0x50
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f971 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 8005590:	e02c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 f937 	bl	8005812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2160      	movs	r1, #96	@ 0x60
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f961 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055b0:	e01c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 f8f8 	bl	80057b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2140      	movs	r1, #64	@ 0x40
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f951 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055d0:	e00c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f000 f948 	bl	8005872 <TIM_ITRx_SetConfig>
      break;
 80055e2:	e003      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e000      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	fffeff88 	.word	0xfffeff88

0800560c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a46      	ldr	r2, [pc, #280]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a43      	ldr	r2, [pc, #268]	@ (800578c <TIM_Base_SetConfig+0x130>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a42      	ldr	r2, [pc, #264]	@ (8005790 <TIM_Base_SetConfig+0x134>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a41      	ldr	r2, [pc, #260]	@ (8005794 <TIM_Base_SetConfig+0x138>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a40      	ldr	r2, [pc, #256]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a35      	ldr	r2, [pc, #212]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056bc:	d027      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a32      	ldr	r2, [pc, #200]	@ (800578c <TIM_Base_SetConfig+0x130>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d023      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a31      	ldr	r2, [pc, #196]	@ (8005790 <TIM_Base_SetConfig+0x134>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01f      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a30      	ldr	r2, [pc, #192]	@ (8005794 <TIM_Base_SetConfig+0x138>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d017      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2e      	ldr	r2, [pc, #184]	@ (800579c <TIM_Base_SetConfig+0x140>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2d      	ldr	r2, [pc, #180]	@ (80057a0 <TIM_Base_SetConfig+0x144>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	@ (80057a4 <TIM_Base_SetConfig+0x148>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <TIM_Base_SetConfig+0x14c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2a      	ldr	r2, [pc, #168]	@ (80057ac <TIM_Base_SetConfig+0x150>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a29      	ldr	r2, [pc, #164]	@ (80057b0 <TIM_Base_SetConfig+0x154>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a10      	ldr	r2, [pc, #64]	@ (8005788 <TIM_Base_SetConfig+0x12c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0xf8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a12      	ldr	r2, [pc, #72]	@ (8005798 <TIM_Base_SetConfig+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d103      	bne.n	800575c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f023 0201 	bic.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	611a      	str	r2, [r3, #16]
  }
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800
 80057a8:	40001800 	.word	0x40001800
 80057ac:	40001c00 	.word	0x40001c00
 80057b0:	40002000 	.word	0x40002000

080057b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 030a 	bic.w	r3, r3, #10
 80057f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f023 0210 	bic.w	r2, r3, #16
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800583c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	f043 0307 	orr.w	r3, r3, #7
 8005894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	021a      	lsls	r2, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e06d      	b.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a30      	ldr	r2, [pc, #192]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800593a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a20      	ldr	r2, [pc, #128]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005972:	d01d      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a15      	ldr	r2, [pc, #84]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40001800 	.word	0x40001800

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e040      	b.n	8005ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fd f9ea 	bl	8002e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	@ 0x24
 8005a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb16 	bl	80060b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8af 	bl	8005bf0 <UART_SetConfig>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e01b      	b.n	8005ad4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb95 	bl	80061fc <UART_CheckIdleState>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	@ 0x28
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d177      	bne.n	8005be4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Transmit+0x24>
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e070      	b.n	8005be6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2221      	movs	r2, #33	@ 0x21
 8005b10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b12:	f7fd fc73 	bl	80033fc <HAL_GetTick>
 8005b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b30:	d108      	bne.n	8005b44 <HAL_UART_Transmit+0x68>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e003      	b.n	8005b4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b4c:	e02f      	b.n	8005bae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	2180      	movs	r1, #128	@ 0x80
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fba6 	bl	80062aa <UART_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e03b      	b.n	8005be6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	3302      	adds	r3, #2
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e007      	b.n	8005b9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1c9      	bne.n	8005b4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2140      	movs	r1, #64	@ 0x40
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fb70 	bl	80062aa <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e005      	b.n	8005be6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e000      	b.n	8005be6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005be4:	2302      	movs	r3, #2
  }
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4ba6      	ldr	r3, [pc, #664]	@ (8005eb4 <UART_SetConfig+0x2c4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a94      	ldr	r2, [pc, #592]	@ (8005eb8 <UART_SetConfig+0x2c8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d120      	bne.n	8005cae <UART_SetConfig+0xbe>
 8005c6c:	4b93      	ldr	r3, [pc, #588]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d816      	bhi.n	8005ca8 <UART_SetConfig+0xb8>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <UART_SetConfig+0x90>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005c9d 	.word	0x08005c9d
 8005c88:	08005c97 	.word	0x08005c97
 8005c8c:	08005ca3 	.word	0x08005ca3
 8005c90:	2301      	movs	r3, #1
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e150      	b.n	8005f38 <UART_SetConfig+0x348>
 8005c96:	2302      	movs	r3, #2
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e14d      	b.n	8005f38 <UART_SetConfig+0x348>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e14a      	b.n	8005f38 <UART_SetConfig+0x348>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e147      	b.n	8005f38 <UART_SetConfig+0x348>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e144      	b.n	8005f38 <UART_SetConfig+0x348>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a83      	ldr	r2, [pc, #524]	@ (8005ec0 <UART_SetConfig+0x2d0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d132      	bne.n	8005d1e <UART_SetConfig+0x12e>
 8005cb8:	4b80      	ldr	r3, [pc, #512]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b0c      	cmp	r3, #12
 8005cc4:	d828      	bhi.n	8005d18 <UART_SetConfig+0x128>
 8005cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <UART_SetConfig+0xdc>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005d01 	.word	0x08005d01
 8005cd0:	08005d19 	.word	0x08005d19
 8005cd4:	08005d19 	.word	0x08005d19
 8005cd8:	08005d19 	.word	0x08005d19
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005d19 	.word	0x08005d19
 8005ce4:	08005d19 	.word	0x08005d19
 8005ce8:	08005d19 	.word	0x08005d19
 8005cec:	08005d07 	.word	0x08005d07
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d13 	.word	0x08005d13
 8005d00:	2300      	movs	r3, #0
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e118      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d06:	2302      	movs	r3, #2
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e115      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e112      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d12:	2308      	movs	r3, #8
 8005d14:	77fb      	strb	r3, [r7, #31]
 8005d16:	e10f      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	77fb      	strb	r3, [r7, #31]
 8005d1c:	e10c      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a68      	ldr	r2, [pc, #416]	@ (8005ec4 <UART_SetConfig+0x2d4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d120      	bne.n	8005d6a <UART_SetConfig+0x17a>
 8005d28:	4b64      	ldr	r3, [pc, #400]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d32:	2b30      	cmp	r3, #48	@ 0x30
 8005d34:	d013      	beq.n	8005d5e <UART_SetConfig+0x16e>
 8005d36:	2b30      	cmp	r3, #48	@ 0x30
 8005d38:	d814      	bhi.n	8005d64 <UART_SetConfig+0x174>
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d009      	beq.n	8005d52 <UART_SetConfig+0x162>
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d810      	bhi.n	8005d64 <UART_SetConfig+0x174>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <UART_SetConfig+0x15c>
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d006      	beq.n	8005d58 <UART_SetConfig+0x168>
 8005d4a:	e00b      	b.n	8005d64 <UART_SetConfig+0x174>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e0f2      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d52:	2302      	movs	r3, #2
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e0ef      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e0ec      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d5e:	2308      	movs	r3, #8
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e0e9      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d64:	2310      	movs	r3, #16
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e0e6      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a56      	ldr	r2, [pc, #344]	@ (8005ec8 <UART_SetConfig+0x2d8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d120      	bne.n	8005db6 <UART_SetConfig+0x1c6>
 8005d74:	4b51      	ldr	r3, [pc, #324]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d80:	d013      	beq.n	8005daa <UART_SetConfig+0x1ba>
 8005d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d84:	d814      	bhi.n	8005db0 <UART_SetConfig+0x1c0>
 8005d86:	2b80      	cmp	r3, #128	@ 0x80
 8005d88:	d009      	beq.n	8005d9e <UART_SetConfig+0x1ae>
 8005d8a:	2b80      	cmp	r3, #128	@ 0x80
 8005d8c:	d810      	bhi.n	8005db0 <UART_SetConfig+0x1c0>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <UART_SetConfig+0x1a8>
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	d006      	beq.n	8005da4 <UART_SetConfig+0x1b4>
 8005d96:	e00b      	b.n	8005db0 <UART_SetConfig+0x1c0>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e0cc      	b.n	8005f38 <UART_SetConfig+0x348>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e0c9      	b.n	8005f38 <UART_SetConfig+0x348>
 8005da4:	2304      	movs	r3, #4
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e0c6      	b.n	8005f38 <UART_SetConfig+0x348>
 8005daa:	2308      	movs	r3, #8
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e0c3      	b.n	8005f38 <UART_SetConfig+0x348>
 8005db0:	2310      	movs	r3, #16
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e0c0      	b.n	8005f38 <UART_SetConfig+0x348>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a44      	ldr	r2, [pc, #272]	@ (8005ecc <UART_SetConfig+0x2dc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d125      	bne.n	8005e0c <UART_SetConfig+0x21c>
 8005dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dce:	d017      	beq.n	8005e00 <UART_SetConfig+0x210>
 8005dd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd4:	d817      	bhi.n	8005e06 <UART_SetConfig+0x216>
 8005dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dda:	d00b      	beq.n	8005df4 <UART_SetConfig+0x204>
 8005ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de0:	d811      	bhi.n	8005e06 <UART_SetConfig+0x216>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <UART_SetConfig+0x1fe>
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dea:	d006      	beq.n	8005dfa <UART_SetConfig+0x20a>
 8005dec:	e00b      	b.n	8005e06 <UART_SetConfig+0x216>
 8005dee:	2300      	movs	r3, #0
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e0a1      	b.n	8005f38 <UART_SetConfig+0x348>
 8005df4:	2302      	movs	r3, #2
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e09e      	b.n	8005f38 <UART_SetConfig+0x348>
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e09b      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e00:	2308      	movs	r3, #8
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e098      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e06:	2310      	movs	r3, #16
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e095      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed0 <UART_SetConfig+0x2e0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d125      	bne.n	8005e62 <UART_SetConfig+0x272>
 8005e16:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e24:	d017      	beq.n	8005e56 <UART_SetConfig+0x266>
 8005e26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e2a:	d817      	bhi.n	8005e5c <UART_SetConfig+0x26c>
 8005e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e30:	d00b      	beq.n	8005e4a <UART_SetConfig+0x25a>
 8005e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e36:	d811      	bhi.n	8005e5c <UART_SetConfig+0x26c>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <UART_SetConfig+0x254>
 8005e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e40:	d006      	beq.n	8005e50 <UART_SetConfig+0x260>
 8005e42:	e00b      	b.n	8005e5c <UART_SetConfig+0x26c>
 8005e44:	2301      	movs	r3, #1
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e076      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e073      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e50:	2304      	movs	r3, #4
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e070      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e56:	2308      	movs	r3, #8
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e06d      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e06a      	b.n	8005f38 <UART_SetConfig+0x348>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed4 <UART_SetConfig+0x2e4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d138      	bne.n	8005ede <UART_SetConfig+0x2ee>
 8005e6c:	4b13      	ldr	r3, [pc, #76]	@ (8005ebc <UART_SetConfig+0x2cc>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e7a:	d017      	beq.n	8005eac <UART_SetConfig+0x2bc>
 8005e7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e80:	d82a      	bhi.n	8005ed8 <UART_SetConfig+0x2e8>
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e86:	d00b      	beq.n	8005ea0 <UART_SetConfig+0x2b0>
 8005e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e8c:	d824      	bhi.n	8005ed8 <UART_SetConfig+0x2e8>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <UART_SetConfig+0x2aa>
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e96:	d006      	beq.n	8005ea6 <UART_SetConfig+0x2b6>
 8005e98:	e01e      	b.n	8005ed8 <UART_SetConfig+0x2e8>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	77fb      	strb	r3, [r7, #31]
 8005e9e:	e04b      	b.n	8005f38 <UART_SetConfig+0x348>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e048      	b.n	8005f38 <UART_SetConfig+0x348>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e045      	b.n	8005f38 <UART_SetConfig+0x348>
 8005eac:	2308      	movs	r3, #8
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e042      	b.n	8005f38 <UART_SetConfig+0x348>
 8005eb2:	bf00      	nop
 8005eb4:	efff69f3 	.word	0xefff69f3
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40004400 	.word	0x40004400
 8005ec4:	40004800 	.word	0x40004800
 8005ec8:	40004c00 	.word	0x40004c00
 8005ecc:	40005000 	.word	0x40005000
 8005ed0:	40011400 	.word	0x40011400
 8005ed4:	40007800 	.word	0x40007800
 8005ed8:	2310      	movs	r3, #16
 8005eda:	77fb      	strb	r3, [r7, #31]
 8005edc:	e02c      	b.n	8005f38 <UART_SetConfig+0x348>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a72      	ldr	r2, [pc, #456]	@ (80060ac <UART_SetConfig+0x4bc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d125      	bne.n	8005f34 <UART_SetConfig+0x344>
 8005ee8:	4b71      	ldr	r3, [pc, #452]	@ (80060b0 <UART_SetConfig+0x4c0>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ef2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ef6:	d017      	beq.n	8005f28 <UART_SetConfig+0x338>
 8005ef8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005efc:	d817      	bhi.n	8005f2e <UART_SetConfig+0x33e>
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f02:	d00b      	beq.n	8005f1c <UART_SetConfig+0x32c>
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f08:	d811      	bhi.n	8005f2e <UART_SetConfig+0x33e>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <UART_SetConfig+0x326>
 8005f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f12:	d006      	beq.n	8005f22 <UART_SetConfig+0x332>
 8005f14:	e00b      	b.n	8005f2e <UART_SetConfig+0x33e>
 8005f16:	2300      	movs	r3, #0
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e00d      	b.n	8005f38 <UART_SetConfig+0x348>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e00a      	b.n	8005f38 <UART_SetConfig+0x348>
 8005f22:	2304      	movs	r3, #4
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e007      	b.n	8005f38 <UART_SetConfig+0x348>
 8005f28:	2308      	movs	r3, #8
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e004      	b.n	8005f38 <UART_SetConfig+0x348>
 8005f2e:	2310      	movs	r3, #16
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	e001      	b.n	8005f38 <UART_SetConfig+0x348>
 8005f34:	2310      	movs	r3, #16
 8005f36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f40:	d15b      	bne.n	8005ffa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f42:	7ffb      	ldrb	r3, [r7, #31]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d828      	bhi.n	8005f9a <UART_SetConfig+0x3aa>
 8005f48:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <UART_SetConfig+0x360>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005f8b 	.word	0x08005f8b
 8005f64:	08005f9b 	.word	0x08005f9b
 8005f68:	08005f9b 	.word	0x08005f9b
 8005f6c:	08005f9b 	.word	0x08005f9b
 8005f70:	08005f93 	.word	0x08005f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f74:	f7fe fb76 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8005f78:	61b8      	str	r0, [r7, #24]
        break;
 8005f7a:	e013      	b.n	8005fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f7c:	f7fe fb86 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8005f80:	61b8      	str	r0, [r7, #24]
        break;
 8005f82:	e00f      	b.n	8005fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f84:	4b4b      	ldr	r3, [pc, #300]	@ (80060b4 <UART_SetConfig+0x4c4>)
 8005f86:	61bb      	str	r3, [r7, #24]
        break;
 8005f88:	e00c      	b.n	8005fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7fe fa59 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005f8e:	61b8      	str	r0, [r7, #24]
        break;
 8005f90:	e008      	b.n	8005fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f96:	61bb      	str	r3, [r7, #24]
        break;
 8005f98:	e004      	b.n	8005fa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8005fa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d074      	beq.n	8006094 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	005a      	lsls	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d916      	bls.n	8005ff4 <UART_SetConfig+0x404>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fcc:	d212      	bcs.n	8005ff4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f023 030f 	bic.w	r3, r3, #15
 8005fd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	89fa      	ldrh	r2, [r7, #14]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e04f      	b.n	8006094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	77bb      	strb	r3, [r7, #30]
 8005ff8:	e04c      	b.n	8006094 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ffa:	7ffb      	ldrb	r3, [r7, #31]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d828      	bhi.n	8006052 <UART_SetConfig+0x462>
 8006000:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x418>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fe fb1a 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8006030:	61b8      	str	r0, [r7, #24]
        break;
 8006032:	e013      	b.n	800605c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fe fb2a 	bl	800468c <HAL_RCC_GetPCLK2Freq>
 8006038:	61b8      	str	r0, [r7, #24]
        break;
 800603a:	e00f      	b.n	800605c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <UART_SetConfig+0x4c4>)
 800603e:	61bb      	str	r3, [r7, #24]
        break;
 8006040:	e00c      	b.n	800605c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fe f9fd 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006046:	61b8      	str	r0, [r7, #24]
        break;
 8006048:	e008      	b.n	800605c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604e:	61bb      	str	r3, [r7, #24]
        break;
 8006050:	e004      	b.n	800605c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	77bb      	strb	r3, [r7, #30]
        break;
 800605a:	bf00      	nop
    }

    if (pclk != 0U)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d018      	beq.n	8006094 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	085a      	lsrs	r2, r3, #1
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	441a      	add	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b0f      	cmp	r3, #15
 800607a:	d909      	bls.n	8006090 <UART_SetConfig+0x4a0>
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006082:	d205      	bcs.n	8006090 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	e001      	b.n	8006094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40007c00 	.word	0x40007c00
 80060b0:	40023800 	.word	0x40023800
 80060b4:	00f42400 	.word	0x00f42400

080060b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01a      	beq.n	80061ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b6:	d10a      	bne.n	80061ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	605a      	str	r2, [r3, #4]
  }
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08c      	sub	sp, #48	@ 0x30
 8006200:	af02      	add	r7, sp, #8
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800620c:	f7fd f8f6 	bl	80033fc <HAL_GetTick>
 8006210:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b08      	cmp	r3, #8
 800621e:	d12e      	bne.n	800627e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f83b 	bl	80062aa <UART_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d021      	beq.n	800627e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	60fb      	str	r3, [r7, #12]
   return(result);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624e:	623b      	str	r3, [r7, #32]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	617b      	str	r3, [r7, #20]
   return(result);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e011      	b.n	80062a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3728      	adds	r7, #40	@ 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ba:	e04f      	b.n	800635c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d04b      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c4:	f7fd f89a 	bl	80033fc <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d302      	bcc.n	80062da <UART_WaitOnFlagUntilTimeout+0x30>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e04e      	b.n	800637c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d037      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b80      	cmp	r3, #128	@ 0x80
 80062f0:	d034      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0xb2>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d031      	beq.n	800635c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b08      	cmp	r3, #8
 8006304:	d110      	bne.n	8006328 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f838 	bl	8006384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2208      	movs	r2, #8
 8006318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e029      	b.n	800637c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006336:	d111      	bne.n	800635c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f81e 	bl	8006384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e00f      	b.n	800637c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69da      	ldr	r2, [r3, #28]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4013      	ands	r3, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	bf0c      	ite	eq
 800636c:	2301      	moveq	r3, #1
 800636e:	2300      	movne	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	429a      	cmp	r2, r3
 8006378:	d0a0      	beq.n	80062bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b095      	sub	sp, #84	@ 0x54
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e6      	bne.n	800638c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d118      	bne.n	800642c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60bb      	str	r3, [r7, #8]
   return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	613b      	str	r3, [r7, #16]
   return(result);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006440:	bf00      	nop
 8006442:	3754      	adds	r7, #84	@ 0x54
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 001c 	add.w	r0, r7, #28
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006462:	2b01      	cmp	r3, #1
 8006464:	d121      	bne.n	80064aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	4b21      	ldr	r3, [pc, #132]	@ (80064fc <USB_CoreInit+0xb0>)
 8006478:	4013      	ands	r3, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800648a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648e:	2b01      	cmp	r3, #1
 8006490:	d105      	bne.n	800649e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa92 	bl	80069c8 <USB_CoreReset>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
 80064a8:	e010      	b.n	80064cc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa86 	bl	80069c8 <USB_CoreReset>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80064cc:	7fbb      	ldrb	r3, [r7, #30]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10b      	bne.n	80064ea <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f043 0206 	orr.w	r2, r3, #6
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f6:	b004      	add	sp, #16
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	ffbdffbf 	.word	0xffbdffbf

08006500 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f023 0201 	bic.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d115      	bne.n	8006570 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006550:	200a      	movs	r0, #10
 8006552:	f7fc ff5f 	bl	8003414 <HAL_Delay>
      ms += 10U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	330a      	adds	r3, #10
 800655a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa25 	bl	80069ac <USB_GetMode>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d01e      	beq.n	80065a6 <USB_SetCurrentMode+0x84>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2bc7      	cmp	r3, #199	@ 0xc7
 800656c:	d9f0      	bls.n	8006550 <USB_SetCurrentMode+0x2e>
 800656e:	e01a      	b.n	80065a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d115      	bne.n	80065a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006582:	200a      	movs	r0, #10
 8006584:	f7fc ff46 	bl	8003414 <HAL_Delay>
      ms += 10U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	330a      	adds	r3, #10
 800658c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fa0c 	bl	80069ac <USB_GetMode>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <USB_SetCurrentMode+0x84>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2bc7      	cmp	r3, #199	@ 0xc7
 800659e:	d9f0      	bls.n	8006582 <USB_SetCurrentMode+0x60>
 80065a0:	e001      	b.n	80065a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e005      	b.n	80065b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2bc8      	cmp	r3, #200	@ 0xc8
 80065aa:	d101      	bne.n	80065b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065bc:	b084      	sub	sp, #16
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e009      	b.n	80065f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3340      	adds	r3, #64	@ 0x40
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	2200      	movs	r2, #0
 80065e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3301      	adds	r3, #1
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b0e      	cmp	r3, #14
 80065f4:	d9f2      	bls.n	80065dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11c      	bne.n	8006638 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800660c:	f043 0302 	orr.w	r3, r3, #2
 8006610:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e005      	b.n	8006644 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800664a:	461a      	mov	r2, r3
 800664c:	2300      	movs	r3, #0
 800664e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006650:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10d      	bne.n	8006674 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006660:	2100      	movs	r1, #0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f968 	bl	8006938 <USB_SetDevSpeed>
 8006668:	e008      	b.n	800667c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f963 	bl	8006938 <USB_SetDevSpeed>
 8006672:	e003      	b.n	800667c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006674:	2103      	movs	r1, #3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f95e 	bl	8006938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800667c:	2110      	movs	r1, #16
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8fa 	bl	8006878 <USB_FlushTxFifo>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f924 	bl	80068dc <USB_FlushRxFifo>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a4:	461a      	mov	r2, r3
 80066a6:	2300      	movs	r3, #0
 80066a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b0:	461a      	mov	r2, r3
 80066b2:	2300      	movs	r3, #0
 80066b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e043      	b.n	8006750 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066de:	d118      	bne.n	8006712 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f2:	461a      	mov	r2, r3
 80066f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e013      	b.n	8006724 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006708:	461a      	mov	r2, r3
 800670a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e008      	b.n	8006724 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006730:	461a      	mov	r2, r3
 8006732:	2300      	movs	r3, #0
 8006734:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006742:	461a      	mov	r2, r3
 8006744:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3301      	adds	r3, #1
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006754:	461a      	mov	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4293      	cmp	r3, r2
 800675a:	d3b5      	bcc.n	80066c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800675c:	2300      	movs	r3, #0
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	e043      	b.n	80067ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006778:	d118      	bne.n	80067ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	e013      	b.n	80067be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a2:	461a      	mov	r2, r3
 80067a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	e008      	b.n	80067be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	461a      	mov	r2, r3
 80067ba:	2300      	movs	r3, #0
 80067bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	3301      	adds	r3, #1
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067ee:	461a      	mov	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d3b5      	bcc.n	8006762 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006808:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006816:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f043 0210 	orr.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	4b0f      	ldr	r3, [pc, #60]	@ (8006870 <USB_DevInit+0x2b4>)
 8006832:	4313      	orrs	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f043 0208 	orr.w	r2, r3, #8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800684c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006850:	2b01      	cmp	r3, #1
 8006852:	d105      	bne.n	8006860 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <USB_DevInit+0x2b8>)
 800685a:	4313      	orrs	r3, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686c:	b004      	add	sp, #16
 800686e:	4770      	bx	lr
 8006870:	803c3800 	.word	0x803c3800
 8006874:	40000004 	.word	0x40000004

08006878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006892:	d901      	bls.n	8006898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e01b      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	daf2      	bge.n	8006886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	019b      	lsls	r3, r3, #6
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068bc:	d901      	bls.n	80068c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e006      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d0f0      	beq.n	80068b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068f4:	d901      	bls.n	80068fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e018      	b.n	800692c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	daf2      	bge.n	80068e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2210      	movs	r2, #16
 800690a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006918:	d901      	bls.n	800691e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e006      	b.n	800692c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b10      	cmp	r3, #16
 8006928:	d0f0      	beq.n	800690c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006984:	f023 0303 	bic.w	r3, r3, #3
 8006988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0301 	and.w	r3, r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069e0:	d901      	bls.n	80069e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e01b      	b.n	8006a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	daf2      	bge.n	80069d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a0a:	d901      	bls.n	8006a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e006      	b.n	8006a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d0f0      	beq.n	80069fe <USB_CoreReset+0x36>

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a07      	ldr	r2, [pc, #28]	@ (8006a58 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4a06      	ldr	r2, [pc, #24]	@ (8006a5c <vApplicationGetIdleTaskMemory+0x30>)
 8006a42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2280      	movs	r2, #128	@ 0x80
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	200009bc 	.word	0x200009bc
 8006a5c:	20000a64 	.word	0x20000a64

08006a60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a07      	ldr	r2, [pc, #28]	@ (8006a8c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a06      	ldr	r2, [pc, #24]	@ (8006a90 <vApplicationGetTimerTaskMemory+0x30>)
 8006a76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a7e:	601a      	str	r2, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20000c64 	.word	0x20000c64
 8006a90:	20000d0c 	.word	0x20000d0c

08006a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f103 0208 	add.w	r2, r3, #8
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f103 0208 	add.w	r2, r3, #8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f103 0208 	add.w	r2, r3, #8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d103      	bne.n	8006b56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e00c      	b.n	8006b70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e002      	b.n	8006b64 <vListInsert+0x2e>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d2f6      	bcs.n	8006b5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6892      	ldr	r2, [r2, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6852      	ldr	r2, [r2, #4]
 8006bc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d103      	bne.n	8006bdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	1e5a      	subs	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <xQueueGenericReset+0x30>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	b672      	cpsid	i
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	b662      	cpsie	i
 8006c24:	60bb      	str	r3, [r7, #8]
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	e7fd      	b.n	8006c28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c2c:	f002 ff8c 	bl	8009b48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	441a      	add	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	22ff      	movs	r2, #255	@ 0xff
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	22ff      	movs	r2, #255	@ 0xff
 8006c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d114      	bne.n	8006cac <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01a      	beq.n	8006cc0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fc9a 	bl	80085c8 <xTaskRemoveFromEventList>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <xQueueGenericReset+0xd4>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	e009      	b.n	8006cc0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3310      	adds	r3, #16
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff feef 	bl	8006a94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3324      	adds	r3, #36	@ 0x24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff feea 	bl	8006a94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cc0:	f002 ff78 	bl	8009bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08e      	sub	sp, #56	@ 0x38
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10d      	bne.n	8006d04 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cec:	b672      	cpsid	i
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	b662      	cpsie	i
 8006cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10d      	bne.n	8006d26 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	b672      	cpsid	i
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	b662      	cpsie	i
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <xQueueGenericCreateStatic+0x5e>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <xQueueGenericCreateStatic+0x62>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericCreateStatic+0x64>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10d      	bne.n	8006d58 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	b672      	cpsid	i
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	b662      	cpsie	i
 8006d50:	623b      	str	r3, [r7, #32]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <xQueueGenericCreateStatic+0x90>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <xQueueGenericCreateStatic+0x94>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <xQueueGenericCreateStatic+0x96>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	b672      	cpsid	i
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	b662      	cpsie	i
 8006d82:	61fb      	str	r3, [r7, #28]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d8a:	2350      	movs	r3, #80	@ 0x50
 8006d8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b50      	cmp	r3, #80	@ 0x50
 8006d92:	d00d      	beq.n	8006db0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	b672      	cpsid	i
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	b662      	cpsie	i
 8006da8:	61bb      	str	r3, [r7, #24]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006db0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00d      	beq.n	8006dd8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f848 	bl	8006e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3730      	adds	r7, #48	@ 0x30
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b08a      	sub	sp, #40	@ 0x28
 8006de6:	af02      	add	r7, sp, #8
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10d      	bne.n	8006e12 <xQueueGenericCreate+0x30>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	b672      	cpsid	i
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	b662      	cpsie	i
 8006e0a:	613b      	str	r3, [r7, #16]
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	e7fd      	b.n	8006e0e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	e004      	b.n	8006e28 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3350      	adds	r3, #80	@ 0x50
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f002 ffbb 	bl	8009da8 <pvPortMalloc>
 8006e32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	3350      	adds	r3, #80	@ 0x50
 8006e42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e4c:	79fa      	ldrb	r2, [r7, #7]
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4613      	mov	r3, r2
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f805 	bl	8006e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e002      	b.n	8006e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e96:	2101      	movs	r1, #1
 8006e98:	69b8      	ldr	r0, [r7, #24]
 8006e9a:	f7ff feaf 	bl	8006bfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00e      	beq.n	8006eda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f81d 	bl	8006f14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b086      	sub	sp, #24
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	4603      	mov	r3, r0
 8006eea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ef4:	79fb      	ldrb	r3, [r7, #7]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6939      	ldr	r1, [r7, #16]
 8006efa:	6978      	ldr	r0, [r7, #20]
 8006efc:	f7ff ff71 	bl	8006de2 <xQueueGenericCreate>
 8006f00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff ffd3 	bl	8006eae <prvInitialiseMutex>

		return xNewQueue;
 8006f08:	68fb      	ldr	r3, [r7, #12]
	}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	@ 0x38
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10d      	bne.n	8006f4c <xQueueGenericSend+0x38>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	b672      	cpsid	i
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	b662      	cpsie	i
 8006f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	e7fd      	b.n	8006f48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <xQueueGenericSend+0x46>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <xQueueGenericSend+0x4a>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <xQueueGenericSend+0x4c>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <xQueueGenericSend+0x6c>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f68:	b672      	cpsid	i
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	b662      	cpsie	i
 8006f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d103      	bne.n	8006f8e <xQueueGenericSend+0x7a>
 8006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <xQueueGenericSend+0x7e>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <xQueueGenericSend+0x80>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10d      	bne.n	8006fb4 <xQueueGenericSend+0xa0>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9c:	b672      	cpsid	i
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	b662      	cpsie	i
 8006fac:	623b      	str	r3, [r7, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fb4:	f001 fcd6 	bl	8008964 <xTaskGetSchedulerState>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <xQueueGenericSend+0xb0>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <xQueueGenericSend+0xb4>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <xQueueGenericSend+0xb6>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10d      	bne.n	8006fea <xQueueGenericSend+0xd6>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	b672      	cpsid	i
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	b662      	cpsie	i
 8006fe2:	61fb      	str	r3, [r7, #28]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fea:	f002 fdad 	bl	8009b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d302      	bcc.n	8007000 <xQueueGenericSend+0xec>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d129      	bne.n	8007054 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007006:	f000 fb8d 	bl	8007724 <prvCopyDataToQueue>
 800700a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d010      	beq.n	8007036 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	3324      	adds	r3, #36	@ 0x24
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fad5 	bl	80085c8 <xTaskRemoveFromEventList>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d013      	beq.n	800704c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007024:	4b3f      	ldr	r3, [pc, #252]	@ (8007124 <xQueueGenericSend+0x210>)
 8007026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	e00a      	b.n	800704c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800703c:	4b39      	ldr	r3, [pc, #228]	@ (8007124 <xQueueGenericSend+0x210>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800704c:	f002 fdb2 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 8007050:	2301      	movs	r3, #1
 8007052:	e063      	b.n	800711c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800705a:	f002 fdab 	bl	8009bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800705e:	2300      	movs	r3, #0
 8007060:	e05c      	b.n	800711c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007068:	f107 0314 	add.w	r3, r7, #20
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fb11 	bl	8008694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007072:	2301      	movs	r3, #1
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007076:	f002 fd9d 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800707a:	f001 f85b 	bl	8008134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800707e:	f002 fd63 	bl	8009b48 <vPortEnterCritical>
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007088:	b25b      	sxtb	r3, r3
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d103      	bne.n	8007098 <xQueueGenericSend+0x184>
 8007090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800709e:	b25b      	sxtb	r3, r3
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a4:	d103      	bne.n	80070ae <xQueueGenericSend+0x19a>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070ae:	f002 fd81 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070b2:	1d3a      	adds	r2, r7, #4
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fb00 	bl	80086c0 <xTaskCheckForTimeOut>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d124      	bne.n	8007110 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070c8:	f000 fc24 	bl	8007914 <prvIsQueueFull>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d018      	beq.n	8007104 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	3310      	adds	r3, #16
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 fa1e 	bl	800851c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070e2:	f000 fbaf 	bl	8007844 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070e6:	f001 f833 	bl	8008150 <xTaskResumeAll>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f47f af7c 	bne.w	8006fea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80070f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <xQueueGenericSend+0x210>)
 80070f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	e772      	b.n	8006fea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007106:	f000 fb9d 	bl	8007844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800710a:	f001 f821 	bl	8008150 <xTaskResumeAll>
 800710e:	e76c      	b.n	8006fea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007112:	f000 fb97 	bl	8007844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007116:	f001 f81b 	bl	8008150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800711a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800711c:	4618      	mov	r0, r3
 800711e:	3738      	adds	r7, #56	@ 0x38
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08e      	sub	sp, #56	@ 0x38
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10d      	bne.n	800715c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	e7fd      	b.n	8007158 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <xQueueGenericSendFromISR+0x42>
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <xQueueGenericSendFromISR+0x46>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <xQueueGenericSendFromISR+0x48>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10d      	bne.n	8007190 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	b672      	cpsid	i
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	b662      	cpsie	i
 8007188:	623b      	str	r3, [r7, #32]
}
 800718a:	bf00      	nop
 800718c:	bf00      	nop
 800718e:	e7fd      	b.n	800718c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d103      	bne.n	800719e <xQueueGenericSendFromISR+0x76>
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <xQueueGenericSendFromISR+0x7a>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <xQueueGenericSendFromISR+0x7c>
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10d      	bne.n	80071c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ac:	b672      	cpsid	i
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	b662      	cpsie	i
 80071bc:	61fb      	str	r3, [r7, #28]
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071c4:	f002 fdaa 	bl	8009d1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071c8:	f3ef 8211 	mrs	r2, BASEPRI
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	b672      	cpsid	i
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	b662      	cpsie	i
 80071e0:	61ba      	str	r2, [r7, #24]
 80071e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <xQueueGenericSendFromISR+0xd2>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d12c      	bne.n	8007254 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800720a:	f000 fa8b 	bl	8007724 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800720e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d112      	bne.n	800723e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d016      	beq.n	800724e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	3324      	adds	r3, #36	@ 0x24
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f9cf 	bl	80085c8 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	e007      	b.n	800724e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800723e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007242:	3301      	adds	r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	b25a      	sxtb	r2, r3
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800724e:	2301      	movs	r3, #1
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007252:	e001      	b.n	8007258 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007254:	2300      	movs	r3, #0
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
 8007258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007262:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007266:	4618      	mov	r0, r3
 8007268:	3738      	adds	r7, #56	@ 0x38
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08c      	sub	sp, #48	@ 0x30
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <xQueueReceive+0x36>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	b672      	cpsid	i
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	b662      	cpsie	i
 800729e:	623b      	str	r3, [r7, #32]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <xQueueReceive+0x44>
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <xQueueReceive+0x48>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <xQueueReceive+0x4a>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <xQueueReceive+0x6a>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	b672      	cpsid	i
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	b662      	cpsie	i
 80072d2:	61fb      	str	r3, [r7, #28]
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	e7fd      	b.n	80072d6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072da:	f001 fb43 	bl	8008964 <xTaskGetSchedulerState>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d102      	bne.n	80072ea <xQueueReceive+0x7a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <xQueueReceive+0x7e>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <xQueueReceive+0x80>
 80072ee:	2300      	movs	r3, #0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <xQueueReceive+0xa0>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f8:	b672      	cpsid	i
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	b662      	cpsie	i
 8007308:	61bb      	str	r3, [r7, #24]
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	e7fd      	b.n	800730c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007310:	f002 fc1a 	bl	8009b48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01f      	beq.n	8007360 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007324:	f000 fa68 	bl	80077f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	1e5a      	subs	r2, r3, #1
 800732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00f      	beq.n	8007358 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	3310      	adds	r3, #16
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f943 	bl	80085c8 <xTaskRemoveFromEventList>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007348:	4b3c      	ldr	r3, [pc, #240]	@ (800743c <xQueueReceive+0x1cc>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007358:	f002 fc2c 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 800735c:	2301      	movs	r3, #1
 800735e:	e069      	b.n	8007434 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007366:	f002 fc25 	bl	8009bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800736a:	2300      	movs	r3, #0
 800736c:	e062      	b.n	8007434 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007374:	f107 0310 	add.w	r3, r7, #16
 8007378:	4618      	mov	r0, r3
 800737a:	f001 f98b 	bl	8008694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800737e:	2301      	movs	r3, #1
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007382:	f002 fc17 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007386:	f000 fed5 	bl	8008134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800738a:	f002 fbdd 	bl	8009b48 <vPortEnterCritical>
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007394:	b25b      	sxtb	r3, r3
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739a:	d103      	bne.n	80073a4 <xQueueReceive+0x134>
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b0:	d103      	bne.n	80073ba <xQueueReceive+0x14a>
 80073b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ba:	f002 fbfb 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073be:	1d3a      	adds	r2, r7, #4
 80073c0:	f107 0310 	add.w	r3, r7, #16
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 f97a 	bl	80086c0 <xTaskCheckForTimeOut>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d123      	bne.n	800741a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d4:	f000 fa88 	bl	80078e8 <prvIsQueueEmpty>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d017      	beq.n	800740e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e0:	3324      	adds	r3, #36	@ 0x24
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f898 	bl	800851c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ee:	f000 fa29 	bl	8007844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073f2:	f000 fead 	bl	8008150 <xTaskResumeAll>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d189      	bne.n	8007310 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80073fc:	4b0f      	ldr	r3, [pc, #60]	@ (800743c <xQueueReceive+0x1cc>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	e780      	b.n	8007310 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800740e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007410:	f000 fa18 	bl	8007844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007414:	f000 fe9c 	bl	8008150 <xTaskResumeAll>
 8007418:	e77a      	b.n	8007310 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800741a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800741c:	f000 fa12 	bl	8007844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007420:	f000 fe96 	bl	8008150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007426:	f000 fa5f 	bl	80078e8 <prvIsQueueEmpty>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	f43f af6f 	beq.w	8007310 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007432:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3730      	adds	r7, #48	@ 0x30
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	@ 0x38
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800744a:	2300      	movs	r3, #0
 800744c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	b672      	cpsid	i
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	b662      	cpsie	i
 8007470:	623b      	str	r3, [r7, #32]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007484:	b672      	cpsid	i
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	b662      	cpsie	i
 8007494:	61fb      	str	r3, [r7, #28]
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	e7fd      	b.n	8007498 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800749c:	f001 fa62 	bl	8008964 <xTaskGetSchedulerState>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <xQueueSemaphoreTake+0x6c>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <xQueueSemaphoreTake+0x70>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <xQueueSemaphoreTake+0x72>
 80074b0:	2300      	movs	r3, #0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10d      	bne.n	80074d2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	b672      	cpsid	i
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	b662      	cpsie	i
 80074ca:	61bb      	str	r3, [r7, #24]
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074d2:	f002 fb39 	bl	8009b48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d024      	beq.n	800752c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	1e5a      	subs	r2, r3, #1
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074f2:	f001 fbb9 	bl	8008c68 <pvTaskIncrementMutexHeldCount>
 80074f6:	4602      	mov	r2, r0
 80074f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007506:	3310      	adds	r3, #16
 8007508:	4618      	mov	r0, r3
 800750a:	f001 f85d 	bl	80085c8 <xTaskRemoveFromEventList>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007514:	4b55      	ldr	r3, [pc, #340]	@ (800766c <xQueueSemaphoreTake+0x22c>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007524:	f002 fb46 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 8007528:	2301      	movs	r3, #1
 800752a:	e09a      	b.n	8007662 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d114      	bne.n	800755c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	b672      	cpsid	i
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	b662      	cpsie	i
 800754c:	617b      	str	r3, [r7, #20]
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007554:	f002 fb2e 	bl	8009bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007558:	2300      	movs	r3, #0
 800755a:	e082      	b.n	8007662 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007562:	f107 030c 	add.w	r3, r7, #12
 8007566:	4618      	mov	r0, r3
 8007568:	f001 f894 	bl	8008694 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007570:	f002 fb20 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007574:	f000 fdde 	bl	8008134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007578:	f002 fae6 	bl	8009b48 <vPortEnterCritical>
 800757c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007582:	b25b      	sxtb	r3, r3
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d103      	bne.n	8007592 <xQueueSemaphoreTake+0x152>
 800758a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007598:	b25b      	sxtb	r3, r3
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d103      	bne.n	80075a8 <xQueueSemaphoreTake+0x168>
 80075a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075a8:	f002 fb04 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ac:	463a      	mov	r2, r7
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f883 	bl	80086c0 <xTaskCheckForTimeOut>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d132      	bne.n	8007626 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075c2:	f000 f991 	bl	80078e8 <prvIsQueueEmpty>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d026      	beq.n	800761a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80075d4:	f002 fab8 	bl	8009b48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 f9df 	bl	80089a0 <xTaskPriorityInherit>
 80075e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80075e4:	f002 fae6 	bl	8009bb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ea:	3324      	adds	r3, #36	@ 0x24
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 ff93 	bl	800851c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075f8:	f000 f924 	bl	8007844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075fc:	f000 fda8 	bl	8008150 <xTaskResumeAll>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af65 	bne.w	80074d2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007608:	4b18      	ldr	r3, [pc, #96]	@ (800766c <xQueueSemaphoreTake+0x22c>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	e75b      	b.n	80074d2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800761a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800761c:	f000 f912 	bl	8007844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007620:	f000 fd96 	bl	8008150 <xTaskResumeAll>
 8007624:	e755      	b.n	80074d2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007626:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007628:	f000 f90c 	bl	8007844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800762c:	f000 fd90 	bl	8008150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007630:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007632:	f000 f959 	bl	80078e8 <prvIsQueueEmpty>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f43f af4a 	beq.w	80074d2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00d      	beq.n	8007660 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007644:	f002 fa80 	bl	8009b48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007648:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800764a:	f000 f853 	bl	80076f4 <prvGetDisinheritPriorityAfterTimeout>
 800764e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fa7e 	bl	8008b58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800765c:	f002 faaa 	bl	8009bb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007662:	4618      	mov	r0, r3
 8007664:	3738      	adds	r7, #56	@ 0x38
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	b672      	cpsid	i
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	b662      	cpsie	i
 8007692:	60bb      	str	r3, [r7, #8]
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	e7fd      	b.n	8007696 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800769a:	f002 fa55 	bl	8009b48 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80076a4:	f002 fa86 	bl	8009bb4 <vPortExitCritical>

	return uxReturn;
 80076a8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10d      	bne.n	80076e0 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	b672      	cpsid	i
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	b662      	cpsie	i
 80076d8:	60fb      	str	r3, [r7, #12]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80076e6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80076e8:	4618      	mov	r0, r3
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e001      	b.n	8007716 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007716:	68fb      	ldr	r3, [r7, #12]
	}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10d      	bne.n	800775e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d14d      	bne.n	80077e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4618      	mov	r0, r3
 8007750:	f001 f98e 	bl	8008a70 <xTaskPriorityDisinherit>
 8007754:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	609a      	str	r2, [r3, #8]
 800775c:	e043      	b.n	80077e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d119      	bne.n	8007798 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6858      	ldr	r0, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776c:	461a      	mov	r2, r3
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	f003 fd45 	bl	800b1fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	429a      	cmp	r2, r3
 800778c:	d32b      	bcc.n	80077e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	e026      	b.n	80077e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68d8      	ldr	r0, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a0:	461a      	mov	r2, r3
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	f003 fd2b 	bl	800b1fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b0:	425b      	negs	r3, r3
 80077b2:	441a      	add	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d207      	bcs.n	80077d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	425b      	negs	r3, r3
 80077ce:	441a      	add	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d105      	bne.n	80077e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80077ee:	697b      	ldr	r3, [r7, #20]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d018      	beq.n	800783c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	441a      	add	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d303      	bcc.n	800782c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68d9      	ldr	r1, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	461a      	mov	r2, r3
 8007836:	6838      	ldr	r0, [r7, #0]
 8007838:	f003 fce1 	bl	800b1fe <memcpy>
	}
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800784c:	f002 f97c 	bl	8009b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007856:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007858:	e011      	b.n	800787e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d012      	beq.n	8007888 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	@ 0x24
 8007866:	4618      	mov	r0, r3
 8007868:	f000 feae 	bl	80085c8 <xTaskRemoveFromEventList>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007872:	f000 ff8d 	bl	8008790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	3b01      	subs	r3, #1
 800787a:	b2db      	uxtb	r3, r3
 800787c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800787e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	dce9      	bgt.n	800785a <prvUnlockQueue+0x16>
 8007886:	e000      	b.n	800788a <prvUnlockQueue+0x46>
					break;
 8007888:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	22ff      	movs	r2, #255	@ 0xff
 800788e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007892:	f002 f98f 	bl	8009bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007896:	f002 f957 	bl	8009b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078a2:	e011      	b.n	80078c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d012      	beq.n	80078d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3310      	adds	r3, #16
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fe89 	bl	80085c8 <xTaskRemoveFromEventList>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078bc:	f000 ff68 	bl	8008790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dce9      	bgt.n	80078a4 <prvUnlockQueue+0x60>
 80078d0:	e000      	b.n	80078d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	22ff      	movs	r2, #255	@ 0xff
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80078dc:	f002 f96a 	bl	8009bb4 <vPortExitCritical>
}
 80078e0:	bf00      	nop
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078f0:	f002 f92a 	bl	8009b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078fc:	2301      	movs	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e001      	b.n	8007906 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007906:	f002 f955 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800791c:	f002 f914 	bl	8009b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007928:	429a      	cmp	r2, r3
 800792a:	d102      	bne.n	8007932 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e001      	b.n	8007936 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007932:	2300      	movs	r3, #0
 8007934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007936:	f002 f93d 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	e014      	b.n	800797e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007954:	4a0f      	ldr	r2, [pc, #60]	@ (8007994 <vQueueAddToRegistry+0x50>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10b      	bne.n	8007978 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007960:	490c      	ldr	r1, [pc, #48]	@ (8007994 <vQueueAddToRegistry+0x50>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800796a:	4a0a      	ldr	r2, [pc, #40]	@ (8007994 <vQueueAddToRegistry+0x50>)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	4413      	add	r3, r2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007976:	e006      	b.n	8007986 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b07      	cmp	r3, #7
 8007982:	d9e7      	bls.n	8007954 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	2000110c 	.word	0x2000110c

08007998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80079a8:	f002 f8ce 	bl	8009b48 <vPortEnterCritical>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d103      	bne.n	80079c2 <vQueueWaitForMessageRestricted+0x2a>
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d103      	bne.n	80079d8 <vQueueWaitForMessageRestricted+0x40>
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079d8:	f002 f8ec 	bl	8009bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3324      	adds	r3, #36	@ 0x24
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fdbd 	bl	800856c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079f2:	6978      	ldr	r0, [r7, #20]
 80079f4:	f7ff ff26 	bl	8007844 <prvUnlockQueue>
	}
 80079f8:	bf00      	nop
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08e      	sub	sp, #56	@ 0x38
 8007a04:	af04      	add	r7, sp, #16
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <xTaskCreateStatic+0x30>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	b672      	cpsid	i
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	b662      	cpsie	i
 8007a28:	623b      	str	r3, [r7, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10d      	bne.n	8007a52 <xTaskCreateStatic+0x52>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	b672      	cpsid	i
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	b662      	cpsie	i
 8007a4a:	61fb      	str	r3, [r7, #28]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a52:	23a8      	movs	r3, #168	@ 0xa8
 8007a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2ba8      	cmp	r3, #168	@ 0xa8
 8007a5a:	d00d      	beq.n	8007a78 <xTaskCreateStatic+0x78>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	61bb      	str	r3, [r7, #24]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <xTaskCreateStatic+0xbe>
 8007a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01b      	beq.n	8007abe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9e:	9302      	str	r3, [sp, #8]
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f851 	bl	8007b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ab6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ab8:	f000 f8f8 	bl	8007cac <prvAddNewTaskToReadyList>
 8007abc:	e001      	b.n	8007ac2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ac2:	697b      	ldr	r3, [r7, #20]
	}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3728      	adds	r7, #40	@ 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08c      	sub	sp, #48	@ 0x30
 8007ad0:	af04      	add	r7, sp, #16
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f002 f961 	bl	8009da8 <pvPortMalloc>
 8007ae6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007aee:	20a8      	movs	r0, #168	@ 0xa8
 8007af0:	f002 f95a 	bl	8009da8 <pvPortMalloc>
 8007af4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b02:	e005      	b.n	8007b10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b04:	6978      	ldr	r0, [r7, #20]
 8007b06:	f002 fa1d 	bl	8009f44 <vPortFree>
 8007b0a:	e001      	b.n	8007b10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d017      	beq.n	8007b46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9303      	str	r3, [sp, #12]
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f80f 	bl	8007b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b3a:	69f8      	ldr	r0, [r7, #28]
 8007b3c:	f000 f8b6 	bl	8007cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b40:	2301      	movs	r3, #1
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	e002      	b.n	8007b4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	461a      	mov	r2, r3
 8007b70:	21a5      	movs	r1, #165	@ 0xa5
 8007b72:	f003 fa5b 	bl	800b02c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007b80:	440b      	add	r3, r1
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00d      	beq.n	8007bb6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	b672      	cpsid	i
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	b662      	cpsie	i
 8007bae:	617b      	str	r3, [r7, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01f      	beq.n	8007bfc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	e012      	b.n	8007be8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	7819      	ldrb	r1, [r3, #0]
 8007bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	3334      	adds	r3, #52	@ 0x34
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	3301      	adds	r3, #1
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d9e9      	bls.n	8007bc2 <prvInitialiseNewTask+0x6a>
 8007bee:	e000      	b.n	8007bf2 <prvInitialiseNewTask+0x9a>
			{
				break;
 8007bf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bfa:	e003      	b.n	8007c04 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c06:	2b37      	cmp	r3, #55	@ 0x37
 8007c08:	d901      	bls.n	8007c0e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c0a:	2337      	movs	r3, #55	@ 0x37
 8007c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	3304      	adds	r3, #4
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe ff55 	bl	8006ad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe ff50 	bl	8006ad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	3354      	adds	r3, #84	@ 0x54
 8007c5e:	224c      	movs	r2, #76	@ 0x4c
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f003 f9e2 	bl	800b02c <memset>
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ca0 <prvInitialiseNewTask+0x148>)
 8007c6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <prvInitialiseNewTask+0x14c>)
 8007c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <prvInitialiseNewTask+0x150>)
 8007c78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	68f9      	ldr	r1, [r7, #12]
 8007c7e:	69b8      	ldr	r0, [r7, #24]
 8007c80:	f001 fe38 	bl	80098f4 <pxPortInitialiseStack>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c96:	bf00      	nop
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20019e38 	.word	0x20019e38
 8007ca4:	20019ea0 	.word	0x20019ea0
 8007ca8:	20019f08 	.word	0x20019f08

08007cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cb4:	f001 ff48 	bl	8009b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d70 <prvAddNewTaskToReadyList+0xc4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8007d70 <prvAddNewTaskToReadyList+0xc4>)
 8007cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cca:	4a2a      	ldr	r2, [pc, #168]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cd0:	4b27      	ldr	r3, [pc, #156]	@ (8007d70 <prvAddNewTaskToReadyList+0xc4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d110      	bne.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cd8:	f000 fd7e 	bl	80087d8 <prvInitialiseTaskLists>
 8007cdc:	e00d      	b.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cde:	4b26      	ldr	r3, [pc, #152]	@ (8007d78 <prvAddNewTaskToReadyList+0xcc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ce6:	4b23      	ldr	r3, [pc, #140]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d802      	bhi.n	8007cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cfa:	4b20      	ldr	r3, [pc, #128]	@ (8007d7c <prvAddNewTaskToReadyList+0xd0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	4a1e      	ldr	r2, [pc, #120]	@ (8007d7c <prvAddNewTaskToReadyList+0xd0>)
 8007d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d04:	4b1d      	ldr	r3, [pc, #116]	@ (8007d7c <prvAddNewTaskToReadyList+0xd0>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	4b1b      	ldr	r3, [pc, #108]	@ (8007d80 <prvAddNewTaskToReadyList+0xd4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <prvAddNewTaskToReadyList+0x74>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <prvAddNewTaskToReadyList+0xd4>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a15      	ldr	r2, [pc, #84]	@ (8007d84 <prvAddNewTaskToReadyList+0xd8>)
 8007d2e:	441a      	add	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe fed9 	bl	8006aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d3c:	f001 ff3a 	bl	8009bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d40:	4b0d      	ldr	r3, [pc, #52]	@ (8007d78 <prvAddNewTaskToReadyList+0xcc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00e      	beq.n	8007d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d48:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <prvAddNewTaskToReadyList+0xc8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d207      	bcs.n	8007d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d56:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <prvAddNewTaskToReadyList+0xdc>)
 8007d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20001620 	.word	0x20001620
 8007d74:	2000114c 	.word	0x2000114c
 8007d78:	2000162c 	.word	0x2000162c
 8007d7c:	2000163c 	.word	0x2000163c
 8007d80:	20001628 	.word	0x20001628
 8007d84:	20001150 	.word	0x20001150
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d01a      	beq.n	8007dd4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d9e:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <vTaskDelay+0x68>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00d      	beq.n	8007dc2 <vTaskDelay+0x36>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	60bb      	str	r3, [r7, #8]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007dc2:	f000 f9b7 	bl	8008134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 f977 	bl	80090bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007dce:	f000 f9bf 	bl	8008150 <xTaskResumeAll>
 8007dd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d107      	bne.n	8007dea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007dda:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <vTaskDelay+0x6c>)
 8007ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20001648 	.word	0x20001648
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e04:	f001 fea0 	bl	8009b48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <vTaskSuspend+0x18>
 8007e0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ed4 <vTaskSuspend+0xd8>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	e000      	b.n	8007e16 <vTaskSuspend+0x1a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fec3 	bl	8006ba8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe feba 	bl	8006ba8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4827      	ldr	r0, [pc, #156]	@ (8007ed8 <vTaskSuspend+0xdc>)
 8007e3c:	f7fe fe57 	bl	8006aee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d103      	bne.n	8007e54 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007e54:	f001 feae 	bl	8009bb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007e58:	4b20      	ldr	r3, [pc, #128]	@ (8007edc <vTaskSuspend+0xe0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007e60:	f001 fe72 	bl	8009b48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007e64:	f000 fd5e 	bl	8008924 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007e68:	f001 fea4 	bl	8009bb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007e6c:	4b19      	ldr	r3, [pc, #100]	@ (8007ed4 <vTaskSuspend+0xd8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d12a      	bne.n	8007ecc <vTaskSuspend+0xd0>
		{
			if( xSchedulerRunning != pdFALSE )
 8007e76:	4b19      	ldr	r3, [pc, #100]	@ (8007edc <vTaskSuspend+0xe0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01a      	beq.n	8007eb4 <vTaskSuspend+0xb8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007e7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ee0 <vTaskSuspend+0xe4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00d      	beq.n	8007ea2 <vTaskSuspend+0xa6>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	b672      	cpsid	i
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	b662      	cpsie	i
 8007e9a:	60bb      	str	r3, [r7, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	e7fd      	b.n	8007e9e <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007ea2:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <vTaskSuspend+0xe8>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb2:	e00b      	b.n	8007ecc <vTaskSuspend+0xd0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007eb4:	4b08      	ldr	r3, [pc, #32]	@ (8007ed8 <vTaskSuspend+0xdc>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <vTaskSuspend+0xec>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d103      	bne.n	8007ec8 <vTaskSuspend+0xcc>
					pxCurrentTCB = NULL;
 8007ec0:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <vTaskSuspend+0xd8>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
	}
 8007ec6:	e001      	b.n	8007ecc <vTaskSuspend+0xd0>
					vTaskSwitchContext();
 8007ec8:	f000 fac0 	bl	800844c <vTaskSwitchContext>
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	2000114c 	.word	0x2000114c
 8007ed8:	2000160c 	.word	0x2000160c
 8007edc:	2000162c 	.word	0x2000162c
 8007ee0:	20001648 	.word	0x20001648
 8007ee4:	e000ed04 	.word	0xe000ed04
 8007ee8:	20001620 	.word	0x20001620

08007eec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10d      	bne.n	8007f1e <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	b672      	cpsid	i
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	b662      	cpsie	i
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <prvTaskIsTaskSuspended+0x60>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d10a      	bne.n	8007f3e <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	4a08      	ldr	r2, [pc, #32]	@ (8007f50 <prvTaskIsTaskSuspended+0x64>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d005      	beq.n	8007f3e <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f3e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007f40:	4618      	mov	r0, r3
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	2000160c 	.word	0x2000160c
 8007f50:	200015e0 	.word	0x200015e0

08007f54 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10d      	bne.n	8007f82 <vTaskResume+0x2e>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	b672      	cpsid	i
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	b662      	cpsie	i
 8007f7a:	60bb      	str	r3, [r7, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	e7fd      	b.n	8007f7e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007f82:	4b21      	ldr	r3, [pc, #132]	@ (8008008 <vTaskResume+0xb4>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d038      	beq.n	8007ffe <vTaskResume+0xaa>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d035      	beq.n	8007ffe <vTaskResume+0xaa>
		{
			taskENTER_CRITICAL();
 8007f92:	f001 fdd9 	bl	8009b48 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff ffa8 	bl	8007eec <prvTaskIsTaskSuspended>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02b      	beq.n	8007ffa <vTaskResume+0xa6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fdfe 	bl	8006ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb0:	4b16      	ldr	r3, [pc, #88]	@ (800800c <vTaskResume+0xb8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d903      	bls.n	8007fc0 <vTaskResume+0x6c>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	4a13      	ldr	r2, [pc, #76]	@ (800800c <vTaskResume+0xb8>)
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <vTaskResume+0xbc>)
 8007fce:	441a      	add	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f7fe fd89 	bl	8006aee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe0:	4b09      	ldr	r3, [pc, #36]	@ (8008008 <vTaskResume+0xb4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d307      	bcc.n	8007ffa <vTaskResume+0xa6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007fea:	4b0a      	ldr	r3, [pc, #40]	@ (8008014 <vTaskResume+0xc0>)
 8007fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007ffa:	f001 fddb 	bl	8009bb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	2000114c 	.word	0x2000114c
 800800c:	20001628 	.word	0x20001628
 8008010:	20001150 	.word	0x20001150
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	@ 0x28
 800801c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008026:	463a      	mov	r2, r7
 8008028:	1d39      	adds	r1, r7, #4
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	4618      	mov	r0, r3
 8008030:	f7fe fcfc 	bl	8006a2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	9202      	str	r2, [sp, #8]
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	2300      	movs	r3, #0
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	2300      	movs	r3, #0
 8008044:	460a      	mov	r2, r1
 8008046:	4926      	ldr	r1, [pc, #152]	@ (80080e0 <vTaskStartScheduler+0xc8>)
 8008048:	4826      	ldr	r0, [pc, #152]	@ (80080e4 <vTaskStartScheduler+0xcc>)
 800804a:	f7ff fcd9 	bl	8007a00 <xTaskCreateStatic>
 800804e:	4603      	mov	r3, r0
 8008050:	4a25      	ldr	r2, [pc, #148]	@ (80080e8 <vTaskStartScheduler+0xd0>)
 8008052:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008054:	4b24      	ldr	r3, [pc, #144]	@ (80080e8 <vTaskStartScheduler+0xd0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e001      	b.n	8008066 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d102      	bne.n	8008072 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800806c:	f001 f87a 	bl	8009164 <xTimerCreateTimerTask>
 8008070:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d11d      	bne.n	80080b4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	b672      	cpsid	i
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	b662      	cpsie	i
 800808c:	613b      	str	r3, [r7, #16]
}
 800808e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008090:	4b16      	ldr	r3, [pc, #88]	@ (80080ec <vTaskStartScheduler+0xd4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3354      	adds	r3, #84	@ 0x54
 8008096:	4a16      	ldr	r2, [pc, #88]	@ (80080f0 <vTaskStartScheduler+0xd8>)
 8008098:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800809a:	4b16      	ldr	r3, [pc, #88]	@ (80080f4 <vTaskStartScheduler+0xdc>)
 800809c:	f04f 32ff 	mov.w	r2, #4294967295
 80080a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080a2:	4b15      	ldr	r3, [pc, #84]	@ (80080f8 <vTaskStartScheduler+0xe0>)
 80080a4:	2201      	movs	r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080a8:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <vTaskStartScheduler+0xe4>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080ae:	f001 fcaf 	bl	8009a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080b2:	e011      	b.n	80080d8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d10d      	bne.n	80080d8 <vTaskStartScheduler+0xc0>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c0:	b672      	cpsid	i
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	b662      	cpsie	i
 80080d0:	60fb      	str	r3, [r7, #12]
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	e7fd      	b.n	80080d4 <vTaskStartScheduler+0xbc>
}
 80080d8:	bf00      	nop
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	0800d85c 	.word	0x0800d85c
 80080e4:	080087a9 	.word	0x080087a9
 80080e8:	20001644 	.word	0x20001644
 80080ec:	2000114c 	.word	0x2000114c
 80080f0:	20000020 	.word	0x20000020
 80080f4:	20001640 	.word	0x20001640
 80080f8:	2000162c 	.word	0x2000162c
 80080fc:	20001624 	.word	0x20001624

08008100 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	b672      	cpsid	i
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	b662      	cpsie	i
 800811a:	607b      	str	r3, [r7, #4]
}
 800811c:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 800811e:	4b04      	ldr	r3, [pc, #16]	@ (8008130 <vTaskEndScheduler+0x30>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8008124:	f001 fcf2 	bl	8009b0c <vPortEndScheduler>
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	2000162c 	.word	0x2000162c

08008134 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008138:	4b04      	ldr	r3, [pc, #16]	@ (800814c <vTaskSuspendAll+0x18>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a03      	ldr	r2, [pc, #12]	@ (800814c <vTaskSuspendAll+0x18>)
 8008140:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20001648 	.word	0x20001648

08008150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800815e:	4b43      	ldr	r3, [pc, #268]	@ (800826c <xTaskResumeAll+0x11c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10d      	bne.n	8008182 <xTaskResumeAll+0x32>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	b672      	cpsid	i
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	b662      	cpsie	i
 800817a:	603b      	str	r3, [r7, #0]
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008182:	f001 fce1 	bl	8009b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008186:	4b39      	ldr	r3, [pc, #228]	@ (800826c <xTaskResumeAll+0x11c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3b01      	subs	r3, #1
 800818c:	4a37      	ldr	r2, [pc, #220]	@ (800826c <xTaskResumeAll+0x11c>)
 800818e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008190:	4b36      	ldr	r3, [pc, #216]	@ (800826c <xTaskResumeAll+0x11c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d162      	bne.n	800825e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008198:	4b35      	ldr	r3, [pc, #212]	@ (8008270 <xTaskResumeAll+0x120>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d05e      	beq.n	800825e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081a0:	e02f      	b.n	8008202 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a2:	4b34      	ldr	r3, [pc, #208]	@ (8008274 <xTaskResumeAll+0x124>)
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3318      	adds	r3, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fcfa 	bl	8006ba8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fcf5 	bl	8006ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008278 <xTaskResumeAll+0x128>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d903      	bls.n	80081d2 <xTaskResumeAll+0x82>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008278 <xTaskResumeAll+0x128>)
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4a27      	ldr	r2, [pc, #156]	@ (800827c <xTaskResumeAll+0x12c>)
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f7fe fc80 	bl	8006aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f2:	4b23      	ldr	r3, [pc, #140]	@ (8008280 <xTaskResumeAll+0x130>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d302      	bcc.n	8008202 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80081fc:	4b21      	ldr	r3, [pc, #132]	@ (8008284 <xTaskResumeAll+0x134>)
 80081fe:	2201      	movs	r2, #1
 8008200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008202:	4b1c      	ldr	r3, [pc, #112]	@ (8008274 <xTaskResumeAll+0x124>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1cb      	bne.n	80081a2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008210:	f000 fb88 	bl	8008924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008214:	4b1c      	ldr	r3, [pc, #112]	@ (8008288 <xTaskResumeAll+0x138>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d010      	beq.n	8008242 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008220:	f000 f858 	bl	80082d4 <xTaskIncrementTick>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800822a:	4b16      	ldr	r3, [pc, #88]	@ (8008284 <xTaskResumeAll+0x134>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3b01      	subs	r3, #1
 8008234:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f1      	bne.n	8008220 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800823c:	4b12      	ldr	r3, [pc, #72]	@ (8008288 <xTaskResumeAll+0x138>)
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008242:	4b10      	ldr	r3, [pc, #64]	@ (8008284 <xTaskResumeAll+0x134>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800824a:	2301      	movs	r3, #1
 800824c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800824e:	4b0f      	ldr	r3, [pc, #60]	@ (800828c <xTaskResumeAll+0x13c>)
 8008250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800825e:	f001 fca9 	bl	8009bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8008262:	68bb      	ldr	r3, [r7, #8]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20001648 	.word	0x20001648
 8008270:	20001620 	.word	0x20001620
 8008274:	200015e0 	.word	0x200015e0
 8008278:	20001628 	.word	0x20001628
 800827c:	20001150 	.word	0x20001150
 8008280:	2000114c 	.word	0x2000114c
 8008284:	20001634 	.word	0x20001634
 8008288:	20001630 	.word	0x20001630
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <xTaskGetTickCount+0x1c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800829c:	687b      	ldr	r3, [r7, #4]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20001624 	.word	0x20001624

080082b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082b6:	f001 fd31 	bl	8009d1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80082be:	4b04      	ldr	r3, [pc, #16]	@ (80082d0 <xTaskGetTickCountFromISR+0x20>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082c4:	683b      	ldr	r3, [r7, #0]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20001624 	.word	0x20001624

080082d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082de:	4b50      	ldr	r3, [pc, #320]	@ (8008420 <xTaskIncrementTick+0x14c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 808c 	bne.w	8008400 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008424 <xTaskIncrementTick+0x150>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082f0:	4a4c      	ldr	r2, [pc, #304]	@ (8008424 <xTaskIncrementTick+0x150>)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d123      	bne.n	8008344 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80082fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008428 <xTaskIncrementTick+0x154>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00d      	beq.n	8008322 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	b672      	cpsid	i
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	b662      	cpsie	i
 800831a:	603b      	str	r3, [r7, #0]
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	e7fd      	b.n	800831e <xTaskIncrementTick+0x4a>
 8008322:	4b41      	ldr	r3, [pc, #260]	@ (8008428 <xTaskIncrementTick+0x154>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	4b40      	ldr	r3, [pc, #256]	@ (800842c <xTaskIncrementTick+0x158>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a3e      	ldr	r2, [pc, #248]	@ (8008428 <xTaskIncrementTick+0x154>)
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4a3e      	ldr	r2, [pc, #248]	@ (800842c <xTaskIncrementTick+0x158>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	4b3e      	ldr	r3, [pc, #248]	@ (8008430 <xTaskIncrementTick+0x15c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3301      	adds	r3, #1
 800833c:	4a3c      	ldr	r2, [pc, #240]	@ (8008430 <xTaskIncrementTick+0x15c>)
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	f000 faf0 	bl	8008924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008344:	4b3b      	ldr	r3, [pc, #236]	@ (8008434 <xTaskIncrementTick+0x160>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	429a      	cmp	r2, r3
 800834c:	d349      	bcc.n	80083e2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800834e:	4b36      	ldr	r3, [pc, #216]	@ (8008428 <xTaskIncrementTick+0x154>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008358:	4b36      	ldr	r3, [pc, #216]	@ (8008434 <xTaskIncrementTick+0x160>)
 800835a:	f04f 32ff 	mov.w	r2, #4294967295
 800835e:	601a      	str	r2, [r3, #0]
					break;
 8008360:	e03f      	b.n	80083e2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008362:	4b31      	ldr	r3, [pc, #196]	@ (8008428 <xTaskIncrementTick+0x154>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	429a      	cmp	r2, r3
 8008378:	d203      	bcs.n	8008382 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800837a:	4a2e      	ldr	r2, [pc, #184]	@ (8008434 <xTaskIncrementTick+0x160>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008380:	e02f      	b.n	80083e2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3304      	adds	r3, #4
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fc0e 	bl	8006ba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3318      	adds	r3, #24
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fc05 	bl	8006ba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a2:	4b25      	ldr	r3, [pc, #148]	@ (8008438 <xTaskIncrementTick+0x164>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d903      	bls.n	80083b2 <xTaskIncrementTick+0xde>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ae:	4a22      	ldr	r2, [pc, #136]	@ (8008438 <xTaskIncrementTick+0x164>)
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4a1f      	ldr	r2, [pc, #124]	@ (800843c <xTaskIncrementTick+0x168>)
 80083c0:	441a      	add	r2, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7fe fb90 	bl	8006aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008440 <xTaskIncrementTick+0x16c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	429a      	cmp	r2, r3
 80083da:	d3b8      	bcc.n	800834e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083e0:	e7b5      	b.n	800834e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083e2:	4b17      	ldr	r3, [pc, #92]	@ (8008440 <xTaskIncrementTick+0x16c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e8:	4914      	ldr	r1, [pc, #80]	@ (800843c <xTaskIncrementTick+0x168>)
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d907      	bls.n	800840a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80083fa:	2301      	movs	r3, #1
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e004      	b.n	800840a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008400:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <xTaskIncrementTick+0x170>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	4a0f      	ldr	r2, [pc, #60]	@ (8008444 <xTaskIncrementTick+0x170>)
 8008408:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800840a:	4b0f      	ldr	r3, [pc, #60]	@ (8008448 <xTaskIncrementTick+0x174>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008416:	697b      	ldr	r3, [r7, #20]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20001648 	.word	0x20001648
 8008424:	20001624 	.word	0x20001624
 8008428:	200015d8 	.word	0x200015d8
 800842c:	200015dc 	.word	0x200015dc
 8008430:	20001638 	.word	0x20001638
 8008434:	20001640 	.word	0x20001640
 8008438:	20001628 	.word	0x20001628
 800843c:	20001150 	.word	0x20001150
 8008440:	2000114c 	.word	0x2000114c
 8008444:	20001630 	.word	0x20001630
 8008448:	20001634 	.word	0x20001634

0800844c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008452:	4b2c      	ldr	r3, [pc, #176]	@ (8008504 <vTaskSwitchContext+0xb8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800845a:	4b2b      	ldr	r3, [pc, #172]	@ (8008508 <vTaskSwitchContext+0xbc>)
 800845c:	2201      	movs	r2, #1
 800845e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008460:	e049      	b.n	80084f6 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8008462:	4b29      	ldr	r3, [pc, #164]	@ (8008508 <vTaskSwitchContext+0xbc>)
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008468:	4b28      	ldr	r3, [pc, #160]	@ (800850c <vTaskSwitchContext+0xc0>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	e013      	b.n	8008498 <vTaskSwitchContext+0x4c>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10d      	bne.n	8008492 <vTaskSwitchContext+0x46>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	b672      	cpsid	i
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	b662      	cpsie	i
 800848a:	607b      	str	r3, [r7, #4]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vTaskSwitchContext+0x42>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3b01      	subs	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	491d      	ldr	r1, [pc, #116]	@ (8008510 <vTaskSwitchContext+0xc4>)
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0e1      	beq.n	8008470 <vTaskSwitchContext+0x24>
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4a16      	ldr	r2, [pc, #88]	@ (8008510 <vTaskSwitchContext+0xc4>)
 80084b8:	4413      	add	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	605a      	str	r2, [r3, #4]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3308      	adds	r3, #8
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d104      	bne.n	80084dc <vTaskSwitchContext+0x90>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	605a      	str	r2, [r3, #4]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008514 <vTaskSwitchContext+0xc8>)
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	4a09      	ldr	r2, [pc, #36]	@ (800850c <vTaskSwitchContext+0xc0>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084ec:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <vTaskSwitchContext+0xc8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3354      	adds	r3, #84	@ 0x54
 80084f2:	4a09      	ldr	r2, [pc, #36]	@ (8008518 <vTaskSwitchContext+0xcc>)
 80084f4:	6013      	str	r3, [r2, #0]
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	20001648 	.word	0x20001648
 8008508:	20001634 	.word	0x20001634
 800850c:	20001628 	.word	0x20001628
 8008510:	20001150 	.word	0x20001150
 8008514:	2000114c 	.word	0x2000114c
 8008518:	20000020 	.word	0x20000020

0800851c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10d      	bne.n	8008548 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	b672      	cpsid	i
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	b662      	cpsie	i
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008548:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <vTaskPlaceOnEventList+0x4c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3318      	adds	r3, #24
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7fe faf0 	bl	8006b36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008556:	2101      	movs	r1, #1
 8008558:	6838      	ldr	r0, [r7, #0]
 800855a:	f000 fdaf 	bl	80090bc <prvAddCurrentTaskToDelayedList>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	2000114c 	.word	0x2000114c

0800856c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10d      	bne.n	800859a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	b672      	cpsid	i
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	b662      	cpsie	i
 8008592:	617b      	str	r3, [r7, #20]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800859a:	4b0a      	ldr	r3, [pc, #40]	@ (80085c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3318      	adds	r3, #24
 80085a0:	4619      	mov	r1, r3
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7fe faa3 	bl	8006aee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fd80 	bl	80090bc <prvAddCurrentTaskToDelayedList>
	}
 80085bc:	bf00      	nop
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	2000114c 	.word	0x2000114c

080085c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	b672      	cpsid	i
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	b662      	cpsie	i
 80085f2:	60fb      	str	r3, [r7, #12]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	3318      	adds	r3, #24
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fad2 	bl	8006ba8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008604:	4b1d      	ldr	r3, [pc, #116]	@ (800867c <xTaskRemoveFromEventList+0xb4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d11d      	bne.n	8008648 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3304      	adds	r3, #4
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fac9 	bl	8006ba8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861a:	4b19      	ldr	r3, [pc, #100]	@ (8008680 <xTaskRemoveFromEventList+0xb8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d903      	bls.n	800862a <xTaskRemoveFromEventList+0x62>
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008626:	4a16      	ldr	r2, [pc, #88]	@ (8008680 <xTaskRemoveFromEventList+0xb8>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4a13      	ldr	r2, [pc, #76]	@ (8008684 <xTaskRemoveFromEventList+0xbc>)
 8008638:	441a      	add	r2, r3
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe fa54 	bl	8006aee <vListInsertEnd>
 8008646:	e005      	b.n	8008654 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	3318      	adds	r3, #24
 800864c:	4619      	mov	r1, r3
 800864e:	480e      	ldr	r0, [pc, #56]	@ (8008688 <xTaskRemoveFromEventList+0xc0>)
 8008650:	f7fe fa4d 	bl	8006aee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008658:	4b0c      	ldr	r3, [pc, #48]	@ (800868c <xTaskRemoveFromEventList+0xc4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865e:	429a      	cmp	r2, r3
 8008660:	d905      	bls.n	800866e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008662:	2301      	movs	r3, #1
 8008664:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008666:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <xTaskRemoveFromEventList+0xc8>)
 8008668:	2201      	movs	r2, #1
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	e001      	b.n	8008672 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008672:	697b      	ldr	r3, [r7, #20]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20001648 	.word	0x20001648
 8008680:	20001628 	.word	0x20001628
 8008684:	20001150 	.word	0x20001150
 8008688:	200015e0 	.word	0x200015e0
 800868c:	2000114c 	.word	0x2000114c
 8008690:	20001634 	.word	0x20001634

08008694 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <vTaskInternalSetTimeOutState+0x24>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086a4:	4b05      	ldr	r3, [pc, #20]	@ (80086bc <vTaskInternalSetTimeOutState+0x28>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	20001638 	.word	0x20001638
 80086bc:	20001624 	.word	0x20001624

080086c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10d      	bne.n	80086ec <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	b672      	cpsid	i
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	b662      	cpsie	i
 80086e4:	613b      	str	r3, [r7, #16]
}
 80086e6:	bf00      	nop
 80086e8:	bf00      	nop
 80086ea:	e7fd      	b.n	80086e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10d      	bne.n	800870e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	b672      	cpsid	i
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	b662      	cpsie	i
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800870e:	f001 fa1b 	bl	8009b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008712:	4b1d      	ldr	r3, [pc, #116]	@ (8008788 <xTaskCheckForTimeOut+0xc8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d102      	bne.n	8008732 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800872c:	2300      	movs	r3, #0
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	e023      	b.n	800877a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b15      	ldr	r3, [pc, #84]	@ (800878c <xTaskCheckForTimeOut+0xcc>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d007      	beq.n	800874e <xTaskCheckForTimeOut+0x8e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	429a      	cmp	r2, r3
 8008746:	d302      	bcc.n	800874e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e015      	b.n	800877a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	429a      	cmp	r2, r3
 8008756:	d20b      	bcs.n	8008770 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	1ad2      	subs	r2, r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff ff95 	bl	8008694 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
 800876e:	e004      	b.n	800877a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800877a:	f001 fa1b 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 800877e:	69fb      	ldr	r3, [r7, #28]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3720      	adds	r7, #32
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20001624 	.word	0x20001624
 800878c:	20001638 	.word	0x20001638

08008790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008794:	4b03      	ldr	r3, [pc, #12]	@ (80087a4 <vTaskMissedYield+0x14>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]
}
 800879a:	bf00      	nop
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	20001634 	.word	0x20001634

080087a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087b0:	f000 f852 	bl	8008858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087b4:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <prvIdleTask+0x28>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d9f9      	bls.n	80087b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087bc:	4b05      	ldr	r3, [pc, #20]	@ (80087d4 <prvIdleTask+0x2c>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087cc:	e7f0      	b.n	80087b0 <prvIdleTask+0x8>
 80087ce:	bf00      	nop
 80087d0:	20001150 	.word	0x20001150
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	e00c      	b.n	80087fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4a12      	ldr	r2, [pc, #72]	@ (8008838 <prvInitialiseTaskLists+0x60>)
 80087f0:	4413      	add	r3, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe f94e 	bl	8006a94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3301      	adds	r3, #1
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b37      	cmp	r3, #55	@ 0x37
 8008802:	d9ef      	bls.n	80087e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008804:	480d      	ldr	r0, [pc, #52]	@ (800883c <prvInitialiseTaskLists+0x64>)
 8008806:	f7fe f945 	bl	8006a94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800880a:	480d      	ldr	r0, [pc, #52]	@ (8008840 <prvInitialiseTaskLists+0x68>)
 800880c:	f7fe f942 	bl	8006a94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008810:	480c      	ldr	r0, [pc, #48]	@ (8008844 <prvInitialiseTaskLists+0x6c>)
 8008812:	f7fe f93f 	bl	8006a94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008816:	480c      	ldr	r0, [pc, #48]	@ (8008848 <prvInitialiseTaskLists+0x70>)
 8008818:	f7fe f93c 	bl	8006a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800881c:	480b      	ldr	r0, [pc, #44]	@ (800884c <prvInitialiseTaskLists+0x74>)
 800881e:	f7fe f939 	bl	8006a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008822:	4b0b      	ldr	r3, [pc, #44]	@ (8008850 <prvInitialiseTaskLists+0x78>)
 8008824:	4a05      	ldr	r2, [pc, #20]	@ (800883c <prvInitialiseTaskLists+0x64>)
 8008826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008828:	4b0a      	ldr	r3, [pc, #40]	@ (8008854 <prvInitialiseTaskLists+0x7c>)
 800882a:	4a05      	ldr	r2, [pc, #20]	@ (8008840 <prvInitialiseTaskLists+0x68>)
 800882c:	601a      	str	r2, [r3, #0]
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20001150 	.word	0x20001150
 800883c:	200015b0 	.word	0x200015b0
 8008840:	200015c4 	.word	0x200015c4
 8008844:	200015e0 	.word	0x200015e0
 8008848:	200015f4 	.word	0x200015f4
 800884c:	2000160c 	.word	0x2000160c
 8008850:	200015d8 	.word	0x200015d8
 8008854:	200015dc 	.word	0x200015dc

08008858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800885e:	e019      	b.n	8008894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008860:	f001 f972 	bl	8009b48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008864:	4b10      	ldr	r3, [pc, #64]	@ (80088a8 <prvCheckTasksWaitingTermination+0x50>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe f999 	bl	8006ba8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008876:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <prvCheckTasksWaitingTermination+0x54>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3b01      	subs	r3, #1
 800887c:	4a0b      	ldr	r2, [pc, #44]	@ (80088ac <prvCheckTasksWaitingTermination+0x54>)
 800887e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008880:	4b0b      	ldr	r3, [pc, #44]	@ (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3b01      	subs	r3, #1
 8008886:	4a0a      	ldr	r2, [pc, #40]	@ (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800888a:	f001 f993 	bl	8009bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f810 	bl	80088b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008894:	4b06      	ldr	r3, [pc, #24]	@ (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e1      	bne.n	8008860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200015f4 	.word	0x200015f4
 80088ac:	20001620 	.word	0x20001620
 80088b0:	20001608 	.word	0x20001608

080088b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3354      	adds	r3, #84	@ 0x54
 80088c0:	4618      	mov	r0, r3
 80088c2:	f002 fbe3 	bl	800b08c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d108      	bne.n	80088e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 fb35 	bl	8009f44 <vPortFree>
				vPortFree( pxTCB );
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fb32 	bl	8009f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088e0:	e01b      	b.n	800891a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d103      	bne.n	80088f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fb29 	bl	8009f44 <vPortFree>
	}
 80088f2:	e012      	b.n	800891a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d00d      	beq.n	800891a <prvDeleteTCB+0x66>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	b672      	cpsid	i
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	b662      	cpsie	i
 8008912:	60fb      	str	r3, [r7, #12]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <prvDeleteTCB+0x62>
	}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892a:	4b0c      	ldr	r3, [pc, #48]	@ (800895c <prvResetNextTaskUnblockTime+0x38>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008934:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <prvResetNextTaskUnblockTime+0x3c>)
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800893c:	e008      	b.n	8008950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893e:	4b07      	ldr	r3, [pc, #28]	@ (800895c <prvResetNextTaskUnblockTime+0x38>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	4a04      	ldr	r2, [pc, #16]	@ (8008960 <prvResetNextTaskUnblockTime+0x3c>)
 800894e:	6013      	str	r3, [r2, #0]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	200015d8 	.word	0x200015d8
 8008960:	20001640 	.word	0x20001640

08008964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800896a:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <xTaskGetSchedulerState+0x34>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008972:	2301      	movs	r3, #1
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	e008      	b.n	800898a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008978:	4b08      	ldr	r3, [pc, #32]	@ (800899c <xTaskGetSchedulerState+0x38>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008980:	2302      	movs	r3, #2
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	e001      	b.n	800898a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008986:	2300      	movs	r3, #0
 8008988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800898a:	687b      	ldr	r3, [r7, #4]
	}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	2000162c 	.word	0x2000162c
 800899c:	20001648 	.word	0x20001648

080089a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d051      	beq.n	8008a5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008a64 <xTaskPriorityInherit+0xc4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d241      	bcs.n	8008a48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	db06      	blt.n	80089da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089cc:	4b25      	ldr	r3, [pc, #148]	@ (8008a64 <xTaskPriorityInherit+0xc4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6959      	ldr	r1, [r3, #20]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008a68 <xTaskPriorityInherit+0xc8>)
 80089ec:	4413      	add	r3, r2
 80089ee:	4299      	cmp	r1, r3
 80089f0:	d122      	bne.n	8008a38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe f8d6 	bl	8006ba8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089fc:	4b19      	ldr	r3, [pc, #100]	@ (8008a64 <xTaskPriorityInherit+0xc4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0a:	4b18      	ldr	r3, [pc, #96]	@ (8008a6c <xTaskPriorityInherit+0xcc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d903      	bls.n	8008a1a <xTaskPriorityInherit+0x7a>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <xTaskPriorityInherit+0xcc>)
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4a10      	ldr	r2, [pc, #64]	@ (8008a68 <xTaskPriorityInherit+0xc8>)
 8008a28:	441a      	add	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fe f85c 	bl	8006aee <vListInsertEnd>
 8008a36:	e004      	b.n	8008a42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a38:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <xTaskPriorityInherit+0xc4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	e008      	b.n	8008a5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <xTaskPriorityInherit+0xc4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d201      	bcs.n	8008a5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	2000114c 	.word	0x2000114c
 8008a68:	20001150 	.word	0x20001150
 8008a6c:	20001628 	.word	0x20001628

08008a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d05c      	beq.n	8008b40 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a86:	4b31      	ldr	r3, [pc, #196]	@ (8008b4c <xTaskPriorityDisinherit+0xdc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d00d      	beq.n	8008aac <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	b672      	cpsid	i
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	b662      	cpsie	i
 8008aa4:	60fb      	str	r3, [r7, #12]
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10d      	bne.n	8008ad0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	b672      	cpsid	i
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	b662      	cpsie	i
 8008ac8:	60bb      	str	r3, [r7, #8]
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad4:	1e5a      	subs	r2, r3, #1
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d02c      	beq.n	8008b40 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d128      	bne.n	8008b40 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe f858 	bl	8006ba8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b10:	4b0f      	ldr	r3, [pc, #60]	@ (8008b50 <xTaskPriorityDisinherit+0xe0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d903      	bls.n	8008b20 <xTaskPriorityDisinherit+0xb0>
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b50 <xTaskPriorityDisinherit+0xe0>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4a09      	ldr	r2, [pc, #36]	@ (8008b54 <xTaskPriorityDisinherit+0xe4>)
 8008b2e:	441a      	add	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7fd ffd9 	bl	8006aee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b40:	697b      	ldr	r3, [r7, #20]
	}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	2000114c 	.word	0x2000114c
 8008b50:	20001628 	.word	0x20001628
 8008b54:	20001150 	.word	0x20001150

08008b58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b66:	2301      	movs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d070      	beq.n	8008c52 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10d      	bne.n	8008b94 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	b672      	cpsid	i
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	b662      	cpsie	i
 8008b8c:	60fb      	str	r3, [r7, #12]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d902      	bls.n	8008ba4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	61fb      	str	r3, [r7, #28]
 8008ba2:	e002      	b.n	8008baa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ba8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d04e      	beq.n	8008c52 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d149      	bne.n	8008c52 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008bbe:	4b27      	ldr	r3, [pc, #156]	@ (8008c5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d10d      	bne.n	8008be4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	b672      	cpsid	i
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	b662      	cpsie	i
 8008bdc:	60bb      	str	r3, [r7, #8]
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	e7fd      	b.n	8008be0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	db04      	blt.n	8008c02 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	6959      	ldr	r1, [r3, #20]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4a13      	ldr	r2, [pc, #76]	@ (8008c60 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008c12:	4413      	add	r3, r2
 8008c14:	4299      	cmp	r1, r3
 8008c16:	d11c      	bne.n	8008c52 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fd ffc3 	bl	8006ba8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	4b0f      	ldr	r3, [pc, #60]	@ (8008c64 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d903      	bls.n	8008c36 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	4a0c      	ldr	r2, [pc, #48]	@ (8008c64 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4a07      	ldr	r2, [pc, #28]	@ (8008c60 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008c44:	441a      	add	r2, r3
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f7fd ff4e 	bl	8006aee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c52:	bf00      	nop
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	2000114c 	.word	0x2000114c
 8008c60:	20001150 	.word	0x20001150
 8008c64:	20001628 	.word	0x20001628

08008c68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c6c:	4b07      	ldr	r3, [pc, #28]	@ (8008c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c74:	4b05      	ldr	r3, [pc, #20]	@ (8008c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	@ (8008c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c80:	681b      	ldr	r3, [r3, #0]
	}
 8008c82:	4618      	mov	r0, r3
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	2000114c 	.word	0x2000114c

08008c90 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008c9e:	f000 ff53 	bl	8009b48 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008ca2:	4b29      	ldr	r3, [pc, #164]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d01c      	beq.n	8008cea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008cb0:	4b25      	ldr	r3, [pc, #148]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	43d2      	mvns	r2, r2
 8008cbc:	400a      	ands	r2, r1
 8008cbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008cc2:	4b21      	ldr	r3, [pc, #132]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00b      	beq.n	8008cea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	6838      	ldr	r0, [r7, #0]
 8008cd6:	f000 f9f1 	bl	80090bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008cda:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <xTaskNotifyWait+0xbc>)
 8008cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008cea:	f000 ff63 	bl	8009bb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008cee:	f000 ff2b 	bl	8009b48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008cf8:	4b13      	ldr	r3, [pc, #76]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008d04:	4b10      	ldr	r3, [pc, #64]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d002      	beq.n	8008d18 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e00a      	b.n	8008d2e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008d18:	4b0b      	ldr	r3, [pc, #44]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	43d2      	mvns	r2, r2
 8008d24:	400a      	ands	r2, r1
 8008d26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d2e:	4b06      	ldr	r3, [pc, #24]	@ (8008d48 <xTaskNotifyWait+0xb8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8008d38:	f000 ff3c 	bl	8009bb4 <vPortExitCritical>

		return xReturn;
 8008d3c:	697b      	ldr	r3, [r7, #20]
	}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	2000114c 	.word	0x2000114c
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	@ 0x28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008d60:	2301      	movs	r3, #1
 8008d62:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <xTaskGenericNotify+0x36>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6e:	b672      	cpsid	i
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	b662      	cpsie	i
 8008d7e:	61bb      	str	r3, [r7, #24]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008d8a:	f000 fedd 	bl	8009b48 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008da4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d82e      	bhi.n	8008e12 <xTaskGenericNotify+0xc2>
 8008db4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dbc <xTaskGenericNotify+0x6c>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008e3b 	.word	0x08008e3b
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008de3 	.word	0x08008de3
 8008dc8:	08008df3 	.word	0x08008df3
 8008dcc:	08008dfd 	.word	0x08008dfd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008de0:	e02e      	b.n	8008e40 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008df0:	e026      	b.n	8008e40 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008dfa:	e021      	b.n	8008e40 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008dfc:	7ffb      	ldrb	r3, [r7, #31]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d004      	beq.n	8008e0c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008e0a:	e019      	b.n	8008e40 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008e10:	e016      	b.n	8008e40 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d00f      	beq.n	8008e3e <xTaskGenericNotify+0xee>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	b672      	cpsid	i
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	b662      	cpsie	i
 8008e32:	617b      	str	r3, [r7, #20]
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	e7fd      	b.n	8008e36 <xTaskGenericNotify+0xe6>
					break;
 8008e3a:	bf00      	nop
 8008e3c:	e000      	b.n	8008e40 <xTaskGenericNotify+0xf0>

					break;
 8008e3e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008e40:	7ffb      	ldrb	r3, [r7, #31]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d13d      	bne.n	8008ec2 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd feac 	bl	8006ba8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e54:	4b1e      	ldr	r3, [pc, #120]	@ (8008ed0 <xTaskGenericNotify+0x180>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d903      	bls.n	8008e64 <xTaskGenericNotify+0x114>
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed0 <xTaskGenericNotify+0x180>)
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4a18      	ldr	r2, [pc, #96]	@ (8008ed4 <xTaskGenericNotify+0x184>)
 8008e72:	441a      	add	r2, r3
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fd fe37 	bl	8006aee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00d      	beq.n	8008ea4 <xTaskGenericNotify+0x154>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8c:	b672      	cpsid	i
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	b662      	cpsie	i
 8008e9c:	613b      	str	r3, [r7, #16]
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	e7fd      	b.n	8008ea0 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <xTaskGenericNotify+0x188>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d907      	bls.n	8008ec2 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008edc <xTaskGenericNotify+0x18c>)
 8008eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008ec2:	f000 fe77 	bl	8009bb4 <vPortExitCritical>

		return xReturn;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3728      	adds	r7, #40	@ 0x28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20001628 	.word	0x20001628
 8008ed4:	20001150 	.word	0x20001150
 8008ed8:	2000114c 	.word	0x2000114c
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08e      	sub	sp, #56	@ 0x38
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	4613      	mov	r3, r2
 8008eee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10d      	bne.n	8008f16 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efe:	b672      	cpsid	i
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	b662      	cpsie	i
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f16:	f000 ff01 	bl	8009d1c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	b672      	cpsid	i
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	b662      	cpsie	i
 8008f36:	623a      	str	r2, [r7, #32]
 8008f38:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008f3a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f46:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008f54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d82e      	bhi.n	8008fc4 <xTaskGenericNotifyFromISR+0xe4>
 8008f66:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <xTaskGenericNotifyFromISR+0x8c>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008fed 	.word	0x08008fed
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008f93 	.word	0x08008f93
 8008f78:	08008fa3 	.word	0x08008fa3
 8008f7c:	08008fad 	.word	0x08008fad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008f90:	e02f      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008fa0:	e027      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008faa:	e022      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008fac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d004      	beq.n	8008fbe <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008fbc:	e019      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008fc2:	e016      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fce:	d00f      	beq.n	8008ff0 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd4:	b672      	cpsid	i
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	b662      	cpsie	i
 8008fe4:	61bb      	str	r3, [r7, #24]
}
 8008fe6:	bf00      	nop
 8008fe8:	bf00      	nop
 8008fea:	e7fd      	b.n	8008fe8 <xTaskGenericNotifyFromISR+0x108>
					break;
 8008fec:	bf00      	nop
 8008fee:	e000      	b.n	8008ff2 <xTaskGenericNotifyFromISR+0x112>
					break;
 8008ff0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d149      	bne.n	800908e <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	b672      	cpsid	i
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	b662      	cpsie	i
 8009016:	617b      	str	r3, [r7, #20]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901e:	4b21      	ldr	r3, [pc, #132]	@ (80090a4 <xTaskGenericNotifyFromISR+0x1c4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d11d      	bne.n	8009062 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	3304      	adds	r3, #4
 800902a:	4618      	mov	r0, r3
 800902c:	f7fd fdbc 	bl	8006ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009034:	4b1c      	ldr	r3, [pc, #112]	@ (80090a8 <xTaskGenericNotifyFromISR+0x1c8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d903      	bls.n	8009044 <xTaskGenericNotifyFromISR+0x164>
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	4a19      	ldr	r2, [pc, #100]	@ (80090a8 <xTaskGenericNotifyFromISR+0x1c8>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4a16      	ldr	r2, [pc, #88]	@ (80090ac <xTaskGenericNotifyFromISR+0x1cc>)
 8009052:	441a      	add	r2, r3
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	3304      	adds	r3, #4
 8009058:	4619      	mov	r1, r3
 800905a:	4610      	mov	r0, r2
 800905c:	f7fd fd47 	bl	8006aee <vListInsertEnd>
 8009060:	e005      	b.n	800906e <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	3318      	adds	r3, #24
 8009066:	4619      	mov	r1, r3
 8009068:	4811      	ldr	r0, [pc, #68]	@ (80090b0 <xTaskGenericNotifyFromISR+0x1d0>)
 800906a:	f7fd fd40 	bl	8006aee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009072:	4b10      	ldr	r3, [pc, #64]	@ (80090b4 <xTaskGenericNotifyFromISR+0x1d4>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	429a      	cmp	r2, r3
 800907a:	d908      	bls.n	800908e <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800907c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009084:	2201      	movs	r2, #1
 8009086:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009088:	4b0b      	ldr	r3, [pc, #44]	@ (80090b8 <xTaskGenericNotifyFromISR+0x1d8>)
 800908a:	2201      	movs	r2, #1
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009090:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f383 8811 	msr	BASEPRI, r3
}
 8009098:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800909a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800909c:	4618      	mov	r0, r3
 800909e:	3738      	adds	r7, #56	@ 0x38
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20001648 	.word	0x20001648
 80090a8:	20001628 	.word	0x20001628
 80090ac:	20001150 	.word	0x20001150
 80090b0:	200015e0 	.word	0x200015e0
 80090b4:	2000114c 	.word	0x2000114c
 80090b8:	20001634 	.word	0x20001634

080090bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b21      	ldr	r3, [pc, #132]	@ (800914c <prvAddCurrentTaskToDelayedList+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b20      	ldr	r3, [pc, #128]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fd fd68 	bl	8006ba8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d10a      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4819      	ldr	r0, [pc, #100]	@ (8009154 <prvAddCurrentTaskToDelayedList+0x98>)
 80090f0:	f7fd fcfd 	bl	8006aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f4:	e026      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090fe:	4b14      	ldr	r3, [pc, #80]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	429a      	cmp	r2, r3
 800910c:	d209      	bcs.n	8009122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910e:	4b12      	ldr	r3, [pc, #72]	@ (8009158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b0f      	ldr	r3, [pc, #60]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fd fd0b 	bl	8006b36 <vListInsert>
}
 8009120:	e010      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009122:	4b0e      	ldr	r3, [pc, #56]	@ (800915c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b0a      	ldr	r3, [pc, #40]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fd fd01 	bl	8006b36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d202      	bcs.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800913e:	4a08      	ldr	r2, [pc, #32]	@ (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6013      	str	r3, [r2, #0]
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20001624 	.word	0x20001624
 8009150:	2000114c 	.word	0x2000114c
 8009154:	2000160c 	.word	0x2000160c
 8009158:	200015dc 	.word	0x200015dc
 800915c:	200015d8 	.word	0x200015d8
 8009160:	20001640 	.word	0x20001640

08009164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	@ 0x28
 8009168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800916e:	f000 fb81 	bl	8009874 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009172:	4b1e      	ldr	r3, [pc, #120]	@ (80091ec <xTimerCreateTimerTask+0x88>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d021      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009182:	1d3a      	adds	r2, r7, #4
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd fc67 	bl	8006a60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	2302      	movs	r3, #2
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	460a      	mov	r2, r1
 80091a4:	4912      	ldr	r1, [pc, #72]	@ (80091f0 <xTimerCreateTimerTask+0x8c>)
 80091a6:	4813      	ldr	r0, [pc, #76]	@ (80091f4 <xTimerCreateTimerTask+0x90>)
 80091a8:	f7fe fc2a 	bl	8007a00 <xTaskCreateStatic>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4a12      	ldr	r2, [pc, #72]	@ (80091f8 <xTimerCreateTimerTask+0x94>)
 80091b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091b2:	4b11      	ldr	r3, [pc, #68]	@ (80091f8 <xTimerCreateTimerTask+0x94>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091ba:	2301      	movs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10d      	bne.n	80091e0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c8:	b672      	cpsid	i
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	b662      	cpsie	i
 80091d8:	613b      	str	r3, [r7, #16]
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80091e0:	697b      	ldr	r3, [r7, #20]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	2000167c 	.word	0x2000167c
 80091f0:	0800d864 	.word	0x0800d864
 80091f4:	080093fd 	.word	0x080093fd
 80091f8:	20001680 	.word	0x20001680

080091fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800920a:	202c      	movs	r0, #44	@ 0x2c
 800920c:	f000 fdcc 	bl	8009da8 <pvPortMalloc>
 8009210:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00d      	beq.n	8009234 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 f805 	bl	800923e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009234:	697b      	ldr	r3, [r7, #20]
	}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b086      	sub	sp, #24
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10d      	bne.n	800926e <prvInitialiseNewTimer+0x30>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009256:	b672      	cpsid	i
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	b662      	cpsie	i
 8009266:	617b      	str	r3, [r7, #20]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01e      	beq.n	80092b2 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009274:	f000 fafe 	bl	8009874 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	6a3a      	ldr	r2, [r7, #32]
 800928e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009292:	3304      	adds	r3, #4
 8009294:	4618      	mov	r0, r3
 8009296:	f7fd fc1d 	bl	8006ad4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d008      	beq.n	80092b2 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092a6:	f043 0304 	orr.w	r3, r3, #4
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80092b2:	bf00      	nop
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08a      	sub	sp, #40	@ 0x28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10d      	bne.n	80092f0 <xTimerGenericCommand+0x34>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d8:	b672      	cpsid	i
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	b662      	cpsie	i
 80092e8:	623b      	str	r3, [r7, #32]
}
 80092ea:	bf00      	nop
 80092ec:	bf00      	nop
 80092ee:	e7fd      	b.n	80092ec <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092f0:	4b19      	ldr	r3, [pc, #100]	@ (8009358 <xTimerGenericCommand+0x9c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d02a      	beq.n	800934e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b05      	cmp	r3, #5
 8009308:	dc18      	bgt.n	800933c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800930a:	f7ff fb2b 	bl	8008964 <xTaskGetSchedulerState>
 800930e:	4603      	mov	r3, r0
 8009310:	2b02      	cmp	r3, #2
 8009312:	d109      	bne.n	8009328 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009314:	4b10      	ldr	r3, [pc, #64]	@ (8009358 <xTimerGenericCommand+0x9c>)
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	f107 0110 	add.w	r1, r7, #16
 800931c:	2300      	movs	r3, #0
 800931e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009320:	f7fd fdf8 	bl	8006f14 <xQueueGenericSend>
 8009324:	6278      	str	r0, [r7, #36]	@ 0x24
 8009326:	e012      	b.n	800934e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009328:	4b0b      	ldr	r3, [pc, #44]	@ (8009358 <xTimerGenericCommand+0x9c>)
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	f107 0110 	add.w	r1, r7, #16
 8009330:	2300      	movs	r3, #0
 8009332:	2200      	movs	r2, #0
 8009334:	f7fd fdee 	bl	8006f14 <xQueueGenericSend>
 8009338:	6278      	str	r0, [r7, #36]	@ 0x24
 800933a:	e008      	b.n	800934e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800933c:	4b06      	ldr	r3, [pc, #24]	@ (8009358 <xTimerGenericCommand+0x9c>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f107 0110 	add.w	r1, r7, #16
 8009344:	2300      	movs	r3, #0
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	f7fd feee 	bl	8007128 <xQueueGenericSendFromISR>
 800934c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009350:	4618      	mov	r0, r3
 8009352:	3728      	adds	r7, #40	@ 0x28
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	2000167c 	.word	0x2000167c

0800935c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af02      	add	r7, sp, #8
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009366:	4b24      	ldr	r3, [pc, #144]	@ (80093f8 <prvProcessExpiredTimer+0x9c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	3304      	adds	r3, #4
 8009374:	4618      	mov	r0, r3
 8009376:	f7fd fc17 	bl	8006ba8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d025      	beq.n	80093d4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	18d1      	adds	r1, r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	6978      	ldr	r0, [r7, #20]
 8009396:	f000 f8d7 	bl	8009548 <prvInsertTimerInActiveList>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d022      	beq.n	80093e6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a0:	2300      	movs	r3, #0
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	2300      	movs	r3, #0
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	2100      	movs	r1, #0
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f7ff ff86 	bl	80092bc <xTimerGenericCommand>
 80093b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d116      	bne.n	80093e6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	60fb      	str	r3, [r7, #12]
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093da:	f023 0301 	bic.w	r3, r3, #1
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	6978      	ldr	r0, [r7, #20]
 80093ec:	4798      	blx	r3
}
 80093ee:	bf00      	nop
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20001674 	.word	0x20001674

080093fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	4618      	mov	r0, r3
 800940a:	f000 f859 	bl	80094c0 <prvGetNextExpireTime>
 800940e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	4619      	mov	r1, r3
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 f805 	bl	8009424 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800941a:	f000 f8d7 	bl	80095cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800941e:	bf00      	nop
 8009420:	e7f0      	b.n	8009404 <prvTimerTask+0x8>
	...

08009424 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800942e:	f7fe fe81 	bl	8008134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009432:	f107 0308 	add.w	r3, r7, #8
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f866 	bl	8009508 <prvSampleTimeNow>
 800943c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d130      	bne.n	80094a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <prvProcessTimerOrBlockTask+0x3c>
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	429a      	cmp	r2, r3
 8009450:	d806      	bhi.n	8009460 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009452:	f7fe fe7d 	bl	8008150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ff7f 	bl	800935c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800945e:	e024      	b.n	80094aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d008      	beq.n	8009478 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009466:	4b13      	ldr	r3, [pc, #76]	@ (80094b4 <prvProcessTimerOrBlockTask+0x90>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <prvProcessTimerOrBlockTask+0x50>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <prvProcessTimerOrBlockTask+0x52>
 8009474:	2300      	movs	r3, #0
 8009476:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009478:	4b0f      	ldr	r3, [pc, #60]	@ (80094b8 <prvProcessTimerOrBlockTask+0x94>)
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4619      	mov	r1, r3
 8009486:	f7fe fa87 	bl	8007998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800948a:	f7fe fe61 	bl	8008150 <xTaskResumeAll>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009494:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <prvProcessTimerOrBlockTask+0x98>)
 8009496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	f3bf 8f6f 	isb	sy
}
 80094a4:	e001      	b.n	80094aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094a6:	f7fe fe53 	bl	8008150 <xTaskResumeAll>
}
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20001678 	.word	0x20001678
 80094b8:	2000167c 	.word	0x2000167c
 80094bc:	e000ed04 	.word	0xe000ed04

080094c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009504 <prvGetNextExpireTime+0x44>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <prvGetNextExpireTime+0x16>
 80094d2:	2201      	movs	r2, #1
 80094d4:	e000      	b.n	80094d8 <prvGetNextExpireTime+0x18>
 80094d6:	2200      	movs	r2, #0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d105      	bne.n	80094f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094e4:	4b07      	ldr	r3, [pc, #28]	@ (8009504 <prvGetNextExpireTime+0x44>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	e001      	b.n	80094f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094f4:	68fb      	ldr	r3, [r7, #12]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20001674 	.word	0x20001674

08009508 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009510:	f7fe febe 	bl	8008290 <xTaskGetTickCount>
 8009514:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009516:	4b0b      	ldr	r3, [pc, #44]	@ (8009544 <prvSampleTimeNow+0x3c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	429a      	cmp	r2, r3
 800951e:	d205      	bcs.n	800952c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009520:	f000 f940 	bl	80097a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	e002      	b.n	8009532 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009532:	4a04      	ldr	r2, [pc, #16]	@ (8009544 <prvSampleTimeNow+0x3c>)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009538:	68fb      	ldr	r3, [r7, #12]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20001684 	.word	0x20001684

08009548 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	429a      	cmp	r2, r3
 800956c:	d812      	bhi.n	8009594 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	1ad2      	subs	r2, r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	429a      	cmp	r2, r3
 800957a:	d302      	bcc.n	8009582 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e01b      	b.n	80095ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009582:	4b10      	ldr	r3, [pc, #64]	@ (80095c4 <prvInsertTimerInActiveList+0x7c>)
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f7fd fad2 	bl	8006b36 <vListInsert>
 8009592:	e012      	b.n	80095ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d206      	bcs.n	80095aa <prvInsertTimerInActiveList+0x62>
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d302      	bcc.n	80095aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095a4:	2301      	movs	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e007      	b.n	80095ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095aa:	4b07      	ldr	r3, [pc, #28]	@ (80095c8 <prvInsertTimerInActiveList+0x80>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f7fd fabe 	bl	8006b36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095ba:	697b      	ldr	r3, [r7, #20]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20001678 	.word	0x20001678
 80095c8:	20001674 	.word	0x20001674

080095cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08e      	sub	sp, #56	@ 0x38
 80095d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095d2:	e0d4      	b.n	800977e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	da1b      	bge.n	8009612 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	3304      	adds	r3, #4
 80095de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10d      	bne.n	8009602 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	b672      	cpsid	i
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	b662      	cpsie	i
 80095fa:	61fb      	str	r3, [r7, #28]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009608:	6850      	ldr	r0, [r2, #4]
 800960a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800960c:	6892      	ldr	r2, [r2, #8]
 800960e:	4611      	mov	r1, r2
 8009610:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f2c0 80b2 	blt.w	800977e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	3304      	adds	r3, #4
 800962a:	4618      	mov	r0, r3
 800962c:	f7fd fabc 	bl	8006ba8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009630:	463b      	mov	r3, r7
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff ff68 	bl	8009508 <prvSampleTimeNow>
 8009638:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b09      	cmp	r3, #9
 800963e:	f200 809b 	bhi.w	8009778 <prvProcessReceivedCommands+0x1ac>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <prvProcessReceivedCommands+0x7c>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009671 	.word	0x08009671
 800964c:	08009671 	.word	0x08009671
 8009650:	08009671 	.word	0x08009671
 8009654:	080096eb 	.word	0x080096eb
 8009658:	080096ff 	.word	0x080096ff
 800965c:	0800974f 	.word	0x0800974f
 8009660:	08009671 	.word	0x08009671
 8009664:	08009671 	.word	0x08009671
 8009668:	080096eb 	.word	0x080096eb
 800966c:	080096ff 	.word	0x080096ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	b2da      	uxtb	r2, r3
 800967c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	18d1      	adds	r1, r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800968e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009690:	f7ff ff5a 	bl	8009548 <prvInsertTimerInActiveList>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d070      	beq.n	800977c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d065      	beq.n	800977c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	441a      	add	r2, r3
 80096b8:	2300      	movs	r3, #0
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	2300      	movs	r3, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096c2:	f7ff fdfb 	bl	80092bc <xTimerGenericCommand>
 80096c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d156      	bne.n	800977c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	b672      	cpsid	i
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	b662      	cpsie	i
 80096e2:	61bb      	str	r3, [r7, #24]
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096fc:	e03f      	b.n	800977e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009704:	f043 0301 	orr.w	r3, r3, #1
 8009708:	b2da      	uxtb	r2, r3
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009714:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10d      	bne.n	800973a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	b672      	cpsid	i
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	b662      	cpsie	i
 8009732:	617b      	str	r3, [r7, #20]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800973a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	18d1      	adds	r1, r2, r3
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009748:	f7ff fefe 	bl	8009548 <prvInsertTimerInActiveList>
					break;
 800974c:	e017      	b.n	800977e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800974e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d103      	bne.n	8009764 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800975c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800975e:	f000 fbf1 	bl	8009f44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009762:	e00c      	b.n	800977e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009776:	e002      	b.n	800977e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009778:	bf00      	nop
 800977a:	e000      	b.n	800977e <prvProcessReceivedCommands+0x1b2>
					break;
 800977c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800977e:	4b08      	ldr	r3, [pc, #32]	@ (80097a0 <prvProcessReceivedCommands+0x1d4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	1d39      	adds	r1, r7, #4
 8009784:	2200      	movs	r2, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd fd72 	bl	8007270 <xQueueReceive>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	f47f af20 	bne.w	80095d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	3730      	adds	r7, #48	@ 0x30
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000167c 	.word	0x2000167c

080097a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097aa:	e04b      	b.n	8009844 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097ac:	4b2f      	ldr	r3, [pc, #188]	@ (800986c <prvSwitchTimerLists+0xc8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b6:	4b2d      	ldr	r3, [pc, #180]	@ (800986c <prvSwitchTimerLists+0xc8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fd f9ef 	bl	8006ba8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d031      	beq.n	8009844 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	4413      	add	r3, r2
 80097e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d90e      	bls.n	8009810 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097fe:	4b1b      	ldr	r3, [pc, #108]	@ (800986c <prvSwitchTimerLists+0xc8>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3304      	adds	r3, #4
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7fd f994 	bl	8006b36 <vListInsert>
 800980e:	e019      	b.n	8009844 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	2100      	movs	r1, #0
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff fd4e 	bl	80092bc <xTimerGenericCommand>
 8009820:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10d      	bne.n	8009844 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982c:	b672      	cpsid	i
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	b662      	cpsie	i
 800983c:	603b      	str	r3, [r7, #0]
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009844:	4b09      	ldr	r3, [pc, #36]	@ (800986c <prvSwitchTimerLists+0xc8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1ae      	bne.n	80097ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800984e:	4b07      	ldr	r3, [pc, #28]	@ (800986c <prvSwitchTimerLists+0xc8>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009854:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <prvSwitchTimerLists+0xcc>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a04      	ldr	r2, [pc, #16]	@ (800986c <prvSwitchTimerLists+0xc8>)
 800985a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800985c:	4a04      	ldr	r2, [pc, #16]	@ (8009870 <prvSwitchTimerLists+0xcc>)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	6013      	str	r3, [r2, #0]
}
 8009862:	bf00      	nop
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20001674 	.word	0x20001674
 8009870:	20001678 	.word	0x20001678

08009874 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800987a:	f000 f965 	bl	8009b48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800987e:	4b15      	ldr	r3, [pc, #84]	@ (80098d4 <prvCheckForValidListAndQueue+0x60>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d120      	bne.n	80098c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009886:	4814      	ldr	r0, [pc, #80]	@ (80098d8 <prvCheckForValidListAndQueue+0x64>)
 8009888:	f7fd f904 	bl	8006a94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800988c:	4813      	ldr	r0, [pc, #76]	@ (80098dc <prvCheckForValidListAndQueue+0x68>)
 800988e:	f7fd f901 	bl	8006a94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009892:	4b13      	ldr	r3, [pc, #76]	@ (80098e0 <prvCheckForValidListAndQueue+0x6c>)
 8009894:	4a10      	ldr	r2, [pc, #64]	@ (80098d8 <prvCheckForValidListAndQueue+0x64>)
 8009896:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009898:	4b12      	ldr	r3, [pc, #72]	@ (80098e4 <prvCheckForValidListAndQueue+0x70>)
 800989a:	4a10      	ldr	r2, [pc, #64]	@ (80098dc <prvCheckForValidListAndQueue+0x68>)
 800989c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800989e:	2300      	movs	r3, #0
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	4b11      	ldr	r3, [pc, #68]	@ (80098e8 <prvCheckForValidListAndQueue+0x74>)
 80098a4:	4a11      	ldr	r2, [pc, #68]	@ (80098ec <prvCheckForValidListAndQueue+0x78>)
 80098a6:	2110      	movs	r1, #16
 80098a8:	200a      	movs	r0, #10
 80098aa:	f7fd fa13 	bl	8006cd4 <xQueueGenericCreateStatic>
 80098ae:	4603      	mov	r3, r0
 80098b0:	4a08      	ldr	r2, [pc, #32]	@ (80098d4 <prvCheckForValidListAndQueue+0x60>)
 80098b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098b4:	4b07      	ldr	r3, [pc, #28]	@ (80098d4 <prvCheckForValidListAndQueue+0x60>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098bc:	4b05      	ldr	r3, [pc, #20]	@ (80098d4 <prvCheckForValidListAndQueue+0x60>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	490b      	ldr	r1, [pc, #44]	@ (80098f0 <prvCheckForValidListAndQueue+0x7c>)
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe f83e 	bl	8007944 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098c8:	f000 f974 	bl	8009bb4 <vPortExitCritical>
}
 80098cc:	bf00      	nop
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	2000167c 	.word	0x2000167c
 80098d8:	2000164c 	.word	0x2000164c
 80098dc:	20001660 	.word	0x20001660
 80098e0:	20001674 	.word	0x20001674
 80098e4:	20001678 	.word	0x20001678
 80098e8:	20001728 	.word	0x20001728
 80098ec:	20001688 	.word	0x20001688
 80098f0:	0800d86c 	.word	0x0800d86c

080098f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3b04      	subs	r3, #4
 8009904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800990c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b04      	subs	r3, #4
 8009912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f023 0201 	bic.w	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b04      	subs	r3, #4
 8009922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009924:	4a0c      	ldr	r2, [pc, #48]	@ (8009958 <pxPortInitialiseStack+0x64>)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b14      	subs	r3, #20
 800992e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b04      	subs	r3, #4
 800993a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f06f 0202 	mvn.w	r2, #2
 8009942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3b20      	subs	r3, #32
 8009948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800994a:	68fb      	ldr	r3, [r7, #12]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	0800995d 	.word	0x0800995d

0800995c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009966:	4b15      	ldr	r3, [pc, #84]	@ (80099bc <prvTaskExitError+0x60>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996e:	d00d      	beq.n	800998c <prvTaskExitError+0x30>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009974:	b672      	cpsid	i
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	b662      	cpsie	i
 8009984:	60fb      	str	r3, [r7, #12]
}
 8009986:	bf00      	nop
 8009988:	bf00      	nop
 800998a:	e7fd      	b.n	8009988 <prvTaskExitError+0x2c>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009990:	b672      	cpsid	i
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	b662      	cpsie	i
 80099a0:	60bb      	str	r3, [r7, #8]
}
 80099a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099a4:	bf00      	nop
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0fc      	beq.n	80099a6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20000010 	.word	0x20000010

080099c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099c0:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <pxCurrentTCBConst2>)
 80099c2:	6819      	ldr	r1, [r3, #0]
 80099c4:	6808      	ldr	r0, [r1, #0]
 80099c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	f380 8809 	msr	PSP, r0
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8811 	msr	BASEPRI, r0
 80099da:	4770      	bx	lr
 80099dc:	f3af 8000 	nop.w

080099e0 <pxCurrentTCBConst2>:
 80099e0:	2000114c 	.word	0x2000114c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop

080099e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099e8:	4808      	ldr	r0, [pc, #32]	@ (8009a0c <prvPortStartFirstTask+0x24>)
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	6800      	ldr	r0, [r0, #0]
 80099ee:	f380 8808 	msr	MSP, r0
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8814 	msr	CONTROL, r0
 80099fa:	b662      	cpsie	i
 80099fc:	b661      	cpsie	f
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	df00      	svc	0
 8009a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a0a:	bf00      	nop
 8009a0c:	e000ed08 	.word	0xe000ed08

08009a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a16:	4b37      	ldr	r3, [pc, #220]	@ (8009af4 <xPortStartScheduler+0xe4>)
 8009a18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	22ff      	movs	r2, #255	@ 0xff
 8009a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009af8 <xPortStartScheduler+0xe8>)
 8009a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a44:	e009      	b.n	8009a5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a46:	4b2d      	ldr	r3, [pc, #180]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a62:	2b80      	cmp	r3, #128	@ 0x80
 8009a64:	d0ef      	beq.n	8009a46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a66:	4b25      	ldr	r3, [pc, #148]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f1c3 0307 	rsb	r3, r3, #7
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d00d      	beq.n	8009a8e <xPortStartScheduler+0x7e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	b672      	cpsid	i
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	b662      	cpsie	i
 8009a86:	60bb      	str	r3, [r7, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	4a19      	ldr	r2, [pc, #100]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a98:	4b18      	ldr	r3, [pc, #96]	@ (8009afc <xPortStartScheduler+0xec>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009aa0:	4a16      	ldr	r2, [pc, #88]	@ (8009afc <xPortStartScheduler+0xec>)
 8009aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009aac:	4b14      	ldr	r3, [pc, #80]	@ (8009b00 <xPortStartScheduler+0xf0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a13      	ldr	r2, [pc, #76]	@ (8009b00 <xPortStartScheduler+0xf0>)
 8009ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ab8:	4b11      	ldr	r3, [pc, #68]	@ (8009b00 <xPortStartScheduler+0xf0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a10      	ldr	r2, [pc, #64]	@ (8009b00 <xPortStartScheduler+0xf0>)
 8009abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ac4:	f000 f8fc 	bl	8009cc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b04 <xPortStartScheduler+0xf4>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ace:	f000 f91b 	bl	8009d08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <xPortStartScheduler+0xf8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8009b08 <xPortStartScheduler+0xf8>)
 8009ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ade:	f7ff ff83 	bl	80099e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ae2:	f7fe fcb3 	bl	800844c <vTaskSwitchContext>
	prvTaskExitError();
 8009ae6:	f7ff ff39 	bl	800995c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	e000e400 	.word	0xe000e400
 8009af8:	20001778 	.word	0x20001778
 8009afc:	2000177c 	.word	0x2000177c
 8009b00:	e000ed20 	.word	0xe000ed20
 8009b04:	20000010 	.word	0x20000010
 8009b08:	e000ef34 	.word	0xe000ef34

08009b0c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8009b12:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <vPortEndScheduler+0x38>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b1a:	d00d      	beq.n	8009b38 <vPortEndScheduler+0x2c>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	b672      	cpsid	i
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	b662      	cpsie	i
 8009b30:	607b      	str	r3, [r7, #4]
}
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	e7fd      	b.n	8009b34 <vPortEndScheduler+0x28>
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	20000010 	.word	0x20000010

08009b48 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	b672      	cpsid	i
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	b662      	cpsie	i
 8009b62:	607b      	str	r3, [r7, #4]
}
 8009b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b66:	4b11      	ldr	r3, [pc, #68]	@ (8009bac <vPortEnterCritical+0x64>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8009bac <vPortEnterCritical+0x64>)
 8009b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b70:	4b0e      	ldr	r3, [pc, #56]	@ (8009bac <vPortEnterCritical+0x64>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d112      	bne.n	8009b9e <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b78:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <vPortEnterCritical+0x68>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00d      	beq.n	8009b9e <vPortEnterCritical+0x56>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b86:	b672      	cpsid	i
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	b662      	cpsie	i
 8009b96:	603b      	str	r3, [r7, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <vPortEnterCritical+0x52>
	}
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20000010 	.word	0x20000010
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bba:	4b13      	ldr	r3, [pc, #76]	@ (8009c08 <vPortExitCritical+0x54>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10d      	bne.n	8009bde <vPortExitCritical+0x2a>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	607b      	str	r3, [r7, #4]
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	e7fd      	b.n	8009bda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009bde:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <vPortExitCritical+0x54>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	4a08      	ldr	r2, [pc, #32]	@ (8009c08 <vPortExitCritical+0x54>)
 8009be6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009be8:	4b07      	ldr	r3, [pc, #28]	@ (8009c08 <vPortExitCritical+0x54>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <vPortExitCritical+0x48>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	f383 8811 	msr	BASEPRI, r3
}
 8009bfa:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20000010 	.word	0x20000010
 8009c0c:	00000000 	.word	0x00000000

08009c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c10:	f3ef 8009 	mrs	r0, PSP
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4b15      	ldr	r3, [pc, #84]	@ (8009c70 <pxCurrentTCBConst>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	f01e 0f10 	tst.w	lr, #16
 8009c20:	bf08      	it	eq
 8009c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c34:	b672      	cpsid	i
 8009c36:	f380 8811 	msr	BASEPRI, r0
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	b662      	cpsie	i
 8009c44:	f7fe fc02 	bl	800844c <vTaskSwitchContext>
 8009c48:	f04f 0000 	mov.w	r0, #0
 8009c4c:	f380 8811 	msr	BASEPRI, r0
 8009c50:	bc09      	pop	{r0, r3}
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	6808      	ldr	r0, [r1, #0]
 8009c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	f01e 0f10 	tst.w	lr, #16
 8009c5e:	bf08      	it	eq
 8009c60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c64:	f380 8809 	msr	PSP, r0
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop

08009c70 <pxCurrentTCBConst>:
 8009c70:	2000114c 	.word	0x2000114c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	b672      	cpsid	i
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	b662      	cpsie	i
 8009c92:	607b      	str	r3, [r7, #4]
}
 8009c94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c96:	f7fe fb1d 	bl	80082d4 <xTaskIncrementTick>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ca0:	4b06      	ldr	r3, [pc, #24]	@ (8009cbc <SysTick_Handler+0x44>)
 8009ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	f383 8811 	msr	BASEPRI, r3
}
 8009cb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <vPortSetupTimerInterrupt+0x34>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cca:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf8 <vPortSetupTimerInterrupt+0x38>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009cfc <vPortSetupTimerInterrupt+0x3c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8009d00 <vPortSetupTimerInterrupt+0x40>)
 8009cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cda:	099b      	lsrs	r3, r3, #6
 8009cdc:	4a09      	ldr	r2, [pc, #36]	@ (8009d04 <vPortSetupTimerInterrupt+0x44>)
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ce2:	4b04      	ldr	r3, [pc, #16]	@ (8009cf4 <vPortSetupTimerInterrupt+0x34>)
 8009ce4:	2207      	movs	r2, #7
 8009ce6:	601a      	str	r2, [r3, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	e000e010 	.word	0xe000e010
 8009cf8:	e000e018 	.word	0xe000e018
 8009cfc:	20000004 	.word	0x20000004
 8009d00:	10624dd3 	.word	0x10624dd3
 8009d04:	e000e014 	.word	0xe000e014

08009d08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d18 <vPortEnableVFP+0x10>
 8009d0c:	6801      	ldr	r1, [r0, #0]
 8009d0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d12:	6001      	str	r1, [r0, #0]
 8009d14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d16:	bf00      	nop
 8009d18:	e000ed88 	.word	0xe000ed88

08009d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d22:	f3ef 8305 	mrs	r3, IPSR
 8009d26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	d917      	bls.n	8009d5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009d98 <vPortValidateInterruptPriority+0x7c>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d38:	4b18      	ldr	r3, [pc, #96]	@ (8009d9c <vPortValidateInterruptPriority+0x80>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	7afa      	ldrb	r2, [r7, #11]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d20d      	bcs.n	8009d5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	b672      	cpsid	i
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	b662      	cpsie	i
 8009d56:	607b      	str	r3, [r7, #4]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d5e:	4b10      	ldr	r3, [pc, #64]	@ (8009da0 <vPortValidateInterruptPriority+0x84>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d66:	4b0f      	ldr	r3, [pc, #60]	@ (8009da4 <vPortValidateInterruptPriority+0x88>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d90d      	bls.n	8009d8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d72:	b672      	cpsid	i
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	b662      	cpsie	i
 8009d82:	603b      	str	r3, [r7, #0]
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	e7fd      	b.n	8009d86 <vPortValidateInterruptPriority+0x6a>
	}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	e000e3f0 	.word	0xe000e3f0
 8009d9c:	20001778 	.word	0x20001778
 8009da0:	e000ed0c 	.word	0xe000ed0c
 8009da4:	2000177c 	.word	0x2000177c

08009da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	@ 0x28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009db4:	f7fe f9be 	bl	8008134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009db8:	4b5d      	ldr	r3, [pc, #372]	@ (8009f30 <pvPortMalloc+0x188>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dc0:	f000 f920 	bl	800a004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8009f34 <pvPortMalloc+0x18c>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f040 8094 	bne.w	8009efa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d020      	beq.n	8009e1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009dd8:	2208      	movs	r2, #8
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d017      	beq.n	8009e1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f023 0307 	bic.w	r3, r3, #7
 8009df0:	3308      	adds	r3, #8
 8009df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00d      	beq.n	8009e1a <pvPortMalloc+0x72>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	b672      	cpsid	i
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	b662      	cpsie	i
 8009e12:	617b      	str	r3, [r7, #20]
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	e7fd      	b.n	8009e16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d06c      	beq.n	8009efa <pvPortMalloc+0x152>
 8009e20:	4b45      	ldr	r3, [pc, #276]	@ (8009f38 <pvPortMalloc+0x190>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d867      	bhi.n	8009efa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e2a:	4b44      	ldr	r3, [pc, #272]	@ (8009f3c <pvPortMalloc+0x194>)
 8009e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e2e:	4b43      	ldr	r3, [pc, #268]	@ (8009f3c <pvPortMalloc+0x194>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e34:	e004      	b.n	8009e40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d903      	bls.n	8009e52 <pvPortMalloc+0xaa>
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f1      	bne.n	8009e36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e52:	4b37      	ldr	r3, [pc, #220]	@ (8009f30 <pvPortMalloc+0x188>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d04e      	beq.n	8009efa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2208      	movs	r2, #8
 8009e62:	4413      	add	r3, r2
 8009e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	1ad2      	subs	r2, r2, r3
 8009e76:	2308      	movs	r3, #8
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d922      	bls.n	8009ec4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00d      	beq.n	8009eac <pvPortMalloc+0x104>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	b672      	cpsid	i
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	b662      	cpsie	i
 8009ea4:	613b      	str	r3, [r7, #16]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	1ad2      	subs	r2, r2, r3
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ebe:	69b8      	ldr	r0, [r7, #24]
 8009ec0:	f000 f904 	bl	800a0cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8009f38 <pvPortMalloc+0x190>)
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	4a1a      	ldr	r2, [pc, #104]	@ (8009f38 <pvPortMalloc+0x190>)
 8009ed0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ed2:	4b19      	ldr	r3, [pc, #100]	@ (8009f38 <pvPortMalloc+0x190>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8009f40 <pvPortMalloc+0x198>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d203      	bcs.n	8009ee6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ede:	4b16      	ldr	r3, [pc, #88]	@ (8009f38 <pvPortMalloc+0x190>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a17      	ldr	r2, [pc, #92]	@ (8009f40 <pvPortMalloc+0x198>)
 8009ee4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	4b12      	ldr	r3, [pc, #72]	@ (8009f34 <pvPortMalloc+0x18c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009efa:	f7fe f929 	bl	8008150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00d      	beq.n	8009f24 <pvPortMalloc+0x17c>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0c:	b672      	cpsid	i
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	b662      	cpsie	i
 8009f1c:	60fb      	str	r3, [r7, #12]
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	e7fd      	b.n	8009f20 <pvPortMalloc+0x178>
	return pvReturn;
 8009f24:	69fb      	ldr	r3, [r7, #28]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3728      	adds	r7, #40	@ 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20019e28 	.word	0x20019e28
 8009f34:	20019e34 	.word	0x20019e34
 8009f38:	20019e2c 	.word	0x20019e2c
 8009f3c:	20019e20 	.word	0x20019e20
 8009f40:	20019e30 	.word	0x20019e30

08009f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d04e      	beq.n	8009ff4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f56:	2308      	movs	r3, #8
 8009f58:	425b      	negs	r3, r3
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	4b24      	ldr	r3, [pc, #144]	@ (8009ffc <vPortFree+0xb8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10d      	bne.n	8009f8e <vPortFree+0x4a>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f76:	b672      	cpsid	i
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	b662      	cpsie	i
 8009f86:	60fb      	str	r3, [r7, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	bf00      	nop
 8009f8c:	e7fd      	b.n	8009f8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00d      	beq.n	8009fb2 <vPortFree+0x6e>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	b672      	cpsid	i
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	b662      	cpsie	i
 8009faa:	60bb      	str	r3, [r7, #8]
}
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	e7fd      	b.n	8009fae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b11      	ldr	r3, [pc, #68]	@ (8009ffc <vPortFree+0xb8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d019      	beq.n	8009ff4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d115      	bne.n	8009ff4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8009ffc <vPortFree+0xb8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	401a      	ands	r2, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fd8:	f7fe f8ac 	bl	8008134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	4b07      	ldr	r3, [pc, #28]	@ (800a000 <vPortFree+0xbc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4a06      	ldr	r2, [pc, #24]	@ (800a000 <vPortFree+0xbc>)
 8009fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fea:	6938      	ldr	r0, [r7, #16]
 8009fec:	f000 f86e 	bl	800a0cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ff0:	f7fe f8ae 	bl	8008150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ff4:	bf00      	nop
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20019e34 	.word	0x20019e34
 800a000:	20019e2c 	.word	0x20019e2c

0800a004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a00a:	4b29      	ldr	r3, [pc, #164]	@ (800a0b0 <prvHeapInit+0xac>)
 800a00c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a00e:	4b29      	ldr	r3, [pc, #164]	@ (800a0b4 <prvHeapInit+0xb0>)
 800a010:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00c      	beq.n	800a036 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3307      	adds	r3, #7
 800a020:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f023 0307 	bic.w	r3, r3, #7
 800a028:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	4a20      	ldr	r2, [pc, #128]	@ (800a0b4 <prvHeapInit+0xb0>)
 800a032:	4413      	add	r3, r2
 800a034:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a03a:	4a1f      	ldr	r2, [pc, #124]	@ (800a0b8 <prvHeapInit+0xb4>)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a040:	4b1d      	ldr	r3, [pc, #116]	@ (800a0b8 <prvHeapInit+0xb4>)
 800a042:	2200      	movs	r2, #0
 800a044:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	4413      	add	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a04e:	2208      	movs	r2, #8
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f023 0307 	bic.w	r3, r3, #7
 800a05c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4a16      	ldr	r2, [pc, #88]	@ (800a0bc <prvHeapInit+0xb8>)
 800a062:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a064:	4b15      	ldr	r3, [pc, #84]	@ (800a0bc <prvHeapInit+0xb8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2200      	movs	r2, #0
 800a06a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a06c:	4b13      	ldr	r3, [pc, #76]	@ (800a0bc <prvHeapInit+0xb8>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	1ad2      	subs	r2, r2, r3
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a082:	4b0e      	ldr	r3, [pc, #56]	@ (800a0bc <prvHeapInit+0xb8>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c0 <prvHeapInit+0xbc>)
 800a090:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	4a0b      	ldr	r2, [pc, #44]	@ (800a0c4 <prvHeapInit+0xc0>)
 800a098:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a09a:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c8 <prvHeapInit+0xc4>)
 800a09c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a0a0:	601a      	str	r2, [r3, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	000186a0 	.word	0x000186a0
 800a0b4:	20001780 	.word	0x20001780
 800a0b8:	20019e20 	.word	0x20019e20
 800a0bc:	20019e28 	.word	0x20019e28
 800a0c0:	20019e30 	.word	0x20019e30
 800a0c4:	20019e2c 	.word	0x20019e2c
 800a0c8:	20019e34 	.word	0x20019e34

0800a0cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0d4:	4b28      	ldr	r3, [pc, #160]	@ (800a178 <prvInsertBlockIntoFreeList+0xac>)
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	e002      	b.n	800a0e0 <prvInsertBlockIntoFreeList+0x14>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d8f7      	bhi.n	800a0da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d108      	bne.n	800a10e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	441a      	add	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d118      	bne.n	800a154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	4b15      	ldr	r3, [pc, #84]	@ (800a17c <prvInsertBlockIntoFreeList+0xb0>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d00d      	beq.n	800a14a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	441a      	add	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	e008      	b.n	800a15c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a14a:	4b0c      	ldr	r3, [pc, #48]	@ (800a17c <prvInsertBlockIntoFreeList+0xb0>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	e003      	b.n	800a15c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d002      	beq.n	800a16a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a16a:	bf00      	nop
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20019e20 	.word	0x20019e20
 800a17c:	20019e28 	.word	0x20019e28

0800a180 <__cvt>:
 800a180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	ec57 6b10 	vmov	r6, r7, d0
 800a188:	2f00      	cmp	r7, #0
 800a18a:	460c      	mov	r4, r1
 800a18c:	4619      	mov	r1, r3
 800a18e:	463b      	mov	r3, r7
 800a190:	bfbb      	ittet	lt
 800a192:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a196:	461f      	movlt	r7, r3
 800a198:	2300      	movge	r3, #0
 800a19a:	232d      	movlt	r3, #45	@ 0x2d
 800a19c:	700b      	strb	r3, [r1, #0]
 800a19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a1a4:	4691      	mov	r9, r2
 800a1a6:	f023 0820 	bic.w	r8, r3, #32
 800a1aa:	bfbc      	itt	lt
 800a1ac:	4632      	movlt	r2, r6
 800a1ae:	4616      	movlt	r6, r2
 800a1b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1b4:	d005      	beq.n	800a1c2 <__cvt+0x42>
 800a1b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1ba:	d100      	bne.n	800a1be <__cvt+0x3e>
 800a1bc:	3401      	adds	r4, #1
 800a1be:	2102      	movs	r1, #2
 800a1c0:	e000      	b.n	800a1c4 <__cvt+0x44>
 800a1c2:	2103      	movs	r1, #3
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	ab02      	add	r3, sp, #8
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	ec47 6b10 	vmov	d0, r6, r7
 800a1d0:	4653      	mov	r3, sl
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	f001 f8ac 	bl	800b330 <_dtoa_r>
 800a1d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1dc:	4605      	mov	r5, r0
 800a1de:	d119      	bne.n	800a214 <__cvt+0x94>
 800a1e0:	f019 0f01 	tst.w	r9, #1
 800a1e4:	d00e      	beq.n	800a204 <__cvt+0x84>
 800a1e6:	eb00 0904 	add.w	r9, r0, r4
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 fc89 	bl	8000b08 <__aeabi_dcmpeq>
 800a1f6:	b108      	cbz	r0, 800a1fc <__cvt+0x7c>
 800a1f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1fc:	2230      	movs	r2, #48	@ 0x30
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	454b      	cmp	r3, r9
 800a202:	d31e      	bcc.n	800a242 <__cvt+0xc2>
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a208:	1b5b      	subs	r3, r3, r5
 800a20a:	4628      	mov	r0, r5
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	b004      	add	sp, #16
 800a210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a214:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a218:	eb00 0904 	add.w	r9, r0, r4
 800a21c:	d1e5      	bne.n	800a1ea <__cvt+0x6a>
 800a21e:	7803      	ldrb	r3, [r0, #0]
 800a220:	2b30      	cmp	r3, #48	@ 0x30
 800a222:	d10a      	bne.n	800a23a <__cvt+0xba>
 800a224:	2200      	movs	r2, #0
 800a226:	2300      	movs	r3, #0
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 800a230:	b918      	cbnz	r0, 800a23a <__cvt+0xba>
 800a232:	f1c4 0401 	rsb	r4, r4, #1
 800a236:	f8ca 4000 	str.w	r4, [sl]
 800a23a:	f8da 3000 	ldr.w	r3, [sl]
 800a23e:	4499      	add	r9, r3
 800a240:	e7d3      	b.n	800a1ea <__cvt+0x6a>
 800a242:	1c59      	adds	r1, r3, #1
 800a244:	9103      	str	r1, [sp, #12]
 800a246:	701a      	strb	r2, [r3, #0]
 800a248:	e7d9      	b.n	800a1fe <__cvt+0x7e>

0800a24a <__exponent>:
 800a24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a24c:	2900      	cmp	r1, #0
 800a24e:	bfba      	itte	lt
 800a250:	4249      	neglt	r1, r1
 800a252:	232d      	movlt	r3, #45	@ 0x2d
 800a254:	232b      	movge	r3, #43	@ 0x2b
 800a256:	2909      	cmp	r1, #9
 800a258:	7002      	strb	r2, [r0, #0]
 800a25a:	7043      	strb	r3, [r0, #1]
 800a25c:	dd29      	ble.n	800a2b2 <__exponent+0x68>
 800a25e:	f10d 0307 	add.w	r3, sp, #7
 800a262:	461d      	mov	r5, r3
 800a264:	270a      	movs	r7, #10
 800a266:	461a      	mov	r2, r3
 800a268:	fbb1 f6f7 	udiv	r6, r1, r7
 800a26c:	fb07 1416 	mls	r4, r7, r6, r1
 800a270:	3430      	adds	r4, #48	@ 0x30
 800a272:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a276:	460c      	mov	r4, r1
 800a278:	2c63      	cmp	r4, #99	@ 0x63
 800a27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a27e:	4631      	mov	r1, r6
 800a280:	dcf1      	bgt.n	800a266 <__exponent+0x1c>
 800a282:	3130      	adds	r1, #48	@ 0x30
 800a284:	1e94      	subs	r4, r2, #2
 800a286:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a28a:	1c41      	adds	r1, r0, #1
 800a28c:	4623      	mov	r3, r4
 800a28e:	42ab      	cmp	r3, r5
 800a290:	d30a      	bcc.n	800a2a8 <__exponent+0x5e>
 800a292:	f10d 0309 	add.w	r3, sp, #9
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	42ac      	cmp	r4, r5
 800a29a:	bf88      	it	hi
 800a29c:	2300      	movhi	r3, #0
 800a29e:	3302      	adds	r3, #2
 800a2a0:	4403      	add	r3, r0
 800a2a2:	1a18      	subs	r0, r3, r0
 800a2a4:	b003      	add	sp, #12
 800a2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a2ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a2b0:	e7ed      	b.n	800a28e <__exponent+0x44>
 800a2b2:	2330      	movs	r3, #48	@ 0x30
 800a2b4:	3130      	adds	r1, #48	@ 0x30
 800a2b6:	7083      	strb	r3, [r0, #2]
 800a2b8:	70c1      	strb	r1, [r0, #3]
 800a2ba:	1d03      	adds	r3, r0, #4
 800a2bc:	e7f1      	b.n	800a2a2 <__exponent+0x58>
	...

0800a2c0 <_printf_float>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	b08d      	sub	sp, #52	@ 0x34
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	461f      	mov	r7, r3
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	f000 fec7 	bl	800b064 <_localeconv_r>
 800a2d6:	6803      	ldr	r3, [r0, #0]
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f5 ffe8 	bl	80002b0 <strlen>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e8:	9005      	str	r0, [sp, #20]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	f023 0307 	bic.w	r3, r3, #7
 800a2f0:	f103 0208 	add.w	r2, r3, #8
 800a2f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2f8:	f8d4 b000 	ldr.w	fp, [r4]
 800a2fc:	f8c8 2000 	str.w	r2, [r8]
 800a300:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a304:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a308:	9307      	str	r3, [sp, #28]
 800a30a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a30e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a316:	4b9c      	ldr	r3, [pc, #624]	@ (800a588 <_printf_float+0x2c8>)
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	f7f6 fc26 	bl	8000b6c <__aeabi_dcmpun>
 800a320:	bb70      	cbnz	r0, 800a380 <_printf_float+0xc0>
 800a322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a326:	4b98      	ldr	r3, [pc, #608]	@ (800a588 <_printf_float+0x2c8>)
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	f7f6 fc00 	bl	8000b30 <__aeabi_dcmple>
 800a330:	bb30      	cbnz	r0, 800a380 <_printf_float+0xc0>
 800a332:	2200      	movs	r2, #0
 800a334:	2300      	movs	r3, #0
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f6 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800a33e:	b110      	cbz	r0, 800a346 <_printf_float+0x86>
 800a340:	232d      	movs	r3, #45	@ 0x2d
 800a342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a346:	4a91      	ldr	r2, [pc, #580]	@ (800a58c <_printf_float+0x2cc>)
 800a348:	4b91      	ldr	r3, [pc, #580]	@ (800a590 <_printf_float+0x2d0>)
 800a34a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a34e:	bf94      	ite	ls
 800a350:	4690      	movls	r8, r2
 800a352:	4698      	movhi	r8, r3
 800a354:	2303      	movs	r3, #3
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	f02b 0304 	bic.w	r3, fp, #4
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	f04f 0900 	mov.w	r9, #0
 800a362:	9700      	str	r7, [sp, #0]
 800a364:	4633      	mov	r3, r6
 800a366:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a368:	4621      	mov	r1, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	f000 f9d2 	bl	800a714 <_printf_common>
 800a370:	3001      	adds	r0, #1
 800a372:	f040 808d 	bne.w	800a490 <_printf_float+0x1d0>
 800a376:	f04f 30ff 	mov.w	r0, #4294967295
 800a37a:	b00d      	add	sp, #52	@ 0x34
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	4642      	mov	r2, r8
 800a382:	464b      	mov	r3, r9
 800a384:	4640      	mov	r0, r8
 800a386:	4649      	mov	r1, r9
 800a388:	f7f6 fbf0 	bl	8000b6c <__aeabi_dcmpun>
 800a38c:	b140      	cbz	r0, 800a3a0 <_printf_float+0xe0>
 800a38e:	464b      	mov	r3, r9
 800a390:	2b00      	cmp	r3, #0
 800a392:	bfbc      	itt	lt
 800a394:	232d      	movlt	r3, #45	@ 0x2d
 800a396:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a39a:	4a7e      	ldr	r2, [pc, #504]	@ (800a594 <_printf_float+0x2d4>)
 800a39c:	4b7e      	ldr	r3, [pc, #504]	@ (800a598 <_printf_float+0x2d8>)
 800a39e:	e7d4      	b.n	800a34a <_printf_float+0x8a>
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a3a6:	9206      	str	r2, [sp, #24]
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	d13b      	bne.n	800a424 <_printf_float+0x164>
 800a3ac:	2306      	movs	r3, #6
 800a3ae:	6063      	str	r3, [r4, #4]
 800a3b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6022      	str	r2, [r4, #0]
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3c0:	ab09      	add	r3, sp, #36	@ 0x24
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	6861      	ldr	r1, [r4, #4]
 800a3c6:	ec49 8b10 	vmov	d0, r8, r9
 800a3ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f7ff fed6 	bl	800a180 <__cvt>
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d8:	2b47      	cmp	r3, #71	@ 0x47
 800a3da:	4680      	mov	r8, r0
 800a3dc:	d129      	bne.n	800a432 <_printf_float+0x172>
 800a3de:	1cc8      	adds	r0, r1, #3
 800a3e0:	db02      	blt.n	800a3e8 <_printf_float+0x128>
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	4299      	cmp	r1, r3
 800a3e6:	dd41      	ble.n	800a46c <_printf_float+0x1ac>
 800a3e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3ec:	fa5f fa8a 	uxtb.w	sl, sl
 800a3f0:	3901      	subs	r1, #1
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3fa:	f7ff ff26 	bl	800a24a <__exponent>
 800a3fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a400:	1813      	adds	r3, r2, r0
 800a402:	2a01      	cmp	r2, #1
 800a404:	4681      	mov	r9, r0
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	dc02      	bgt.n	800a410 <_printf_float+0x150>
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	07d2      	lsls	r2, r2, #31
 800a40e:	d501      	bpl.n	800a414 <_printf_float+0x154>
 800a410:	3301      	adds	r3, #1
 800a412:	6123      	str	r3, [r4, #16]
 800a414:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0a2      	beq.n	800a362 <_printf_float+0xa2>
 800a41c:	232d      	movs	r3, #45	@ 0x2d
 800a41e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a422:	e79e      	b.n	800a362 <_printf_float+0xa2>
 800a424:	9a06      	ldr	r2, [sp, #24]
 800a426:	2a47      	cmp	r2, #71	@ 0x47
 800a428:	d1c2      	bne.n	800a3b0 <_printf_float+0xf0>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1c0      	bne.n	800a3b0 <_printf_float+0xf0>
 800a42e:	2301      	movs	r3, #1
 800a430:	e7bd      	b.n	800a3ae <_printf_float+0xee>
 800a432:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a436:	d9db      	bls.n	800a3f0 <_printf_float+0x130>
 800a438:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a43c:	d118      	bne.n	800a470 <_printf_float+0x1b0>
 800a43e:	2900      	cmp	r1, #0
 800a440:	6863      	ldr	r3, [r4, #4]
 800a442:	dd0b      	ble.n	800a45c <_printf_float+0x19c>
 800a444:	6121      	str	r1, [r4, #16]
 800a446:	b913      	cbnz	r3, 800a44e <_printf_float+0x18e>
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	07d0      	lsls	r0, r2, #31
 800a44c:	d502      	bpl.n	800a454 <_printf_float+0x194>
 800a44e:	3301      	adds	r3, #1
 800a450:	440b      	add	r3, r1
 800a452:	6123      	str	r3, [r4, #16]
 800a454:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	e7db      	b.n	800a414 <_printf_float+0x154>
 800a45c:	b913      	cbnz	r3, 800a464 <_printf_float+0x1a4>
 800a45e:	6822      	ldr	r2, [r4, #0]
 800a460:	07d2      	lsls	r2, r2, #31
 800a462:	d501      	bpl.n	800a468 <_printf_float+0x1a8>
 800a464:	3302      	adds	r3, #2
 800a466:	e7f4      	b.n	800a452 <_printf_float+0x192>
 800a468:	2301      	movs	r3, #1
 800a46a:	e7f2      	b.n	800a452 <_printf_float+0x192>
 800a46c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a472:	4299      	cmp	r1, r3
 800a474:	db05      	blt.n	800a482 <_printf_float+0x1c2>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	6121      	str	r1, [r4, #16]
 800a47a:	07d8      	lsls	r0, r3, #31
 800a47c:	d5ea      	bpl.n	800a454 <_printf_float+0x194>
 800a47e:	1c4b      	adds	r3, r1, #1
 800a480:	e7e7      	b.n	800a452 <_printf_float+0x192>
 800a482:	2900      	cmp	r1, #0
 800a484:	bfd4      	ite	le
 800a486:	f1c1 0202 	rsble	r2, r1, #2
 800a48a:	2201      	movgt	r2, #1
 800a48c:	4413      	add	r3, r2
 800a48e:	e7e0      	b.n	800a452 <_printf_float+0x192>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	055a      	lsls	r2, r3, #21
 800a494:	d407      	bmi.n	800a4a6 <_printf_float+0x1e6>
 800a496:	6923      	ldr	r3, [r4, #16]
 800a498:	4642      	mov	r2, r8
 800a49a:	4631      	mov	r1, r6
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d12b      	bne.n	800a4fc <_printf_float+0x23c>
 800a4a4:	e767      	b.n	800a376 <_printf_float+0xb6>
 800a4a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4aa:	f240 80dd 	bls.w	800a668 <_printf_float+0x3a8>
 800a4ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f7f6 fb27 	bl	8000b08 <__aeabi_dcmpeq>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d033      	beq.n	800a526 <_printf_float+0x266>
 800a4be:	4a37      	ldr	r2, [pc, #220]	@ (800a59c <_printf_float+0x2dc>)
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b8      	blx	r7
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	f43f af54 	beq.w	800a376 <_printf_float+0xb6>
 800a4ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4d2:	4543      	cmp	r3, r8
 800a4d4:	db02      	blt.n	800a4dc <_printf_float+0x21c>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	07d8      	lsls	r0, r3, #31
 800a4da:	d50f      	bpl.n	800a4fc <_printf_float+0x23c>
 800a4dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	47b8      	blx	r7
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f43f af45 	beq.w	800a376 <_printf_float+0xb6>
 800a4ec:	f04f 0900 	mov.w	r9, #0
 800a4f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4f4:	f104 0a1a 	add.w	sl, r4, #26
 800a4f8:	45c8      	cmp	r8, r9
 800a4fa:	dc09      	bgt.n	800a510 <_printf_float+0x250>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	079b      	lsls	r3, r3, #30
 800a500:	f100 8103 	bmi.w	800a70a <_printf_float+0x44a>
 800a504:	68e0      	ldr	r0, [r4, #12]
 800a506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a508:	4298      	cmp	r0, r3
 800a50a:	bfb8      	it	lt
 800a50c:	4618      	movlt	r0, r3
 800a50e:	e734      	b.n	800a37a <_printf_float+0xba>
 800a510:	2301      	movs	r3, #1
 800a512:	4652      	mov	r2, sl
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f af2b 	beq.w	800a376 <_printf_float+0xb6>
 800a520:	f109 0901 	add.w	r9, r9, #1
 800a524:	e7e8      	b.n	800a4f8 <_printf_float+0x238>
 800a526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc39      	bgt.n	800a5a0 <_printf_float+0x2e0>
 800a52c:	4a1b      	ldr	r2, [pc, #108]	@ (800a59c <_printf_float+0x2dc>)
 800a52e:	2301      	movs	r3, #1
 800a530:	4631      	mov	r1, r6
 800a532:	4628      	mov	r0, r5
 800a534:	47b8      	blx	r7
 800a536:	3001      	adds	r0, #1
 800a538:	f43f af1d 	beq.w	800a376 <_printf_float+0xb6>
 800a53c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a540:	ea59 0303 	orrs.w	r3, r9, r3
 800a544:	d102      	bne.n	800a54c <_printf_float+0x28c>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	07d9      	lsls	r1, r3, #31
 800a54a:	d5d7      	bpl.n	800a4fc <_printf_float+0x23c>
 800a54c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a550:	4631      	mov	r1, r6
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	f43f af0d 	beq.w	800a376 <_printf_float+0xb6>
 800a55c:	f04f 0a00 	mov.w	sl, #0
 800a560:	f104 0b1a 	add.w	fp, r4, #26
 800a564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a566:	425b      	negs	r3, r3
 800a568:	4553      	cmp	r3, sl
 800a56a:	dc01      	bgt.n	800a570 <_printf_float+0x2b0>
 800a56c:	464b      	mov	r3, r9
 800a56e:	e793      	b.n	800a498 <_printf_float+0x1d8>
 800a570:	2301      	movs	r3, #1
 800a572:	465a      	mov	r2, fp
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f aefb 	beq.w	800a376 <_printf_float+0xb6>
 800a580:	f10a 0a01 	add.w	sl, sl, #1
 800a584:	e7ee      	b.n	800a564 <_printf_float+0x2a4>
 800a586:	bf00      	nop
 800a588:	7fefffff 	.word	0x7fefffff
 800a58c:	0800e444 	.word	0x0800e444
 800a590:	0800e448 	.word	0x0800e448
 800a594:	0800e44c 	.word	0x0800e44c
 800a598:	0800e450 	.word	0x0800e450
 800a59c:	0800e454 	.word	0x0800e454
 800a5a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5a6:	4553      	cmp	r3, sl
 800a5a8:	bfa8      	it	ge
 800a5aa:	4653      	movge	r3, sl
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	4699      	mov	r9, r3
 800a5b0:	dc36      	bgt.n	800a620 <_printf_float+0x360>
 800a5b2:	f04f 0b00 	mov.w	fp, #0
 800a5b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5ba:	f104 021a 	add.w	r2, r4, #26
 800a5be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5c0:	9306      	str	r3, [sp, #24]
 800a5c2:	eba3 0309 	sub.w	r3, r3, r9
 800a5c6:	455b      	cmp	r3, fp
 800a5c8:	dc31      	bgt.n	800a62e <_printf_float+0x36e>
 800a5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5cc:	459a      	cmp	sl, r3
 800a5ce:	dc3a      	bgt.n	800a646 <_printf_float+0x386>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	07da      	lsls	r2, r3, #31
 800a5d4:	d437      	bmi.n	800a646 <_printf_float+0x386>
 800a5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d8:	ebaa 0903 	sub.w	r9, sl, r3
 800a5dc:	9b06      	ldr	r3, [sp, #24]
 800a5de:	ebaa 0303 	sub.w	r3, sl, r3
 800a5e2:	4599      	cmp	r9, r3
 800a5e4:	bfa8      	it	ge
 800a5e6:	4699      	movge	r9, r3
 800a5e8:	f1b9 0f00 	cmp.w	r9, #0
 800a5ec:	dc33      	bgt.n	800a656 <_printf_float+0x396>
 800a5ee:	f04f 0800 	mov.w	r8, #0
 800a5f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5f6:	f104 0b1a 	add.w	fp, r4, #26
 800a5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fc:	ebaa 0303 	sub.w	r3, sl, r3
 800a600:	eba3 0309 	sub.w	r3, r3, r9
 800a604:	4543      	cmp	r3, r8
 800a606:	f77f af79 	ble.w	800a4fc <_printf_float+0x23c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	465a      	mov	r2, fp
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	f43f aeae 	beq.w	800a376 <_printf_float+0xb6>
 800a61a:	f108 0801 	add.w	r8, r8, #1
 800a61e:	e7ec      	b.n	800a5fa <_printf_float+0x33a>
 800a620:	4642      	mov	r2, r8
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	47b8      	blx	r7
 800a628:	3001      	adds	r0, #1
 800a62a:	d1c2      	bne.n	800a5b2 <_printf_float+0x2f2>
 800a62c:	e6a3      	b.n	800a376 <_printf_float+0xb6>
 800a62e:	2301      	movs	r3, #1
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	9206      	str	r2, [sp, #24]
 800a636:	47b8      	blx	r7
 800a638:	3001      	adds	r0, #1
 800a63a:	f43f ae9c 	beq.w	800a376 <_printf_float+0xb6>
 800a63e:	9a06      	ldr	r2, [sp, #24]
 800a640:	f10b 0b01 	add.w	fp, fp, #1
 800a644:	e7bb      	b.n	800a5be <_printf_float+0x2fe>
 800a646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a64a:	4631      	mov	r1, r6
 800a64c:	4628      	mov	r0, r5
 800a64e:	47b8      	blx	r7
 800a650:	3001      	adds	r0, #1
 800a652:	d1c0      	bne.n	800a5d6 <_printf_float+0x316>
 800a654:	e68f      	b.n	800a376 <_printf_float+0xb6>
 800a656:	9a06      	ldr	r2, [sp, #24]
 800a658:	464b      	mov	r3, r9
 800a65a:	4442      	add	r2, r8
 800a65c:	4631      	mov	r1, r6
 800a65e:	4628      	mov	r0, r5
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	d1c3      	bne.n	800a5ee <_printf_float+0x32e>
 800a666:	e686      	b.n	800a376 <_printf_float+0xb6>
 800a668:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a66c:	f1ba 0f01 	cmp.w	sl, #1
 800a670:	dc01      	bgt.n	800a676 <_printf_float+0x3b6>
 800a672:	07db      	lsls	r3, r3, #31
 800a674:	d536      	bpl.n	800a6e4 <_printf_float+0x424>
 800a676:	2301      	movs	r3, #1
 800a678:	4642      	mov	r2, r8
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f ae78 	beq.w	800a376 <_printf_float+0xb6>
 800a686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a68a:	4631      	mov	r1, r6
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b8      	blx	r7
 800a690:	3001      	adds	r0, #1
 800a692:	f43f ae70 	beq.w	800a376 <_printf_float+0xb6>
 800a696:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a69a:	2200      	movs	r2, #0
 800a69c:	2300      	movs	r3, #0
 800a69e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6a2:	f7f6 fa31 	bl	8000b08 <__aeabi_dcmpeq>
 800a6a6:	b9c0      	cbnz	r0, 800a6da <_printf_float+0x41a>
 800a6a8:	4653      	mov	r3, sl
 800a6aa:	f108 0201 	add.w	r2, r8, #1
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d10c      	bne.n	800a6d2 <_printf_float+0x412>
 800a6b8:	e65d      	b.n	800a376 <_printf_float+0xb6>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	465a      	mov	r2, fp
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	f43f ae56 	beq.w	800a376 <_printf_float+0xb6>
 800a6ca:	f108 0801 	add.w	r8, r8, #1
 800a6ce:	45d0      	cmp	r8, sl
 800a6d0:	dbf3      	blt.n	800a6ba <_printf_float+0x3fa>
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6d8:	e6df      	b.n	800a49a <_printf_float+0x1da>
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	f104 0b1a 	add.w	fp, r4, #26
 800a6e2:	e7f4      	b.n	800a6ce <_printf_float+0x40e>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	e7e1      	b.n	800a6ae <_printf_float+0x3ee>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	464a      	mov	r2, r9
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f43f ae3e 	beq.w	800a376 <_printf_float+0xb6>
 800a6fa:	f108 0801 	add.w	r8, r8, #1
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a702:	1a5b      	subs	r3, r3, r1
 800a704:	4543      	cmp	r3, r8
 800a706:	dcf0      	bgt.n	800a6ea <_printf_float+0x42a>
 800a708:	e6fc      	b.n	800a504 <_printf_float+0x244>
 800a70a:	f04f 0800 	mov.w	r8, #0
 800a70e:	f104 0919 	add.w	r9, r4, #25
 800a712:	e7f4      	b.n	800a6fe <_printf_float+0x43e>

0800a714 <_printf_common>:
 800a714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	4616      	mov	r6, r2
 800a71a:	4698      	mov	r8, r3
 800a71c:	688a      	ldr	r2, [r1, #8]
 800a71e:	690b      	ldr	r3, [r1, #16]
 800a720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a724:	4293      	cmp	r3, r2
 800a726:	bfb8      	it	lt
 800a728:	4613      	movlt	r3, r2
 800a72a:	6033      	str	r3, [r6, #0]
 800a72c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a730:	4607      	mov	r7, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b10a      	cbz	r2, 800a73a <_printf_common+0x26>
 800a736:	3301      	adds	r3, #1
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	0699      	lsls	r1, r3, #26
 800a73e:	bf42      	ittt	mi
 800a740:	6833      	ldrmi	r3, [r6, #0]
 800a742:	3302      	addmi	r3, #2
 800a744:	6033      	strmi	r3, [r6, #0]
 800a746:	6825      	ldr	r5, [r4, #0]
 800a748:	f015 0506 	ands.w	r5, r5, #6
 800a74c:	d106      	bne.n	800a75c <_printf_common+0x48>
 800a74e:	f104 0a19 	add.w	sl, r4, #25
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	6832      	ldr	r2, [r6, #0]
 800a756:	1a9b      	subs	r3, r3, r2
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dc26      	bgt.n	800a7aa <_printf_common+0x96>
 800a75c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a760:	6822      	ldr	r2, [r4, #0]
 800a762:	3b00      	subs	r3, #0
 800a764:	bf18      	it	ne
 800a766:	2301      	movne	r3, #1
 800a768:	0692      	lsls	r2, r2, #26
 800a76a:	d42b      	bmi.n	800a7c4 <_printf_common+0xb0>
 800a76c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a770:	4641      	mov	r1, r8
 800a772:	4638      	mov	r0, r7
 800a774:	47c8      	blx	r9
 800a776:	3001      	adds	r0, #1
 800a778:	d01e      	beq.n	800a7b8 <_printf_common+0xa4>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	6922      	ldr	r2, [r4, #16]
 800a77e:	f003 0306 	and.w	r3, r3, #6
 800a782:	2b04      	cmp	r3, #4
 800a784:	bf02      	ittt	eq
 800a786:	68e5      	ldreq	r5, [r4, #12]
 800a788:	6833      	ldreq	r3, [r6, #0]
 800a78a:	1aed      	subeq	r5, r5, r3
 800a78c:	68a3      	ldr	r3, [r4, #8]
 800a78e:	bf0c      	ite	eq
 800a790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a794:	2500      	movne	r5, #0
 800a796:	4293      	cmp	r3, r2
 800a798:	bfc4      	itt	gt
 800a79a:	1a9b      	subgt	r3, r3, r2
 800a79c:	18ed      	addgt	r5, r5, r3
 800a79e:	2600      	movs	r6, #0
 800a7a0:	341a      	adds	r4, #26
 800a7a2:	42b5      	cmp	r5, r6
 800a7a4:	d11a      	bne.n	800a7dc <_printf_common+0xc8>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e008      	b.n	800a7bc <_printf_common+0xa8>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4652      	mov	r2, sl
 800a7ae:	4641      	mov	r1, r8
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	47c8      	blx	r9
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d103      	bne.n	800a7c0 <_printf_common+0xac>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	e7c6      	b.n	800a752 <_printf_common+0x3e>
 800a7c4:	18e1      	adds	r1, r4, r3
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	2030      	movs	r0, #48	@ 0x30
 800a7ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7ce:	4422      	add	r2, r4
 800a7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7d8:	3302      	adds	r3, #2
 800a7da:	e7c7      	b.n	800a76c <_printf_common+0x58>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4641      	mov	r1, r8
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c8      	blx	r9
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d0e6      	beq.n	800a7b8 <_printf_common+0xa4>
 800a7ea:	3601      	adds	r6, #1
 800a7ec:	e7d9      	b.n	800a7a2 <_printf_common+0x8e>
	...

0800a7f0 <_printf_i>:
 800a7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	7e0f      	ldrb	r7, [r1, #24]
 800a7f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7f8:	2f78      	cmp	r7, #120	@ 0x78
 800a7fa:	4691      	mov	r9, r2
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	469a      	mov	sl, r3
 800a802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a806:	d807      	bhi.n	800a818 <_printf_i+0x28>
 800a808:	2f62      	cmp	r7, #98	@ 0x62
 800a80a:	d80a      	bhi.n	800a822 <_printf_i+0x32>
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	f000 80d2 	beq.w	800a9b6 <_printf_i+0x1c6>
 800a812:	2f58      	cmp	r7, #88	@ 0x58
 800a814:	f000 80b9 	beq.w	800a98a <_printf_i+0x19a>
 800a818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a81c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a820:	e03a      	b.n	800a898 <_printf_i+0xa8>
 800a822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a826:	2b15      	cmp	r3, #21
 800a828:	d8f6      	bhi.n	800a818 <_printf_i+0x28>
 800a82a:	a101      	add	r1, pc, #4	@ (adr r1, 800a830 <_printf_i+0x40>)
 800a82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a830:	0800a889 	.word	0x0800a889
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a819 	.word	0x0800a819
 800a83c:	0800a819 	.word	0x0800a819
 800a840:	0800a819 	.word	0x0800a819
 800a844:	0800a819 	.word	0x0800a819
 800a848:	0800a89d 	.word	0x0800a89d
 800a84c:	0800a819 	.word	0x0800a819
 800a850:	0800a819 	.word	0x0800a819
 800a854:	0800a819 	.word	0x0800a819
 800a858:	0800a819 	.word	0x0800a819
 800a85c:	0800a99d 	.word	0x0800a99d
 800a860:	0800a8c7 	.word	0x0800a8c7
 800a864:	0800a957 	.word	0x0800a957
 800a868:	0800a819 	.word	0x0800a819
 800a86c:	0800a819 	.word	0x0800a819
 800a870:	0800a9bf 	.word	0x0800a9bf
 800a874:	0800a819 	.word	0x0800a819
 800a878:	0800a8c7 	.word	0x0800a8c7
 800a87c:	0800a819 	.word	0x0800a819
 800a880:	0800a819 	.word	0x0800a819
 800a884:	0800a95f 	.word	0x0800a95f
 800a888:	6833      	ldr	r3, [r6, #0]
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6032      	str	r2, [r6, #0]
 800a890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a898:	2301      	movs	r3, #1
 800a89a:	e09d      	b.n	800a9d8 <_printf_i+0x1e8>
 800a89c:	6833      	ldr	r3, [r6, #0]
 800a89e:	6820      	ldr	r0, [r4, #0]
 800a8a0:	1d19      	adds	r1, r3, #4
 800a8a2:	6031      	str	r1, [r6, #0]
 800a8a4:	0606      	lsls	r6, r0, #24
 800a8a6:	d501      	bpl.n	800a8ac <_printf_i+0xbc>
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	e003      	b.n	800a8b4 <_printf_i+0xc4>
 800a8ac:	0645      	lsls	r5, r0, #25
 800a8ae:	d5fb      	bpl.n	800a8a8 <_printf_i+0xb8>
 800a8b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	da03      	bge.n	800a8c0 <_printf_i+0xd0>
 800a8b8:	232d      	movs	r3, #45	@ 0x2d
 800a8ba:	426d      	negs	r5, r5
 800a8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8c0:	4859      	ldr	r0, [pc, #356]	@ (800aa28 <_printf_i+0x238>)
 800a8c2:	230a      	movs	r3, #10
 800a8c4:	e011      	b.n	800a8ea <_printf_i+0xfa>
 800a8c6:	6821      	ldr	r1, [r4, #0]
 800a8c8:	6833      	ldr	r3, [r6, #0]
 800a8ca:	0608      	lsls	r0, r1, #24
 800a8cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8d0:	d402      	bmi.n	800a8d8 <_printf_i+0xe8>
 800a8d2:	0649      	lsls	r1, r1, #25
 800a8d4:	bf48      	it	mi
 800a8d6:	b2ad      	uxthmi	r5, r5
 800a8d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8da:	4853      	ldr	r0, [pc, #332]	@ (800aa28 <_printf_i+0x238>)
 800a8dc:	6033      	str	r3, [r6, #0]
 800a8de:	bf14      	ite	ne
 800a8e0:	230a      	movne	r3, #10
 800a8e2:	2308      	moveq	r3, #8
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8ea:	6866      	ldr	r6, [r4, #4]
 800a8ec:	60a6      	str	r6, [r4, #8]
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	bfa2      	ittt	ge
 800a8f2:	6821      	ldrge	r1, [r4, #0]
 800a8f4:	f021 0104 	bicge.w	r1, r1, #4
 800a8f8:	6021      	strge	r1, [r4, #0]
 800a8fa:	b90d      	cbnz	r5, 800a900 <_printf_i+0x110>
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	d04b      	beq.n	800a998 <_printf_i+0x1a8>
 800a900:	4616      	mov	r6, r2
 800a902:	fbb5 f1f3 	udiv	r1, r5, r3
 800a906:	fb03 5711 	mls	r7, r3, r1, r5
 800a90a:	5dc7      	ldrb	r7, [r0, r7]
 800a90c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a910:	462f      	mov	r7, r5
 800a912:	42bb      	cmp	r3, r7
 800a914:	460d      	mov	r5, r1
 800a916:	d9f4      	bls.n	800a902 <_printf_i+0x112>
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d10b      	bne.n	800a934 <_printf_i+0x144>
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	07df      	lsls	r7, r3, #31
 800a920:	d508      	bpl.n	800a934 <_printf_i+0x144>
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	6861      	ldr	r1, [r4, #4]
 800a926:	4299      	cmp	r1, r3
 800a928:	bfde      	ittt	le
 800a92a:	2330      	movle	r3, #48	@ 0x30
 800a92c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a930:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a934:	1b92      	subs	r2, r2, r6
 800a936:	6122      	str	r2, [r4, #16]
 800a938:	f8cd a000 	str.w	sl, [sp]
 800a93c:	464b      	mov	r3, r9
 800a93e:	aa03      	add	r2, sp, #12
 800a940:	4621      	mov	r1, r4
 800a942:	4640      	mov	r0, r8
 800a944:	f7ff fee6 	bl	800a714 <_printf_common>
 800a948:	3001      	adds	r0, #1
 800a94a:	d14a      	bne.n	800a9e2 <_printf_i+0x1f2>
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295
 800a950:	b004      	add	sp, #16
 800a952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	f043 0320 	orr.w	r3, r3, #32
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	4833      	ldr	r0, [pc, #204]	@ (800aa2c <_printf_i+0x23c>)
 800a960:	2778      	movs	r7, #120	@ 0x78
 800a962:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	6831      	ldr	r1, [r6, #0]
 800a96a:	061f      	lsls	r7, r3, #24
 800a96c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a970:	d402      	bmi.n	800a978 <_printf_i+0x188>
 800a972:	065f      	lsls	r7, r3, #25
 800a974:	bf48      	it	mi
 800a976:	b2ad      	uxthmi	r5, r5
 800a978:	6031      	str	r1, [r6, #0]
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	bf44      	itt	mi
 800a97e:	f043 0320 	orrmi.w	r3, r3, #32
 800a982:	6023      	strmi	r3, [r4, #0]
 800a984:	b11d      	cbz	r5, 800a98e <_printf_i+0x19e>
 800a986:	2310      	movs	r3, #16
 800a988:	e7ac      	b.n	800a8e4 <_printf_i+0xf4>
 800a98a:	4827      	ldr	r0, [pc, #156]	@ (800aa28 <_printf_i+0x238>)
 800a98c:	e7e9      	b.n	800a962 <_printf_i+0x172>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	f023 0320 	bic.w	r3, r3, #32
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	e7f6      	b.n	800a986 <_printf_i+0x196>
 800a998:	4616      	mov	r6, r2
 800a99a:	e7bd      	b.n	800a918 <_printf_i+0x128>
 800a99c:	6833      	ldr	r3, [r6, #0]
 800a99e:	6825      	ldr	r5, [r4, #0]
 800a9a0:	6961      	ldr	r1, [r4, #20]
 800a9a2:	1d18      	adds	r0, r3, #4
 800a9a4:	6030      	str	r0, [r6, #0]
 800a9a6:	062e      	lsls	r6, r5, #24
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	d501      	bpl.n	800a9b0 <_printf_i+0x1c0>
 800a9ac:	6019      	str	r1, [r3, #0]
 800a9ae:	e002      	b.n	800a9b6 <_printf_i+0x1c6>
 800a9b0:	0668      	lsls	r0, r5, #25
 800a9b2:	d5fb      	bpl.n	800a9ac <_printf_i+0x1bc>
 800a9b4:	8019      	strh	r1, [r3, #0]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	6123      	str	r3, [r4, #16]
 800a9ba:	4616      	mov	r6, r2
 800a9bc:	e7bc      	b.n	800a938 <_printf_i+0x148>
 800a9be:	6833      	ldr	r3, [r6, #0]
 800a9c0:	1d1a      	adds	r2, r3, #4
 800a9c2:	6032      	str	r2, [r6, #0]
 800a9c4:	681e      	ldr	r6, [r3, #0]
 800a9c6:	6862      	ldr	r2, [r4, #4]
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7f5 fc20 	bl	8000210 <memchr>
 800a9d0:	b108      	cbz	r0, 800a9d6 <_printf_i+0x1e6>
 800a9d2:	1b80      	subs	r0, r0, r6
 800a9d4:	6060      	str	r0, [r4, #4]
 800a9d6:	6863      	ldr	r3, [r4, #4]
 800a9d8:	6123      	str	r3, [r4, #16]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9e0:	e7aa      	b.n	800a938 <_printf_i+0x148>
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	4649      	mov	r1, r9
 800a9e8:	4640      	mov	r0, r8
 800a9ea:	47d0      	blx	sl
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d0ad      	beq.n	800a94c <_printf_i+0x15c>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	079b      	lsls	r3, r3, #30
 800a9f4:	d413      	bmi.n	800aa1e <_printf_i+0x22e>
 800a9f6:	68e0      	ldr	r0, [r4, #12]
 800a9f8:	9b03      	ldr	r3, [sp, #12]
 800a9fa:	4298      	cmp	r0, r3
 800a9fc:	bfb8      	it	lt
 800a9fe:	4618      	movlt	r0, r3
 800aa00:	e7a6      	b.n	800a950 <_printf_i+0x160>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4632      	mov	r2, r6
 800aa06:	4649      	mov	r1, r9
 800aa08:	4640      	mov	r0, r8
 800aa0a:	47d0      	blx	sl
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d09d      	beq.n	800a94c <_printf_i+0x15c>
 800aa10:	3501      	adds	r5, #1
 800aa12:	68e3      	ldr	r3, [r4, #12]
 800aa14:	9903      	ldr	r1, [sp, #12]
 800aa16:	1a5b      	subs	r3, r3, r1
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	dcf2      	bgt.n	800aa02 <_printf_i+0x212>
 800aa1c:	e7eb      	b.n	800a9f6 <_printf_i+0x206>
 800aa1e:	2500      	movs	r5, #0
 800aa20:	f104 0619 	add.w	r6, r4, #25
 800aa24:	e7f5      	b.n	800aa12 <_printf_i+0x222>
 800aa26:	bf00      	nop
 800aa28:	0800e456 	.word	0x0800e456
 800aa2c:	0800e467 	.word	0x0800e467

0800aa30 <__sflush_r>:
 800aa30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa38:	0716      	lsls	r6, r2, #28
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	d454      	bmi.n	800aaea <__sflush_r+0xba>
 800aa40:	684b      	ldr	r3, [r1, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dc02      	bgt.n	800aa4c <__sflush_r+0x1c>
 800aa46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dd48      	ble.n	800aade <__sflush_r+0xae>
 800aa4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d045      	beq.n	800aade <__sflush_r+0xae>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa58:	682f      	ldr	r7, [r5, #0]
 800aa5a:	6a21      	ldr	r1, [r4, #32]
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	d030      	beq.n	800aac2 <__sflush_r+0x92>
 800aa60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	0759      	lsls	r1, r3, #29
 800aa66:	d505      	bpl.n	800aa74 <__sflush_r+0x44>
 800aa68:	6863      	ldr	r3, [r4, #4]
 800aa6a:	1ad2      	subs	r2, r2, r3
 800aa6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa6e:	b10b      	cbz	r3, 800aa74 <__sflush_r+0x44>
 800aa70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	2300      	movs	r3, #0
 800aa76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa78:	6a21      	ldr	r1, [r4, #32]
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	47b0      	blx	r6
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	d106      	bne.n	800aa92 <__sflush_r+0x62>
 800aa84:	6829      	ldr	r1, [r5, #0]
 800aa86:	291d      	cmp	r1, #29
 800aa88:	d82b      	bhi.n	800aae2 <__sflush_r+0xb2>
 800aa8a:	4a2a      	ldr	r2, [pc, #168]	@ (800ab34 <__sflush_r+0x104>)
 800aa8c:	410a      	asrs	r2, r1
 800aa8e:	07d6      	lsls	r6, r2, #31
 800aa90:	d427      	bmi.n	800aae2 <__sflush_r+0xb2>
 800aa92:	2200      	movs	r2, #0
 800aa94:	6062      	str	r2, [r4, #4]
 800aa96:	04d9      	lsls	r1, r3, #19
 800aa98:	6922      	ldr	r2, [r4, #16]
 800aa9a:	6022      	str	r2, [r4, #0]
 800aa9c:	d504      	bpl.n	800aaa8 <__sflush_r+0x78>
 800aa9e:	1c42      	adds	r2, r0, #1
 800aaa0:	d101      	bne.n	800aaa6 <__sflush_r+0x76>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	b903      	cbnz	r3, 800aaa8 <__sflush_r+0x78>
 800aaa6:	6560      	str	r0, [r4, #84]	@ 0x54
 800aaa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaaa:	602f      	str	r7, [r5, #0]
 800aaac:	b1b9      	cbz	r1, 800aade <__sflush_r+0xae>
 800aaae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aab2:	4299      	cmp	r1, r3
 800aab4:	d002      	beq.n	800aabc <__sflush_r+0x8c>
 800aab6:	4628      	mov	r0, r5
 800aab8:	f001 f9fe 	bl	800beb8 <_free_r>
 800aabc:	2300      	movs	r3, #0
 800aabe:	6363      	str	r3, [r4, #52]	@ 0x34
 800aac0:	e00d      	b.n	800aade <__sflush_r+0xae>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4628      	mov	r0, r5
 800aac6:	47b0      	blx	r6
 800aac8:	4602      	mov	r2, r0
 800aaca:	1c50      	adds	r0, r2, #1
 800aacc:	d1c9      	bne.n	800aa62 <__sflush_r+0x32>
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0c6      	beq.n	800aa62 <__sflush_r+0x32>
 800aad4:	2b1d      	cmp	r3, #29
 800aad6:	d001      	beq.n	800aadc <__sflush_r+0xac>
 800aad8:	2b16      	cmp	r3, #22
 800aada:	d11e      	bne.n	800ab1a <__sflush_r+0xea>
 800aadc:	602f      	str	r7, [r5, #0]
 800aade:	2000      	movs	r0, #0
 800aae0:	e022      	b.n	800ab28 <__sflush_r+0xf8>
 800aae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aae6:	b21b      	sxth	r3, r3
 800aae8:	e01b      	b.n	800ab22 <__sflush_r+0xf2>
 800aaea:	690f      	ldr	r7, [r1, #16]
 800aaec:	2f00      	cmp	r7, #0
 800aaee:	d0f6      	beq.n	800aade <__sflush_r+0xae>
 800aaf0:	0793      	lsls	r3, r2, #30
 800aaf2:	680e      	ldr	r6, [r1, #0]
 800aaf4:	bf08      	it	eq
 800aaf6:	694b      	ldreq	r3, [r1, #20]
 800aaf8:	600f      	str	r7, [r1, #0]
 800aafa:	bf18      	it	ne
 800aafc:	2300      	movne	r3, #0
 800aafe:	eba6 0807 	sub.w	r8, r6, r7
 800ab02:	608b      	str	r3, [r1, #8]
 800ab04:	f1b8 0f00 	cmp.w	r8, #0
 800ab08:	dde9      	ble.n	800aade <__sflush_r+0xae>
 800ab0a:	6a21      	ldr	r1, [r4, #32]
 800ab0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab0e:	4643      	mov	r3, r8
 800ab10:	463a      	mov	r2, r7
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b0      	blx	r6
 800ab16:	2800      	cmp	r0, #0
 800ab18:	dc08      	bgt.n	800ab2c <__sflush_r+0xfc>
 800ab1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295
 800ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab2c:	4407      	add	r7, r0
 800ab2e:	eba8 0800 	sub.w	r8, r8, r0
 800ab32:	e7e7      	b.n	800ab04 <__sflush_r+0xd4>
 800ab34:	dfbffffe 	.word	0xdfbffffe

0800ab38 <_fflush_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	690b      	ldr	r3, [r1, #16]
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	b913      	cbnz	r3, 800ab48 <_fflush_r+0x10>
 800ab42:	2500      	movs	r5, #0
 800ab44:	4628      	mov	r0, r5
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	b118      	cbz	r0, 800ab52 <_fflush_r+0x1a>
 800ab4a:	6a03      	ldr	r3, [r0, #32]
 800ab4c:	b90b      	cbnz	r3, 800ab52 <_fflush_r+0x1a>
 800ab4e:	f000 f8bb 	bl	800acc8 <__sinit>
 800ab52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0f3      	beq.n	800ab42 <_fflush_r+0xa>
 800ab5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab5c:	07d0      	lsls	r0, r2, #31
 800ab5e:	d404      	bmi.n	800ab6a <_fflush_r+0x32>
 800ab60:	0599      	lsls	r1, r3, #22
 800ab62:	d402      	bmi.n	800ab6a <_fflush_r+0x32>
 800ab64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab66:	f000 fb48 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	f7ff ff5f 	bl	800aa30 <__sflush_r>
 800ab72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab74:	07da      	lsls	r2, r3, #31
 800ab76:	4605      	mov	r5, r0
 800ab78:	d4e4      	bmi.n	800ab44 <_fflush_r+0xc>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	059b      	lsls	r3, r3, #22
 800ab7e:	d4e1      	bmi.n	800ab44 <_fflush_r+0xc>
 800ab80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab82:	f000 fb3b 	bl	800b1fc <__retarget_lock_release_recursive>
 800ab86:	e7dd      	b.n	800ab44 <_fflush_r+0xc>

0800ab88 <fflush>:
 800ab88:	4601      	mov	r1, r0
 800ab8a:	b920      	cbnz	r0, 800ab96 <fflush+0xe>
 800ab8c:	4a04      	ldr	r2, [pc, #16]	@ (800aba0 <fflush+0x18>)
 800ab8e:	4905      	ldr	r1, [pc, #20]	@ (800aba4 <fflush+0x1c>)
 800ab90:	4805      	ldr	r0, [pc, #20]	@ (800aba8 <fflush+0x20>)
 800ab92:	f000 b8b1 	b.w	800acf8 <_fwalk_sglue>
 800ab96:	4b05      	ldr	r3, [pc, #20]	@ (800abac <fflush+0x24>)
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f7ff bfcd 	b.w	800ab38 <_fflush_r>
 800ab9e:	bf00      	nop
 800aba0:	20000014 	.word	0x20000014
 800aba4:	0800ab39 	.word	0x0800ab39
 800aba8:	20000024 	.word	0x20000024
 800abac:	20000020 	.word	0x20000020

0800abb0 <std>:
 800abb0:	2300      	movs	r3, #0
 800abb2:	b510      	push	{r4, lr}
 800abb4:	4604      	mov	r4, r0
 800abb6:	e9c0 3300 	strd	r3, r3, [r0]
 800abba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abbe:	6083      	str	r3, [r0, #8]
 800abc0:	8181      	strh	r1, [r0, #12]
 800abc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800abc4:	81c2      	strh	r2, [r0, #14]
 800abc6:	6183      	str	r3, [r0, #24]
 800abc8:	4619      	mov	r1, r3
 800abca:	2208      	movs	r2, #8
 800abcc:	305c      	adds	r0, #92	@ 0x5c
 800abce:	f000 fa2d 	bl	800b02c <memset>
 800abd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac08 <std+0x58>)
 800abd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800abd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac0c <std+0x5c>)
 800abd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abda:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <std+0x60>)
 800abdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abde:	4b0d      	ldr	r3, [pc, #52]	@ (800ac14 <std+0x64>)
 800abe0:	6323      	str	r3, [r4, #48]	@ 0x30
 800abe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <std+0x68>)
 800abe4:	6224      	str	r4, [r4, #32]
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d006      	beq.n	800abf8 <std+0x48>
 800abea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abee:	4294      	cmp	r4, r2
 800abf0:	d002      	beq.n	800abf8 <std+0x48>
 800abf2:	33d0      	adds	r3, #208	@ 0xd0
 800abf4:	429c      	cmp	r4, r3
 800abf6:	d105      	bne.n	800ac04 <std+0x54>
 800abf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac00:	f000 bafa 	b.w	800b1f8 <__retarget_lock_init_recursive>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	bf00      	nop
 800ac08:	0800ae7d 	.word	0x0800ae7d
 800ac0c:	0800ae9f 	.word	0x0800ae9f
 800ac10:	0800aed7 	.word	0x0800aed7
 800ac14:	0800aefb 	.word	0x0800aefb
 800ac18:	20019e38 	.word	0x20019e38

0800ac1c <stdio_exit_handler>:
 800ac1c:	4a02      	ldr	r2, [pc, #8]	@ (800ac28 <stdio_exit_handler+0xc>)
 800ac1e:	4903      	ldr	r1, [pc, #12]	@ (800ac2c <stdio_exit_handler+0x10>)
 800ac20:	4803      	ldr	r0, [pc, #12]	@ (800ac30 <stdio_exit_handler+0x14>)
 800ac22:	f000 b869 	b.w	800acf8 <_fwalk_sglue>
 800ac26:	bf00      	nop
 800ac28:	20000014 	.word	0x20000014
 800ac2c:	0800ab39 	.word	0x0800ab39
 800ac30:	20000024 	.word	0x20000024

0800ac34 <cleanup_stdio>:
 800ac34:	6841      	ldr	r1, [r0, #4]
 800ac36:	4b0c      	ldr	r3, [pc, #48]	@ (800ac68 <cleanup_stdio+0x34>)
 800ac38:	4299      	cmp	r1, r3
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	d001      	beq.n	800ac44 <cleanup_stdio+0x10>
 800ac40:	f7ff ff7a 	bl	800ab38 <_fflush_r>
 800ac44:	68a1      	ldr	r1, [r4, #8]
 800ac46:	4b09      	ldr	r3, [pc, #36]	@ (800ac6c <cleanup_stdio+0x38>)
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	d002      	beq.n	800ac52 <cleanup_stdio+0x1e>
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f7ff ff73 	bl	800ab38 <_fflush_r>
 800ac52:	68e1      	ldr	r1, [r4, #12]
 800ac54:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <cleanup_stdio+0x3c>)
 800ac56:	4299      	cmp	r1, r3
 800ac58:	d004      	beq.n	800ac64 <cleanup_stdio+0x30>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac60:	f7ff bf6a 	b.w	800ab38 <_fflush_r>
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	bf00      	nop
 800ac68:	20019e38 	.word	0x20019e38
 800ac6c:	20019ea0 	.word	0x20019ea0
 800ac70:	20019f08 	.word	0x20019f08

0800ac74 <global_stdio_init.part.0>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4b0b      	ldr	r3, [pc, #44]	@ (800aca4 <global_stdio_init.part.0+0x30>)
 800ac78:	4c0b      	ldr	r4, [pc, #44]	@ (800aca8 <global_stdio_init.part.0+0x34>)
 800ac7a:	4a0c      	ldr	r2, [pc, #48]	@ (800acac <global_stdio_init.part.0+0x38>)
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	4620      	mov	r0, r4
 800ac80:	2200      	movs	r2, #0
 800ac82:	2104      	movs	r1, #4
 800ac84:	f7ff ff94 	bl	800abb0 <std>
 800ac88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	2109      	movs	r1, #9
 800ac90:	f7ff ff8e 	bl	800abb0 <std>
 800ac94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac98:	2202      	movs	r2, #2
 800ac9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac9e:	2112      	movs	r1, #18
 800aca0:	f7ff bf86 	b.w	800abb0 <std>
 800aca4:	20019f70 	.word	0x20019f70
 800aca8:	20019e38 	.word	0x20019e38
 800acac:	0800ac1d 	.word	0x0800ac1d

0800acb0 <__sfp_lock_acquire>:
 800acb0:	4801      	ldr	r0, [pc, #4]	@ (800acb8 <__sfp_lock_acquire+0x8>)
 800acb2:	f000 baa2 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	20019f79 	.word	0x20019f79

0800acbc <__sfp_lock_release>:
 800acbc:	4801      	ldr	r0, [pc, #4]	@ (800acc4 <__sfp_lock_release+0x8>)
 800acbe:	f000 ba9d 	b.w	800b1fc <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	20019f79 	.word	0x20019f79

0800acc8 <__sinit>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	f7ff fff0 	bl	800acb0 <__sfp_lock_acquire>
 800acd0:	6a23      	ldr	r3, [r4, #32]
 800acd2:	b11b      	cbz	r3, 800acdc <__sinit+0x14>
 800acd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd8:	f7ff bff0 	b.w	800acbc <__sfp_lock_release>
 800acdc:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <__sinit+0x28>)
 800acde:	6223      	str	r3, [r4, #32]
 800ace0:	4b04      	ldr	r3, [pc, #16]	@ (800acf4 <__sinit+0x2c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1f5      	bne.n	800acd4 <__sinit+0xc>
 800ace8:	f7ff ffc4 	bl	800ac74 <global_stdio_init.part.0>
 800acec:	e7f2      	b.n	800acd4 <__sinit+0xc>
 800acee:	bf00      	nop
 800acf0:	0800ac35 	.word	0x0800ac35
 800acf4:	20019f70 	.word	0x20019f70

0800acf8 <_fwalk_sglue>:
 800acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	4607      	mov	r7, r0
 800acfe:	4688      	mov	r8, r1
 800ad00:	4614      	mov	r4, r2
 800ad02:	2600      	movs	r6, #0
 800ad04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad08:	f1b9 0901 	subs.w	r9, r9, #1
 800ad0c:	d505      	bpl.n	800ad1a <_fwalk_sglue+0x22>
 800ad0e:	6824      	ldr	r4, [r4, #0]
 800ad10:	2c00      	cmp	r4, #0
 800ad12:	d1f7      	bne.n	800ad04 <_fwalk_sglue+0xc>
 800ad14:	4630      	mov	r0, r6
 800ad16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d907      	bls.n	800ad30 <_fwalk_sglue+0x38>
 800ad20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad24:	3301      	adds	r3, #1
 800ad26:	d003      	beq.n	800ad30 <_fwalk_sglue+0x38>
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	47c0      	blx	r8
 800ad2e:	4306      	orrs	r6, r0
 800ad30:	3568      	adds	r5, #104	@ 0x68
 800ad32:	e7e9      	b.n	800ad08 <_fwalk_sglue+0x10>

0800ad34 <iprintf>:
 800ad34:	b40f      	push	{r0, r1, r2, r3}
 800ad36:	b507      	push	{r0, r1, r2, lr}
 800ad38:	4906      	ldr	r1, [pc, #24]	@ (800ad54 <iprintf+0x20>)
 800ad3a:	ab04      	add	r3, sp, #16
 800ad3c:	6808      	ldr	r0, [r1, #0]
 800ad3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad42:	6881      	ldr	r1, [r0, #8]
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	f001 febb 	bl	800cac0 <_vfiprintf_r>
 800ad4a:	b003      	add	sp, #12
 800ad4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad50:	b004      	add	sp, #16
 800ad52:	4770      	bx	lr
 800ad54:	20000020 	.word	0x20000020

0800ad58 <_puts_r>:
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b570      	push	{r4, r5, r6, lr}
 800ad5c:	6884      	ldr	r4, [r0, #8]
 800ad5e:	4605      	mov	r5, r0
 800ad60:	460e      	mov	r6, r1
 800ad62:	b90b      	cbnz	r3, 800ad68 <_puts_r+0x10>
 800ad64:	f7ff ffb0 	bl	800acc8 <__sinit>
 800ad68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad6a:	07db      	lsls	r3, r3, #31
 800ad6c:	d405      	bmi.n	800ad7a <_puts_r+0x22>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	0598      	lsls	r0, r3, #22
 800ad72:	d402      	bmi.n	800ad7a <_puts_r+0x22>
 800ad74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad76:	f000 fa40 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	0719      	lsls	r1, r3, #28
 800ad7e:	d502      	bpl.n	800ad86 <_puts_r+0x2e>
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d135      	bne.n	800adf2 <_puts_r+0x9a>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 f8f9 	bl	800af80 <__swsetup_r>
 800ad8e:	b380      	cbz	r0, 800adf2 <_puts_r+0x9a>
 800ad90:	f04f 35ff 	mov.w	r5, #4294967295
 800ad94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad96:	07da      	lsls	r2, r3, #31
 800ad98:	d405      	bmi.n	800ada6 <_puts_r+0x4e>
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	059b      	lsls	r3, r3, #22
 800ad9e:	d402      	bmi.n	800ada6 <_puts_r+0x4e>
 800ada0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ada2:	f000 fa2b 	bl	800b1fc <__retarget_lock_release_recursive>
 800ada6:	4628      	mov	r0, r5
 800ada8:	bd70      	pop	{r4, r5, r6, pc}
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da04      	bge.n	800adb8 <_puts_r+0x60>
 800adae:	69a2      	ldr	r2, [r4, #24]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	dc17      	bgt.n	800ade4 <_puts_r+0x8c>
 800adb4:	290a      	cmp	r1, #10
 800adb6:	d015      	beq.n	800ade4 <_puts_r+0x8c>
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	6022      	str	r2, [r4, #0]
 800adbe:	7019      	strb	r1, [r3, #0]
 800adc0:	68a3      	ldr	r3, [r4, #8]
 800adc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800adc6:	3b01      	subs	r3, #1
 800adc8:	60a3      	str	r3, [r4, #8]
 800adca:	2900      	cmp	r1, #0
 800adcc:	d1ed      	bne.n	800adaa <_puts_r+0x52>
 800adce:	2b00      	cmp	r3, #0
 800add0:	da11      	bge.n	800adf6 <_puts_r+0x9e>
 800add2:	4622      	mov	r2, r4
 800add4:	210a      	movs	r1, #10
 800add6:	4628      	mov	r0, r5
 800add8:	f000 f893 	bl	800af02 <__swbuf_r>
 800addc:	3001      	adds	r0, #1
 800adde:	d0d7      	beq.n	800ad90 <_puts_r+0x38>
 800ade0:	250a      	movs	r5, #10
 800ade2:	e7d7      	b.n	800ad94 <_puts_r+0x3c>
 800ade4:	4622      	mov	r2, r4
 800ade6:	4628      	mov	r0, r5
 800ade8:	f000 f88b 	bl	800af02 <__swbuf_r>
 800adec:	3001      	adds	r0, #1
 800adee:	d1e7      	bne.n	800adc0 <_puts_r+0x68>
 800adf0:	e7ce      	b.n	800ad90 <_puts_r+0x38>
 800adf2:	3e01      	subs	r6, #1
 800adf4:	e7e4      	b.n	800adc0 <_puts_r+0x68>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	6022      	str	r2, [r4, #0]
 800adfc:	220a      	movs	r2, #10
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e7ee      	b.n	800ade0 <_puts_r+0x88>
	...

0800ae04 <puts>:
 800ae04:	4b02      	ldr	r3, [pc, #8]	@ (800ae10 <puts+0xc>)
 800ae06:	4601      	mov	r1, r0
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	f7ff bfa5 	b.w	800ad58 <_puts_r>
 800ae0e:	bf00      	nop
 800ae10:	20000020 	.word	0x20000020

0800ae14 <sniprintf>:
 800ae14:	b40c      	push	{r2, r3}
 800ae16:	b530      	push	{r4, r5, lr}
 800ae18:	4b17      	ldr	r3, [pc, #92]	@ (800ae78 <sniprintf+0x64>)
 800ae1a:	1e0c      	subs	r4, r1, #0
 800ae1c:	681d      	ldr	r5, [r3, #0]
 800ae1e:	b09d      	sub	sp, #116	@ 0x74
 800ae20:	da08      	bge.n	800ae34 <sniprintf+0x20>
 800ae22:	238b      	movs	r3, #139	@ 0x8b
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2a:	b01d      	add	sp, #116	@ 0x74
 800ae2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae30:	b002      	add	sp, #8
 800ae32:	4770      	bx	lr
 800ae34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae3c:	bf14      	ite	ne
 800ae3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae42:	4623      	moveq	r3, r4
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	9307      	str	r3, [sp, #28]
 800ae48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae4c:	9002      	str	r0, [sp, #8]
 800ae4e:	9006      	str	r0, [sp, #24]
 800ae50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ae56:	ab21      	add	r3, sp, #132	@ 0x84
 800ae58:	a902      	add	r1, sp, #8
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f001 fd09 	bl	800c874 <_svfiprintf_r>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	bfbc      	itt	lt
 800ae66:	238b      	movlt	r3, #139	@ 0x8b
 800ae68:	602b      	strlt	r3, [r5, #0]
 800ae6a:	2c00      	cmp	r4, #0
 800ae6c:	d0dd      	beq.n	800ae2a <sniprintf+0x16>
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	2200      	movs	r2, #0
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e7d9      	b.n	800ae2a <sniprintf+0x16>
 800ae76:	bf00      	nop
 800ae78:	20000020 	.word	0x20000020

0800ae7c <__sread>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae84:	f000 f96a 	bl	800b15c <_read_r>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	bfab      	itete	ge
 800ae8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae90:	181b      	addge	r3, r3, r0
 800ae92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae96:	bfac      	ite	ge
 800ae98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae9a:	81a3      	strhlt	r3, [r4, #12]
 800ae9c:	bd10      	pop	{r4, pc}

0800ae9e <__swrite>:
 800ae9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea2:	461f      	mov	r7, r3
 800aea4:	898b      	ldrh	r3, [r1, #12]
 800aea6:	05db      	lsls	r3, r3, #23
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	4616      	mov	r6, r2
 800aeae:	d505      	bpl.n	800aebc <__swrite+0x1e>
 800aeb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f000 f93e 	bl	800b138 <_lseek_r>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	4632      	mov	r2, r6
 800aeca:	463b      	mov	r3, r7
 800aecc:	4628      	mov	r0, r5
 800aece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed2:	f000 b955 	b.w	800b180 <_write_r>

0800aed6 <__sseek>:
 800aed6:	b510      	push	{r4, lr}
 800aed8:	460c      	mov	r4, r1
 800aeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aede:	f000 f92b 	bl	800b138 <_lseek_r>
 800aee2:	1c43      	adds	r3, r0, #1
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	bf15      	itete	ne
 800aee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aeea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aeee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aef2:	81a3      	strheq	r3, [r4, #12]
 800aef4:	bf18      	it	ne
 800aef6:	81a3      	strhne	r3, [r4, #12]
 800aef8:	bd10      	pop	{r4, pc}

0800aefa <__sclose>:
 800aefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefe:	f000 b8b5 	b.w	800b06c <_close_r>

0800af02 <__swbuf_r>:
 800af02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af04:	460e      	mov	r6, r1
 800af06:	4614      	mov	r4, r2
 800af08:	4605      	mov	r5, r0
 800af0a:	b118      	cbz	r0, 800af14 <__swbuf_r+0x12>
 800af0c:	6a03      	ldr	r3, [r0, #32]
 800af0e:	b90b      	cbnz	r3, 800af14 <__swbuf_r+0x12>
 800af10:	f7ff feda 	bl	800acc8 <__sinit>
 800af14:	69a3      	ldr	r3, [r4, #24]
 800af16:	60a3      	str	r3, [r4, #8]
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	071a      	lsls	r2, r3, #28
 800af1c:	d501      	bpl.n	800af22 <__swbuf_r+0x20>
 800af1e:	6923      	ldr	r3, [r4, #16]
 800af20:	b943      	cbnz	r3, 800af34 <__swbuf_r+0x32>
 800af22:	4621      	mov	r1, r4
 800af24:	4628      	mov	r0, r5
 800af26:	f000 f82b 	bl	800af80 <__swsetup_r>
 800af2a:	b118      	cbz	r0, 800af34 <__swbuf_r+0x32>
 800af2c:	f04f 37ff 	mov.w	r7, #4294967295
 800af30:	4638      	mov	r0, r7
 800af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	6922      	ldr	r2, [r4, #16]
 800af38:	1a98      	subs	r0, r3, r2
 800af3a:	6963      	ldr	r3, [r4, #20]
 800af3c:	b2f6      	uxtb	r6, r6
 800af3e:	4283      	cmp	r3, r0
 800af40:	4637      	mov	r7, r6
 800af42:	dc05      	bgt.n	800af50 <__swbuf_r+0x4e>
 800af44:	4621      	mov	r1, r4
 800af46:	4628      	mov	r0, r5
 800af48:	f7ff fdf6 	bl	800ab38 <_fflush_r>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d1ed      	bne.n	800af2c <__swbuf_r+0x2a>
 800af50:	68a3      	ldr	r3, [r4, #8]
 800af52:	3b01      	subs	r3, #1
 800af54:	60a3      	str	r3, [r4, #8]
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	6022      	str	r2, [r4, #0]
 800af5c:	701e      	strb	r6, [r3, #0]
 800af5e:	6962      	ldr	r2, [r4, #20]
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	429a      	cmp	r2, r3
 800af64:	d004      	beq.n	800af70 <__swbuf_r+0x6e>
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	07db      	lsls	r3, r3, #31
 800af6a:	d5e1      	bpl.n	800af30 <__swbuf_r+0x2e>
 800af6c:	2e0a      	cmp	r6, #10
 800af6e:	d1df      	bne.n	800af30 <__swbuf_r+0x2e>
 800af70:	4621      	mov	r1, r4
 800af72:	4628      	mov	r0, r5
 800af74:	f7ff fde0 	bl	800ab38 <_fflush_r>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d0d9      	beq.n	800af30 <__swbuf_r+0x2e>
 800af7c:	e7d6      	b.n	800af2c <__swbuf_r+0x2a>
	...

0800af80 <__swsetup_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4b29      	ldr	r3, [pc, #164]	@ (800b028 <__swsetup_r+0xa8>)
 800af84:	4605      	mov	r5, r0
 800af86:	6818      	ldr	r0, [r3, #0]
 800af88:	460c      	mov	r4, r1
 800af8a:	b118      	cbz	r0, 800af94 <__swsetup_r+0x14>
 800af8c:	6a03      	ldr	r3, [r0, #32]
 800af8e:	b90b      	cbnz	r3, 800af94 <__swsetup_r+0x14>
 800af90:	f7ff fe9a 	bl	800acc8 <__sinit>
 800af94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af98:	0719      	lsls	r1, r3, #28
 800af9a:	d422      	bmi.n	800afe2 <__swsetup_r+0x62>
 800af9c:	06da      	lsls	r2, r3, #27
 800af9e:	d407      	bmi.n	800afb0 <__swsetup_r+0x30>
 800afa0:	2209      	movs	r2, #9
 800afa2:	602a      	str	r2, [r5, #0]
 800afa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	f04f 30ff 	mov.w	r0, #4294967295
 800afae:	e033      	b.n	800b018 <__swsetup_r+0x98>
 800afb0:	0758      	lsls	r0, r3, #29
 800afb2:	d512      	bpl.n	800afda <__swsetup_r+0x5a>
 800afb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afb6:	b141      	cbz	r1, 800afca <__swsetup_r+0x4a>
 800afb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afbc:	4299      	cmp	r1, r3
 800afbe:	d002      	beq.n	800afc6 <__swsetup_r+0x46>
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 ff79 	bl	800beb8 <_free_r>
 800afc6:	2300      	movs	r3, #0
 800afc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afd0:	81a3      	strh	r3, [r4, #12]
 800afd2:	2300      	movs	r3, #0
 800afd4:	6063      	str	r3, [r4, #4]
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f043 0308 	orr.w	r3, r3, #8
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	6923      	ldr	r3, [r4, #16]
 800afe4:	b94b      	cbnz	r3, 800affa <__swsetup_r+0x7a>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aff0:	d003      	beq.n	800affa <__swsetup_r+0x7a>
 800aff2:	4621      	mov	r1, r4
 800aff4:	4628      	mov	r0, r5
 800aff6:	f001 fea1 	bl	800cd3c <__smakebuf_r>
 800affa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affe:	f013 0201 	ands.w	r2, r3, #1
 800b002:	d00a      	beq.n	800b01a <__swsetup_r+0x9a>
 800b004:	2200      	movs	r2, #0
 800b006:	60a2      	str	r2, [r4, #8]
 800b008:	6962      	ldr	r2, [r4, #20]
 800b00a:	4252      	negs	r2, r2
 800b00c:	61a2      	str	r2, [r4, #24]
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	b942      	cbnz	r2, 800b024 <__swsetup_r+0xa4>
 800b012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b016:	d1c5      	bne.n	800afa4 <__swsetup_r+0x24>
 800b018:	bd38      	pop	{r3, r4, r5, pc}
 800b01a:	0799      	lsls	r1, r3, #30
 800b01c:	bf58      	it	pl
 800b01e:	6962      	ldrpl	r2, [r4, #20]
 800b020:	60a2      	str	r2, [r4, #8]
 800b022:	e7f4      	b.n	800b00e <__swsetup_r+0x8e>
 800b024:	2000      	movs	r0, #0
 800b026:	e7f7      	b.n	800b018 <__swsetup_r+0x98>
 800b028:	20000020 	.word	0x20000020

0800b02c <memset>:
 800b02c:	4402      	add	r2, r0
 800b02e:	4603      	mov	r3, r0
 800b030:	4293      	cmp	r3, r2
 800b032:	d100      	bne.n	800b036 <memset+0xa>
 800b034:	4770      	bx	lr
 800b036:	f803 1b01 	strb.w	r1, [r3], #1
 800b03a:	e7f9      	b.n	800b030 <memset+0x4>

0800b03c <strncpy>:
 800b03c:	b510      	push	{r4, lr}
 800b03e:	3901      	subs	r1, #1
 800b040:	4603      	mov	r3, r0
 800b042:	b132      	cbz	r2, 800b052 <strncpy+0x16>
 800b044:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b048:	f803 4b01 	strb.w	r4, [r3], #1
 800b04c:	3a01      	subs	r2, #1
 800b04e:	2c00      	cmp	r4, #0
 800b050:	d1f7      	bne.n	800b042 <strncpy+0x6>
 800b052:	441a      	add	r2, r3
 800b054:	2100      	movs	r1, #0
 800b056:	4293      	cmp	r3, r2
 800b058:	d100      	bne.n	800b05c <strncpy+0x20>
 800b05a:	bd10      	pop	{r4, pc}
 800b05c:	f803 1b01 	strb.w	r1, [r3], #1
 800b060:	e7f9      	b.n	800b056 <strncpy+0x1a>
	...

0800b064 <_localeconv_r>:
 800b064:	4800      	ldr	r0, [pc, #0]	@ (800b068 <_localeconv_r+0x4>)
 800b066:	4770      	bx	lr
 800b068:	20000160 	.word	0x20000160

0800b06c <_close_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4d06      	ldr	r5, [pc, #24]	@ (800b088 <_close_r+0x1c>)
 800b070:	2300      	movs	r3, #0
 800b072:	4604      	mov	r4, r0
 800b074:	4608      	mov	r0, r1
 800b076:	602b      	str	r3, [r5, #0]
 800b078:	f7f8 f8fa 	bl	8003270 <_close>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_close_r+0x1a>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b103      	cbz	r3, 800b086 <_close_r+0x1a>
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	20019f74 	.word	0x20019f74

0800b08c <_reclaim_reent>:
 800b08c:	4b29      	ldr	r3, [pc, #164]	@ (800b134 <_reclaim_reent+0xa8>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4283      	cmp	r3, r0
 800b092:	b570      	push	{r4, r5, r6, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	d04b      	beq.n	800b130 <_reclaim_reent+0xa4>
 800b098:	69c3      	ldr	r3, [r0, #28]
 800b09a:	b1ab      	cbz	r3, 800b0c8 <_reclaim_reent+0x3c>
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	b16b      	cbz	r3, 800b0bc <_reclaim_reent+0x30>
 800b0a0:	2500      	movs	r5, #0
 800b0a2:	69e3      	ldr	r3, [r4, #28]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	5959      	ldr	r1, [r3, r5]
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	d13b      	bne.n	800b124 <_reclaim_reent+0x98>
 800b0ac:	3504      	adds	r5, #4
 800b0ae:	2d80      	cmp	r5, #128	@ 0x80
 800b0b0:	d1f7      	bne.n	800b0a2 <_reclaim_reent+0x16>
 800b0b2:	69e3      	ldr	r3, [r4, #28]
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	68d9      	ldr	r1, [r3, #12]
 800b0b8:	f000 fefe 	bl	800beb8 <_free_r>
 800b0bc:	69e3      	ldr	r3, [r4, #28]
 800b0be:	6819      	ldr	r1, [r3, #0]
 800b0c0:	b111      	cbz	r1, 800b0c8 <_reclaim_reent+0x3c>
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fef8 	bl	800beb8 <_free_r>
 800b0c8:	6961      	ldr	r1, [r4, #20]
 800b0ca:	b111      	cbz	r1, 800b0d2 <_reclaim_reent+0x46>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fef3 	bl	800beb8 <_free_r>
 800b0d2:	69e1      	ldr	r1, [r4, #28]
 800b0d4:	b111      	cbz	r1, 800b0dc <_reclaim_reent+0x50>
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 feee 	bl	800beb8 <_free_r>
 800b0dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b0de:	b111      	cbz	r1, 800b0e6 <_reclaim_reent+0x5a>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 fee9 	bl	800beb8 <_free_r>
 800b0e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0e8:	b111      	cbz	r1, 800b0f0 <_reclaim_reent+0x64>
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fee4 	bl	800beb8 <_free_r>
 800b0f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b0f2:	b111      	cbz	r1, 800b0fa <_reclaim_reent+0x6e>
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f000 fedf 	bl	800beb8 <_free_r>
 800b0fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b0fc:	b111      	cbz	r1, 800b104 <_reclaim_reent+0x78>
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 feda 	bl	800beb8 <_free_r>
 800b104:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b106:	b111      	cbz	r1, 800b10e <_reclaim_reent+0x82>
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fed5 	bl	800beb8 <_free_r>
 800b10e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b110:	b111      	cbz	r1, 800b118 <_reclaim_reent+0x8c>
 800b112:	4620      	mov	r0, r4
 800b114:	f000 fed0 	bl	800beb8 <_free_r>
 800b118:	6a23      	ldr	r3, [r4, #32]
 800b11a:	b14b      	cbz	r3, 800b130 <_reclaim_reent+0xa4>
 800b11c:	4620      	mov	r0, r4
 800b11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b122:	4718      	bx	r3
 800b124:	680e      	ldr	r6, [r1, #0]
 800b126:	4620      	mov	r0, r4
 800b128:	f000 fec6 	bl	800beb8 <_free_r>
 800b12c:	4631      	mov	r1, r6
 800b12e:	e7bb      	b.n	800b0a8 <_reclaim_reent+0x1c>
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	bf00      	nop
 800b134:	20000020 	.word	0x20000020

0800b138 <_lseek_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4d07      	ldr	r5, [pc, #28]	@ (800b158 <_lseek_r+0x20>)
 800b13c:	4604      	mov	r4, r0
 800b13e:	4608      	mov	r0, r1
 800b140:	4611      	mov	r1, r2
 800b142:	2200      	movs	r2, #0
 800b144:	602a      	str	r2, [r5, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	f7f8 f8b9 	bl	80032be <_lseek>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_lseek_r+0x1e>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_lseek_r+0x1e>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	20019f74 	.word	0x20019f74

0800b15c <_read_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	@ (800b17c <_read_r+0x20>)
 800b160:	4604      	mov	r4, r0
 800b162:	4608      	mov	r0, r1
 800b164:	4611      	mov	r1, r2
 800b166:	2200      	movs	r2, #0
 800b168:	602a      	str	r2, [r5, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f7f8 f847 	bl	80031fe <_read>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_read_r+0x1e>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	b103      	cbz	r3, 800b17a <_read_r+0x1e>
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	20019f74 	.word	0x20019f74

0800b180 <_write_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	@ (800b1a0 <_write_r+0x20>)
 800b184:	4604      	mov	r4, r0
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f7f8 f852 	bl	8003238 <_write>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_write_r+0x1e>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_write_r+0x1e>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	20019f74 	.word	0x20019f74

0800b1a4 <__errno>:
 800b1a4:	4b01      	ldr	r3, [pc, #4]	@ (800b1ac <__errno+0x8>)
 800b1a6:	6818      	ldr	r0, [r3, #0]
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	20000020 	.word	0x20000020

0800b1b0 <__libc_init_array>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b1e8 <__libc_init_array+0x38>)
 800b1b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b1ec <__libc_init_array+0x3c>)
 800b1b6:	1b64      	subs	r4, r4, r5
 800b1b8:	10a4      	asrs	r4, r4, #2
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	42a6      	cmp	r6, r4
 800b1be:	d109      	bne.n	800b1d4 <__libc_init_array+0x24>
 800b1c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b1f0 <__libc_init_array+0x40>)
 800b1c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b1f4 <__libc_init_array+0x44>)
 800b1c4:	f001 ff28 	bl	800d018 <_init>
 800b1c8:	1b64      	subs	r4, r4, r5
 800b1ca:	10a4      	asrs	r4, r4, #2
 800b1cc:	2600      	movs	r6, #0
 800b1ce:	42a6      	cmp	r6, r4
 800b1d0:	d105      	bne.n	800b1de <__libc_init_array+0x2e>
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d8:	4798      	blx	r3
 800b1da:	3601      	adds	r6, #1
 800b1dc:	e7ee      	b.n	800b1bc <__libc_init_array+0xc>
 800b1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1e2:	4798      	blx	r3
 800b1e4:	3601      	adds	r6, #1
 800b1e6:	e7f2      	b.n	800b1ce <__libc_init_array+0x1e>
 800b1e8:	0800e7c0 	.word	0x0800e7c0
 800b1ec:	0800e7c0 	.word	0x0800e7c0
 800b1f0:	0800e7c0 	.word	0x0800e7c0
 800b1f4:	0800e7c4 	.word	0x0800e7c4

0800b1f8 <__retarget_lock_init_recursive>:
 800b1f8:	4770      	bx	lr

0800b1fa <__retarget_lock_acquire_recursive>:
 800b1fa:	4770      	bx	lr

0800b1fc <__retarget_lock_release_recursive>:
 800b1fc:	4770      	bx	lr

0800b1fe <memcpy>:
 800b1fe:	440a      	add	r2, r1
 800b200:	4291      	cmp	r1, r2
 800b202:	f100 33ff 	add.w	r3, r0, #4294967295
 800b206:	d100      	bne.n	800b20a <memcpy+0xc>
 800b208:	4770      	bx	lr
 800b20a:	b510      	push	{r4, lr}
 800b20c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b210:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b214:	4291      	cmp	r1, r2
 800b216:	d1f9      	bne.n	800b20c <memcpy+0xe>
 800b218:	bd10      	pop	{r4, pc}

0800b21a <quorem>:
 800b21a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21e:	6903      	ldr	r3, [r0, #16]
 800b220:	690c      	ldr	r4, [r1, #16]
 800b222:	42a3      	cmp	r3, r4
 800b224:	4607      	mov	r7, r0
 800b226:	db7e      	blt.n	800b326 <quorem+0x10c>
 800b228:	3c01      	subs	r4, #1
 800b22a:	f101 0814 	add.w	r8, r1, #20
 800b22e:	00a3      	lsls	r3, r4, #2
 800b230:	f100 0514 	add.w	r5, r0, #20
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b244:	3301      	adds	r3, #1
 800b246:	429a      	cmp	r2, r3
 800b248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b24c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b250:	d32e      	bcc.n	800b2b0 <quorem+0x96>
 800b252:	f04f 0a00 	mov.w	sl, #0
 800b256:	46c4      	mov	ip, r8
 800b258:	46ae      	mov	lr, r5
 800b25a:	46d3      	mov	fp, sl
 800b25c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b260:	b298      	uxth	r0, r3
 800b262:	fb06 a000 	mla	r0, r6, r0, sl
 800b266:	0c02      	lsrs	r2, r0, #16
 800b268:	0c1b      	lsrs	r3, r3, #16
 800b26a:	fb06 2303 	mla	r3, r6, r3, r2
 800b26e:	f8de 2000 	ldr.w	r2, [lr]
 800b272:	b280      	uxth	r0, r0
 800b274:	b292      	uxth	r2, r2
 800b276:	1a12      	subs	r2, r2, r0
 800b278:	445a      	add	r2, fp
 800b27a:	f8de 0000 	ldr.w	r0, [lr]
 800b27e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b282:	b29b      	uxth	r3, r3
 800b284:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b288:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b28c:	b292      	uxth	r2, r2
 800b28e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b292:	45e1      	cmp	r9, ip
 800b294:	f84e 2b04 	str.w	r2, [lr], #4
 800b298:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b29c:	d2de      	bcs.n	800b25c <quorem+0x42>
 800b29e:	9b00      	ldr	r3, [sp, #0]
 800b2a0:	58eb      	ldr	r3, [r5, r3]
 800b2a2:	b92b      	cbnz	r3, 800b2b0 <quorem+0x96>
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	3b04      	subs	r3, #4
 800b2a8:	429d      	cmp	r5, r3
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	d32f      	bcc.n	800b30e <quorem+0xf4>
 800b2ae:	613c      	str	r4, [r7, #16]
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f001 f97b 	bl	800c5ac <__mcmp>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	db25      	blt.n	800b306 <quorem+0xec>
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2c2:	f8d1 c000 	ldr.w	ip, [r1]
 800b2c6:	fa1f fe82 	uxth.w	lr, r2
 800b2ca:	fa1f f38c 	uxth.w	r3, ip
 800b2ce:	eba3 030e 	sub.w	r3, r3, lr
 800b2d2:	4403      	add	r3, r0
 800b2d4:	0c12      	lsrs	r2, r2, #16
 800b2d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b2da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e4:	45c1      	cmp	r9, r8
 800b2e6:	f841 3b04 	str.w	r3, [r1], #4
 800b2ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2ee:	d2e6      	bcs.n	800b2be <quorem+0xa4>
 800b2f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2f8:	b922      	cbnz	r2, 800b304 <quorem+0xea>
 800b2fa:	3b04      	subs	r3, #4
 800b2fc:	429d      	cmp	r5, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	d30b      	bcc.n	800b31a <quorem+0x100>
 800b302:	613c      	str	r4, [r7, #16]
 800b304:	3601      	adds	r6, #1
 800b306:	4630      	mov	r0, r6
 800b308:	b003      	add	sp, #12
 800b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30e:	6812      	ldr	r2, [r2, #0]
 800b310:	3b04      	subs	r3, #4
 800b312:	2a00      	cmp	r2, #0
 800b314:	d1cb      	bne.n	800b2ae <quorem+0x94>
 800b316:	3c01      	subs	r4, #1
 800b318:	e7c6      	b.n	800b2a8 <quorem+0x8e>
 800b31a:	6812      	ldr	r2, [r2, #0]
 800b31c:	3b04      	subs	r3, #4
 800b31e:	2a00      	cmp	r2, #0
 800b320:	d1ef      	bne.n	800b302 <quorem+0xe8>
 800b322:	3c01      	subs	r4, #1
 800b324:	e7ea      	b.n	800b2fc <quorem+0xe2>
 800b326:	2000      	movs	r0, #0
 800b328:	e7ee      	b.n	800b308 <quorem+0xee>
 800b32a:	0000      	movs	r0, r0
 800b32c:	0000      	movs	r0, r0
	...

0800b330 <_dtoa_r>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	69c7      	ldr	r7, [r0, #28]
 800b336:	b099      	sub	sp, #100	@ 0x64
 800b338:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b33c:	ec55 4b10 	vmov	r4, r5, d0
 800b340:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b342:	9109      	str	r1, [sp, #36]	@ 0x24
 800b344:	4683      	mov	fp, r0
 800b346:	920e      	str	r2, [sp, #56]	@ 0x38
 800b348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b34a:	b97f      	cbnz	r7, 800b36c <_dtoa_r+0x3c>
 800b34c:	2010      	movs	r0, #16
 800b34e:	f000 fdfd 	bl	800bf4c <malloc>
 800b352:	4602      	mov	r2, r0
 800b354:	f8cb 001c 	str.w	r0, [fp, #28]
 800b358:	b920      	cbnz	r0, 800b364 <_dtoa_r+0x34>
 800b35a:	4ba7      	ldr	r3, [pc, #668]	@ (800b5f8 <_dtoa_r+0x2c8>)
 800b35c:	21ef      	movs	r1, #239	@ 0xef
 800b35e:	48a7      	ldr	r0, [pc, #668]	@ (800b5fc <_dtoa_r+0x2cc>)
 800b360:	f001 fd74 	bl	800ce4c <__assert_func>
 800b364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b368:	6007      	str	r7, [r0, #0]
 800b36a:	60c7      	str	r7, [r0, #12]
 800b36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	b159      	cbz	r1, 800b38c <_dtoa_r+0x5c>
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	604a      	str	r2, [r1, #4]
 800b378:	2301      	movs	r3, #1
 800b37a:	4093      	lsls	r3, r2
 800b37c:	608b      	str	r3, [r1, #8]
 800b37e:	4658      	mov	r0, fp
 800b380:	f000 feda 	bl	800c138 <_Bfree>
 800b384:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	1e2b      	subs	r3, r5, #0
 800b38e:	bfb9      	ittee	lt
 800b390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b394:	9303      	strlt	r3, [sp, #12]
 800b396:	2300      	movge	r3, #0
 800b398:	6033      	strge	r3, [r6, #0]
 800b39a:	9f03      	ldr	r7, [sp, #12]
 800b39c:	4b98      	ldr	r3, [pc, #608]	@ (800b600 <_dtoa_r+0x2d0>)
 800b39e:	bfbc      	itt	lt
 800b3a0:	2201      	movlt	r2, #1
 800b3a2:	6032      	strlt	r2, [r6, #0]
 800b3a4:	43bb      	bics	r3, r7
 800b3a6:	d112      	bne.n	800b3ce <_dtoa_r+0x9e>
 800b3a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3b4:	4323      	orrs	r3, r4
 800b3b6:	f000 854d 	beq.w	800be54 <_dtoa_r+0xb24>
 800b3ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b614 <_dtoa_r+0x2e4>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 854f 	beq.w	800be64 <_dtoa_r+0xb34>
 800b3c6:	f10a 0303 	add.w	r3, sl, #3
 800b3ca:	f000 bd49 	b.w	800be60 <_dtoa_r+0xb30>
 800b3ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	ec51 0b17 	vmov	r0, r1, d7
 800b3d8:	2300      	movs	r3, #0
 800b3da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b3de:	f7f5 fb93 	bl	8000b08 <__aeabi_dcmpeq>
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	b158      	cbz	r0, 800b3fe <_dtoa_r+0xce>
 800b3e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3ee:	b113      	cbz	r3, 800b3f6 <_dtoa_r+0xc6>
 800b3f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3f2:	4b84      	ldr	r3, [pc, #528]	@ (800b604 <_dtoa_r+0x2d4>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b618 <_dtoa_r+0x2e8>
 800b3fa:	f000 bd33 	b.w	800be64 <_dtoa_r+0xb34>
 800b3fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b402:	aa16      	add	r2, sp, #88	@ 0x58
 800b404:	a917      	add	r1, sp, #92	@ 0x5c
 800b406:	4658      	mov	r0, fp
 800b408:	f001 f980 	bl	800c70c <__d2b>
 800b40c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b410:	4681      	mov	r9, r0
 800b412:	2e00      	cmp	r6, #0
 800b414:	d077      	beq.n	800b506 <_dtoa_r+0x1d6>
 800b416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b418:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b42c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b430:	4619      	mov	r1, r3
 800b432:	2200      	movs	r2, #0
 800b434:	4b74      	ldr	r3, [pc, #464]	@ (800b608 <_dtoa_r+0x2d8>)
 800b436:	f7f4 ff47 	bl	80002c8 <__aeabi_dsub>
 800b43a:	a369      	add	r3, pc, #420	@ (adr r3, 800b5e0 <_dtoa_r+0x2b0>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f7f5 f8fa 	bl	8000638 <__aeabi_dmul>
 800b444:	a368      	add	r3, pc, #416	@ (adr r3, 800b5e8 <_dtoa_r+0x2b8>)
 800b446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44a:	f7f4 ff3f 	bl	80002cc <__adddf3>
 800b44e:	4604      	mov	r4, r0
 800b450:	4630      	mov	r0, r6
 800b452:	460d      	mov	r5, r1
 800b454:	f7f5 f886 	bl	8000564 <__aeabi_i2d>
 800b458:	a365      	add	r3, pc, #404	@ (adr r3, 800b5f0 <_dtoa_r+0x2c0>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f5 f8eb 	bl	8000638 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f4 ff2f 	bl	80002cc <__adddf3>
 800b46e:	4604      	mov	r4, r0
 800b470:	460d      	mov	r5, r1
 800b472:	f7f5 fb91 	bl	8000b98 <__aeabi_d2iz>
 800b476:	2200      	movs	r2, #0
 800b478:	4607      	mov	r7, r0
 800b47a:	2300      	movs	r3, #0
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 fb4c 	bl	8000b1c <__aeabi_dcmplt>
 800b484:	b140      	cbz	r0, 800b498 <_dtoa_r+0x168>
 800b486:	4638      	mov	r0, r7
 800b488:	f7f5 f86c 	bl	8000564 <__aeabi_i2d>
 800b48c:	4622      	mov	r2, r4
 800b48e:	462b      	mov	r3, r5
 800b490:	f7f5 fb3a 	bl	8000b08 <__aeabi_dcmpeq>
 800b494:	b900      	cbnz	r0, 800b498 <_dtoa_r+0x168>
 800b496:	3f01      	subs	r7, #1
 800b498:	2f16      	cmp	r7, #22
 800b49a:	d851      	bhi.n	800b540 <_dtoa_r+0x210>
 800b49c:	4b5b      	ldr	r3, [pc, #364]	@ (800b60c <_dtoa_r+0x2dc>)
 800b49e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4aa:	f7f5 fb37 	bl	8000b1c <__aeabi_dcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d048      	beq.n	800b544 <_dtoa_r+0x214>
 800b4b2:	3f01      	subs	r7, #1
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b4b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4ba:	1b9b      	subs	r3, r3, r6
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	bf44      	itt	mi
 800b4c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b4c4:	2300      	movmi	r3, #0
 800b4c6:	9208      	str	r2, [sp, #32]
 800b4c8:	bf54      	ite	pl
 800b4ca:	f04f 0800 	movpl.w	r8, #0
 800b4ce:	9308      	strmi	r3, [sp, #32]
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	db39      	blt.n	800b548 <_dtoa_r+0x218>
 800b4d4:	9b08      	ldr	r3, [sp, #32]
 800b4d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b4d8:	443b      	add	r3, r7
 800b4da:	9308      	str	r3, [sp, #32]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e2:	2b09      	cmp	r3, #9
 800b4e4:	d864      	bhi.n	800b5b0 <_dtoa_r+0x280>
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	bfc4      	itt	gt
 800b4ea:	3b04      	subgt	r3, #4
 800b4ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f0:	f1a3 0302 	sub.w	r3, r3, #2
 800b4f4:	bfcc      	ite	gt
 800b4f6:	2400      	movgt	r4, #0
 800b4f8:	2401      	movle	r4, #1
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d863      	bhi.n	800b5c6 <_dtoa_r+0x296>
 800b4fe:	e8df f003 	tbb	[pc, r3]
 800b502:	372a      	.short	0x372a
 800b504:	5535      	.short	0x5535
 800b506:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b50a:	441e      	add	r6, r3
 800b50c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b510:	2b20      	cmp	r3, #32
 800b512:	bfc1      	itttt	gt
 800b514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b518:	409f      	lslgt	r7, r3
 800b51a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b51e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b522:	bfd6      	itet	le
 800b524:	f1c3 0320 	rsble	r3, r3, #32
 800b528:	ea47 0003 	orrgt.w	r0, r7, r3
 800b52c:	fa04 f003 	lslle.w	r0, r4, r3
 800b530:	f7f5 f808 	bl	8000544 <__aeabi_ui2d>
 800b534:	2201      	movs	r2, #1
 800b536:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b53a:	3e01      	subs	r6, #1
 800b53c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b53e:	e777      	b.n	800b430 <_dtoa_r+0x100>
 800b540:	2301      	movs	r3, #1
 800b542:	e7b8      	b.n	800b4b6 <_dtoa_r+0x186>
 800b544:	9012      	str	r0, [sp, #72]	@ 0x48
 800b546:	e7b7      	b.n	800b4b8 <_dtoa_r+0x188>
 800b548:	427b      	negs	r3, r7
 800b54a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b54c:	2300      	movs	r3, #0
 800b54e:	eba8 0807 	sub.w	r8, r8, r7
 800b552:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b554:	e7c4      	b.n	800b4e0 <_dtoa_r+0x1b0>
 800b556:	2300      	movs	r3, #0
 800b558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc35      	bgt.n	800b5cc <_dtoa_r+0x29c>
 800b560:	2301      	movs	r3, #1
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	9307      	str	r3, [sp, #28]
 800b566:	461a      	mov	r2, r3
 800b568:	920e      	str	r2, [sp, #56]	@ 0x38
 800b56a:	e00b      	b.n	800b584 <_dtoa_r+0x254>
 800b56c:	2301      	movs	r3, #1
 800b56e:	e7f3      	b.n	800b558 <_dtoa_r+0x228>
 800b570:	2300      	movs	r3, #0
 800b572:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b576:	18fb      	adds	r3, r7, r3
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	3301      	adds	r3, #1
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	9307      	str	r3, [sp, #28]
 800b580:	bfb8      	it	lt
 800b582:	2301      	movlt	r3, #1
 800b584:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b588:	2100      	movs	r1, #0
 800b58a:	2204      	movs	r2, #4
 800b58c:	f102 0514 	add.w	r5, r2, #20
 800b590:	429d      	cmp	r5, r3
 800b592:	d91f      	bls.n	800b5d4 <_dtoa_r+0x2a4>
 800b594:	6041      	str	r1, [r0, #4]
 800b596:	4658      	mov	r0, fp
 800b598:	f000 fd8e 	bl	800c0b8 <_Balloc>
 800b59c:	4682      	mov	sl, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d13c      	bne.n	800b61c <_dtoa_r+0x2ec>
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b610 <_dtoa_r+0x2e0>)
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b5aa:	e6d8      	b.n	800b35e <_dtoa_r+0x2e>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e7e0      	b.n	800b572 <_dtoa_r+0x242>
 800b5b0:	2401      	movs	r4, #1
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2312      	movs	r3, #18
 800b5c4:	e7d0      	b.n	800b568 <_dtoa_r+0x238>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ca:	e7f5      	b.n	800b5b8 <_dtoa_r+0x288>
 800b5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	e7d7      	b.n	800b584 <_dtoa_r+0x254>
 800b5d4:	3101      	adds	r1, #1
 800b5d6:	0052      	lsls	r2, r2, #1
 800b5d8:	e7d8      	b.n	800b58c <_dtoa_r+0x25c>
 800b5da:	bf00      	nop
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	636f4361 	.word	0x636f4361
 800b5e4:	3fd287a7 	.word	0x3fd287a7
 800b5e8:	8b60c8b3 	.word	0x8b60c8b3
 800b5ec:	3fc68a28 	.word	0x3fc68a28
 800b5f0:	509f79fb 	.word	0x509f79fb
 800b5f4:	3fd34413 	.word	0x3fd34413
 800b5f8:	0800e485 	.word	0x0800e485
 800b5fc:	0800e49c 	.word	0x0800e49c
 800b600:	7ff00000 	.word	0x7ff00000
 800b604:	0800e455 	.word	0x0800e455
 800b608:	3ff80000 	.word	0x3ff80000
 800b60c:	0800e598 	.word	0x0800e598
 800b610:	0800e4f4 	.word	0x0800e4f4
 800b614:	0800e481 	.word	0x0800e481
 800b618:	0800e454 	.word	0x0800e454
 800b61c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b620:	6018      	str	r0, [r3, #0]
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	2b0e      	cmp	r3, #14
 800b626:	f200 80a4 	bhi.w	800b772 <_dtoa_r+0x442>
 800b62a:	2c00      	cmp	r4, #0
 800b62c:	f000 80a1 	beq.w	800b772 <_dtoa_r+0x442>
 800b630:	2f00      	cmp	r7, #0
 800b632:	dd33      	ble.n	800b69c <_dtoa_r+0x36c>
 800b634:	4bad      	ldr	r3, [pc, #692]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b636:	f007 020f 	and.w	r2, r7, #15
 800b63a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b63e:	ed93 7b00 	vldr	d7, [r3]
 800b642:	05f8      	lsls	r0, r7, #23
 800b644:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b64c:	d516      	bpl.n	800b67c <_dtoa_r+0x34c>
 800b64e:	4ba8      	ldr	r3, [pc, #672]	@ (800b8f0 <_dtoa_r+0x5c0>)
 800b650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b658:	f7f5 f918 	bl	800088c <__aeabi_ddiv>
 800b65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b660:	f004 040f 	and.w	r4, r4, #15
 800b664:	2603      	movs	r6, #3
 800b666:	4da2      	ldr	r5, [pc, #648]	@ (800b8f0 <_dtoa_r+0x5c0>)
 800b668:	b954      	cbnz	r4, 800b680 <_dtoa_r+0x350>
 800b66a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b672:	f7f5 f90b 	bl	800088c <__aeabi_ddiv>
 800b676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67a:	e028      	b.n	800b6ce <_dtoa_r+0x39e>
 800b67c:	2602      	movs	r6, #2
 800b67e:	e7f2      	b.n	800b666 <_dtoa_r+0x336>
 800b680:	07e1      	lsls	r1, r4, #31
 800b682:	d508      	bpl.n	800b696 <_dtoa_r+0x366>
 800b684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b68c:	f7f4 ffd4 	bl	8000638 <__aeabi_dmul>
 800b690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b694:	3601      	adds	r6, #1
 800b696:	1064      	asrs	r4, r4, #1
 800b698:	3508      	adds	r5, #8
 800b69a:	e7e5      	b.n	800b668 <_dtoa_r+0x338>
 800b69c:	f000 80d2 	beq.w	800b844 <_dtoa_r+0x514>
 800b6a0:	427c      	negs	r4, r7
 800b6a2:	4b92      	ldr	r3, [pc, #584]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b6a4:	4d92      	ldr	r5, [pc, #584]	@ (800b8f0 <_dtoa_r+0x5c0>)
 800b6a6:	f004 020f 	and.w	r2, r4, #15
 800b6aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6b6:	f7f4 ffbf 	bl	8000638 <__aeabi_dmul>
 800b6ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6be:	1124      	asrs	r4, r4, #4
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2602      	movs	r6, #2
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	f040 80b2 	bne.w	800b82e <_dtoa_r+0x4fe>
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1d3      	bne.n	800b676 <_dtoa_r+0x346>
 800b6ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b6d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80b7 	beq.w	800b848 <_dtoa_r+0x518>
 800b6da:	4b86      	ldr	r3, [pc, #536]	@ (800b8f4 <_dtoa_r+0x5c4>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4620      	mov	r0, r4
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7f5 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f000 80ae 	beq.w	800b848 <_dtoa_r+0x518>
 800b6ec:	9b07      	ldr	r3, [sp, #28]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 80aa 	beq.w	800b848 <_dtoa_r+0x518>
 800b6f4:	9b00      	ldr	r3, [sp, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dd37      	ble.n	800b76a <_dtoa_r+0x43a>
 800b6fa:	1e7b      	subs	r3, r7, #1
 800b6fc:	9304      	str	r3, [sp, #16]
 800b6fe:	4620      	mov	r0, r4
 800b700:	4b7d      	ldr	r3, [pc, #500]	@ (800b8f8 <_dtoa_r+0x5c8>)
 800b702:	2200      	movs	r2, #0
 800b704:	4629      	mov	r1, r5
 800b706:	f7f4 ff97 	bl	8000638 <__aeabi_dmul>
 800b70a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b70e:	9c00      	ldr	r4, [sp, #0]
 800b710:	3601      	adds	r6, #1
 800b712:	4630      	mov	r0, r6
 800b714:	f7f4 ff26 	bl	8000564 <__aeabi_i2d>
 800b718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b71c:	f7f4 ff8c 	bl	8000638 <__aeabi_dmul>
 800b720:	4b76      	ldr	r3, [pc, #472]	@ (800b8fc <_dtoa_r+0x5cc>)
 800b722:	2200      	movs	r2, #0
 800b724:	f7f4 fdd2 	bl	80002cc <__adddf3>
 800b728:	4605      	mov	r5, r0
 800b72a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b72e:	2c00      	cmp	r4, #0
 800b730:	f040 808d 	bne.w	800b84e <_dtoa_r+0x51e>
 800b734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b738:	4b71      	ldr	r3, [pc, #452]	@ (800b900 <_dtoa_r+0x5d0>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	f7f4 fdc4 	bl	80002c8 <__aeabi_dsub>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b748:	462a      	mov	r2, r5
 800b74a:	4633      	mov	r3, r6
 800b74c:	f7f5 fa04 	bl	8000b58 <__aeabi_dcmpgt>
 800b750:	2800      	cmp	r0, #0
 800b752:	f040 828b 	bne.w	800bc6c <_dtoa_r+0x93c>
 800b756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75a:	462a      	mov	r2, r5
 800b75c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b760:	f7f5 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 800b764:	2800      	cmp	r0, #0
 800b766:	f040 8128 	bne.w	800b9ba <_dtoa_r+0x68a>
 800b76a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b76e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b774:	2b00      	cmp	r3, #0
 800b776:	f2c0 815a 	blt.w	800ba2e <_dtoa_r+0x6fe>
 800b77a:	2f0e      	cmp	r7, #14
 800b77c:	f300 8157 	bgt.w	800ba2e <_dtoa_r+0x6fe>
 800b780:	4b5a      	ldr	r3, [pc, #360]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b782:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b786:	ed93 7b00 	vldr	d7, [r3]
 800b78a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	ed8d 7b00 	vstr	d7, [sp]
 800b792:	da03      	bge.n	800b79c <_dtoa_r+0x46c>
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	2b00      	cmp	r3, #0
 800b798:	f340 8101 	ble.w	800b99e <_dtoa_r+0x66e>
 800b79c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7a0:	4656      	mov	r6, sl
 800b7a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f5 f86f 	bl	800088c <__aeabi_ddiv>
 800b7ae:	f7f5 f9f3 	bl	8000b98 <__aeabi_d2iz>
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	f7f4 fed6 	bl	8000564 <__aeabi_i2d>
 800b7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7bc:	f7f4 ff3c 	bl	8000638 <__aeabi_dmul>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b7cc:	f7f4 fd7c 	bl	80002c8 <__aeabi_dsub>
 800b7d0:	f806 4b01 	strb.w	r4, [r6], #1
 800b7d4:	9d07      	ldr	r5, [sp, #28]
 800b7d6:	eba6 040a 	sub.w	r4, r6, sl
 800b7da:	42a5      	cmp	r5, r4
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	f040 8117 	bne.w	800ba12 <_dtoa_r+0x6e2>
 800b7e4:	f7f4 fd72 	bl	80002cc <__adddf3>
 800b7e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	f7f5 f9b2 	bl	8000b58 <__aeabi_dcmpgt>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f040 80f9 	bne.w	800b9ec <_dtoa_r+0x6bc>
 800b7fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f5 f981 	bl	8000b08 <__aeabi_dcmpeq>
 800b806:	b118      	cbz	r0, 800b810 <_dtoa_r+0x4e0>
 800b808:	f018 0f01 	tst.w	r8, #1
 800b80c:	f040 80ee 	bne.w	800b9ec <_dtoa_r+0x6bc>
 800b810:	4649      	mov	r1, r9
 800b812:	4658      	mov	r0, fp
 800b814:	f000 fc90 	bl	800c138 <_Bfree>
 800b818:	2300      	movs	r3, #0
 800b81a:	7033      	strb	r3, [r6, #0]
 800b81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b81e:	3701      	adds	r7, #1
 800b820:	601f      	str	r7, [r3, #0]
 800b822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 831d 	beq.w	800be64 <_dtoa_r+0xb34>
 800b82a:	601e      	str	r6, [r3, #0]
 800b82c:	e31a      	b.n	800be64 <_dtoa_r+0xb34>
 800b82e:	07e2      	lsls	r2, r4, #31
 800b830:	d505      	bpl.n	800b83e <_dtoa_r+0x50e>
 800b832:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b836:	f7f4 feff 	bl	8000638 <__aeabi_dmul>
 800b83a:	3601      	adds	r6, #1
 800b83c:	2301      	movs	r3, #1
 800b83e:	1064      	asrs	r4, r4, #1
 800b840:	3508      	adds	r5, #8
 800b842:	e73f      	b.n	800b6c4 <_dtoa_r+0x394>
 800b844:	2602      	movs	r6, #2
 800b846:	e742      	b.n	800b6ce <_dtoa_r+0x39e>
 800b848:	9c07      	ldr	r4, [sp, #28]
 800b84a:	9704      	str	r7, [sp, #16]
 800b84c:	e761      	b.n	800b712 <_dtoa_r+0x3e2>
 800b84e:	4b27      	ldr	r3, [pc, #156]	@ (800b8ec <_dtoa_r+0x5bc>)
 800b850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b85a:	4454      	add	r4, sl
 800b85c:	2900      	cmp	r1, #0
 800b85e:	d053      	beq.n	800b908 <_dtoa_r+0x5d8>
 800b860:	4928      	ldr	r1, [pc, #160]	@ (800b904 <_dtoa_r+0x5d4>)
 800b862:	2000      	movs	r0, #0
 800b864:	f7f5 f812 	bl	800088c <__aeabi_ddiv>
 800b868:	4633      	mov	r3, r6
 800b86a:	462a      	mov	r2, r5
 800b86c:	f7f4 fd2c 	bl	80002c8 <__aeabi_dsub>
 800b870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b874:	4656      	mov	r6, sl
 800b876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b87a:	f7f5 f98d 	bl	8000b98 <__aeabi_d2iz>
 800b87e:	4605      	mov	r5, r0
 800b880:	f7f4 fe70 	bl	8000564 <__aeabi_i2d>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88c:	f7f4 fd1c 	bl	80002c8 <__aeabi_dsub>
 800b890:	3530      	adds	r5, #48	@ 0x30
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b89a:	f806 5b01 	strb.w	r5, [r6], #1
 800b89e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8a2:	f7f5 f93b 	bl	8000b1c <__aeabi_dcmplt>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d171      	bne.n	800b98e <_dtoa_r+0x65e>
 800b8aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ae:	4911      	ldr	r1, [pc, #68]	@ (800b8f4 <_dtoa_r+0x5c4>)
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	f7f4 fd09 	bl	80002c8 <__aeabi_dsub>
 800b8b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8ba:	f7f5 f92f 	bl	8000b1c <__aeabi_dcmplt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	f040 8095 	bne.w	800b9ee <_dtoa_r+0x6be>
 800b8c4:	42a6      	cmp	r6, r4
 800b8c6:	f43f af50 	beq.w	800b76a <_dtoa_r+0x43a>
 800b8ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f8 <_dtoa_r+0x5c8>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f7f4 feb1 	bl	8000638 <__aeabi_dmul>
 800b8d6:	4b08      	ldr	r3, [pc, #32]	@ (800b8f8 <_dtoa_r+0x5c8>)
 800b8d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8dc:	2200      	movs	r2, #0
 800b8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e2:	f7f4 fea9 	bl	8000638 <__aeabi_dmul>
 800b8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ea:	e7c4      	b.n	800b876 <_dtoa_r+0x546>
 800b8ec:	0800e598 	.word	0x0800e598
 800b8f0:	0800e570 	.word	0x0800e570
 800b8f4:	3ff00000 	.word	0x3ff00000
 800b8f8:	40240000 	.word	0x40240000
 800b8fc:	401c0000 	.word	0x401c0000
 800b900:	40140000 	.word	0x40140000
 800b904:	3fe00000 	.word	0x3fe00000
 800b908:	4631      	mov	r1, r6
 800b90a:	4628      	mov	r0, r5
 800b90c:	f7f4 fe94 	bl	8000638 <__aeabi_dmul>
 800b910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b914:	9415      	str	r4, [sp, #84]	@ 0x54
 800b916:	4656      	mov	r6, sl
 800b918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91c:	f7f5 f93c 	bl	8000b98 <__aeabi_d2iz>
 800b920:	4605      	mov	r5, r0
 800b922:	f7f4 fe1f 	bl	8000564 <__aeabi_i2d>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b92e:	f7f4 fccb 	bl	80002c8 <__aeabi_dsub>
 800b932:	3530      	adds	r5, #48	@ 0x30
 800b934:	f806 5b01 	strb.w	r5, [r6], #1
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	42a6      	cmp	r6, r4
 800b93e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b942:	f04f 0200 	mov.w	r2, #0
 800b946:	d124      	bne.n	800b992 <_dtoa_r+0x662>
 800b948:	4bac      	ldr	r3, [pc, #688]	@ (800bbfc <_dtoa_r+0x8cc>)
 800b94a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b94e:	f7f4 fcbd 	bl	80002cc <__adddf3>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95a:	f7f5 f8fd 	bl	8000b58 <__aeabi_dcmpgt>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d145      	bne.n	800b9ee <_dtoa_r+0x6be>
 800b962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b966:	49a5      	ldr	r1, [pc, #660]	@ (800bbfc <_dtoa_r+0x8cc>)
 800b968:	2000      	movs	r0, #0
 800b96a:	f7f4 fcad 	bl	80002c8 <__aeabi_dsub>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b976:	f7f5 f8d1 	bl	8000b1c <__aeabi_dcmplt>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f43f aef5 	beq.w	800b76a <_dtoa_r+0x43a>
 800b980:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b982:	1e73      	subs	r3, r6, #1
 800b984:	9315      	str	r3, [sp, #84]	@ 0x54
 800b986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b98a:	2b30      	cmp	r3, #48	@ 0x30
 800b98c:	d0f8      	beq.n	800b980 <_dtoa_r+0x650>
 800b98e:	9f04      	ldr	r7, [sp, #16]
 800b990:	e73e      	b.n	800b810 <_dtoa_r+0x4e0>
 800b992:	4b9b      	ldr	r3, [pc, #620]	@ (800bc00 <_dtoa_r+0x8d0>)
 800b994:	f7f4 fe50 	bl	8000638 <__aeabi_dmul>
 800b998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b99c:	e7bc      	b.n	800b918 <_dtoa_r+0x5e8>
 800b99e:	d10c      	bne.n	800b9ba <_dtoa_r+0x68a>
 800b9a0:	4b98      	ldr	r3, [pc, #608]	@ (800bc04 <_dtoa_r+0x8d4>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a8:	f7f4 fe46 	bl	8000638 <__aeabi_dmul>
 800b9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9b0:	f7f5 f8c8 	bl	8000b44 <__aeabi_dcmpge>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f000 8157 	beq.w	800bc68 <_dtoa_r+0x938>
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	4625      	mov	r5, r4
 800b9be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9c0:	43db      	mvns	r3, r3
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	4656      	mov	r6, sl
 800b9c6:	2700      	movs	r7, #0
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	4658      	mov	r0, fp
 800b9cc:	f000 fbb4 	bl	800c138 <_Bfree>
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	d0dc      	beq.n	800b98e <_dtoa_r+0x65e>
 800b9d4:	b12f      	cbz	r7, 800b9e2 <_dtoa_r+0x6b2>
 800b9d6:	42af      	cmp	r7, r5
 800b9d8:	d003      	beq.n	800b9e2 <_dtoa_r+0x6b2>
 800b9da:	4639      	mov	r1, r7
 800b9dc:	4658      	mov	r0, fp
 800b9de:	f000 fbab 	bl	800c138 <_Bfree>
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	4658      	mov	r0, fp
 800b9e6:	f000 fba7 	bl	800c138 <_Bfree>
 800b9ea:	e7d0      	b.n	800b98e <_dtoa_r+0x65e>
 800b9ec:	9704      	str	r7, [sp, #16]
 800b9ee:	4633      	mov	r3, r6
 800b9f0:	461e      	mov	r6, r3
 800b9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9f6:	2a39      	cmp	r2, #57	@ 0x39
 800b9f8:	d107      	bne.n	800ba0a <_dtoa_r+0x6da>
 800b9fa:	459a      	cmp	sl, r3
 800b9fc:	d1f8      	bne.n	800b9f0 <_dtoa_r+0x6c0>
 800b9fe:	9a04      	ldr	r2, [sp, #16]
 800ba00:	3201      	adds	r2, #1
 800ba02:	9204      	str	r2, [sp, #16]
 800ba04:	2230      	movs	r2, #48	@ 0x30
 800ba06:	f88a 2000 	strb.w	r2, [sl]
 800ba0a:	781a      	ldrb	r2, [r3, #0]
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e7bd      	b.n	800b98e <_dtoa_r+0x65e>
 800ba12:	4b7b      	ldr	r3, [pc, #492]	@ (800bc00 <_dtoa_r+0x8d0>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	f7f4 fe0f 	bl	8000638 <__aeabi_dmul>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4604      	mov	r4, r0
 800ba20:	460d      	mov	r5, r1
 800ba22:	f7f5 f871 	bl	8000b08 <__aeabi_dcmpeq>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f43f aebb 	beq.w	800b7a2 <_dtoa_r+0x472>
 800ba2c:	e6f0      	b.n	800b810 <_dtoa_r+0x4e0>
 800ba2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	f000 80db 	beq.w	800bbec <_dtoa_r+0x8bc>
 800ba36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba38:	2a01      	cmp	r2, #1
 800ba3a:	f300 80bf 	bgt.w	800bbbc <_dtoa_r+0x88c>
 800ba3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	f000 80b7 	beq.w	800bbb4 <_dtoa_r+0x884>
 800ba46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba4c:	4646      	mov	r6, r8
 800ba4e:	9a08      	ldr	r2, [sp, #32]
 800ba50:	2101      	movs	r1, #1
 800ba52:	441a      	add	r2, r3
 800ba54:	4658      	mov	r0, fp
 800ba56:	4498      	add	r8, r3
 800ba58:	9208      	str	r2, [sp, #32]
 800ba5a:	f000 fc21 	bl	800c2a0 <__i2b>
 800ba5e:	4605      	mov	r5, r0
 800ba60:	b15e      	cbz	r6, 800ba7a <_dtoa_r+0x74a>
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	dd08      	ble.n	800ba7a <_dtoa_r+0x74a>
 800ba68:	42b3      	cmp	r3, r6
 800ba6a:	9a08      	ldr	r2, [sp, #32]
 800ba6c:	bfa8      	it	ge
 800ba6e:	4633      	movge	r3, r6
 800ba70:	eba8 0803 	sub.w	r8, r8, r3
 800ba74:	1af6      	subs	r6, r6, r3
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	9308      	str	r3, [sp, #32]
 800ba7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba7c:	b1f3      	cbz	r3, 800babc <_dtoa_r+0x78c>
 800ba7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 80b7 	beq.w	800bbf4 <_dtoa_r+0x8c4>
 800ba86:	b18c      	cbz	r4, 800baac <_dtoa_r+0x77c>
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	4658      	mov	r0, fp
 800ba8e:	f000 fcc7 	bl	800c420 <__pow5mult>
 800ba92:	464a      	mov	r2, r9
 800ba94:	4601      	mov	r1, r0
 800ba96:	4605      	mov	r5, r0
 800ba98:	4658      	mov	r0, fp
 800ba9a:	f000 fc17 	bl	800c2cc <__multiply>
 800ba9e:	4649      	mov	r1, r9
 800baa0:	9004      	str	r0, [sp, #16]
 800baa2:	4658      	mov	r0, fp
 800baa4:	f000 fb48 	bl	800c138 <_Bfree>
 800baa8:	9b04      	ldr	r3, [sp, #16]
 800baaa:	4699      	mov	r9, r3
 800baac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baae:	1b1a      	subs	r2, r3, r4
 800bab0:	d004      	beq.n	800babc <_dtoa_r+0x78c>
 800bab2:	4649      	mov	r1, r9
 800bab4:	4658      	mov	r0, fp
 800bab6:	f000 fcb3 	bl	800c420 <__pow5mult>
 800baba:	4681      	mov	r9, r0
 800babc:	2101      	movs	r1, #1
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 fbee 	bl	800c2a0 <__i2b>
 800bac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bac6:	4604      	mov	r4, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 81cf 	beq.w	800be6c <_dtoa_r+0xb3c>
 800bace:	461a      	mov	r2, r3
 800bad0:	4601      	mov	r1, r0
 800bad2:	4658      	mov	r0, fp
 800bad4:	f000 fca4 	bl	800c420 <__pow5mult>
 800bad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bada:	2b01      	cmp	r3, #1
 800badc:	4604      	mov	r4, r0
 800bade:	f300 8095 	bgt.w	800bc0c <_dtoa_r+0x8dc>
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f040 8087 	bne.w	800bbf8 <_dtoa_r+0x8c8>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 8089 	bne.w	800bc08 <_dtoa_r+0x8d8>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bafc:	0d1b      	lsrs	r3, r3, #20
 800bafe:	051b      	lsls	r3, r3, #20
 800bb00:	b12b      	cbz	r3, 800bb0e <_dtoa_r+0x7de>
 800bb02:	9b08      	ldr	r3, [sp, #32]
 800bb04:	3301      	adds	r3, #1
 800bb06:	9308      	str	r3, [sp, #32]
 800bb08:	f108 0801 	add.w	r8, r8, #1
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 81b0 	beq.w	800be78 <_dtoa_r+0xb48>
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb1e:	6918      	ldr	r0, [r3, #16]
 800bb20:	f000 fb72 	bl	800c208 <__hi0bits>
 800bb24:	f1c0 0020 	rsb	r0, r0, #32
 800bb28:	9b08      	ldr	r3, [sp, #32]
 800bb2a:	4418      	add	r0, r3
 800bb2c:	f010 001f 	ands.w	r0, r0, #31
 800bb30:	d077      	beq.n	800bc22 <_dtoa_r+0x8f2>
 800bb32:	f1c0 0320 	rsb	r3, r0, #32
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	dd6b      	ble.n	800bc12 <_dtoa_r+0x8e2>
 800bb3a:	9b08      	ldr	r3, [sp, #32]
 800bb3c:	f1c0 001c 	rsb	r0, r0, #28
 800bb40:	4403      	add	r3, r0
 800bb42:	4480      	add	r8, r0
 800bb44:	4406      	add	r6, r0
 800bb46:	9308      	str	r3, [sp, #32]
 800bb48:	f1b8 0f00 	cmp.w	r8, #0
 800bb4c:	dd05      	ble.n	800bb5a <_dtoa_r+0x82a>
 800bb4e:	4649      	mov	r1, r9
 800bb50:	4642      	mov	r2, r8
 800bb52:	4658      	mov	r0, fp
 800bb54:	f000 fcbe 	bl	800c4d4 <__lshift>
 800bb58:	4681      	mov	r9, r0
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	dd05      	ble.n	800bb6c <_dtoa_r+0x83c>
 800bb60:	4621      	mov	r1, r4
 800bb62:	461a      	mov	r2, r3
 800bb64:	4658      	mov	r0, fp
 800bb66:	f000 fcb5 	bl	800c4d4 <__lshift>
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d059      	beq.n	800bc26 <_dtoa_r+0x8f6>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4648      	mov	r0, r9
 800bb76:	f000 fd19 	bl	800c5ac <__mcmp>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	da53      	bge.n	800bc26 <_dtoa_r+0x8f6>
 800bb7e:	1e7b      	subs	r3, r7, #1
 800bb80:	9304      	str	r3, [sp, #16]
 800bb82:	4649      	mov	r1, r9
 800bb84:	2300      	movs	r3, #0
 800bb86:	220a      	movs	r2, #10
 800bb88:	4658      	mov	r0, fp
 800bb8a:	f000 faf7 	bl	800c17c <__multadd>
 800bb8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb90:	4681      	mov	r9, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 8172 	beq.w	800be7c <_dtoa_r+0xb4c>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	4658      	mov	r0, fp
 800bba0:	f000 faec 	bl	800c17c <__multadd>
 800bba4:	9b00      	ldr	r3, [sp, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	4605      	mov	r5, r0
 800bbaa:	dc67      	bgt.n	800bc7c <_dtoa_r+0x94c>
 800bbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	dc41      	bgt.n	800bc36 <_dtoa_r+0x906>
 800bbb2:	e063      	b.n	800bc7c <_dtoa_r+0x94c>
 800bbb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bbba:	e746      	b.n	800ba4a <_dtoa_r+0x71a>
 800bbbc:	9b07      	ldr	r3, [sp, #28]
 800bbbe:	1e5c      	subs	r4, r3, #1
 800bbc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	bfbf      	itttt	lt
 800bbc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bbc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bbca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bbcc:	1ae3      	sublt	r3, r4, r3
 800bbce:	bfb4      	ite	lt
 800bbd0:	18d2      	addlt	r2, r2, r3
 800bbd2:	1b1c      	subge	r4, r3, r4
 800bbd4:	9b07      	ldr	r3, [sp, #28]
 800bbd6:	bfbc      	itt	lt
 800bbd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bbda:	2400      	movlt	r4, #0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bfb5      	itete	lt
 800bbe0:	eba8 0603 	sublt.w	r6, r8, r3
 800bbe4:	9b07      	ldrge	r3, [sp, #28]
 800bbe6:	2300      	movlt	r3, #0
 800bbe8:	4646      	movge	r6, r8
 800bbea:	e730      	b.n	800ba4e <_dtoa_r+0x71e>
 800bbec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bbf0:	4646      	mov	r6, r8
 800bbf2:	e735      	b.n	800ba60 <_dtoa_r+0x730>
 800bbf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbf6:	e75c      	b.n	800bab2 <_dtoa_r+0x782>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e788      	b.n	800bb0e <_dtoa_r+0x7de>
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	40240000 	.word	0x40240000
 800bc04:	40140000 	.word	0x40140000
 800bc08:	9b02      	ldr	r3, [sp, #8]
 800bc0a:	e780      	b.n	800bb0e <_dtoa_r+0x7de>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc10:	e782      	b.n	800bb18 <_dtoa_r+0x7e8>
 800bc12:	d099      	beq.n	800bb48 <_dtoa_r+0x818>
 800bc14:	9a08      	ldr	r2, [sp, #32]
 800bc16:	331c      	adds	r3, #28
 800bc18:	441a      	add	r2, r3
 800bc1a:	4498      	add	r8, r3
 800bc1c:	441e      	add	r6, r3
 800bc1e:	9208      	str	r2, [sp, #32]
 800bc20:	e792      	b.n	800bb48 <_dtoa_r+0x818>
 800bc22:	4603      	mov	r3, r0
 800bc24:	e7f6      	b.n	800bc14 <_dtoa_r+0x8e4>
 800bc26:	9b07      	ldr	r3, [sp, #28]
 800bc28:	9704      	str	r7, [sp, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	dc20      	bgt.n	800bc70 <_dtoa_r+0x940>
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	dd1e      	ble.n	800bc74 <_dtoa_r+0x944>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f aec0 	bne.w	800b9be <_dtoa_r+0x68e>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	2205      	movs	r2, #5
 800bc42:	4658      	mov	r0, fp
 800bc44:	f000 fa9a 	bl	800c17c <__multadd>
 800bc48:	4601      	mov	r1, r0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f000 fcad 	bl	800c5ac <__mcmp>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f77f aeb3 	ble.w	800b9be <_dtoa_r+0x68e>
 800bc58:	4656      	mov	r6, sl
 800bc5a:	2331      	movs	r3, #49	@ 0x31
 800bc5c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc60:	9b04      	ldr	r3, [sp, #16]
 800bc62:	3301      	adds	r3, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	e6ae      	b.n	800b9c6 <_dtoa_r+0x696>
 800bc68:	9c07      	ldr	r4, [sp, #28]
 800bc6a:	9704      	str	r7, [sp, #16]
 800bc6c:	4625      	mov	r5, r4
 800bc6e:	e7f3      	b.n	800bc58 <_dtoa_r+0x928>
 800bc70:	9b07      	ldr	r3, [sp, #28]
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8104 	beq.w	800be84 <_dtoa_r+0xb54>
 800bc7c:	2e00      	cmp	r6, #0
 800bc7e:	dd05      	ble.n	800bc8c <_dtoa_r+0x95c>
 800bc80:	4629      	mov	r1, r5
 800bc82:	4632      	mov	r2, r6
 800bc84:	4658      	mov	r0, fp
 800bc86:	f000 fc25 	bl	800c4d4 <__lshift>
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d05a      	beq.n	800bd48 <_dtoa_r+0xa18>
 800bc92:	6869      	ldr	r1, [r5, #4]
 800bc94:	4658      	mov	r0, fp
 800bc96:	f000 fa0f 	bl	800c0b8 <_Balloc>
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <_dtoa_r+0x97a>
 800bc9e:	4b84      	ldr	r3, [pc, #528]	@ (800beb0 <_dtoa_r+0xb80>)
 800bca0:	4602      	mov	r2, r0
 800bca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bca6:	f7ff bb5a 	b.w	800b35e <_dtoa_r+0x2e>
 800bcaa:	692a      	ldr	r2, [r5, #16]
 800bcac:	3202      	adds	r2, #2
 800bcae:	0092      	lsls	r2, r2, #2
 800bcb0:	f105 010c 	add.w	r1, r5, #12
 800bcb4:	300c      	adds	r0, #12
 800bcb6:	f7ff faa2 	bl	800b1fe <memcpy>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4658      	mov	r0, fp
 800bcc0:	f000 fc08 	bl	800c4d4 <__lshift>
 800bcc4:	f10a 0301 	add.w	r3, sl, #1
 800bcc8:	9307      	str	r3, [sp, #28]
 800bcca:	9b00      	ldr	r3, [sp, #0]
 800bccc:	4453      	add	r3, sl
 800bcce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcd0:	9b02      	ldr	r3, [sp, #8]
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	462f      	mov	r7, r5
 800bcd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcda:	4605      	mov	r5, r0
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	4621      	mov	r1, r4
 800bce0:	3b01      	subs	r3, #1
 800bce2:	4648      	mov	r0, r9
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	f7ff fa98 	bl	800b21a <quorem>
 800bcea:	4639      	mov	r1, r7
 800bcec:	9002      	str	r0, [sp, #8]
 800bcee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcf2:	4648      	mov	r0, r9
 800bcf4:	f000 fc5a 	bl	800c5ac <__mcmp>
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	9008      	str	r0, [sp, #32]
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f000 fc70 	bl	800c5e4 <__mdiff>
 800bd04:	68c2      	ldr	r2, [r0, #12]
 800bd06:	4606      	mov	r6, r0
 800bd08:	bb02      	cbnz	r2, 800bd4c <_dtoa_r+0xa1c>
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4648      	mov	r0, r9
 800bd0e:	f000 fc4d 	bl	800c5ac <__mcmp>
 800bd12:	4602      	mov	r2, r0
 800bd14:	4631      	mov	r1, r6
 800bd16:	4658      	mov	r0, fp
 800bd18:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd1a:	f000 fa0d 	bl	800c138 <_Bfree>
 800bd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd22:	9e07      	ldr	r6, [sp, #28]
 800bd24:	ea43 0102 	orr.w	r1, r3, r2
 800bd28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd2a:	4319      	orrs	r1, r3
 800bd2c:	d110      	bne.n	800bd50 <_dtoa_r+0xa20>
 800bd2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd32:	d029      	beq.n	800bd88 <_dtoa_r+0xa58>
 800bd34:	9b08      	ldr	r3, [sp, #32]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	dd02      	ble.n	800bd40 <_dtoa_r+0xa10>
 800bd3a:	9b02      	ldr	r3, [sp, #8]
 800bd3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	f883 8000 	strb.w	r8, [r3]
 800bd46:	e63f      	b.n	800b9c8 <_dtoa_r+0x698>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	e7bb      	b.n	800bcc4 <_dtoa_r+0x994>
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	e7e1      	b.n	800bd14 <_dtoa_r+0x9e4>
 800bd50:	9b08      	ldr	r3, [sp, #32]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	db04      	blt.n	800bd60 <_dtoa_r+0xa30>
 800bd56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd58:	430b      	orrs	r3, r1
 800bd5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	d120      	bne.n	800bda2 <_dtoa_r+0xa72>
 800bd60:	2a00      	cmp	r2, #0
 800bd62:	dded      	ble.n	800bd40 <_dtoa_r+0xa10>
 800bd64:	4649      	mov	r1, r9
 800bd66:	2201      	movs	r2, #1
 800bd68:	4658      	mov	r0, fp
 800bd6a:	f000 fbb3 	bl	800c4d4 <__lshift>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4681      	mov	r9, r0
 800bd72:	f000 fc1b 	bl	800c5ac <__mcmp>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	dc03      	bgt.n	800bd82 <_dtoa_r+0xa52>
 800bd7a:	d1e1      	bne.n	800bd40 <_dtoa_r+0xa10>
 800bd7c:	f018 0f01 	tst.w	r8, #1
 800bd80:	d0de      	beq.n	800bd40 <_dtoa_r+0xa10>
 800bd82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd86:	d1d8      	bne.n	800bd3a <_dtoa_r+0xa0a>
 800bd88:	9a00      	ldr	r2, [sp, #0]
 800bd8a:	2339      	movs	r3, #57	@ 0x39
 800bd8c:	7013      	strb	r3, [r2, #0]
 800bd8e:	4633      	mov	r3, r6
 800bd90:	461e      	mov	r6, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd98:	2a39      	cmp	r2, #57	@ 0x39
 800bd9a:	d052      	beq.n	800be42 <_dtoa_r+0xb12>
 800bd9c:	3201      	adds	r2, #1
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	e612      	b.n	800b9c8 <_dtoa_r+0x698>
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	dd07      	ble.n	800bdb6 <_dtoa_r+0xa86>
 800bda6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdaa:	d0ed      	beq.n	800bd88 <_dtoa_r+0xa58>
 800bdac:	9a00      	ldr	r2, [sp, #0]
 800bdae:	f108 0301 	add.w	r3, r8, #1
 800bdb2:	7013      	strb	r3, [r2, #0]
 800bdb4:	e608      	b.n	800b9c8 <_dtoa_r+0x698>
 800bdb6:	9b07      	ldr	r3, [sp, #28]
 800bdb8:	9a07      	ldr	r2, [sp, #28]
 800bdba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bdbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d028      	beq.n	800be16 <_dtoa_r+0xae6>
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	220a      	movs	r2, #10
 800bdca:	4658      	mov	r0, fp
 800bdcc:	f000 f9d6 	bl	800c17c <__multadd>
 800bdd0:	42af      	cmp	r7, r5
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	f04f 0300 	mov.w	r3, #0
 800bdd8:	f04f 020a 	mov.w	r2, #10
 800bddc:	4639      	mov	r1, r7
 800bdde:	4658      	mov	r0, fp
 800bde0:	d107      	bne.n	800bdf2 <_dtoa_r+0xac2>
 800bde2:	f000 f9cb 	bl	800c17c <__multadd>
 800bde6:	4607      	mov	r7, r0
 800bde8:	4605      	mov	r5, r0
 800bdea:	9b07      	ldr	r3, [sp, #28]
 800bdec:	3301      	adds	r3, #1
 800bdee:	9307      	str	r3, [sp, #28]
 800bdf0:	e774      	b.n	800bcdc <_dtoa_r+0x9ac>
 800bdf2:	f000 f9c3 	bl	800c17c <__multadd>
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	4658      	mov	r0, fp
 800be00:	f000 f9bc 	bl	800c17c <__multadd>
 800be04:	4605      	mov	r5, r0
 800be06:	e7f0      	b.n	800bdea <_dtoa_r+0xaba>
 800be08:	9b00      	ldr	r3, [sp, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bfcc      	ite	gt
 800be0e:	461e      	movgt	r6, r3
 800be10:	2601      	movle	r6, #1
 800be12:	4456      	add	r6, sl
 800be14:	2700      	movs	r7, #0
 800be16:	4649      	mov	r1, r9
 800be18:	2201      	movs	r2, #1
 800be1a:	4658      	mov	r0, fp
 800be1c:	f000 fb5a 	bl	800c4d4 <__lshift>
 800be20:	4621      	mov	r1, r4
 800be22:	4681      	mov	r9, r0
 800be24:	f000 fbc2 	bl	800c5ac <__mcmp>
 800be28:	2800      	cmp	r0, #0
 800be2a:	dcb0      	bgt.n	800bd8e <_dtoa_r+0xa5e>
 800be2c:	d102      	bne.n	800be34 <_dtoa_r+0xb04>
 800be2e:	f018 0f01 	tst.w	r8, #1
 800be32:	d1ac      	bne.n	800bd8e <_dtoa_r+0xa5e>
 800be34:	4633      	mov	r3, r6
 800be36:	461e      	mov	r6, r3
 800be38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be3c:	2a30      	cmp	r2, #48	@ 0x30
 800be3e:	d0fa      	beq.n	800be36 <_dtoa_r+0xb06>
 800be40:	e5c2      	b.n	800b9c8 <_dtoa_r+0x698>
 800be42:	459a      	cmp	sl, r3
 800be44:	d1a4      	bne.n	800bd90 <_dtoa_r+0xa60>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	3301      	adds	r3, #1
 800be4a:	9304      	str	r3, [sp, #16]
 800be4c:	2331      	movs	r3, #49	@ 0x31
 800be4e:	f88a 3000 	strb.w	r3, [sl]
 800be52:	e5b9      	b.n	800b9c8 <_dtoa_r+0x698>
 800be54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800beb4 <_dtoa_r+0xb84>
 800be5a:	b11b      	cbz	r3, 800be64 <_dtoa_r+0xb34>
 800be5c:	f10a 0308 	add.w	r3, sl, #8
 800be60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	4650      	mov	r0, sl
 800be66:	b019      	add	sp, #100	@ 0x64
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6e:	2b01      	cmp	r3, #1
 800be70:	f77f ae37 	ble.w	800bae2 <_dtoa_r+0x7b2>
 800be74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be76:	930a      	str	r3, [sp, #40]	@ 0x28
 800be78:	2001      	movs	r0, #1
 800be7a:	e655      	b.n	800bb28 <_dtoa_r+0x7f8>
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f77f aed6 	ble.w	800bc30 <_dtoa_r+0x900>
 800be84:	4656      	mov	r6, sl
 800be86:	4621      	mov	r1, r4
 800be88:	4648      	mov	r0, r9
 800be8a:	f7ff f9c6 	bl	800b21a <quorem>
 800be8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be92:	f806 8b01 	strb.w	r8, [r6], #1
 800be96:	9b00      	ldr	r3, [sp, #0]
 800be98:	eba6 020a 	sub.w	r2, r6, sl
 800be9c:	4293      	cmp	r3, r2
 800be9e:	ddb3      	ble.n	800be08 <_dtoa_r+0xad8>
 800bea0:	4649      	mov	r1, r9
 800bea2:	2300      	movs	r3, #0
 800bea4:	220a      	movs	r2, #10
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 f968 	bl	800c17c <__multadd>
 800beac:	4681      	mov	r9, r0
 800beae:	e7ea      	b.n	800be86 <_dtoa_r+0xb56>
 800beb0:	0800e4f4 	.word	0x0800e4f4
 800beb4:	0800e478 	.word	0x0800e478

0800beb8 <_free_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4605      	mov	r5, r0
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d041      	beq.n	800bf44 <_free_r+0x8c>
 800bec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec4:	1f0c      	subs	r4, r1, #4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfb8      	it	lt
 800beca:	18e4      	addlt	r4, r4, r3
 800becc:	f000 f8e8 	bl	800c0a0 <__malloc_lock>
 800bed0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf48 <_free_r+0x90>)
 800bed2:	6813      	ldr	r3, [r2, #0]
 800bed4:	b933      	cbnz	r3, 800bee4 <_free_r+0x2c>
 800bed6:	6063      	str	r3, [r4, #4]
 800bed8:	6014      	str	r4, [r2, #0]
 800beda:	4628      	mov	r0, r5
 800bedc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bee0:	f000 b8e4 	b.w	800c0ac <__malloc_unlock>
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	d908      	bls.n	800befa <_free_r+0x42>
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	1821      	adds	r1, r4, r0
 800beec:	428b      	cmp	r3, r1
 800beee:	bf01      	itttt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	1809      	addeq	r1, r1, r0
 800bef6:	6021      	streq	r1, [r4, #0]
 800bef8:	e7ed      	b.n	800bed6 <_free_r+0x1e>
 800befa:	461a      	mov	r2, r3
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	b10b      	cbz	r3, 800bf04 <_free_r+0x4c>
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d9fa      	bls.n	800befa <_free_r+0x42>
 800bf04:	6811      	ldr	r1, [r2, #0]
 800bf06:	1850      	adds	r0, r2, r1
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d10b      	bne.n	800bf24 <_free_r+0x6c>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	4401      	add	r1, r0
 800bf10:	1850      	adds	r0, r2, r1
 800bf12:	4283      	cmp	r3, r0
 800bf14:	6011      	str	r1, [r2, #0]
 800bf16:	d1e0      	bne.n	800beda <_free_r+0x22>
 800bf18:	6818      	ldr	r0, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	6053      	str	r3, [r2, #4]
 800bf1e:	4408      	add	r0, r1
 800bf20:	6010      	str	r0, [r2, #0]
 800bf22:	e7da      	b.n	800beda <_free_r+0x22>
 800bf24:	d902      	bls.n	800bf2c <_free_r+0x74>
 800bf26:	230c      	movs	r3, #12
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	e7d6      	b.n	800beda <_free_r+0x22>
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	1821      	adds	r1, r4, r0
 800bf30:	428b      	cmp	r3, r1
 800bf32:	bf04      	itt	eq
 800bf34:	6819      	ldreq	r1, [r3, #0]
 800bf36:	685b      	ldreq	r3, [r3, #4]
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	bf04      	itt	eq
 800bf3c:	1809      	addeq	r1, r1, r0
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	6054      	str	r4, [r2, #4]
 800bf42:	e7ca      	b.n	800beda <_free_r+0x22>
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	bf00      	nop
 800bf48:	20019f80 	.word	0x20019f80

0800bf4c <malloc>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <malloc+0xc>)
 800bf4e:	4601      	mov	r1, r0
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	f000 b825 	b.w	800bfa0 <_malloc_r>
 800bf56:	bf00      	nop
 800bf58:	20000020 	.word	0x20000020

0800bf5c <sbrk_aligned>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4e0f      	ldr	r6, [pc, #60]	@ (800bf9c <sbrk_aligned+0x40>)
 800bf60:	460c      	mov	r4, r1
 800bf62:	6831      	ldr	r1, [r6, #0]
 800bf64:	4605      	mov	r5, r0
 800bf66:	b911      	cbnz	r1, 800bf6e <sbrk_aligned+0x12>
 800bf68:	f000 ff60 	bl	800ce2c <_sbrk_r>
 800bf6c:	6030      	str	r0, [r6, #0]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 ff5b 	bl	800ce2c <_sbrk_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d103      	bne.n	800bf82 <sbrk_aligned+0x26>
 800bf7a:	f04f 34ff 	mov.w	r4, #4294967295
 800bf7e:	4620      	mov	r0, r4
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	1cc4      	adds	r4, r0, #3
 800bf84:	f024 0403 	bic.w	r4, r4, #3
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	d0f8      	beq.n	800bf7e <sbrk_aligned+0x22>
 800bf8c:	1a21      	subs	r1, r4, r0
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 ff4c 	bl	800ce2c <_sbrk_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d1f2      	bne.n	800bf7e <sbrk_aligned+0x22>
 800bf98:	e7ef      	b.n	800bf7a <sbrk_aligned+0x1e>
 800bf9a:	bf00      	nop
 800bf9c:	20019f7c 	.word	0x20019f7c

0800bfa0 <_malloc_r>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	1ccd      	adds	r5, r1, #3
 800bfa6:	f025 0503 	bic.w	r5, r5, #3
 800bfaa:	3508      	adds	r5, #8
 800bfac:	2d0c      	cmp	r5, #12
 800bfae:	bf38      	it	cc
 800bfb0:	250c      	movcc	r5, #12
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	db01      	blt.n	800bfbc <_malloc_r+0x1c>
 800bfb8:	42a9      	cmp	r1, r5
 800bfba:	d904      	bls.n	800bfc6 <_malloc_r+0x26>
 800bfbc:	230c      	movs	r3, #12
 800bfbe:	6033      	str	r3, [r6, #0]
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c09c <_malloc_r+0xfc>
 800bfca:	f000 f869 	bl	800c0a0 <__malloc_lock>
 800bfce:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	bb44      	cbnz	r4, 800c028 <_malloc_r+0x88>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7ff ffbf 	bl	800bf5c <sbrk_aligned>
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	d158      	bne.n	800c096 <_malloc_r+0xf6>
 800bfe4:	f8d8 4000 	ldr.w	r4, [r8]
 800bfe8:	4627      	mov	r7, r4
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	d143      	bne.n	800c076 <_malloc_r+0xd6>
 800bfee:	2c00      	cmp	r4, #0
 800bff0:	d04b      	beq.n	800c08a <_malloc_r+0xea>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	4639      	mov	r1, r7
 800bff6:	4630      	mov	r0, r6
 800bff8:	eb04 0903 	add.w	r9, r4, r3
 800bffc:	f000 ff16 	bl	800ce2c <_sbrk_r>
 800c000:	4581      	cmp	r9, r0
 800c002:	d142      	bne.n	800c08a <_malloc_r+0xea>
 800c004:	6821      	ldr	r1, [r4, #0]
 800c006:	1a6d      	subs	r5, r5, r1
 800c008:	4629      	mov	r1, r5
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7ff ffa6 	bl	800bf5c <sbrk_aligned>
 800c010:	3001      	adds	r0, #1
 800c012:	d03a      	beq.n	800c08a <_malloc_r+0xea>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	442b      	add	r3, r5
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	f8d8 3000 	ldr.w	r3, [r8]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	bb62      	cbnz	r2, 800c07c <_malloc_r+0xdc>
 800c022:	f8c8 7000 	str.w	r7, [r8]
 800c026:	e00f      	b.n	800c048 <_malloc_r+0xa8>
 800c028:	6822      	ldr	r2, [r4, #0]
 800c02a:	1b52      	subs	r2, r2, r5
 800c02c:	d420      	bmi.n	800c070 <_malloc_r+0xd0>
 800c02e:	2a0b      	cmp	r2, #11
 800c030:	d917      	bls.n	800c062 <_malloc_r+0xc2>
 800c032:	1961      	adds	r1, r4, r5
 800c034:	42a3      	cmp	r3, r4
 800c036:	6025      	str	r5, [r4, #0]
 800c038:	bf18      	it	ne
 800c03a:	6059      	strne	r1, [r3, #4]
 800c03c:	6863      	ldr	r3, [r4, #4]
 800c03e:	bf08      	it	eq
 800c040:	f8c8 1000 	streq.w	r1, [r8]
 800c044:	5162      	str	r2, [r4, r5]
 800c046:	604b      	str	r3, [r1, #4]
 800c048:	4630      	mov	r0, r6
 800c04a:	f000 f82f 	bl	800c0ac <__malloc_unlock>
 800c04e:	f104 000b 	add.w	r0, r4, #11
 800c052:	1d23      	adds	r3, r4, #4
 800c054:	f020 0007 	bic.w	r0, r0, #7
 800c058:	1ac2      	subs	r2, r0, r3
 800c05a:	bf1c      	itt	ne
 800c05c:	1a1b      	subne	r3, r3, r0
 800c05e:	50a3      	strne	r3, [r4, r2]
 800c060:	e7af      	b.n	800bfc2 <_malloc_r+0x22>
 800c062:	6862      	ldr	r2, [r4, #4]
 800c064:	42a3      	cmp	r3, r4
 800c066:	bf0c      	ite	eq
 800c068:	f8c8 2000 	streq.w	r2, [r8]
 800c06c:	605a      	strne	r2, [r3, #4]
 800c06e:	e7eb      	b.n	800c048 <_malloc_r+0xa8>
 800c070:	4623      	mov	r3, r4
 800c072:	6864      	ldr	r4, [r4, #4]
 800c074:	e7ae      	b.n	800bfd4 <_malloc_r+0x34>
 800c076:	463c      	mov	r4, r7
 800c078:	687f      	ldr	r7, [r7, #4]
 800c07a:	e7b6      	b.n	800bfea <_malloc_r+0x4a>
 800c07c:	461a      	mov	r2, r3
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	42a3      	cmp	r3, r4
 800c082:	d1fb      	bne.n	800c07c <_malloc_r+0xdc>
 800c084:	2300      	movs	r3, #0
 800c086:	6053      	str	r3, [r2, #4]
 800c088:	e7de      	b.n	800c048 <_malloc_r+0xa8>
 800c08a:	230c      	movs	r3, #12
 800c08c:	6033      	str	r3, [r6, #0]
 800c08e:	4630      	mov	r0, r6
 800c090:	f000 f80c 	bl	800c0ac <__malloc_unlock>
 800c094:	e794      	b.n	800bfc0 <_malloc_r+0x20>
 800c096:	6005      	str	r5, [r0, #0]
 800c098:	e7d6      	b.n	800c048 <_malloc_r+0xa8>
 800c09a:	bf00      	nop
 800c09c:	20019f80 	.word	0x20019f80

0800c0a0 <__malloc_lock>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	@ (800c0a8 <__malloc_lock+0x8>)
 800c0a2:	f7ff b8aa 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	20019f78 	.word	0x20019f78

0800c0ac <__malloc_unlock>:
 800c0ac:	4801      	ldr	r0, [pc, #4]	@ (800c0b4 <__malloc_unlock+0x8>)
 800c0ae:	f7ff b8a5 	b.w	800b1fc <__retarget_lock_release_recursive>
 800c0b2:	bf00      	nop
 800c0b4:	20019f78 	.word	0x20019f78

0800c0b8 <_Balloc>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	69c6      	ldr	r6, [r0, #28]
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	b976      	cbnz	r6, 800c0e0 <_Balloc+0x28>
 800c0c2:	2010      	movs	r0, #16
 800c0c4:	f7ff ff42 	bl	800bf4c <malloc>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	61e0      	str	r0, [r4, #28]
 800c0cc:	b920      	cbnz	r0, 800c0d8 <_Balloc+0x20>
 800c0ce:	4b18      	ldr	r3, [pc, #96]	@ (800c130 <_Balloc+0x78>)
 800c0d0:	4818      	ldr	r0, [pc, #96]	@ (800c134 <_Balloc+0x7c>)
 800c0d2:	216b      	movs	r1, #107	@ 0x6b
 800c0d4:	f000 feba 	bl	800ce4c <__assert_func>
 800c0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0dc:	6006      	str	r6, [r0, #0]
 800c0de:	60c6      	str	r6, [r0, #12]
 800c0e0:	69e6      	ldr	r6, [r4, #28]
 800c0e2:	68f3      	ldr	r3, [r6, #12]
 800c0e4:	b183      	cbz	r3, 800c108 <_Balloc+0x50>
 800c0e6:	69e3      	ldr	r3, [r4, #28]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ee:	b9b8      	cbnz	r0, 800c120 <_Balloc+0x68>
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c0f6:	1d72      	adds	r2, r6, #5
 800c0f8:	0092      	lsls	r2, r2, #2
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 fec4 	bl	800ce88 <_calloc_r>
 800c100:	b160      	cbz	r0, 800c11c <_Balloc+0x64>
 800c102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c106:	e00e      	b.n	800c126 <_Balloc+0x6e>
 800c108:	2221      	movs	r2, #33	@ 0x21
 800c10a:	2104      	movs	r1, #4
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 febb 	bl	800ce88 <_calloc_r>
 800c112:	69e3      	ldr	r3, [r4, #28]
 800c114:	60f0      	str	r0, [r6, #12]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1e4      	bne.n	800c0e6 <_Balloc+0x2e>
 800c11c:	2000      	movs	r0, #0
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	6802      	ldr	r2, [r0, #0]
 800c122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c126:	2300      	movs	r3, #0
 800c128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c12c:	e7f7      	b.n	800c11e <_Balloc+0x66>
 800c12e:	bf00      	nop
 800c130:	0800e485 	.word	0x0800e485
 800c134:	0800e505 	.word	0x0800e505

0800c138 <_Bfree>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	69c6      	ldr	r6, [r0, #28]
 800c13c:	4605      	mov	r5, r0
 800c13e:	460c      	mov	r4, r1
 800c140:	b976      	cbnz	r6, 800c160 <_Bfree+0x28>
 800c142:	2010      	movs	r0, #16
 800c144:	f7ff ff02 	bl	800bf4c <malloc>
 800c148:	4602      	mov	r2, r0
 800c14a:	61e8      	str	r0, [r5, #28]
 800c14c:	b920      	cbnz	r0, 800c158 <_Bfree+0x20>
 800c14e:	4b09      	ldr	r3, [pc, #36]	@ (800c174 <_Bfree+0x3c>)
 800c150:	4809      	ldr	r0, [pc, #36]	@ (800c178 <_Bfree+0x40>)
 800c152:	218f      	movs	r1, #143	@ 0x8f
 800c154:	f000 fe7a 	bl	800ce4c <__assert_func>
 800c158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c15c:	6006      	str	r6, [r0, #0]
 800c15e:	60c6      	str	r6, [r0, #12]
 800c160:	b13c      	cbz	r4, 800c172 <_Bfree+0x3a>
 800c162:	69eb      	ldr	r3, [r5, #28]
 800c164:	6862      	ldr	r2, [r4, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c16c:	6021      	str	r1, [r4, #0]
 800c16e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	0800e485 	.word	0x0800e485
 800c178:	0800e505 	.word	0x0800e505

0800c17c <__multadd>:
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	690d      	ldr	r5, [r1, #16]
 800c182:	4607      	mov	r7, r0
 800c184:	460c      	mov	r4, r1
 800c186:	461e      	mov	r6, r3
 800c188:	f101 0c14 	add.w	ip, r1, #20
 800c18c:	2000      	movs	r0, #0
 800c18e:	f8dc 3000 	ldr.w	r3, [ip]
 800c192:	b299      	uxth	r1, r3
 800c194:	fb02 6101 	mla	r1, r2, r1, r6
 800c198:	0c1e      	lsrs	r6, r3, #16
 800c19a:	0c0b      	lsrs	r3, r1, #16
 800c19c:	fb02 3306 	mla	r3, r2, r6, r3
 800c1a0:	b289      	uxth	r1, r1
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1a8:	4285      	cmp	r5, r0
 800c1aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c1ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1b2:	dcec      	bgt.n	800c18e <__multadd+0x12>
 800c1b4:	b30e      	cbz	r6, 800c1fa <__multadd+0x7e>
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	dc19      	bgt.n	800c1f0 <__multadd+0x74>
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	4638      	mov	r0, r7
 800c1c0:	3101      	adds	r1, #1
 800c1c2:	f7ff ff79 	bl	800c0b8 <_Balloc>
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <__multadd+0x5a>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c200 <__multadd+0x84>)
 800c1ce:	480d      	ldr	r0, [pc, #52]	@ (800c204 <__multadd+0x88>)
 800c1d0:	21ba      	movs	r1, #186	@ 0xba
 800c1d2:	f000 fe3b 	bl	800ce4c <__assert_func>
 800c1d6:	6922      	ldr	r2, [r4, #16]
 800c1d8:	3202      	adds	r2, #2
 800c1da:	f104 010c 	add.w	r1, r4, #12
 800c1de:	0092      	lsls	r2, r2, #2
 800c1e0:	300c      	adds	r0, #12
 800c1e2:	f7ff f80c 	bl	800b1fe <memcpy>
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ffa5 	bl	800c138 <_Bfree>
 800c1ee:	4644      	mov	r4, r8
 800c1f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1f4:	3501      	adds	r5, #1
 800c1f6:	615e      	str	r6, [r3, #20]
 800c1f8:	6125      	str	r5, [r4, #16]
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	0800e4f4 	.word	0x0800e4f4
 800c204:	0800e505 	.word	0x0800e505

0800c208 <__hi0bits>:
 800c208:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c20c:	4603      	mov	r3, r0
 800c20e:	bf36      	itet	cc
 800c210:	0403      	lslcc	r3, r0, #16
 800c212:	2000      	movcs	r0, #0
 800c214:	2010      	movcc	r0, #16
 800c216:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c21a:	bf3c      	itt	cc
 800c21c:	021b      	lslcc	r3, r3, #8
 800c21e:	3008      	addcc	r0, #8
 800c220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c224:	bf3c      	itt	cc
 800c226:	011b      	lslcc	r3, r3, #4
 800c228:	3004      	addcc	r0, #4
 800c22a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c22e:	bf3c      	itt	cc
 800c230:	009b      	lslcc	r3, r3, #2
 800c232:	3002      	addcc	r0, #2
 800c234:	2b00      	cmp	r3, #0
 800c236:	db05      	blt.n	800c244 <__hi0bits+0x3c>
 800c238:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c23c:	f100 0001 	add.w	r0, r0, #1
 800c240:	bf08      	it	eq
 800c242:	2020      	moveq	r0, #32
 800c244:	4770      	bx	lr

0800c246 <__lo0bits>:
 800c246:	6803      	ldr	r3, [r0, #0]
 800c248:	4602      	mov	r2, r0
 800c24a:	f013 0007 	ands.w	r0, r3, #7
 800c24e:	d00b      	beq.n	800c268 <__lo0bits+0x22>
 800c250:	07d9      	lsls	r1, r3, #31
 800c252:	d421      	bmi.n	800c298 <__lo0bits+0x52>
 800c254:	0798      	lsls	r0, r3, #30
 800c256:	bf49      	itett	mi
 800c258:	085b      	lsrmi	r3, r3, #1
 800c25a:	089b      	lsrpl	r3, r3, #2
 800c25c:	2001      	movmi	r0, #1
 800c25e:	6013      	strmi	r3, [r2, #0]
 800c260:	bf5c      	itt	pl
 800c262:	6013      	strpl	r3, [r2, #0]
 800c264:	2002      	movpl	r0, #2
 800c266:	4770      	bx	lr
 800c268:	b299      	uxth	r1, r3
 800c26a:	b909      	cbnz	r1, 800c270 <__lo0bits+0x2a>
 800c26c:	0c1b      	lsrs	r3, r3, #16
 800c26e:	2010      	movs	r0, #16
 800c270:	b2d9      	uxtb	r1, r3
 800c272:	b909      	cbnz	r1, 800c278 <__lo0bits+0x32>
 800c274:	3008      	adds	r0, #8
 800c276:	0a1b      	lsrs	r3, r3, #8
 800c278:	0719      	lsls	r1, r3, #28
 800c27a:	bf04      	itt	eq
 800c27c:	091b      	lsreq	r3, r3, #4
 800c27e:	3004      	addeq	r0, #4
 800c280:	0799      	lsls	r1, r3, #30
 800c282:	bf04      	itt	eq
 800c284:	089b      	lsreq	r3, r3, #2
 800c286:	3002      	addeq	r0, #2
 800c288:	07d9      	lsls	r1, r3, #31
 800c28a:	d403      	bmi.n	800c294 <__lo0bits+0x4e>
 800c28c:	085b      	lsrs	r3, r3, #1
 800c28e:	f100 0001 	add.w	r0, r0, #1
 800c292:	d003      	beq.n	800c29c <__lo0bits+0x56>
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	4770      	bx	lr
 800c298:	2000      	movs	r0, #0
 800c29a:	4770      	bx	lr
 800c29c:	2020      	movs	r0, #32
 800c29e:	4770      	bx	lr

0800c2a0 <__i2b>:
 800c2a0:	b510      	push	{r4, lr}
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	f7ff ff07 	bl	800c0b8 <_Balloc>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	b928      	cbnz	r0, 800c2ba <__i2b+0x1a>
 800c2ae:	4b05      	ldr	r3, [pc, #20]	@ (800c2c4 <__i2b+0x24>)
 800c2b0:	4805      	ldr	r0, [pc, #20]	@ (800c2c8 <__i2b+0x28>)
 800c2b2:	f240 1145 	movw	r1, #325	@ 0x145
 800c2b6:	f000 fdc9 	bl	800ce4c <__assert_func>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	6144      	str	r4, [r0, #20]
 800c2be:	6103      	str	r3, [r0, #16]
 800c2c0:	bd10      	pop	{r4, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0800e4f4 	.word	0x0800e4f4
 800c2c8:	0800e505 	.word	0x0800e505

0800c2cc <__multiply>:
 800c2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	4614      	mov	r4, r2
 800c2d2:	690a      	ldr	r2, [r1, #16]
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	bfa8      	it	ge
 800c2da:	4623      	movge	r3, r4
 800c2dc:	460f      	mov	r7, r1
 800c2de:	bfa4      	itt	ge
 800c2e0:	460c      	movge	r4, r1
 800c2e2:	461f      	movge	r7, r3
 800c2e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c2e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c2ec:	68a3      	ldr	r3, [r4, #8]
 800c2ee:	6861      	ldr	r1, [r4, #4]
 800c2f0:	eb0a 0609 	add.w	r6, sl, r9
 800c2f4:	42b3      	cmp	r3, r6
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	bfb8      	it	lt
 800c2fa:	3101      	addlt	r1, #1
 800c2fc:	f7ff fedc 	bl	800c0b8 <_Balloc>
 800c300:	b930      	cbnz	r0, 800c310 <__multiply+0x44>
 800c302:	4602      	mov	r2, r0
 800c304:	4b44      	ldr	r3, [pc, #272]	@ (800c418 <__multiply+0x14c>)
 800c306:	4845      	ldr	r0, [pc, #276]	@ (800c41c <__multiply+0x150>)
 800c308:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c30c:	f000 fd9e 	bl	800ce4c <__assert_func>
 800c310:	f100 0514 	add.w	r5, r0, #20
 800c314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c318:	462b      	mov	r3, r5
 800c31a:	2200      	movs	r2, #0
 800c31c:	4543      	cmp	r3, r8
 800c31e:	d321      	bcc.n	800c364 <__multiply+0x98>
 800c320:	f107 0114 	add.w	r1, r7, #20
 800c324:	f104 0214 	add.w	r2, r4, #20
 800c328:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c32c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c330:	9302      	str	r3, [sp, #8]
 800c332:	1b13      	subs	r3, r2, r4
 800c334:	3b15      	subs	r3, #21
 800c336:	f023 0303 	bic.w	r3, r3, #3
 800c33a:	3304      	adds	r3, #4
 800c33c:	f104 0715 	add.w	r7, r4, #21
 800c340:	42ba      	cmp	r2, r7
 800c342:	bf38      	it	cc
 800c344:	2304      	movcc	r3, #4
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	9b02      	ldr	r3, [sp, #8]
 800c34a:	9103      	str	r1, [sp, #12]
 800c34c:	428b      	cmp	r3, r1
 800c34e:	d80c      	bhi.n	800c36a <__multiply+0x9e>
 800c350:	2e00      	cmp	r6, #0
 800c352:	dd03      	ble.n	800c35c <__multiply+0x90>
 800c354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d05b      	beq.n	800c414 <__multiply+0x148>
 800c35c:	6106      	str	r6, [r0, #16]
 800c35e:	b005      	add	sp, #20
 800c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	f843 2b04 	str.w	r2, [r3], #4
 800c368:	e7d8      	b.n	800c31c <__multiply+0x50>
 800c36a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c36e:	f1ba 0f00 	cmp.w	sl, #0
 800c372:	d024      	beq.n	800c3be <__multiply+0xf2>
 800c374:	f104 0e14 	add.w	lr, r4, #20
 800c378:	46a9      	mov	r9, r5
 800c37a:	f04f 0c00 	mov.w	ip, #0
 800c37e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c382:	f8d9 3000 	ldr.w	r3, [r9]
 800c386:	fa1f fb87 	uxth.w	fp, r7
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c390:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c394:	f8d9 7000 	ldr.w	r7, [r9]
 800c398:	4463      	add	r3, ip
 800c39a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c39e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c3a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3ac:	4572      	cmp	r2, lr
 800c3ae:	f849 3b04 	str.w	r3, [r9], #4
 800c3b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c3b6:	d8e2      	bhi.n	800c37e <__multiply+0xb2>
 800c3b8:	9b01      	ldr	r3, [sp, #4]
 800c3ba:	f845 c003 	str.w	ip, [r5, r3]
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c3c4:	3104      	adds	r1, #4
 800c3c6:	f1b9 0f00 	cmp.w	r9, #0
 800c3ca:	d021      	beq.n	800c410 <__multiply+0x144>
 800c3cc:	682b      	ldr	r3, [r5, #0]
 800c3ce:	f104 0c14 	add.w	ip, r4, #20
 800c3d2:	46ae      	mov	lr, r5
 800c3d4:	f04f 0a00 	mov.w	sl, #0
 800c3d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c3dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c3e0:	fb09 770b 	mla	r7, r9, fp, r7
 800c3e4:	4457      	add	r7, sl
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c3ec:	f84e 3b04 	str.w	r3, [lr], #4
 800c3f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3f8:	f8be 3000 	ldrh.w	r3, [lr]
 800c3fc:	fb09 330a 	mla	r3, r9, sl, r3
 800c400:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c404:	4562      	cmp	r2, ip
 800c406:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c40a:	d8e5      	bhi.n	800c3d8 <__multiply+0x10c>
 800c40c:	9f01      	ldr	r7, [sp, #4]
 800c40e:	51eb      	str	r3, [r5, r7]
 800c410:	3504      	adds	r5, #4
 800c412:	e799      	b.n	800c348 <__multiply+0x7c>
 800c414:	3e01      	subs	r6, #1
 800c416:	e79b      	b.n	800c350 <__multiply+0x84>
 800c418:	0800e4f4 	.word	0x0800e4f4
 800c41c:	0800e505 	.word	0x0800e505

0800c420 <__pow5mult>:
 800c420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c424:	4615      	mov	r5, r2
 800c426:	f012 0203 	ands.w	r2, r2, #3
 800c42a:	4607      	mov	r7, r0
 800c42c:	460e      	mov	r6, r1
 800c42e:	d007      	beq.n	800c440 <__pow5mult+0x20>
 800c430:	4c25      	ldr	r4, [pc, #148]	@ (800c4c8 <__pow5mult+0xa8>)
 800c432:	3a01      	subs	r2, #1
 800c434:	2300      	movs	r3, #0
 800c436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c43a:	f7ff fe9f 	bl	800c17c <__multadd>
 800c43e:	4606      	mov	r6, r0
 800c440:	10ad      	asrs	r5, r5, #2
 800c442:	d03d      	beq.n	800c4c0 <__pow5mult+0xa0>
 800c444:	69fc      	ldr	r4, [r7, #28]
 800c446:	b97c      	cbnz	r4, 800c468 <__pow5mult+0x48>
 800c448:	2010      	movs	r0, #16
 800c44a:	f7ff fd7f 	bl	800bf4c <malloc>
 800c44e:	4602      	mov	r2, r0
 800c450:	61f8      	str	r0, [r7, #28]
 800c452:	b928      	cbnz	r0, 800c460 <__pow5mult+0x40>
 800c454:	4b1d      	ldr	r3, [pc, #116]	@ (800c4cc <__pow5mult+0xac>)
 800c456:	481e      	ldr	r0, [pc, #120]	@ (800c4d0 <__pow5mult+0xb0>)
 800c458:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c45c:	f000 fcf6 	bl	800ce4c <__assert_func>
 800c460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c464:	6004      	str	r4, [r0, #0]
 800c466:	60c4      	str	r4, [r0, #12]
 800c468:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c46c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c470:	b94c      	cbnz	r4, 800c486 <__pow5mult+0x66>
 800c472:	f240 2171 	movw	r1, #625	@ 0x271
 800c476:	4638      	mov	r0, r7
 800c478:	f7ff ff12 	bl	800c2a0 <__i2b>
 800c47c:	2300      	movs	r3, #0
 800c47e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c482:	4604      	mov	r4, r0
 800c484:	6003      	str	r3, [r0, #0]
 800c486:	f04f 0900 	mov.w	r9, #0
 800c48a:	07eb      	lsls	r3, r5, #31
 800c48c:	d50a      	bpl.n	800c4a4 <__pow5mult+0x84>
 800c48e:	4631      	mov	r1, r6
 800c490:	4622      	mov	r2, r4
 800c492:	4638      	mov	r0, r7
 800c494:	f7ff ff1a 	bl	800c2cc <__multiply>
 800c498:	4631      	mov	r1, r6
 800c49a:	4680      	mov	r8, r0
 800c49c:	4638      	mov	r0, r7
 800c49e:	f7ff fe4b 	bl	800c138 <_Bfree>
 800c4a2:	4646      	mov	r6, r8
 800c4a4:	106d      	asrs	r5, r5, #1
 800c4a6:	d00b      	beq.n	800c4c0 <__pow5mult+0xa0>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	b938      	cbnz	r0, 800c4bc <__pow5mult+0x9c>
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ff0b 	bl	800c2cc <__multiply>
 800c4b6:	6020      	str	r0, [r4, #0]
 800c4b8:	f8c0 9000 	str.w	r9, [r0]
 800c4bc:	4604      	mov	r4, r0
 800c4be:	e7e4      	b.n	800c48a <__pow5mult+0x6a>
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c6:	bf00      	nop
 800c4c8:	0800e560 	.word	0x0800e560
 800c4cc:	0800e485 	.word	0x0800e485
 800c4d0:	0800e505 	.word	0x0800e505

0800c4d4 <__lshift>:
 800c4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d8:	460c      	mov	r4, r1
 800c4da:	6849      	ldr	r1, [r1, #4]
 800c4dc:	6923      	ldr	r3, [r4, #16]
 800c4de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4e2:	68a3      	ldr	r3, [r4, #8]
 800c4e4:	4607      	mov	r7, r0
 800c4e6:	4691      	mov	r9, r2
 800c4e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4ec:	f108 0601 	add.w	r6, r8, #1
 800c4f0:	42b3      	cmp	r3, r6
 800c4f2:	db0b      	blt.n	800c50c <__lshift+0x38>
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f7ff fddf 	bl	800c0b8 <_Balloc>
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	b948      	cbnz	r0, 800c512 <__lshift+0x3e>
 800c4fe:	4602      	mov	r2, r0
 800c500:	4b28      	ldr	r3, [pc, #160]	@ (800c5a4 <__lshift+0xd0>)
 800c502:	4829      	ldr	r0, [pc, #164]	@ (800c5a8 <__lshift+0xd4>)
 800c504:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c508:	f000 fca0 	bl	800ce4c <__assert_func>
 800c50c:	3101      	adds	r1, #1
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	e7ee      	b.n	800c4f0 <__lshift+0x1c>
 800c512:	2300      	movs	r3, #0
 800c514:	f100 0114 	add.w	r1, r0, #20
 800c518:	f100 0210 	add.w	r2, r0, #16
 800c51c:	4618      	mov	r0, r3
 800c51e:	4553      	cmp	r3, sl
 800c520:	db33      	blt.n	800c58a <__lshift+0xb6>
 800c522:	6920      	ldr	r0, [r4, #16]
 800c524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c528:	f104 0314 	add.w	r3, r4, #20
 800c52c:	f019 091f 	ands.w	r9, r9, #31
 800c530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c538:	d02b      	beq.n	800c592 <__lshift+0xbe>
 800c53a:	f1c9 0e20 	rsb	lr, r9, #32
 800c53e:	468a      	mov	sl, r1
 800c540:	2200      	movs	r2, #0
 800c542:	6818      	ldr	r0, [r3, #0]
 800c544:	fa00 f009 	lsl.w	r0, r0, r9
 800c548:	4310      	orrs	r0, r2
 800c54a:	f84a 0b04 	str.w	r0, [sl], #4
 800c54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c552:	459c      	cmp	ip, r3
 800c554:	fa22 f20e 	lsr.w	r2, r2, lr
 800c558:	d8f3      	bhi.n	800c542 <__lshift+0x6e>
 800c55a:	ebac 0304 	sub.w	r3, ip, r4
 800c55e:	3b15      	subs	r3, #21
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	3304      	adds	r3, #4
 800c566:	f104 0015 	add.w	r0, r4, #21
 800c56a:	4584      	cmp	ip, r0
 800c56c:	bf38      	it	cc
 800c56e:	2304      	movcc	r3, #4
 800c570:	50ca      	str	r2, [r1, r3]
 800c572:	b10a      	cbz	r2, 800c578 <__lshift+0xa4>
 800c574:	f108 0602 	add.w	r6, r8, #2
 800c578:	3e01      	subs	r6, #1
 800c57a:	4638      	mov	r0, r7
 800c57c:	612e      	str	r6, [r5, #16]
 800c57e:	4621      	mov	r1, r4
 800c580:	f7ff fdda 	bl	800c138 <_Bfree>
 800c584:	4628      	mov	r0, r5
 800c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c58e:	3301      	adds	r3, #1
 800c590:	e7c5      	b.n	800c51e <__lshift+0x4a>
 800c592:	3904      	subs	r1, #4
 800c594:	f853 2b04 	ldr.w	r2, [r3], #4
 800c598:	f841 2f04 	str.w	r2, [r1, #4]!
 800c59c:	459c      	cmp	ip, r3
 800c59e:	d8f9      	bhi.n	800c594 <__lshift+0xc0>
 800c5a0:	e7ea      	b.n	800c578 <__lshift+0xa4>
 800c5a2:	bf00      	nop
 800c5a4:	0800e4f4 	.word	0x0800e4f4
 800c5a8:	0800e505 	.word	0x0800e505

0800c5ac <__mcmp>:
 800c5ac:	690a      	ldr	r2, [r1, #16]
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	6900      	ldr	r0, [r0, #16]
 800c5b2:	1a80      	subs	r0, r0, r2
 800c5b4:	b530      	push	{r4, r5, lr}
 800c5b6:	d10e      	bne.n	800c5d6 <__mcmp+0x2a>
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	3114      	adds	r1, #20
 800c5bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c5c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c5c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c5cc:	4295      	cmp	r5, r2
 800c5ce:	d003      	beq.n	800c5d8 <__mcmp+0x2c>
 800c5d0:	d205      	bcs.n	800c5de <__mcmp+0x32>
 800c5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d6:	bd30      	pop	{r4, r5, pc}
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d3f3      	bcc.n	800c5c4 <__mcmp+0x18>
 800c5dc:	e7fb      	b.n	800c5d6 <__mcmp+0x2a>
 800c5de:	2001      	movs	r0, #1
 800c5e0:	e7f9      	b.n	800c5d6 <__mcmp+0x2a>
	...

0800c5e4 <__mdiff>:
 800c5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e8:	4689      	mov	r9, r1
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	4648      	mov	r0, r9
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	f7ff ffdb 	bl	800c5ac <__mcmp>
 800c5f6:	1e05      	subs	r5, r0, #0
 800c5f8:	d112      	bne.n	800c620 <__mdiff+0x3c>
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f7ff fd5b 	bl	800c0b8 <_Balloc>
 800c602:	4602      	mov	r2, r0
 800c604:	b928      	cbnz	r0, 800c612 <__mdiff+0x2e>
 800c606:	4b3f      	ldr	r3, [pc, #252]	@ (800c704 <__mdiff+0x120>)
 800c608:	f240 2137 	movw	r1, #567	@ 0x237
 800c60c:	483e      	ldr	r0, [pc, #248]	@ (800c708 <__mdiff+0x124>)
 800c60e:	f000 fc1d 	bl	800ce4c <__assert_func>
 800c612:	2301      	movs	r3, #1
 800c614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c618:	4610      	mov	r0, r2
 800c61a:	b003      	add	sp, #12
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	bfbc      	itt	lt
 800c622:	464b      	movlt	r3, r9
 800c624:	46a1      	movlt	r9, r4
 800c626:	4630      	mov	r0, r6
 800c628:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c62c:	bfba      	itte	lt
 800c62e:	461c      	movlt	r4, r3
 800c630:	2501      	movlt	r5, #1
 800c632:	2500      	movge	r5, #0
 800c634:	f7ff fd40 	bl	800c0b8 <_Balloc>
 800c638:	4602      	mov	r2, r0
 800c63a:	b918      	cbnz	r0, 800c644 <__mdiff+0x60>
 800c63c:	4b31      	ldr	r3, [pc, #196]	@ (800c704 <__mdiff+0x120>)
 800c63e:	f240 2145 	movw	r1, #581	@ 0x245
 800c642:	e7e3      	b.n	800c60c <__mdiff+0x28>
 800c644:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c648:	6926      	ldr	r6, [r4, #16]
 800c64a:	60c5      	str	r5, [r0, #12]
 800c64c:	f109 0310 	add.w	r3, r9, #16
 800c650:	f109 0514 	add.w	r5, r9, #20
 800c654:	f104 0e14 	add.w	lr, r4, #20
 800c658:	f100 0b14 	add.w	fp, r0, #20
 800c65c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c660:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	46d9      	mov	r9, fp
 800c668:	f04f 0c00 	mov.w	ip, #0
 800c66c:	9b01      	ldr	r3, [sp, #4]
 800c66e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c672:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	fa1f f38a 	uxth.w	r3, sl
 800c67c:	4619      	mov	r1, r3
 800c67e:	b283      	uxth	r3, r0
 800c680:	1acb      	subs	r3, r1, r3
 800c682:	0c00      	lsrs	r0, r0, #16
 800c684:	4463      	add	r3, ip
 800c686:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c68a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c68e:	b29b      	uxth	r3, r3
 800c690:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c694:	4576      	cmp	r6, lr
 800c696:	f849 3b04 	str.w	r3, [r9], #4
 800c69a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c69e:	d8e5      	bhi.n	800c66c <__mdiff+0x88>
 800c6a0:	1b33      	subs	r3, r6, r4
 800c6a2:	3b15      	subs	r3, #21
 800c6a4:	f023 0303 	bic.w	r3, r3, #3
 800c6a8:	3415      	adds	r4, #21
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	42a6      	cmp	r6, r4
 800c6ae:	bf38      	it	cc
 800c6b0:	2304      	movcc	r3, #4
 800c6b2:	441d      	add	r5, r3
 800c6b4:	445b      	add	r3, fp
 800c6b6:	461e      	mov	r6, r3
 800c6b8:	462c      	mov	r4, r5
 800c6ba:	4544      	cmp	r4, r8
 800c6bc:	d30e      	bcc.n	800c6dc <__mdiff+0xf8>
 800c6be:	f108 0103 	add.w	r1, r8, #3
 800c6c2:	1b49      	subs	r1, r1, r5
 800c6c4:	f021 0103 	bic.w	r1, r1, #3
 800c6c8:	3d03      	subs	r5, #3
 800c6ca:	45a8      	cmp	r8, r5
 800c6cc:	bf38      	it	cc
 800c6ce:	2100      	movcc	r1, #0
 800c6d0:	440b      	add	r3, r1
 800c6d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6d6:	b191      	cbz	r1, 800c6fe <__mdiff+0x11a>
 800c6d8:	6117      	str	r7, [r2, #16]
 800c6da:	e79d      	b.n	800c618 <__mdiff+0x34>
 800c6dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c6e0:	46e6      	mov	lr, ip
 800c6e2:	0c08      	lsrs	r0, r1, #16
 800c6e4:	fa1c fc81 	uxtah	ip, ip, r1
 800c6e8:	4471      	add	r1, lr
 800c6ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c6ee:	b289      	uxth	r1, r1
 800c6f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c6f4:	f846 1b04 	str.w	r1, [r6], #4
 800c6f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6fc:	e7dd      	b.n	800c6ba <__mdiff+0xd6>
 800c6fe:	3f01      	subs	r7, #1
 800c700:	e7e7      	b.n	800c6d2 <__mdiff+0xee>
 800c702:	bf00      	nop
 800c704:	0800e4f4 	.word	0x0800e4f4
 800c708:	0800e505 	.word	0x0800e505

0800c70c <__d2b>:
 800c70c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c710:	460f      	mov	r7, r1
 800c712:	2101      	movs	r1, #1
 800c714:	ec59 8b10 	vmov	r8, r9, d0
 800c718:	4616      	mov	r6, r2
 800c71a:	f7ff fccd 	bl	800c0b8 <_Balloc>
 800c71e:	4604      	mov	r4, r0
 800c720:	b930      	cbnz	r0, 800c730 <__d2b+0x24>
 800c722:	4602      	mov	r2, r0
 800c724:	4b23      	ldr	r3, [pc, #140]	@ (800c7b4 <__d2b+0xa8>)
 800c726:	4824      	ldr	r0, [pc, #144]	@ (800c7b8 <__d2b+0xac>)
 800c728:	f240 310f 	movw	r1, #783	@ 0x30f
 800c72c:	f000 fb8e 	bl	800ce4c <__assert_func>
 800c730:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c738:	b10d      	cbz	r5, 800c73e <__d2b+0x32>
 800c73a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	f1b8 0300 	subs.w	r3, r8, #0
 800c744:	d023      	beq.n	800c78e <__d2b+0x82>
 800c746:	4668      	mov	r0, sp
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	f7ff fd7c 	bl	800c246 <__lo0bits>
 800c74e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c752:	b1d0      	cbz	r0, 800c78a <__d2b+0x7e>
 800c754:	f1c0 0320 	rsb	r3, r0, #32
 800c758:	fa02 f303 	lsl.w	r3, r2, r3
 800c75c:	430b      	orrs	r3, r1
 800c75e:	40c2      	lsrs	r2, r0
 800c760:	6163      	str	r3, [r4, #20]
 800c762:	9201      	str	r2, [sp, #4]
 800c764:	9b01      	ldr	r3, [sp, #4]
 800c766:	61a3      	str	r3, [r4, #24]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bf0c      	ite	eq
 800c76c:	2201      	moveq	r2, #1
 800c76e:	2202      	movne	r2, #2
 800c770:	6122      	str	r2, [r4, #16]
 800c772:	b1a5      	cbz	r5, 800c79e <__d2b+0x92>
 800c774:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c778:	4405      	add	r5, r0
 800c77a:	603d      	str	r5, [r7, #0]
 800c77c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c780:	6030      	str	r0, [r6, #0]
 800c782:	4620      	mov	r0, r4
 800c784:	b003      	add	sp, #12
 800c786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c78a:	6161      	str	r1, [r4, #20]
 800c78c:	e7ea      	b.n	800c764 <__d2b+0x58>
 800c78e:	a801      	add	r0, sp, #4
 800c790:	f7ff fd59 	bl	800c246 <__lo0bits>
 800c794:	9b01      	ldr	r3, [sp, #4]
 800c796:	6163      	str	r3, [r4, #20]
 800c798:	3020      	adds	r0, #32
 800c79a:	2201      	movs	r2, #1
 800c79c:	e7e8      	b.n	800c770 <__d2b+0x64>
 800c79e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c7a6:	6038      	str	r0, [r7, #0]
 800c7a8:	6918      	ldr	r0, [r3, #16]
 800c7aa:	f7ff fd2d 	bl	800c208 <__hi0bits>
 800c7ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7b2:	e7e5      	b.n	800c780 <__d2b+0x74>
 800c7b4:	0800e4f4 	.word	0x0800e4f4
 800c7b8:	0800e505 	.word	0x0800e505

0800c7bc <__ssputs_r>:
 800c7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c0:	688e      	ldr	r6, [r1, #8]
 800c7c2:	461f      	mov	r7, r3
 800c7c4:	42be      	cmp	r6, r7
 800c7c6:	680b      	ldr	r3, [r1, #0]
 800c7c8:	4682      	mov	sl, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	4690      	mov	r8, r2
 800c7ce:	d82d      	bhi.n	800c82c <__ssputs_r+0x70>
 800c7d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7d8:	d026      	beq.n	800c828 <__ssputs_r+0x6c>
 800c7da:	6965      	ldr	r5, [r4, #20]
 800c7dc:	6909      	ldr	r1, [r1, #16]
 800c7de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7e2:	eba3 0901 	sub.w	r9, r3, r1
 800c7e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7ea:	1c7b      	adds	r3, r7, #1
 800c7ec:	444b      	add	r3, r9
 800c7ee:	106d      	asrs	r5, r5, #1
 800c7f0:	429d      	cmp	r5, r3
 800c7f2:	bf38      	it	cc
 800c7f4:	461d      	movcc	r5, r3
 800c7f6:	0553      	lsls	r3, r2, #21
 800c7f8:	d527      	bpl.n	800c84a <__ssputs_r+0x8e>
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	f7ff fbd0 	bl	800bfa0 <_malloc_r>
 800c800:	4606      	mov	r6, r0
 800c802:	b360      	cbz	r0, 800c85e <__ssputs_r+0xa2>
 800c804:	6921      	ldr	r1, [r4, #16]
 800c806:	464a      	mov	r2, r9
 800c808:	f7fe fcf9 	bl	800b1fe <memcpy>
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	6126      	str	r6, [r4, #16]
 800c81a:	6165      	str	r5, [r4, #20]
 800c81c:	444e      	add	r6, r9
 800c81e:	eba5 0509 	sub.w	r5, r5, r9
 800c822:	6026      	str	r6, [r4, #0]
 800c824:	60a5      	str	r5, [r4, #8]
 800c826:	463e      	mov	r6, r7
 800c828:	42be      	cmp	r6, r7
 800c82a:	d900      	bls.n	800c82e <__ssputs_r+0x72>
 800c82c:	463e      	mov	r6, r7
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	4632      	mov	r2, r6
 800c832:	4641      	mov	r1, r8
 800c834:	f000 fabe 	bl	800cdb4 <memmove>
 800c838:	68a3      	ldr	r3, [r4, #8]
 800c83a:	1b9b      	subs	r3, r3, r6
 800c83c:	60a3      	str	r3, [r4, #8]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	4433      	add	r3, r6
 800c842:	6023      	str	r3, [r4, #0]
 800c844:	2000      	movs	r0, #0
 800c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84a:	462a      	mov	r2, r5
 800c84c:	f000 fb42 	bl	800ced4 <_realloc_r>
 800c850:	4606      	mov	r6, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	d1e0      	bne.n	800c818 <__ssputs_r+0x5c>
 800c856:	6921      	ldr	r1, [r4, #16]
 800c858:	4650      	mov	r0, sl
 800c85a:	f7ff fb2d 	bl	800beb8 <_free_r>
 800c85e:	230c      	movs	r3, #12
 800c860:	f8ca 3000 	str.w	r3, [sl]
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	e7e9      	b.n	800c846 <__ssputs_r+0x8a>
	...

0800c874 <_svfiprintf_r>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	4698      	mov	r8, r3
 800c87a:	898b      	ldrh	r3, [r1, #12]
 800c87c:	061b      	lsls	r3, r3, #24
 800c87e:	b09d      	sub	sp, #116	@ 0x74
 800c880:	4607      	mov	r7, r0
 800c882:	460d      	mov	r5, r1
 800c884:	4614      	mov	r4, r2
 800c886:	d510      	bpl.n	800c8aa <_svfiprintf_r+0x36>
 800c888:	690b      	ldr	r3, [r1, #16]
 800c88a:	b973      	cbnz	r3, 800c8aa <_svfiprintf_r+0x36>
 800c88c:	2140      	movs	r1, #64	@ 0x40
 800c88e:	f7ff fb87 	bl	800bfa0 <_malloc_r>
 800c892:	6028      	str	r0, [r5, #0]
 800c894:	6128      	str	r0, [r5, #16]
 800c896:	b930      	cbnz	r0, 800c8a6 <_svfiprintf_r+0x32>
 800c898:	230c      	movs	r3, #12
 800c89a:	603b      	str	r3, [r7, #0]
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	b01d      	add	sp, #116	@ 0x74
 800c8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a6:	2340      	movs	r3, #64	@ 0x40
 800c8a8:	616b      	str	r3, [r5, #20]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ae:	2320      	movs	r3, #32
 800c8b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8b8:	2330      	movs	r3, #48	@ 0x30
 800c8ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ca58 <_svfiprintf_r+0x1e4>
 800c8be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8c2:	f04f 0901 	mov.w	r9, #1
 800c8c6:	4623      	mov	r3, r4
 800c8c8:	469a      	mov	sl, r3
 800c8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ce:	b10a      	cbz	r2, 800c8d4 <_svfiprintf_r+0x60>
 800c8d0:	2a25      	cmp	r2, #37	@ 0x25
 800c8d2:	d1f9      	bne.n	800c8c8 <_svfiprintf_r+0x54>
 800c8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8d8:	d00b      	beq.n	800c8f2 <_svfiprintf_r+0x7e>
 800c8da:	465b      	mov	r3, fp
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f7ff ff6b 	bl	800c7bc <__ssputs_r>
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	f000 80a7 	beq.w	800ca3a <_svfiprintf_r+0x1c6>
 800c8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ee:	445a      	add	r2, fp
 800c8f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 809f 	beq.w	800ca3a <_svfiprintf_r+0x1c6>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c906:	f10a 0a01 	add.w	sl, sl, #1
 800c90a:	9304      	str	r3, [sp, #16]
 800c90c:	9307      	str	r3, [sp, #28]
 800c90e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c912:	931a      	str	r3, [sp, #104]	@ 0x68
 800c914:	4654      	mov	r4, sl
 800c916:	2205      	movs	r2, #5
 800c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c91c:	484e      	ldr	r0, [pc, #312]	@ (800ca58 <_svfiprintf_r+0x1e4>)
 800c91e:	f7f3 fc77 	bl	8000210 <memchr>
 800c922:	9a04      	ldr	r2, [sp, #16]
 800c924:	b9d8      	cbnz	r0, 800c95e <_svfiprintf_r+0xea>
 800c926:	06d0      	lsls	r0, r2, #27
 800c928:	bf44      	itt	mi
 800c92a:	2320      	movmi	r3, #32
 800c92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c930:	0711      	lsls	r1, r2, #28
 800c932:	bf44      	itt	mi
 800c934:	232b      	movmi	r3, #43	@ 0x2b
 800c936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c93a:	f89a 3000 	ldrb.w	r3, [sl]
 800c93e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c940:	d015      	beq.n	800c96e <_svfiprintf_r+0xfa>
 800c942:	9a07      	ldr	r2, [sp, #28]
 800c944:	4654      	mov	r4, sl
 800c946:	2000      	movs	r0, #0
 800c948:	f04f 0c0a 	mov.w	ip, #10
 800c94c:	4621      	mov	r1, r4
 800c94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c952:	3b30      	subs	r3, #48	@ 0x30
 800c954:	2b09      	cmp	r3, #9
 800c956:	d94b      	bls.n	800c9f0 <_svfiprintf_r+0x17c>
 800c958:	b1b0      	cbz	r0, 800c988 <_svfiprintf_r+0x114>
 800c95a:	9207      	str	r2, [sp, #28]
 800c95c:	e014      	b.n	800c988 <_svfiprintf_r+0x114>
 800c95e:	eba0 0308 	sub.w	r3, r0, r8
 800c962:	fa09 f303 	lsl.w	r3, r9, r3
 800c966:	4313      	orrs	r3, r2
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	46a2      	mov	sl, r4
 800c96c:	e7d2      	b.n	800c914 <_svfiprintf_r+0xa0>
 800c96e:	9b03      	ldr	r3, [sp, #12]
 800c970:	1d19      	adds	r1, r3, #4
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	9103      	str	r1, [sp, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfbb      	ittet	lt
 800c97a:	425b      	neglt	r3, r3
 800c97c:	f042 0202 	orrlt.w	r2, r2, #2
 800c980:	9307      	strge	r3, [sp, #28]
 800c982:	9307      	strlt	r3, [sp, #28]
 800c984:	bfb8      	it	lt
 800c986:	9204      	strlt	r2, [sp, #16]
 800c988:	7823      	ldrb	r3, [r4, #0]
 800c98a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c98c:	d10a      	bne.n	800c9a4 <_svfiprintf_r+0x130>
 800c98e:	7863      	ldrb	r3, [r4, #1]
 800c990:	2b2a      	cmp	r3, #42	@ 0x2a
 800c992:	d132      	bne.n	800c9fa <_svfiprintf_r+0x186>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	1d1a      	adds	r2, r3, #4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	9203      	str	r2, [sp, #12]
 800c99c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c9a0:	3402      	adds	r4, #2
 800c9a2:	9305      	str	r3, [sp, #20]
 800c9a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca68 <_svfiprintf_r+0x1f4>
 800c9a8:	7821      	ldrb	r1, [r4, #0]
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	4650      	mov	r0, sl
 800c9ae:	f7f3 fc2f 	bl	8000210 <memchr>
 800c9b2:	b138      	cbz	r0, 800c9c4 <_svfiprintf_r+0x150>
 800c9b4:	9b04      	ldr	r3, [sp, #16]
 800c9b6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ba:	2240      	movs	r2, #64	@ 0x40
 800c9bc:	4082      	lsls	r2, r0
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	3401      	adds	r4, #1
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c8:	4824      	ldr	r0, [pc, #144]	@ (800ca5c <_svfiprintf_r+0x1e8>)
 800c9ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9ce:	2206      	movs	r2, #6
 800c9d0:	f7f3 fc1e 	bl	8000210 <memchr>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d036      	beq.n	800ca46 <_svfiprintf_r+0x1d2>
 800c9d8:	4b21      	ldr	r3, [pc, #132]	@ (800ca60 <_svfiprintf_r+0x1ec>)
 800c9da:	bb1b      	cbnz	r3, 800ca24 <_svfiprintf_r+0x1b0>
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	3307      	adds	r3, #7
 800c9e0:	f023 0307 	bic.w	r3, r3, #7
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	9303      	str	r3, [sp, #12]
 800c9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ea:	4433      	add	r3, r6
 800c9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ee:	e76a      	b.n	800c8c6 <_svfiprintf_r+0x52>
 800c9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	2001      	movs	r0, #1
 800c9f8:	e7a8      	b.n	800c94c <_svfiprintf_r+0xd8>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	3401      	adds	r4, #1
 800c9fe:	9305      	str	r3, [sp, #20]
 800ca00:	4619      	mov	r1, r3
 800ca02:	f04f 0c0a 	mov.w	ip, #10
 800ca06:	4620      	mov	r0, r4
 800ca08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca0c:	3a30      	subs	r2, #48	@ 0x30
 800ca0e:	2a09      	cmp	r2, #9
 800ca10:	d903      	bls.n	800ca1a <_svfiprintf_r+0x1a6>
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0c6      	beq.n	800c9a4 <_svfiprintf_r+0x130>
 800ca16:	9105      	str	r1, [sp, #20]
 800ca18:	e7c4      	b.n	800c9a4 <_svfiprintf_r+0x130>
 800ca1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca1e:	4604      	mov	r4, r0
 800ca20:	2301      	movs	r3, #1
 800ca22:	e7f0      	b.n	800ca06 <_svfiprintf_r+0x192>
 800ca24:	ab03      	add	r3, sp, #12
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	462a      	mov	r2, r5
 800ca2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ca64 <_svfiprintf_r+0x1f0>)
 800ca2c:	a904      	add	r1, sp, #16
 800ca2e:	4638      	mov	r0, r7
 800ca30:	f7fd fc46 	bl	800a2c0 <_printf_float>
 800ca34:	1c42      	adds	r2, r0, #1
 800ca36:	4606      	mov	r6, r0
 800ca38:	d1d6      	bne.n	800c9e8 <_svfiprintf_r+0x174>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	065b      	lsls	r3, r3, #25
 800ca3e:	f53f af2d 	bmi.w	800c89c <_svfiprintf_r+0x28>
 800ca42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca44:	e72c      	b.n	800c8a0 <_svfiprintf_r+0x2c>
 800ca46:	ab03      	add	r3, sp, #12
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	4b05      	ldr	r3, [pc, #20]	@ (800ca64 <_svfiprintf_r+0x1f0>)
 800ca4e:	a904      	add	r1, sp, #16
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7fd fecd 	bl	800a7f0 <_printf_i>
 800ca56:	e7ed      	b.n	800ca34 <_svfiprintf_r+0x1c0>
 800ca58:	0800e660 	.word	0x0800e660
 800ca5c:	0800e66a 	.word	0x0800e66a
 800ca60:	0800a2c1 	.word	0x0800a2c1
 800ca64:	0800c7bd 	.word	0x0800c7bd
 800ca68:	0800e666 	.word	0x0800e666

0800ca6c <__sfputc_r>:
 800ca6c:	6893      	ldr	r3, [r2, #8]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	b410      	push	{r4}
 800ca74:	6093      	str	r3, [r2, #8]
 800ca76:	da08      	bge.n	800ca8a <__sfputc_r+0x1e>
 800ca78:	6994      	ldr	r4, [r2, #24]
 800ca7a:	42a3      	cmp	r3, r4
 800ca7c:	db01      	blt.n	800ca82 <__sfputc_r+0x16>
 800ca7e:	290a      	cmp	r1, #10
 800ca80:	d103      	bne.n	800ca8a <__sfputc_r+0x1e>
 800ca82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca86:	f7fe ba3c 	b.w	800af02 <__swbuf_r>
 800ca8a:	6813      	ldr	r3, [r2, #0]
 800ca8c:	1c58      	adds	r0, r3, #1
 800ca8e:	6010      	str	r0, [r2, #0]
 800ca90:	7019      	strb	r1, [r3, #0]
 800ca92:	4608      	mov	r0, r1
 800ca94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca98:	4770      	bx	lr

0800ca9a <__sfputs_r>:
 800ca9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	460f      	mov	r7, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	18d5      	adds	r5, r2, r3
 800caa4:	42ac      	cmp	r4, r5
 800caa6:	d101      	bne.n	800caac <__sfputs_r+0x12>
 800caa8:	2000      	movs	r0, #0
 800caaa:	e007      	b.n	800cabc <__sfputs_r+0x22>
 800caac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab0:	463a      	mov	r2, r7
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff ffda 	bl	800ca6c <__sfputc_r>
 800cab8:	1c43      	adds	r3, r0, #1
 800caba:	d1f3      	bne.n	800caa4 <__sfputs_r+0xa>
 800cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cac0 <_vfiprintf_r>:
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	460d      	mov	r5, r1
 800cac6:	b09d      	sub	sp, #116	@ 0x74
 800cac8:	4614      	mov	r4, r2
 800caca:	4698      	mov	r8, r3
 800cacc:	4606      	mov	r6, r0
 800cace:	b118      	cbz	r0, 800cad8 <_vfiprintf_r+0x18>
 800cad0:	6a03      	ldr	r3, [r0, #32]
 800cad2:	b90b      	cbnz	r3, 800cad8 <_vfiprintf_r+0x18>
 800cad4:	f7fe f8f8 	bl	800acc8 <__sinit>
 800cad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cada:	07d9      	lsls	r1, r3, #31
 800cadc:	d405      	bmi.n	800caea <_vfiprintf_r+0x2a>
 800cade:	89ab      	ldrh	r3, [r5, #12]
 800cae0:	059a      	lsls	r2, r3, #22
 800cae2:	d402      	bmi.n	800caea <_vfiprintf_r+0x2a>
 800cae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cae6:	f7fe fb88 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800caea:	89ab      	ldrh	r3, [r5, #12]
 800caec:	071b      	lsls	r3, r3, #28
 800caee:	d501      	bpl.n	800caf4 <_vfiprintf_r+0x34>
 800caf0:	692b      	ldr	r3, [r5, #16]
 800caf2:	b99b      	cbnz	r3, 800cb1c <_vfiprintf_r+0x5c>
 800caf4:	4629      	mov	r1, r5
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7fe fa42 	bl	800af80 <__swsetup_r>
 800cafc:	b170      	cbz	r0, 800cb1c <_vfiprintf_r+0x5c>
 800cafe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb00:	07dc      	lsls	r4, r3, #31
 800cb02:	d504      	bpl.n	800cb0e <_vfiprintf_r+0x4e>
 800cb04:	f04f 30ff 	mov.w	r0, #4294967295
 800cb08:	b01d      	add	sp, #116	@ 0x74
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	89ab      	ldrh	r3, [r5, #12]
 800cb10:	0598      	lsls	r0, r3, #22
 800cb12:	d4f7      	bmi.n	800cb04 <_vfiprintf_r+0x44>
 800cb14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb16:	f7fe fb71 	bl	800b1fc <__retarget_lock_release_recursive>
 800cb1a:	e7f3      	b.n	800cb04 <_vfiprintf_r+0x44>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb20:	2320      	movs	r3, #32
 800cb22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb26:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb2a:	2330      	movs	r3, #48	@ 0x30
 800cb2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ccdc <_vfiprintf_r+0x21c>
 800cb30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb34:	f04f 0901 	mov.w	r9, #1
 800cb38:	4623      	mov	r3, r4
 800cb3a:	469a      	mov	sl, r3
 800cb3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb40:	b10a      	cbz	r2, 800cb46 <_vfiprintf_r+0x86>
 800cb42:	2a25      	cmp	r2, #37	@ 0x25
 800cb44:	d1f9      	bne.n	800cb3a <_vfiprintf_r+0x7a>
 800cb46:	ebba 0b04 	subs.w	fp, sl, r4
 800cb4a:	d00b      	beq.n	800cb64 <_vfiprintf_r+0xa4>
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	4622      	mov	r2, r4
 800cb50:	4629      	mov	r1, r5
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7ff ffa1 	bl	800ca9a <__sfputs_r>
 800cb58:	3001      	adds	r0, #1
 800cb5a:	f000 80a7 	beq.w	800ccac <_vfiprintf_r+0x1ec>
 800cb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb60:	445a      	add	r2, fp
 800cb62:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb64:	f89a 3000 	ldrb.w	r3, [sl]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 809f 	beq.w	800ccac <_vfiprintf_r+0x1ec>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f04f 32ff 	mov.w	r2, #4294967295
 800cb74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb78:	f10a 0a01 	add.w	sl, sl, #1
 800cb7c:	9304      	str	r3, [sp, #16]
 800cb7e:	9307      	str	r3, [sp, #28]
 800cb80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb84:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb86:	4654      	mov	r4, sl
 800cb88:	2205      	movs	r2, #5
 800cb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8e:	4853      	ldr	r0, [pc, #332]	@ (800ccdc <_vfiprintf_r+0x21c>)
 800cb90:	f7f3 fb3e 	bl	8000210 <memchr>
 800cb94:	9a04      	ldr	r2, [sp, #16]
 800cb96:	b9d8      	cbnz	r0, 800cbd0 <_vfiprintf_r+0x110>
 800cb98:	06d1      	lsls	r1, r2, #27
 800cb9a:	bf44      	itt	mi
 800cb9c:	2320      	movmi	r3, #32
 800cb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cba2:	0713      	lsls	r3, r2, #28
 800cba4:	bf44      	itt	mi
 800cba6:	232b      	movmi	r3, #43	@ 0x2b
 800cba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbac:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb2:	d015      	beq.n	800cbe0 <_vfiprintf_r+0x120>
 800cbb4:	9a07      	ldr	r2, [sp, #28]
 800cbb6:	4654      	mov	r4, sl
 800cbb8:	2000      	movs	r0, #0
 800cbba:	f04f 0c0a 	mov.w	ip, #10
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbc4:	3b30      	subs	r3, #48	@ 0x30
 800cbc6:	2b09      	cmp	r3, #9
 800cbc8:	d94b      	bls.n	800cc62 <_vfiprintf_r+0x1a2>
 800cbca:	b1b0      	cbz	r0, 800cbfa <_vfiprintf_r+0x13a>
 800cbcc:	9207      	str	r2, [sp, #28]
 800cbce:	e014      	b.n	800cbfa <_vfiprintf_r+0x13a>
 800cbd0:	eba0 0308 	sub.w	r3, r0, r8
 800cbd4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	46a2      	mov	sl, r4
 800cbde:	e7d2      	b.n	800cb86 <_vfiprintf_r+0xc6>
 800cbe0:	9b03      	ldr	r3, [sp, #12]
 800cbe2:	1d19      	adds	r1, r3, #4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	9103      	str	r1, [sp, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	bfbb      	ittet	lt
 800cbec:	425b      	neglt	r3, r3
 800cbee:	f042 0202 	orrlt.w	r2, r2, #2
 800cbf2:	9307      	strge	r3, [sp, #28]
 800cbf4:	9307      	strlt	r3, [sp, #28]
 800cbf6:	bfb8      	it	lt
 800cbf8:	9204      	strlt	r2, [sp, #16]
 800cbfa:	7823      	ldrb	r3, [r4, #0]
 800cbfc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbfe:	d10a      	bne.n	800cc16 <_vfiprintf_r+0x156>
 800cc00:	7863      	ldrb	r3, [r4, #1]
 800cc02:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc04:	d132      	bne.n	800cc6c <_vfiprintf_r+0x1ac>
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	1d1a      	adds	r2, r3, #4
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	9203      	str	r2, [sp, #12]
 800cc0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc12:	3402      	adds	r4, #2
 800cc14:	9305      	str	r3, [sp, #20]
 800cc16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ccec <_vfiprintf_r+0x22c>
 800cc1a:	7821      	ldrb	r1, [r4, #0]
 800cc1c:	2203      	movs	r2, #3
 800cc1e:	4650      	mov	r0, sl
 800cc20:	f7f3 faf6 	bl	8000210 <memchr>
 800cc24:	b138      	cbz	r0, 800cc36 <_vfiprintf_r+0x176>
 800cc26:	9b04      	ldr	r3, [sp, #16]
 800cc28:	eba0 000a 	sub.w	r0, r0, sl
 800cc2c:	2240      	movs	r2, #64	@ 0x40
 800cc2e:	4082      	lsls	r2, r0
 800cc30:	4313      	orrs	r3, r2
 800cc32:	3401      	adds	r4, #1
 800cc34:	9304      	str	r3, [sp, #16]
 800cc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc3a:	4829      	ldr	r0, [pc, #164]	@ (800cce0 <_vfiprintf_r+0x220>)
 800cc3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc40:	2206      	movs	r2, #6
 800cc42:	f7f3 fae5 	bl	8000210 <memchr>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d03f      	beq.n	800ccca <_vfiprintf_r+0x20a>
 800cc4a:	4b26      	ldr	r3, [pc, #152]	@ (800cce4 <_vfiprintf_r+0x224>)
 800cc4c:	bb1b      	cbnz	r3, 800cc96 <_vfiprintf_r+0x1d6>
 800cc4e:	9b03      	ldr	r3, [sp, #12]
 800cc50:	3307      	adds	r3, #7
 800cc52:	f023 0307 	bic.w	r3, r3, #7
 800cc56:	3308      	adds	r3, #8
 800cc58:	9303      	str	r3, [sp, #12]
 800cc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc5c:	443b      	add	r3, r7
 800cc5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc60:	e76a      	b.n	800cb38 <_vfiprintf_r+0x78>
 800cc62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc66:	460c      	mov	r4, r1
 800cc68:	2001      	movs	r0, #1
 800cc6a:	e7a8      	b.n	800cbbe <_vfiprintf_r+0xfe>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	3401      	adds	r4, #1
 800cc70:	9305      	str	r3, [sp, #20]
 800cc72:	4619      	mov	r1, r3
 800cc74:	f04f 0c0a 	mov.w	ip, #10
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc7e:	3a30      	subs	r2, #48	@ 0x30
 800cc80:	2a09      	cmp	r2, #9
 800cc82:	d903      	bls.n	800cc8c <_vfiprintf_r+0x1cc>
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d0c6      	beq.n	800cc16 <_vfiprintf_r+0x156>
 800cc88:	9105      	str	r1, [sp, #20]
 800cc8a:	e7c4      	b.n	800cc16 <_vfiprintf_r+0x156>
 800cc8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc90:	4604      	mov	r4, r0
 800cc92:	2301      	movs	r3, #1
 800cc94:	e7f0      	b.n	800cc78 <_vfiprintf_r+0x1b8>
 800cc96:	ab03      	add	r3, sp, #12
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4b12      	ldr	r3, [pc, #72]	@ (800cce8 <_vfiprintf_r+0x228>)
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7fd fb0d 	bl	800a2c0 <_printf_float>
 800cca6:	4607      	mov	r7, r0
 800cca8:	1c78      	adds	r0, r7, #1
 800ccaa:	d1d6      	bne.n	800cc5a <_vfiprintf_r+0x19a>
 800ccac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccae:	07d9      	lsls	r1, r3, #31
 800ccb0:	d405      	bmi.n	800ccbe <_vfiprintf_r+0x1fe>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	059a      	lsls	r2, r3, #22
 800ccb6:	d402      	bmi.n	800ccbe <_vfiprintf_r+0x1fe>
 800ccb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccba:	f7fe fa9f 	bl	800b1fc <__retarget_lock_release_recursive>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	065b      	lsls	r3, r3, #25
 800ccc2:	f53f af1f 	bmi.w	800cb04 <_vfiprintf_r+0x44>
 800ccc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccc8:	e71e      	b.n	800cb08 <_vfiprintf_r+0x48>
 800ccca:	ab03      	add	r3, sp, #12
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4b05      	ldr	r3, [pc, #20]	@ (800cce8 <_vfiprintf_r+0x228>)
 800ccd2:	a904      	add	r1, sp, #16
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7fd fd8b 	bl	800a7f0 <_printf_i>
 800ccda:	e7e4      	b.n	800cca6 <_vfiprintf_r+0x1e6>
 800ccdc:	0800e660 	.word	0x0800e660
 800cce0:	0800e66a 	.word	0x0800e66a
 800cce4:	0800a2c1 	.word	0x0800a2c1
 800cce8:	0800ca9b 	.word	0x0800ca9b
 800ccec:	0800e666 	.word	0x0800e666

0800ccf0 <__swhatbuf_r>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	b096      	sub	sp, #88	@ 0x58
 800ccfc:	4615      	mov	r5, r2
 800ccfe:	461e      	mov	r6, r3
 800cd00:	da0d      	bge.n	800cd1e <__swhatbuf_r+0x2e>
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd08:	f04f 0100 	mov.w	r1, #0
 800cd0c:	bf14      	ite	ne
 800cd0e:	2340      	movne	r3, #64	@ 0x40
 800cd10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd14:	2000      	movs	r0, #0
 800cd16:	6031      	str	r1, [r6, #0]
 800cd18:	602b      	str	r3, [r5, #0]
 800cd1a:	b016      	add	sp, #88	@ 0x58
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
 800cd1e:	466a      	mov	r2, sp
 800cd20:	f000 f862 	bl	800cde8 <_fstat_r>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	dbec      	blt.n	800cd02 <__swhatbuf_r+0x12>
 800cd28:	9901      	ldr	r1, [sp, #4]
 800cd2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd32:	4259      	negs	r1, r3
 800cd34:	4159      	adcs	r1, r3
 800cd36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd3a:	e7eb      	b.n	800cd14 <__swhatbuf_r+0x24>

0800cd3c <__smakebuf_r>:
 800cd3c:	898b      	ldrh	r3, [r1, #12]
 800cd3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd40:	079d      	lsls	r5, r3, #30
 800cd42:	4606      	mov	r6, r0
 800cd44:	460c      	mov	r4, r1
 800cd46:	d507      	bpl.n	800cd58 <__smakebuf_r+0x1c>
 800cd48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	6123      	str	r3, [r4, #16]
 800cd50:	2301      	movs	r3, #1
 800cd52:	6163      	str	r3, [r4, #20]
 800cd54:	b003      	add	sp, #12
 800cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd58:	ab01      	add	r3, sp, #4
 800cd5a:	466a      	mov	r2, sp
 800cd5c:	f7ff ffc8 	bl	800ccf0 <__swhatbuf_r>
 800cd60:	9f00      	ldr	r7, [sp, #0]
 800cd62:	4605      	mov	r5, r0
 800cd64:	4639      	mov	r1, r7
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7ff f91a 	bl	800bfa0 <_malloc_r>
 800cd6c:	b948      	cbnz	r0, 800cd82 <__smakebuf_r+0x46>
 800cd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd72:	059a      	lsls	r2, r3, #22
 800cd74:	d4ee      	bmi.n	800cd54 <__smakebuf_r+0x18>
 800cd76:	f023 0303 	bic.w	r3, r3, #3
 800cd7a:	f043 0302 	orr.w	r3, r3, #2
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	e7e2      	b.n	800cd48 <__smakebuf_r+0xc>
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	6020      	str	r0, [r4, #0]
 800cd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	9b01      	ldr	r3, [sp, #4]
 800cd8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd92:	b15b      	cbz	r3, 800cdac <__smakebuf_r+0x70>
 800cd94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f000 f837 	bl	800ce0c <_isatty_r>
 800cd9e:	b128      	cbz	r0, 800cdac <__smakebuf_r+0x70>
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	f023 0303 	bic.w	r3, r3, #3
 800cda6:	f043 0301 	orr.w	r3, r3, #1
 800cdaa:	81a3      	strh	r3, [r4, #12]
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	431d      	orrs	r5, r3
 800cdb0:	81a5      	strh	r5, [r4, #12]
 800cdb2:	e7cf      	b.n	800cd54 <__smakebuf_r+0x18>

0800cdb4 <memmove>:
 800cdb4:	4288      	cmp	r0, r1
 800cdb6:	b510      	push	{r4, lr}
 800cdb8:	eb01 0402 	add.w	r4, r1, r2
 800cdbc:	d902      	bls.n	800cdc4 <memmove+0x10>
 800cdbe:	4284      	cmp	r4, r0
 800cdc0:	4623      	mov	r3, r4
 800cdc2:	d807      	bhi.n	800cdd4 <memmove+0x20>
 800cdc4:	1e43      	subs	r3, r0, #1
 800cdc6:	42a1      	cmp	r1, r4
 800cdc8:	d008      	beq.n	800cddc <memmove+0x28>
 800cdca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdd2:	e7f8      	b.n	800cdc6 <memmove+0x12>
 800cdd4:	4402      	add	r2, r0
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	428a      	cmp	r2, r1
 800cdda:	d100      	bne.n	800cdde <memmove+0x2a>
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cde2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cde6:	e7f7      	b.n	800cdd8 <memmove+0x24>

0800cde8 <_fstat_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d07      	ldr	r5, [pc, #28]	@ (800ce08 <_fstat_r+0x20>)
 800cdec:	2300      	movs	r3, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	602b      	str	r3, [r5, #0]
 800cdf6:	f7f6 fa47 	bl	8003288 <_fstat>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	d102      	bne.n	800ce04 <_fstat_r+0x1c>
 800cdfe:	682b      	ldr	r3, [r5, #0]
 800ce00:	b103      	cbz	r3, 800ce04 <_fstat_r+0x1c>
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	bd38      	pop	{r3, r4, r5, pc}
 800ce06:	bf00      	nop
 800ce08:	20019f74 	.word	0x20019f74

0800ce0c <_isatty_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	4d06      	ldr	r5, [pc, #24]	@ (800ce28 <_isatty_r+0x1c>)
 800ce10:	2300      	movs	r3, #0
 800ce12:	4604      	mov	r4, r0
 800ce14:	4608      	mov	r0, r1
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	f7f6 fa46 	bl	80032a8 <_isatty>
 800ce1c:	1c43      	adds	r3, r0, #1
 800ce1e:	d102      	bne.n	800ce26 <_isatty_r+0x1a>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	b103      	cbz	r3, 800ce26 <_isatty_r+0x1a>
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	20019f74 	.word	0x20019f74

0800ce2c <_sbrk_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d06      	ldr	r5, [pc, #24]	@ (800ce48 <_sbrk_r+0x1c>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	602b      	str	r3, [r5, #0]
 800ce38:	f7f6 fa4e 	bl	80032d8 <_sbrk>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_sbrk_r+0x1a>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_sbrk_r+0x1a>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20019f74 	.word	0x20019f74

0800ce4c <__assert_func>:
 800ce4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce4e:	4614      	mov	r4, r2
 800ce50:	461a      	mov	r2, r3
 800ce52:	4b09      	ldr	r3, [pc, #36]	@ (800ce78 <__assert_func+0x2c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4605      	mov	r5, r0
 800ce58:	68d8      	ldr	r0, [r3, #12]
 800ce5a:	b954      	cbnz	r4, 800ce72 <__assert_func+0x26>
 800ce5c:	4b07      	ldr	r3, [pc, #28]	@ (800ce7c <__assert_func+0x30>)
 800ce5e:	461c      	mov	r4, r3
 800ce60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce64:	9100      	str	r1, [sp, #0]
 800ce66:	462b      	mov	r3, r5
 800ce68:	4905      	ldr	r1, [pc, #20]	@ (800ce80 <__assert_func+0x34>)
 800ce6a:	f000 f86f 	bl	800cf4c <fiprintf>
 800ce6e:	f000 f87f 	bl	800cf70 <abort>
 800ce72:	4b04      	ldr	r3, [pc, #16]	@ (800ce84 <__assert_func+0x38>)
 800ce74:	e7f4      	b.n	800ce60 <__assert_func+0x14>
 800ce76:	bf00      	nop
 800ce78:	20000020 	.word	0x20000020
 800ce7c:	0800e6b6 	.word	0x0800e6b6
 800ce80:	0800e688 	.word	0x0800e688
 800ce84:	0800e67b 	.word	0x0800e67b

0800ce88 <_calloc_r>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	fba1 5402 	umull	r5, r4, r1, r2
 800ce8e:	b93c      	cbnz	r4, 800cea0 <_calloc_r+0x18>
 800ce90:	4629      	mov	r1, r5
 800ce92:	f7ff f885 	bl	800bfa0 <_malloc_r>
 800ce96:	4606      	mov	r6, r0
 800ce98:	b928      	cbnz	r0, 800cea6 <_calloc_r+0x1e>
 800ce9a:	2600      	movs	r6, #0
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	220c      	movs	r2, #12
 800cea2:	6002      	str	r2, [r0, #0]
 800cea4:	e7f9      	b.n	800ce9a <_calloc_r+0x12>
 800cea6:	462a      	mov	r2, r5
 800cea8:	4621      	mov	r1, r4
 800ceaa:	f7fe f8bf 	bl	800b02c <memset>
 800ceae:	e7f5      	b.n	800ce9c <_calloc_r+0x14>

0800ceb0 <__ascii_mbtowc>:
 800ceb0:	b082      	sub	sp, #8
 800ceb2:	b901      	cbnz	r1, 800ceb6 <__ascii_mbtowc+0x6>
 800ceb4:	a901      	add	r1, sp, #4
 800ceb6:	b142      	cbz	r2, 800ceca <__ascii_mbtowc+0x1a>
 800ceb8:	b14b      	cbz	r3, 800cece <__ascii_mbtowc+0x1e>
 800ceba:	7813      	ldrb	r3, [r2, #0]
 800cebc:	600b      	str	r3, [r1, #0]
 800cebe:	7812      	ldrb	r2, [r2, #0]
 800cec0:	1e10      	subs	r0, r2, #0
 800cec2:	bf18      	it	ne
 800cec4:	2001      	movne	r0, #1
 800cec6:	b002      	add	sp, #8
 800cec8:	4770      	bx	lr
 800ceca:	4610      	mov	r0, r2
 800cecc:	e7fb      	b.n	800cec6 <__ascii_mbtowc+0x16>
 800cece:	f06f 0001 	mvn.w	r0, #1
 800ced2:	e7f8      	b.n	800cec6 <__ascii_mbtowc+0x16>

0800ced4 <_realloc_r>:
 800ced4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced8:	4680      	mov	r8, r0
 800ceda:	4615      	mov	r5, r2
 800cedc:	460c      	mov	r4, r1
 800cede:	b921      	cbnz	r1, 800ceea <_realloc_r+0x16>
 800cee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cee4:	4611      	mov	r1, r2
 800cee6:	f7ff b85b 	b.w	800bfa0 <_malloc_r>
 800ceea:	b92a      	cbnz	r2, 800cef8 <_realloc_r+0x24>
 800ceec:	f7fe ffe4 	bl	800beb8 <_free_r>
 800cef0:	2400      	movs	r4, #0
 800cef2:	4620      	mov	r0, r4
 800cef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef8:	f000 f841 	bl	800cf7e <_malloc_usable_size_r>
 800cefc:	4285      	cmp	r5, r0
 800cefe:	4606      	mov	r6, r0
 800cf00:	d802      	bhi.n	800cf08 <_realloc_r+0x34>
 800cf02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf06:	d8f4      	bhi.n	800cef2 <_realloc_r+0x1e>
 800cf08:	4629      	mov	r1, r5
 800cf0a:	4640      	mov	r0, r8
 800cf0c:	f7ff f848 	bl	800bfa0 <_malloc_r>
 800cf10:	4607      	mov	r7, r0
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d0ec      	beq.n	800cef0 <_realloc_r+0x1c>
 800cf16:	42b5      	cmp	r5, r6
 800cf18:	462a      	mov	r2, r5
 800cf1a:	4621      	mov	r1, r4
 800cf1c:	bf28      	it	cs
 800cf1e:	4632      	movcs	r2, r6
 800cf20:	f7fe f96d 	bl	800b1fe <memcpy>
 800cf24:	4621      	mov	r1, r4
 800cf26:	4640      	mov	r0, r8
 800cf28:	f7fe ffc6 	bl	800beb8 <_free_r>
 800cf2c:	463c      	mov	r4, r7
 800cf2e:	e7e0      	b.n	800cef2 <_realloc_r+0x1e>

0800cf30 <__ascii_wctomb>:
 800cf30:	4603      	mov	r3, r0
 800cf32:	4608      	mov	r0, r1
 800cf34:	b141      	cbz	r1, 800cf48 <__ascii_wctomb+0x18>
 800cf36:	2aff      	cmp	r2, #255	@ 0xff
 800cf38:	d904      	bls.n	800cf44 <__ascii_wctomb+0x14>
 800cf3a:	228a      	movs	r2, #138	@ 0x8a
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf42:	4770      	bx	lr
 800cf44:	700a      	strb	r2, [r1, #0]
 800cf46:	2001      	movs	r0, #1
 800cf48:	4770      	bx	lr
	...

0800cf4c <fiprintf>:
 800cf4c:	b40e      	push	{r1, r2, r3}
 800cf4e:	b503      	push	{r0, r1, lr}
 800cf50:	4601      	mov	r1, r0
 800cf52:	ab03      	add	r3, sp, #12
 800cf54:	4805      	ldr	r0, [pc, #20]	@ (800cf6c <fiprintf+0x20>)
 800cf56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf5a:	6800      	ldr	r0, [r0, #0]
 800cf5c:	9301      	str	r3, [sp, #4]
 800cf5e:	f7ff fdaf 	bl	800cac0 <_vfiprintf_r>
 800cf62:	b002      	add	sp, #8
 800cf64:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf68:	b003      	add	sp, #12
 800cf6a:	4770      	bx	lr
 800cf6c:	20000020 	.word	0x20000020

0800cf70 <abort>:
 800cf70:	b508      	push	{r3, lr}
 800cf72:	2006      	movs	r0, #6
 800cf74:	f000 f834 	bl	800cfe0 <raise>
 800cf78:	2001      	movs	r0, #1
 800cf7a:	f7f6 f935 	bl	80031e8 <_exit>

0800cf7e <_malloc_usable_size_r>:
 800cf7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf82:	1f18      	subs	r0, r3, #4
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	bfbc      	itt	lt
 800cf88:	580b      	ldrlt	r3, [r1, r0]
 800cf8a:	18c0      	addlt	r0, r0, r3
 800cf8c:	4770      	bx	lr

0800cf8e <_raise_r>:
 800cf8e:	291f      	cmp	r1, #31
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4605      	mov	r5, r0
 800cf94:	460c      	mov	r4, r1
 800cf96:	d904      	bls.n	800cfa2 <_raise_r+0x14>
 800cf98:	2316      	movs	r3, #22
 800cf9a:	6003      	str	r3, [r0, #0]
 800cf9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa0:	bd38      	pop	{r3, r4, r5, pc}
 800cfa2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfa4:	b112      	cbz	r2, 800cfac <_raise_r+0x1e>
 800cfa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfaa:	b94b      	cbnz	r3, 800cfc0 <_raise_r+0x32>
 800cfac:	4628      	mov	r0, r5
 800cfae:	f000 f831 	bl	800d014 <_getpid_r>
 800cfb2:	4622      	mov	r2, r4
 800cfb4:	4601      	mov	r1, r0
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfbc:	f000 b818 	b.w	800cff0 <_kill_r>
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d00a      	beq.n	800cfda <_raise_r+0x4c>
 800cfc4:	1c59      	adds	r1, r3, #1
 800cfc6:	d103      	bne.n	800cfd0 <_raise_r+0x42>
 800cfc8:	2316      	movs	r3, #22
 800cfca:	6003      	str	r3, [r0, #0]
 800cfcc:	2001      	movs	r0, #1
 800cfce:	e7e7      	b.n	800cfa0 <_raise_r+0x12>
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	4798      	blx	r3
 800cfda:	2000      	movs	r0, #0
 800cfdc:	e7e0      	b.n	800cfa0 <_raise_r+0x12>
	...

0800cfe0 <raise>:
 800cfe0:	4b02      	ldr	r3, [pc, #8]	@ (800cfec <raise+0xc>)
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	6818      	ldr	r0, [r3, #0]
 800cfe6:	f7ff bfd2 	b.w	800cf8e <_raise_r>
 800cfea:	bf00      	nop
 800cfec:	20000020 	.word	0x20000020

0800cff0 <_kill_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d07      	ldr	r5, [pc, #28]	@ (800d010 <_kill_r+0x20>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	4611      	mov	r1, r2
 800cffc:	602b      	str	r3, [r5, #0]
 800cffe:	f7f6 f8e3 	bl	80031c8 <_kill>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d102      	bne.n	800d00c <_kill_r+0x1c>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	b103      	cbz	r3, 800d00c <_kill_r+0x1c>
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	bd38      	pop	{r3, r4, r5, pc}
 800d00e:	bf00      	nop
 800d010:	20019f74 	.word	0x20019f74

0800d014 <_getpid_r>:
 800d014:	f7f6 b8d0 	b.w	80031b8 <_getpid>

0800d018 <_init>:
 800d018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01a:	bf00      	nop
 800d01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01e:	bc08      	pop	{r3}
 800d020:	469e      	mov	lr, r3
 800d022:	4770      	bx	lr

0800d024 <_fini>:
 800d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d026:	bf00      	nop
 800d028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02a:	bc08      	pop	{r3}
 800d02c:	469e      	mov	lr, r3
 800d02e:	4770      	bx	lr


city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  08009ee4  08009ee4  0000aee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add0  0800add0  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800add0  0800add0  0000bdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800add8  0800add8  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add8  0800add8  0000bdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ade0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019c88  2000006c  0800ae4c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019cf4  0800ae4c  0000ccf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a78  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004669  00000000  00000000  0002db14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  00032180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001430  00000000  00000000  00033b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac69  00000000  00000000  00034f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206f6  00000000  00000000  0005fba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffef7  00000000  00000000  0008029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180196  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007500  00000000  00000000  001801dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001876dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ecc 	.word	0x08009ecc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08009ecc 	.word	0x08009ecc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vDispatcherCode>:
 * This function implements the dispatcher task, which waits for notifications
 * to process and route incoming dispatcher packets to the appropriate department queues.
 *
 * @param pvParameters Parameters passed to the task (expected to be `1`).
 */
void vDispatcherCode(void *pvParameters) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b09e      	sub	sp, #120	@ 0x78
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00d      	beq.n	80005ca <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005b2:	b672      	cpsid	i
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	b662      	cpsie	i
 80005c2:	677b      	str	r3, [r7, #116]	@ 0x74
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;
	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4821      	ldr	r0, [pc, #132]	@ (8000654 <vDispatcherCode+0xb4>)
 80005d0:	f002 f8f6 	bl	80027c0 <HAL_GPIO_WritePin>
		printf("Dispatcher Entered BLOCKED state! \r\n");
 80005d4:	4820      	ldr	r0, [pc, #128]	@ (8000658 <vDispatcherCode+0xb8>)
 80005d6:	f008 fc6d 	bl	8008eb4 <puts>
		fflush(stdout);
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <vDispatcherCode+0xbc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f008 fb29 	bl	8008c38 <fflush>
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 80005e6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f007 f87d 	bl	80076f0 <xTaskNotifyWait>
		printf("Dispatcher in RUNNING state! \n \tPerforming a task! \r\n");
 80005f6:	481a      	ldr	r0, [pc, #104]	@ (8000660 <vDispatcherCode+0xc0>)
 80005f8:	f008 fc5c 	bl	8008eb4 <puts>
		fflush(stdout);
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <vDispatcherCode+0xbc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4618      	mov	r0, r3
 8000604:	f008 fb18 	bl	8008c38 <fflush>
		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <vDispatcherCode+0xc4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fc95 	bl	8005f44 <xQueueReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d1d4      	bne.n	80005ca <vDispatcherCode+0x2a>
			xSemaphoreTake(xTasksDataMutex, portMAX_DELAY);
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <vDispatcherCode+0xc8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fd73 	bl	8006114 <xQueueSemaphoreTake>
			total_tasks_ran++;
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <vDispatcherCode+0xcc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <vDispatcherCode+0xcc>)
 8000636:	6013      	str	r3, [r2, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <vDispatcherCode+0xc8>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f005 fad1 	bl	8005be8 <xQueueGenericSend>
			packetRouting(&new_packet);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f810 	bl	8000670 <packetRouting>
	for(;;) {
 8000650:	e7bb      	b.n	80005ca <vDispatcherCode+0x2a>
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400
 8000658:	08009ee4 	.word	0x08009ee4
 800065c:	2000001c 	.word	0x2000001c
 8000660:	08009f08 	.word	0x08009f08
 8000664:	2000065c 	.word	0x2000065c
 8000668:	200006d4 	.word	0x200006d4
 800066c:	200006c8 	.word	0x200006c8

08000670 <packetRouting>:
 * This function sends the given dispatcher packet to the queue corresponding
 * to its department.
 *
 * @param new_packet Pointer to the DispatcherPacket to be routed.
 */
void packetRouting(DispatcherPacket* new_packet) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	switch(new_packet->department) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d82f      	bhi.n	80006e0 <packetRouting+0x70>
 8000680:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <packetRouting+0x18>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000699 	.word	0x08000699
 800068c:	080006ab 	.word	0x080006ab
 8000690:	080006bd 	.word	0x080006bd
 8000694:	080006cf 	.word	0x080006cf
		case AMBULANCE:
			xQueueSend(qAmbulance, new_packet, portMAX_DELAY);
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <packetRouting+0x78>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	f04f 32ff 	mov.w	r2, #4294967295
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f005 faa0 	bl	8005be8 <xQueueGenericSend>
			break;
 80006a8:	e01a      	b.n	80006e0 <packetRouting+0x70>
		case POLICE:
			xQueueSend(qPolice, new_packet, portMAX_DELAY);
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <packetRouting+0x7c>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	f005 fa97 	bl	8005be8 <xQueueGenericSend>
			break;
 80006ba:	e011      	b.n	80006e0 <packetRouting+0x70>
		case FIRE:
			xQueueSend(qFire, new_packet, portMAX_DELAY);
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <packetRouting+0x80>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	f04f 32ff 	mov.w	r2, #4294967295
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f005 fa8e 	bl	8005be8 <xQueueGenericSend>
			break;
 80006cc:	e008      	b.n	80006e0 <packetRouting+0x70>
		case CORONA:
			xQueueSend(qCorona, new_packet, portMAX_DELAY);
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <packetRouting+0x84>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	f005 fa85 	bl	8005be8 <xQueueGenericSend>
			break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000064c 	.word	0x2000064c
 80006ec:	20000650 	.word	0x20000650
 80006f0:	20000654 	.word	0x20000654
 80006f4:	20000658 	.word	0x20000658

080006f8 <generateDispatcherMSG>:
 * This function generates a dispatcher message based on a random department and message.
 * It also sets the time required to handle the task in ticks.
 *
 * @param hDispPacket Pointer to the DispatcherPacket to be filled with generated data.
 */
void generateDispatcherMSG(DispatcherPacket* hDispPacket) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	/*
	 * TODO: Consider creating a Mutex for when trying to modify hDispPacket.
	 * 		 It's also used in the TIM2 Interrupt Handler.
	 */
	DepartmentsEnum dep;
	uint8_t msgIdx = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73bb      	strb	r3, [r7, #14]

	// Generate Department
	uint32_t random_number = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	4619      	mov	r1, r3
 800070e:	4862      	ldr	r0, [pc, #392]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000710:	f003 fb10 	bl	8003d34 <HAL_RNG_GenerateRandomNumber>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d107      	bne.n	800072a <generateDispatcherMSG+0x32>
	        dep = (random_number % 4);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0303 	and.w	r3, r3, #3
 8000722:	73fb      	strb	r3, [r7, #15]
	        hDispPacket->department = dep;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7bfa      	ldrb	r2, [r7, #15]
 8000728:	701a      	strb	r2, [r3, #0]
	}

	// Pick a message
	switch(dep) {
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b03      	cmp	r3, #3
 800072e:	f200 8093 	bhi.w	8000858 <generateDispatcherMSG+0x160>
 8000732:	a201      	add	r2, pc, #4	@ (adr r2, 8000738 <generateDispatcherMSG+0x40>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000749 	.word	0x08000749
 800073c:	08000787 	.word	0x08000787
 8000740:	080007d1 	.word	0x080007d1
 8000744:	0800081b 	.word	0x0800081b
		case AMBULANCE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4619      	mov	r1, r3
 800074e:	4852      	ldr	r0, [pc, #328]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000750:	f003 faf0 	bl	8003d34 <HAL_RNG_GenerateRandomNumber>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <generateDispatcherMSG+0x6c>
				msgIdx = (uint8_t)(random_number % AMB_STRINGS_LEN);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vAMBstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1c58      	adds	r0, r3, #1
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2264      	movs	r2, #100	@ 0x64
 800076c:	fb02 f303 	mul.w	r3, r2, r3
 8000770:	4a4a      	ldr	r2, [pc, #296]	@ (800089c <generateDispatcherMSG+0x1a4>)
 8000772:	4413      	add	r3, r2
 8000774:	2263      	movs	r2, #99	@ 0x63
 8000776:	4619      	mov	r1, r3
 8000778:	f008 fcb8 	bl	80090ec <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000784:	e069      	b.n	800085a <generateDispatcherMSG+0x162>


		case POLICE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	4842      	ldr	r0, [pc, #264]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 800078e:	f003 fad1 	bl	8003d34 <HAL_RNG_GenerateRandomNumber>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <generateDispatcherMSG+0xb6>
				msgIdx = (uint8_t)(random_number % POLICE_STRINGS_LEN);
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <generateDispatcherMSG+0x1a8>)
 800079c:	fba3 2301 	umull	r2, r3, r3, r1
 80007a0:	089a      	lsrs	r2, r3, #2
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	4613      	mov	r3, r2
 80007ac:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vPOLstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1c58      	adds	r0, r3, #1
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	2264      	movs	r2, #100	@ 0x64
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	4a3a      	ldr	r2, [pc, #232]	@ (80008a4 <generateDispatcherMSG+0x1ac>)
 80007bc:	4413      	add	r3, r2
 80007be:	2263      	movs	r2, #99	@ 0x63
 80007c0:	4619      	mov	r1, r3
 80007c2:	f008 fc93 	bl	80090ec <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 80007ce:	e044      	b.n	800085a <generateDispatcherMSG+0x162>


		case FIRE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4830      	ldr	r0, [pc, #192]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 80007d8:	f003 faac 	bl	8003d34 <HAL_RNG_GenerateRandomNumber>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10a      	bne.n	80007f8 <generateDispatcherMSG+0x100>
				msgIdx = (uint8_t)(random_number % FIRE_STRINGS_LEN);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <generateDispatcherMSG+0x1b0>)
 80007e6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ea:	085a      	lsrs	r2, r3, #1
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	1aca      	subs	r2, r1, r3
 80007f4:	4613      	mov	r3, r2
 80007f6:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vFIREstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c58      	adds	r0, r3, #1
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	2264      	movs	r2, #100	@ 0x64
 8000800:	fb02 f303 	mul.w	r3, r2, r3
 8000804:	4a29      	ldr	r2, [pc, #164]	@ (80008ac <generateDispatcherMSG+0x1b4>)
 8000806:	4413      	add	r3, r2
 8000808:	2263      	movs	r2, #99	@ 0x63
 800080a:	4619      	mov	r1, r3
 800080c:	f008 fc6e 	bl	80090ec <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000818:	e01f      	b.n	800085a <generateDispatcherMSG+0x162>


		case CORONA:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	481d      	ldr	r0, [pc, #116]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000822:	f003 fa87 	bl	8003d34 <HAL_RNG_GenerateRandomNumber>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d104      	bne.n	8000836 <generateDispatcherMSG+0x13e>
				msgIdx = (uint8_t)(random_number % CORONA_STRINGS_LEN);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vCORstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c58      	adds	r0, r3, #1
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	2264      	movs	r2, #100	@ 0x64
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	4a1b      	ldr	r2, [pc, #108]	@ (80008b0 <generateDispatcherMSG+0x1b8>)
 8000844:	4413      	add	r3, r2
 8000846:	2263      	movs	r2, #99	@ 0x63
 8000848:	4619      	mov	r1, r3
 800084a:	f008 fc4f 	bl	80090ec <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000856:	e000      	b.n	800085a <generateDispatcherMSG+0x162>


		default:
			break;
 8000858:	bf00      	nop
	}

	// Pick handling time
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000862:	f003 fa67 	bl	8003d34 <HAL_RNG_GenerateRandomNumber>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d110      	bne.n	800088e <generateDispatcherMSG+0x196>
		hDispPacket->timeToHandleInTicks = (uint16_t)(random_number % LONGEST_TASK_DURATION_IN_TICKS) +
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <generateDispatcherMSG+0x1bc>)
 8000870:	fba3 1302 	umull	r1, r3, r3, r2
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800087a:	fb01 f303 	mul.w	r3, r1, r3
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000886:	b29a      	uxth	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
													SHORTEST_TASK_DURATION_IN_TICKS;
	}
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000088 	.word	0x20000088
 800089c:	0800a1cc 	.word	0x0800a1cc
 80008a0:	cccccccd 	.word	0xcccccccd
 80008a4:	0800a4ec 	.word	0x0800a4ec
 80008a8:	38e38e39 	.word	0x38e38e39
 80008ac:	0800a6e0 	.word	0x0800a6e0
 80008b0:	0800aa64 	.word	0x0800aa64
 80008b4:	10624dd3 	.word	0x10624dd3

080008b8 <tasksManagerTask>:
 * This function continuously checks for available tasks in the queues for
 * Ambulance, Police, Fire Department, and Corona services. If there are
 * available tasks and the current running tasks are below the maximum allowed,
 * it assigns tasks to the appropriate handlers.
 */
void tasksManagerTask(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	uint32_t ulNotificationValue;
	int8_t newTaskIndex;
	for(;;) {
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 80008be:	4b80      	ldr	r3, [pc, #512]	@ (8000ac0 <tasksManagerTask+0x208>)
 80008c0:	f993 3000 	ldrsb.w	r3, [r3]
 80008c4:	2b09      	cmp	r3, #9
 80008c6:	dd06      	ble.n	80008d6 <tasksManagerTask+0x1e>
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, TASK_MANAGER_TICKS_TO_WAIT);
 80008c8:	463a      	mov	r2, r7
 80008ca:	2328      	movs	r3, #40	@ 0x28
 80008cc:	2100      	movs	r1, #0
 80008ce:	2000      	movs	r0, #0
 80008d0:	f006 ff0e 	bl	80076f0 <xTaskNotifyWait>
 80008d4:	e7f3      	b.n	80008be <tasksManagerTask+0x6>
		} else {
			// Check if there are Ambulance tasks to perform
			if(uxQueueMessagesWaiting( qAmbulance ) > 0) {
 80008d6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ac4 <tasksManagerTask+0x20c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 fd32 	bl	8006344 <uxQueueMessagesWaiting>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d032      	beq.n	800094c <tasksManagerTask+0x94>
				newTaskIndex = getAvailableAmbulanceTask();
 80008e6:	f000 fa73 	bl	8000dd0 <getAvailableAmbulanceTask>
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f6:	d029      	beq.n	800094c <tasksManagerTask+0x94>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80008f8:	4b73      	ldr	r3, [pc, #460]	@ (8000ac8 <tasksManagerTask+0x210>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	4618      	mov	r0, r3
 8000902:	f005 fc07 	bl	8006114 <xQueueSemaphoreTake>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d112      	bne.n	8000932 <tasksManagerTask+0x7a>
						printf("Ambulance handler number %d is now active\r\n", newTaskIndex);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4619      	mov	r1, r3
 8000912:	486e      	ldr	r0, [pc, #440]	@ (8000acc <tasksManagerTask+0x214>)
 8000914:	f008 fa66 	bl	8008de4 <iprintf>
						fflush(stdout);
 8000918:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad0 <tasksManagerTask+0x218>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	4618      	mov	r0, r3
 8000920:	f008 f98a 	bl	8008c38 <fflush>
						xSemaphoreGive(printfMutex);
 8000924:	4b68      	ldr	r3, [pc, #416]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	f005 f95b 	bl	8005be8 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8000932:	f000 fa01 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vAmbulanceTasks[newTaskIndex], 0, eNoAction);
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	4a66      	ldr	r2, [pc, #408]	@ (8000ad4 <tasksManagerTask+0x21c>)
 800093c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	f006 ff33 	bl	80077b0 <xTaskGenericNotify>
					continue;
 800094a:	e0b8      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}
			// Check if there are Police tasks to perform
			if(uxQueueMessagesWaiting( qPolice ) > 0) {
 800094c:	4b62      	ldr	r3, [pc, #392]	@ (8000ad8 <tasksManagerTask+0x220>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f005 fcf7 	bl	8006344 <uxQueueMessagesWaiting>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d032      	beq.n	80009c2 <tasksManagerTask+0x10a>
				newTaskIndex = getAvailablePoliceeTask();
 800095c:	f000 fa78 	bl	8000e50 <getAvailablePoliceeTask>
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d029      	beq.n	80009c2 <tasksManagerTask+0x10a>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800096e:	4b56      	ldr	r3, [pc, #344]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f04f 31ff 	mov.w	r1, #4294967295
 8000976:	4618      	mov	r0, r3
 8000978:	f005 fbcc 	bl	8006114 <xQueueSemaphoreTake>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d112      	bne.n	80009a8 <tasksManagerTask+0xf0>
						printf("Police handler number %d is now active\r\n", newTaskIndex);
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	4619      	mov	r1, r3
 8000988:	4854      	ldr	r0, [pc, #336]	@ (8000adc <tasksManagerTask+0x224>)
 800098a:	f008 fa2b 	bl	8008de4 <iprintf>
						fflush(stdout);
 800098e:	4b50      	ldr	r3, [pc, #320]	@ (8000ad0 <tasksManagerTask+0x218>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4618      	mov	r0, r3
 8000996:	f008 f94f 	bl	8008c38 <fflush>
						xSemaphoreGive(printfMutex);
 800099a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac8 <tasksManagerTask+0x210>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	2300      	movs	r3, #0
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	f005 f920 	bl	8005be8 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 80009a8:	f000 f9c6 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vPoliceTasks[newTaskIndex], 0, eNoAction);
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ae0 <tasksManagerTask+0x228>)
 80009b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009b6:	2300      	movs	r3, #0
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	f006 fef8 	bl	80077b0 <xTaskGenericNotify>
					continue;
 80009c0:	e07d      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}

			// Check if there are Fire Dep tasks to perform
			if(uxQueueMessagesWaiting( qFire ) > 0) {
 80009c2:	4b48      	ldr	r3, [pc, #288]	@ (8000ae4 <tasksManagerTask+0x22c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fcbc 	bl	8006344 <uxQueueMessagesWaiting>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d032      	beq.n	8000a38 <tasksManagerTask+0x180>
				newTaskIndex = getAvailableFireTask();
 80009d2:	f000 fa7d 	bl	8000ed0 <getAvailableFireTask>
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e2:	d029      	beq.n	8000a38 <tasksManagerTask+0x180>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80009e4:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <tasksManagerTask+0x210>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 fb91 	bl	8006114 <xQueueSemaphoreTake>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d112      	bne.n	8000a1e <tasksManagerTask+0x166>
						printf("Fire dep handler number %d is now active\r\n", newTaskIndex);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4619      	mov	r1, r3
 80009fe:	483a      	ldr	r0, [pc, #232]	@ (8000ae8 <tasksManagerTask+0x230>)
 8000a00:	f008 f9f0 	bl	8008de4 <iprintf>
						fflush(stdout);
 8000a04:	4b32      	ldr	r3, [pc, #200]	@ (8000ad0 <tasksManagerTask+0x218>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f008 f914 	bl	8008c38 <fflush>
						xSemaphoreGive(printfMutex);
 8000a10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	2300      	movs	r3, #0
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f005 f8e5 	bl	8005be8 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8000a1e:	f000 f98b 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vFireTasks[newTaskIndex], 0, eNoAction);
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	4a31      	ldr	r2, [pc, #196]	@ (8000aec <tasksManagerTask+0x234>)
 8000a28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	f006 febd 	bl	80077b0 <xTaskGenericNotify>
					continue;
 8000a36:	e042      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}

			// Check if there are Corona tasks to perform
			if(uxQueueMessagesWaiting( qCorona ) > 0) {
 8000a38:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <tasksManagerTask+0x238>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 fc81 	bl	8006344 <uxQueueMessagesWaiting>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d032      	beq.n	8000aae <tasksManagerTask+0x1f6>
				newTaskIndex = getAvailableCoronaTask();
 8000a48:	f000 fa82 	bl	8000f50 <getAvailableCoronaTask>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d029      	beq.n	8000aae <tasksManagerTask+0x1f6>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a62:	4618      	mov	r0, r3
 8000a64:	f005 fb56 	bl	8006114 <xQueueSemaphoreTake>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d112      	bne.n	8000a94 <tasksManagerTask+0x1dc>
						printf("Corona handler number %d is now active\r\n", newTaskIndex);
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	4619      	mov	r1, r3
 8000a74:	481f      	ldr	r0, [pc, #124]	@ (8000af4 <tasksManagerTask+0x23c>)
 8000a76:	f008 f9b5 	bl	8008de4 <iprintf>
						fflush(stdout);
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <tasksManagerTask+0x218>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f8d9 	bl	8008c38 <fflush>
						xSemaphoreGive(printfMutex);
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f005 f8aa 	bl	8005be8 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8000a94:	f000 f950 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vCoronaTasks[newTaskIndex], 0, eNoAction);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <tasksManagerTask+0x240>)
 8000a9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f006 fe82 	bl	80077b0 <xTaskGenericNotify>
					continue;
 8000aac:	e007      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}
			portYIELD();
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <tasksManagerTask+0x244>)
 8000ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	f3bf 8f4f 	dsb	sy
 8000aba:	f3bf 8f6f 	isb	sy
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8000abe:	e6fe      	b.n	80008be <tasksManagerTask+0x6>
 8000ac0:	200006d0 	.word	0x200006d0
 8000ac4:	2000064c 	.word	0x2000064c
 8000ac8:	200006c0 	.word	0x200006c0
 8000acc:	08009f40 	.word	0x08009f40
 8000ad0:	2000001c 	.word	0x2000001c
 8000ad4:	20000660 	.word	0x20000660
 8000ad8:	20000650 	.word	0x20000650
 8000adc:	08009f6c 	.word	0x08009f6c
 8000ae0:	20000670 	.word	0x20000670
 8000ae4:	20000654 	.word	0x20000654
 8000ae8:	08009f98 	.word	0x08009f98
 8000aec:	2000067c 	.word	0x2000067c
 8000af0:	20000658 	.word	0x20000658
 8000af4:	08009fc4 	.word	0x08009fc4
 8000af8:	20000684 	.word	0x20000684
 8000afc:	e000ed04 	.word	0xe000ed04

08000b00 <vHandleCall>:
 * notifications indicating a new task to process, executes the task, and updates
 * the shared data with the results.
 *
 * @param pvParameters Pointer to the task initialization parameters.
 */
void vHandleCall(void* pvParameters) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0bc      	sub	sp, #240	@ 0xf0
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifictionValue;
	TickType_t startTick, endTick, totalTicks;
	taskInit_t* pTaskInit = (taskInit_t*)pvParameters;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	DispatcherPacket new_packet = {0};
 8000b0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b12:	2268      	movs	r2, #104	@ 0x68
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 fae0 	bl	80090dc <memset>

	char printMSG[100];
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8000b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b20:	781b      	ldrb	r3, [r3, #0]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d016      	beq.n	8000b54 <vHandleCall+0x54>
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8000b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d00f      	beq.n	8000b50 <vHandleCall+0x50>
 8000b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d008      	beq.n	8000b4c <vHandleCall+0x4c>
 8000b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d101      	bne.n	8000b48 <vHandleCall+0x48>
 8000b44:	4b6e      	ldr	r3, [pc, #440]	@ (8000d00 <vHandleCall+0x200>)
 8000b46:	e006      	b.n	8000b56 <vHandleCall+0x56>
 8000b48:	4b6e      	ldr	r3, [pc, #440]	@ (8000d04 <vHandleCall+0x204>)
 8000b4a:	e004      	b.n	8000b56 <vHandleCall+0x56>
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <vHandleCall+0x208>)
 8000b4e:	e002      	b.n	8000b56 <vHandleCall+0x56>
 8000b50:	4b6e      	ldr	r3, [pc, #440]	@ (8000d0c <vHandleCall+0x20c>)
 8000b52:	e000      	b.n	8000b56 <vHandleCall+0x56>
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8000b54:	4b6e      	ldr	r3, [pc, #440]	@ (8000d10 <vHandleCall+0x210>)
			, pTaskInit->taskIdentifier);
 8000b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000b5a:	7852      	ldrb	r2, [r2, #1]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8000b5c:	f107 0008 	add.w	r0, r7, #8
 8000b60:	9200      	str	r2, [sp, #0]
 8000b62:	4a6c      	ldr	r2, [pc, #432]	@ (8000d14 <vHandleCall+0x214>)
 8000b64:	2164      	movs	r1, #100	@ 0x64
 8000b66:	f008 f9ad 	bl	8008ec4 <sniprintf>
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d18 <vHandleCall+0x218>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 face 	bl	8006114 <xQueueSemaphoreTake>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d111      	bne.n	8000ba2 <vHandleCall+0xa2>
		printf(printMSG);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f008 f92e 	bl	8008de4 <iprintf>
		fflush(stdout);
 8000b88:	4b64      	ldr	r3, [pc, #400]	@ (8000d1c <vHandleCall+0x21c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 f852 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 8000b94:	4b60      	ldr	r3, [pc, #384]	@ (8000d18 <vHandleCall+0x218>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f005 f823 	bl	8005be8 <xQueueGenericSend>
	}
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8000ba2:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	2100      	movs	r1, #0
 8000bac:	2000      	movs	r0, #0
 8000bae:	f006 fd9f 	bl	80076f0 <xTaskNotifyWait>
		// Get starting time tick count
		startTick = xTaskGetTickCount();
 8000bb2:	f006 f8af 	bl	8006d14 <xTaskGetTickCount>
 8000bb6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0

		// Get packet from the queue handler
		//DispatcherPacket new_packet;

		if(!(xQueueReceive(*(pTaskInit->pQhandler), &new_packet, portMAX_DELAY) == pdTRUE)) {
 8000bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f005 f9ba 	bl	8005f44 <xQueueReceive>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	f040 8091 	bne.w	8000cfa <vHandleCall+0x1fa>
			continue;
		}

		// Wait for the job to get done.
		// TODO: Should vTaskDelayUntil be used?
		vTaskDelay(new_packet.timeToHandleInTicks);
 8000bd8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f005 ff3f 	bl	8006a60 <vTaskDelay>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000be2:	4b4d      	ldr	r3, [pc, #308]	@ (8000d18 <vHandleCall+0x218>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 fa92 	bl	8006114 <xQueueSemaphoreTake>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d113      	bne.n	8000c1e <vHandleCall+0x11e>
			printf("Handled task: %s \r\n", new_packet.message);
 8000bf6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4848      	ldr	r0, [pc, #288]	@ (8000d20 <vHandleCall+0x220>)
 8000c00:	f008 f8f0 	bl	8008de4 <iprintf>
			fflush(stdout);
 8000c04:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <vHandleCall+0x21c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f008 f814 	bl	8008c38 <fflush>
			xSemaphoreGive(printfMutex);
 8000c10:	4b41      	ldr	r3, [pc, #260]	@ (8000d18 <vHandleCall+0x218>)
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f004 ffe5 	bl	8005be8 <xQueueGenericSend>
		}

		// Update shared app data
		if(xTasksDataMutex != NULL) {
 8000c1e:	4b41      	ldr	r3, [pc, #260]	@ (8000d24 <vHandleCall+0x224>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d040      	beq.n	8000ca8 <vHandleCall+0x1a8>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000c26:	4b3f      	ldr	r3, [pc, #252]	@ (8000d24 <vHandleCall+0x224>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 fa70 	bl	8006114 <xQueueSemaphoreTake>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d136      	bne.n	8000ca8 <vHandleCall+0x1a8>
				total_tasks_ran++;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <vHandleCall+0x228>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a39      	ldr	r2, [pc, #228]	@ (8000d28 <vHandleCall+0x228>)
 8000c42:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 8000c44:	f006 f866 	bl	8006d14 <xTaskGetTickCount>
 8000c48:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
				totalTicks = endTick - startTick;
 8000c4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				total_tasks_time += (float)totalTicks / configTICK_RATE_HZ;
 8000c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c66:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8000d2c <vHandleCall+0x22c>
 8000c6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <vHandleCall+0x230>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c78:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <vHandleCall+0x230>)
 8000c7a:	edc3 7a00 	vstr	s15, [r3]
				average_task_time = (float)total_tasks_ran/total_tasks_time;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <vHandleCall+0x228>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <vHandleCall+0x230>)
 8000c8c:	ed93 7a00 	vldr	s14, [r3]
 8000c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <vHandleCall+0x234>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
				xSemaphoreGive(xTasksDataMutex);
 8000c9a:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <vHandleCall+0x224>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f004 ffa0 	bl	8005be8 <xQueueGenericSend>
				 * The mutex couldn't be obtained. Code should never get here.
				 */
			}
		}
		// Indicate the task is now available for the next incoming packet.
		if(*pTaskInit->pSemHandler != NULL) {
 8000ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f43f af76 	beq.w	8000ba2 <vHandleCall+0xa2>
			if(xSemaphoreTake(*(pTaskInit->pSemHandler), portMAX_DELAY) ==  pdTRUE) {
 8000cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 fa26 	bl	8006114 <xQueueSemaphoreTake>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	f47f af69 	bne.w	8000ba2 <vHandleCall+0xa2>
				removeCurrentRunningTask();
 8000cd0:	f000 f858 	bl	8000d84 <removeCurrentRunningTask>
				pTaskInit->bTaskStatusArr[pTaskInit->taskIdentifier] = false;
 8000cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cde:	7852      	ldrb	r2, [r2, #1]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(*(pTaskInit->pSemHandler));
 8000ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f004 ff78 	bl	8005be8 <xQueueGenericSend>
 8000cf8:	e753      	b.n	8000ba2 <vHandleCall+0xa2>
			continue;
 8000cfa:	bf00      	nop
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8000cfc:	e751      	b.n	8000ba2 <vHandleCall+0xa2>
 8000cfe:	bf00      	nop
 8000d00:	08009ff0 	.word	0x08009ff0
 8000d04:	08009ff8 	.word	0x08009ff8
 8000d08:	0800a004 	.word	0x0800a004
 8000d0c:	0800a010 	.word	0x0800a010
 8000d10:	0800a018 	.word	0x0800a018
 8000d14:	0800a024 	.word	0x0800a024
 8000d18:	200006c0 	.word	0x200006c0
 8000d1c:	2000001c 	.word	0x2000001c
 8000d20:	0800a050 	.word	0x0800a050
 8000d24:	200006d4 	.word	0x200006d4
 8000d28:	200006c8 	.word	0x200006c8
 8000d2c:	447a0000 	.word	0x447a0000
 8000d30:	200006c4 	.word	0x200006c4
 8000d34:	200006cc 	.word	0x200006cc

08000d38 <addCurrentRunningTask>:
 * @brief Increments the count of currently running tasks.
 *
 * This function safely increments the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void addCurrentRunningTask(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(xTasksDataMutex != NULL) {
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <addCurrentRunningTask+0x44>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d019      	beq.n	8000d78 <addCurrentRunningTask+0x40>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <addCurrentRunningTask+0x44>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 f9e1 	bl	8006114 <xQueueSemaphoreTake>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d10f      	bne.n	8000d78 <addCurrentRunningTask+0x40>
			current_running_tasks++;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <addCurrentRunningTask+0x48>)
 8000d5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <addCurrentRunningTask+0x48>)
 8000d68:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <addCurrentRunningTask+0x44>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 ff38 	bl	8005be8 <xQueueGenericSend>
		}
	}
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200006d4 	.word	0x200006d4
 8000d80:	200006d0 	.word	0x200006d0

08000d84 <removeCurrentRunningTask>:
 * @brief Decrements the count of currently running tasks.
 *
 * This function safely decrements the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void removeCurrentRunningTask(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	if(xTasksDataMutex != NULL) {
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <removeCurrentRunningTask+0x44>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d019      	beq.n	8000dc4 <removeCurrentRunningTask+0x40>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <removeCurrentRunningTask+0x44>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 f9bb 	bl	8006114 <xQueueSemaphoreTake>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10f      	bne.n	8000dc4 <removeCurrentRunningTask+0x40>
			current_running_tasks--;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <removeCurrentRunningTask+0x48>)
 8000da6:	f993 3000 	ldrsb.w	r3, [r3]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <removeCurrentRunningTask+0x48>)
 8000db4:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <removeCurrentRunningTask+0x44>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f004 ff12 	bl	8005be8 <xQueueGenericSend>
		}
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200006d4 	.word	0x200006d4
 8000dcc:	200006d0 	.word	0x200006d0

08000dd0 <getAvailableAmbulanceTask>:
 * This function iterates through the ambulance task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available ambulance tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableAmbulanceTask(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(AmbTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <getAvailableAmbulanceTask+0x78>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f04f 31ff 	mov.w	r1, #4294967295
 8000dde:	4618      	mov	r0, r3
 8000de0:	f005 f998 	bl	8006114 <xQueueSemaphoreTake>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d127      	bne.n	8000e3a <getAvailableAmbulanceTask+0x6a>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e01a      	b.n	8000e26 <getAvailableAmbulanceTask+0x56>
			if(bAmbTasksStatus[i] == false) {
 8000df0:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <getAvailableAmbulanceTask+0x7c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	f083 0301 	eor.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <getAvailableAmbulanceTask+0x50>
				bAmbTasksStatus[i] = true;
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <getAvailableAmbulanceTask+0x7c>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(AmbTasksStatusMutex);
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <getAvailableAmbulanceTask+0x78>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	f004 fee7 	bl	8005be8 <xQueueGenericSend>
				return (int8_t)i;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	e00e      	b.n	8000e3e <getAvailableAmbulanceTask+0x6e>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	dde1      	ble.n	8000df0 <getAvailableAmbulanceTask+0x20>
			}
		}
		xSemaphoreGive(AmbTasksStatusMutex);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <getAvailableAmbulanceTask+0x78>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	2300      	movs	r3, #0
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	f004 fed7 	bl	8005be8 <xQueueGenericSend>
	}
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200006a4 	.word	0x200006a4
 8000e4c:	200006a0 	.word	0x200006a0

08000e50 <getAvailablePoliceeTask>:
 * This function iterates through the police task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available police tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailablePoliceeTask(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(PolTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <getAvailablePoliceeTask+0x78>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 f958 	bl	8006114 <xQueueSemaphoreTake>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d127      	bne.n	8000eba <getAvailablePoliceeTask+0x6a>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	e01a      	b.n	8000ea6 <getAvailablePoliceeTask+0x56>
			if(bPolTasksStatus[i] == false) {
 8000e70:	4a16      	ldr	r2, [pc, #88]	@ (8000ecc <getAvailablePoliceeTask+0x7c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00e      	beq.n	8000ea0 <getAvailablePoliceeTask+0x50>
				bPolTasksStatus[i] = true;
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <getAvailablePoliceeTask+0x7c>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(PolTasksStatusMutex);
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <getAvailablePoliceeTask+0x78>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	f004 fea7 	bl	8005be8 <xQueueGenericSend>
				return (int8_t)i;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	e00e      	b.n	8000ebe <getAvailablePoliceeTask+0x6e>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	dde1      	ble.n	8000e70 <getAvailablePoliceeTask+0x20>
			}
		}
		xSemaphoreGive(PolTasksStatusMutex);
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <getAvailablePoliceeTask+0x78>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f004 fe97 	bl	8005be8 <xQueueGenericSend>
	}
	return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200006ac 	.word	0x200006ac
 8000ecc:	200006a8 	.word	0x200006a8

08000ed0 <getAvailableFireTask>:
 * This function iterates through the fire department task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available fire department tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableFireTask(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(FireTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <getAvailableFireTask+0x78>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 31ff 	mov.w	r1, #4294967295
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f005 f918 	bl	8006114 <xQueueSemaphoreTake>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d127      	bne.n	8000f3a <getAvailableFireTask+0x6a>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e01a      	b.n	8000f26 <getAvailableFireTask+0x56>
			if(bFireTasksStatus[i] == false) {
 8000ef0:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <getAvailableFireTask+0x7c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	f083 0301 	eor.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00e      	beq.n	8000f20 <getAvailableFireTask+0x50>
				bFireTasksStatus[i] = true;
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <getAvailableFireTask+0x7c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(FireTasksStatusMutex);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <getAvailableFireTask+0x78>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	f004 fe67 	bl	8005be8 <xQueueGenericSend>
				return (int8_t)i;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	e00e      	b.n	8000f3e <getAvailableFireTask+0x6e>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	dde1      	ble.n	8000ef0 <getAvailableFireTask+0x20>
			}
		}
		xSemaphoreGive(FireTasksStatusMutex);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <getAvailableFireTask+0x78>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	f004 fe57 	bl	8005be8 <xQueueGenericSend>
	}
	return -1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200006b4 	.word	0x200006b4
 8000f4c:	200006b0 	.word	0x200006b0

08000f50 <getAvailableCoronaTask>:
 * This function iterates through the corona task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available corona tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableCoronaTask(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(CorTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <getAvailableCoronaTask+0x78>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 f8d8 	bl	8006114 <xQueueSemaphoreTake>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d127      	bne.n	8000fba <getAvailableCoronaTask+0x6a>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e01a      	b.n	8000fa6 <getAvailableCoronaTask+0x56>
			if(bCorTasksStatus[i] == false) {
 8000f70:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <getAvailableCoronaTask+0x7c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00e      	beq.n	8000fa0 <getAvailableCoronaTask+0x50>
				bCorTasksStatus[i] = true;
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <getAvailableCoronaTask+0x7c>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(CorTasksStatusMutex);
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <getAvailableCoronaTask+0x78>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	f004 fe27 	bl	8005be8 <xQueueGenericSend>
				return (int8_t)i;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	e00e      	b.n	8000fbe <getAvailableCoronaTask+0x6e>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	dde1      	ble.n	8000f70 <getAvailableCoronaTask+0x20>
			}
		}
		xSemaphoreGive(CorTasksStatusMutex);
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <getAvailableCoronaTask+0x78>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f004 fe17 	bl	8005be8 <xQueueGenericSend>
	}
	return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200006bc 	.word	0x200006bc
 8000fcc:	200006b8 	.word	0x200006b8

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f001 f914 	bl	8002202 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f835 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f95f 	bl	80012a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fe2:	f000 f8ff 	bl	80011e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fe6:	f000 f92d 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8000fea:	f000 f899 	bl	8001120 <MX_RNG_Init>
  MX_TIM2_Init();
 8000fee:	f000 f8ab 	bl	8001148 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  initSemaphores();
 8000ff2:	f000 fd25 	bl	8001a40 <initSemaphores>
  initQueues();
 8000ff6:	f000 fcd3 	bl	80019a0 <initQueues>
  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  BaseType_t status;
  status = xTaskCreate((TaskFunction_t)initTasks,
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <main+0x6c>)
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2338      	movs	r3, #56	@ 0x38
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	2280      	movs	r2, #128	@ 0x80
 8001006:	490e      	ldr	r1, [pc, #56]	@ (8001040 <main+0x70>)
 8001008:	480e      	ldr	r0, [pc, #56]	@ (8001044 <main+0x74>)
 800100a:	f005 fbc9 	bl	80067a0 <xTaskCreate>
 800100e:	6078      	str	r0, [r7, #4]
		  "init_task",
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);
  configASSERT(status ==  pdTRUE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d00d      	beq.n	8001032 <main+0x62>
	__asm volatile
 8001016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800101a:	b672      	cpsid	i
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	b662      	cpsie	i
 800102a:	603b      	str	r3, [r7, #0]
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	e7fd      	b.n	800102e <main+0x5e>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 8001032:	f005 fd4d 	bl	8006ad0 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001036:	bf00      	nop
 8001038:	e7fd      	b.n	8001036 <main+0x66>
 800103a:	bf00      	nop
 800103c:	20000698 	.word	0x20000698
 8001040:	0800a064 	.word	0x0800a064
 8001044:	0800146d 	.word	0x0800146d

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	@ 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2230      	movs	r2, #48	@ 0x30
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f008 f840 	bl	80090dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <SystemClock_Config+0xd0>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <SystemClock_Config+0xd0>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <SystemClock_Config+0xd0>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <SystemClock_Config+0xd4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <SystemClock_Config+0xd4>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <SystemClock_Config+0xd4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010b4:	23d8      	movs	r3, #216	@ 0xd8
 80010b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010bc:	2309      	movs	r3, #9
 80010be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fd1f 	bl	8002b08 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010d0:	f000 fd62 	bl	8001b98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010d4:	f001 fcc8 	bl	8002a68 <HAL_PWREx_EnableOverDrive>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010de:	f000 fd5b 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2107      	movs	r1, #7
 8001100:	4618      	mov	r0, r3
 8001102:	f001 ffa5 	bl	8003050 <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800110c:	f000 fd44 	bl	8001b98 <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3750      	adds	r7, #80	@ 0x50
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_RNG_Init+0x20>)
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <MX_RNG_Init+0x24>)
 8001128:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_RNG_Init+0x20>)
 800112c:	f002 fdd8 	bl	8003ce0 <HAL_RNG_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001136:	f000 fd2f 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000088 	.word	0x20000088
 8001144:	50060800 	.word	0x50060800

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001168:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER_SET;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001170:	f240 221b 	movw	r2, #539	@ 0x21b
 8001174:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD_SET;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_TIM2_Init+0x98>)
 800117e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001182:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_TIM2_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001190:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <MX_TIM2_Init+0x98>)
 8001192:	f002 fe8e 	bl	8003eb2 <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 fcfc 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <MX_TIM2_Init+0x98>)
 80011ae:	f003 f857 	bl	8004260 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80011b8:	f000 fcee 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_TIM2_Init+0x98>)
 80011ca:	f003 fa81 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80011d4:	f000 fce0 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000098 	.word	0x20000098

080011e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_USART3_UART_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <MX_USART3_UART_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <MX_USART3_UART_Init+0x58>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_USART3_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_USART3_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_USART3_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <MX_USART3_UART_Init+0x58>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_USART3_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_USART3_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_USART3_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_USART3_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_USART3_UART_Init+0x58>)
 8001228:	f003 fafe 	bl	8004828 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001232:	f000 fcb1 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000e4 	.word	0x200000e4
 8001240:	40004800 	.word	0x40004800

08001244 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800124e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2206      	movs	r2, #6
 8001254:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2202      	movs	r2, #2
 800125a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2202      	movs	r2, #2
 8001266:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2201      	movs	r2, #1
 800126c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	2201      	movs	r2, #1
 800127e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001288:	f001 fab3 	bl	80027f2 <HAL_PCD_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 fc81 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000016c 	.word	0x2000016c

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a67      	ldr	r2, [pc, #412]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	4b62      	ldr	r3, [pc, #392]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a61      	ldr	r2, [pc, #388]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b59      	ldr	r3, [pc, #356]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a55      	ldr	r2, [pc, #340]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b53      	ldr	r3, [pc, #332]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001316:	4b50      	ldr	r3, [pc, #320]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a4f      	ldr	r2, [pc, #316]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132e:	4b4a      	ldr	r3, [pc, #296]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a49      	ldr	r2, [pc, #292]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <MX_GPIO_Init+0x1b8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f244 0181 	movw	r1, #16513	@ 0x4081
 800134c:	4843      	ldr	r0, [pc, #268]	@ (800145c <MX_GPIO_Init+0x1bc>)
 800134e:	f001 fa37 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2140      	movs	r1, #64	@ 0x40
 8001356:	4842      	ldr	r0, [pc, #264]	@ (8001460 <MX_GPIO_Init+0x1c0>)
 8001358:	f001 fa32 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	483c      	ldr	r0, [pc, #240]	@ (8001464 <MX_GPIO_Init+0x1c4>)
 8001374:	f001 f878 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001378:	2332      	movs	r3, #50	@ 0x32
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001388:	230b      	movs	r3, #11
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4834      	ldr	r0, [pc, #208]	@ (8001464 <MX_GPIO_Init+0x1c4>)
 8001394:	f001 f868 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001398:	2386      	movs	r3, #134	@ 0x86
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a8:	230b      	movs	r3, #11
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	482d      	ldr	r0, [pc, #180]	@ (8001468 <MX_GPIO_Init+0x1c8>)
 80013b4:	f001 f858 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013b8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4822      	ldr	r0, [pc, #136]	@ (800145c <MX_GPIO_Init+0x1bc>)
 80013d2:	f001 f849 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e8:	230b      	movs	r3, #11
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	481a      	ldr	r0, [pc, #104]	@ (800145c <MX_GPIO_Init+0x1bc>)
 80013f4:	f001 f838 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013f8:	2340      	movs	r3, #64	@ 0x40
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4814      	ldr	r0, [pc, #80]	@ (8001460 <MX_GPIO_Init+0x1c0>)
 8001410:	f001 f82a 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	480e      	ldr	r0, [pc, #56]	@ (8001460 <MX_GPIO_Init+0x1c0>)
 8001428:	f001 f81e 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800142c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143e:	230b      	movs	r3, #11
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_GPIO_Init+0x1c0>)
 800144a:	f001 f80d 	bl	8002468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800144e:	bf00      	nop
 8001450:	3730      	adds	r7, #48	@ 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400
 8001460:	40021800 	.word	0x40021800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020000 	.word	0x40020000

0800146c <initTasks>:

/* USER CODE BEGIN 4 */
void initTasks(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b0a4      	sub	sp, #144	@ 0x90
 8001470:	af02      	add	r7, sp, #8
	/* TODO: consider creating a dedicated function to initialize the tasks,
	 *       the function will receive the address of the tasks array, and its size,
	 *       and will initialize it.
	 *       This will replace initializing each array separately.
	 */
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001472:	4b92      	ldr	r3, [pc, #584]	@ (80016bc <initTasks+0x250>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 31ff 	mov.w	r1, #4294967295
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fe4a 	bl	8006114 <xQueueSemaphoreTake>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d113      	bne.n	80014ae <initTasks+0x42>
		portENTER_CRITICAL();
 8001486:	f007 f811 	bl	80084ac <vPortEnterCritical>
		printf("Starting initTasks task! \r\n");
 800148a:	488d      	ldr	r0, [pc, #564]	@ (80016c0 <initTasks+0x254>)
 800148c:	f007 fd12 	bl	8008eb4 <puts>
		fflush(stdout);
 8001490:	4b8c      	ldr	r3, [pc, #560]	@ (80016c4 <initTasks+0x258>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4618      	mov	r0, r3
 8001498:	f007 fbce 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 800149c:	4b87      	ldr	r3, [pc, #540]	@ (80016bc <initTasks+0x250>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	f004 fb9f 	bl	8005be8 <xQueueGenericSend>
		portEXIT_CRITICAL();
 80014aa:	f007 f835 	bl	8008518 <vPortExitCritical>
	}
	/* AMBULANCE TASK INIT */
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014b4:	e056      	b.n	8001564 <initTasks+0xf8>
		taskInit_t* ambulance_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80014b6:	2014      	movs	r0, #20
 80014b8:	f007 f926 	bl	8008708 <pvPortMalloc>
 80014bc:	65b8      	str	r0, [r7, #88]	@ 0x58
		configASSERT(ambulance_taskInit != NULL);
 80014be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10d      	bne.n	80014e0 <initTasks+0x74>
	__asm volatile
 80014c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014c8:	b672      	cpsid	i
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
 80014d6:	b662      	cpsie	i
 80014d8:	653b      	str	r3, [r7, #80]	@ 0x50
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <initTasks+0x70>

		ambulance_taskInit->department = AMBULANCE;
 80014e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
		ambulance_taskInit->taskIdentifier = i;
 80014e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ee:	705a      	strb	r2, [r3, #1]
		ambulance_taskInit->pQhandler = &qAmbulance;
 80014f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014f2:	4a75      	ldr	r2, [pc, #468]	@ (80016c8 <initTasks+0x25c>)
 80014f4:	605a      	str	r2, [r3, #4]
		ambulance_taskInit->pSemHandler = &AmbTasksStatusMutex;
 80014f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014f8:	4a74      	ldr	r2, [pc, #464]	@ (80016cc <initTasks+0x260>)
 80014fa:	609a      	str	r2, [r3, #8]
		ambulance_taskInit->bTaskStatusArr = bAmbTasksStatus;
 80014fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014fe:	4a74      	ldr	r2, [pc, #464]	@ (80016d0 <initTasks+0x264>)
 8001500:	60da      	str	r2, [r3, #12]
		ambulance_taskInit->numOfTasks = AMBULANCE_TASKS;
 8001502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001504:	2204      	movs	r2, #4
 8001506:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i);
 8001508:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800150c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001510:	4a70      	ldr	r2, [pc, #448]	@ (80016d4 <initTasks+0x268>)
 8001512:	2110      	movs	r1, #16
 8001514:	f007 fcd6 	bl	8008ec4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4a6e      	ldr	r2, [pc, #440]	@ (80016d8 <initTasks+0x26c>)
 8001520:	4413      	add	r3, r2
 8001522:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	232e      	movs	r3, #46	@ 0x2e
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800152e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001532:	486a      	ldr	r0, [pc, #424]	@ (80016dc <initTasks+0x270>)
 8001534:	f005 f934 	bl	80067a0 <xTaskCreate>
 8001538:	6578      	str	r0, [r7, #84]	@ 0x54
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*)ambulance_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 800153a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800153c:	2b01      	cmp	r3, #1
 800153e:	d00c      	beq.n	800155a <initTasks+0xee>
	 		/* TODO: handle this error */
	 		vPortFree(ambulance_taskInit);
 8001540:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001542:	f007 f9af 	bl	80088a4 <vPortFree>
	 		printf("Starting Ambulance Threads Failed! \r\n");
 8001546:	4866      	ldr	r0, [pc, #408]	@ (80016e0 <initTasks+0x274>)
 8001548:	f007 fcb4 	bl	8008eb4 <puts>
	 		fflush(stdout);
 800154c:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <initTasks+0x258>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4618      	mov	r0, r3
 8001554:	f007 fb70 	bl	8008c38 <fflush>
 8001558:	e1ee      	b.n	8001938 <initTasks+0x4cc>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 800155a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800155e:	3301      	adds	r3, #1
 8001560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001568:	2b03      	cmp	r3, #3
 800156a:	dda4      	ble.n	80014b6 <initTasks+0x4a>
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800156c:	4b53      	ldr	r3, [pc, #332]	@ (80016bc <initTasks+0x250>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	4618      	mov	r0, r3
 8001576:	f004 fdcd 	bl	8006114 <xQueueSemaphoreTake>
 800157a:	4603      	mov	r3, r0
 800157c:	2b01      	cmp	r3, #1
 800157e:	d113      	bne.n	80015a8 <initTasks+0x13c>
		portENTER_CRITICAL();
 8001580:	f006 ff94 	bl	80084ac <vPortEnterCritical>
		printf("Started Ambulance Threads! \r\n");
 8001584:	4857      	ldr	r0, [pc, #348]	@ (80016e4 <initTasks+0x278>)
 8001586:	f007 fc95 	bl	8008eb4 <puts>
		fflush(stdout);
 800158a:	4b4e      	ldr	r3, [pc, #312]	@ (80016c4 <initTasks+0x258>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4618      	mov	r0, r3
 8001592:	f007 fb51 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <initTasks+0x250>)
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	f004 fb22 	bl	8005be8 <xQueueGenericSend>
		portEXIT_CRITICAL();
 80015a4:	f006 ffb8 	bl	8008518 <vPortExitCritical>
	}


	/* POLICE TASK INIT */
	for(int i=0; i<POLICE_TASKS; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015ae:	e04a      	b.n	8001646 <initTasks+0x1da>
		taskInit_t* police_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80015b0:	2014      	movs	r0, #20
 80015b2:	f007 f8a9 	bl	8008708 <pvPortMalloc>
 80015b6:	6638      	str	r0, [r7, #96]	@ 0x60
		configASSERT(police_taskInit != NULL);
 80015b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10d      	bne.n	80015da <initTasks+0x16e>
	__asm volatile
 80015be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015c2:	b672      	cpsid	i
 80015c4:	f383 8811 	msr	BASEPRI, r3
 80015c8:	f3bf 8f6f 	isb	sy
 80015cc:	f3bf 8f4f 	dsb	sy
 80015d0:	b662      	cpsie	i
 80015d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <initTasks+0x16a>

		police_taskInit->department = POLICE;
 80015da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
		police_taskInit->taskIdentifier = i;
 80015e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015e8:	705a      	strb	r2, [r3, #1]
		police_taskInit->pQhandler = &qPolice;
 80015ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015ec:	4a3e      	ldr	r2, [pc, #248]	@ (80016e8 <initTasks+0x27c>)
 80015ee:	605a      	str	r2, [r3, #4]
		police_taskInit->pSemHandler = &PolTasksStatusMutex;
 80015f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015f2:	4a3e      	ldr	r2, [pc, #248]	@ (80016ec <initTasks+0x280>)
 80015f4:	609a      	str	r2, [r3, #8]
		police_taskInit->bTaskStatusArr = bPolTasksStatus;
 80015f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015f8:	4a3d      	ldr	r2, [pc, #244]	@ (80016f0 <initTasks+0x284>)
 80015fa:	60da      	str	r2, [r3, #12]
		police_taskInit->numOfTasks = POLICE_TASKS;
 80015fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015fe:	2203      	movs	r2, #3
 8001600:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i);
 8001602:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800160a:	4a3a      	ldr	r2, [pc, #232]	@ (80016f4 <initTasks+0x288>)
 800160c:	2110      	movs	r1, #16
 800160e:	f007 fc59 	bl	8008ec4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001612:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4a37      	ldr	r2, [pc, #220]	@ (80016f8 <initTasks+0x28c>)
 800161a:	4413      	add	r3, r2
 800161c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	232e      	movs	r3, #46	@ 0x2e
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001628:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800162c:	482b      	ldr	r0, [pc, #172]	@ (80016dc <initTasks+0x270>)
 800162e:	f005 f8b7 	bl	80067a0 <xTaskCreate>
 8001632:	65f8      	str	r0, [r7, #92]	@ 0x5c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) police_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 8001634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001636:	2b01      	cmp	r3, #1
 8001638:	f040 8177 	bne.w	800192a <initTasks+0x4be>
	for(int i=0; i<POLICE_TASKS; i++) {
 800163c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001640:	3301      	adds	r3, #1
 8001642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800164a:	2b02      	cmp	r3, #2
 800164c:	ddb0      	ble.n	80015b0 <initTasks+0x144>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800164e:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <initTasks+0x250>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 31ff 	mov.w	r1, #4294967295
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fd5c 	bl	8006114 <xQueueSemaphoreTake>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d113      	bne.n	800168a <initTasks+0x21e>
		portENTER_CRITICAL();
 8001662:	f006 ff23 	bl	80084ac <vPortEnterCritical>
		printf("Started Police Threads! \r\n");
 8001666:	4825      	ldr	r0, [pc, #148]	@ (80016fc <initTasks+0x290>)
 8001668:	f007 fc24 	bl	8008eb4 <puts>
		fflush(stdout);
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <initTasks+0x258>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4618      	mov	r0, r3
 8001674:	f007 fae0 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <initTasks+0x250>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	f004 fab1 	bl	8005be8 <xQueueGenericSend>
		portEXIT_CRITICAL();
 8001686:	f006 ff47 	bl	8008518 <vPortExitCritical>
	}

	/* FIRE DEP TASK INIT */
	for(int i=0; i<FIRE_TASKS; i++) {
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800168e:	e068      	b.n	8001762 <initTasks+0x2f6>
		taskInit_t* fire_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001690:	2014      	movs	r0, #20
 8001692:	f007 f839 	bl	8008708 <pvPortMalloc>
 8001696:	66b8      	str	r0, [r7, #104]	@ 0x68
		configASSERT(fire_taskInit != NULL);
 8001698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169a:	2b00      	cmp	r3, #0
 800169c:	d130      	bne.n	8001700 <initTasks+0x294>
	__asm volatile
 800169e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016a2:	b672      	cpsid	i
 80016a4:	f383 8811 	msr	BASEPRI, r3
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	f3bf 8f4f 	dsb	sy
 80016b0:	b662      	cpsie	i
 80016b2:	64bb      	str	r3, [r7, #72]	@ 0x48
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	e7fd      	b.n	80016b6 <initTasks+0x24a>
 80016ba:	bf00      	nop
 80016bc:	200006c0 	.word	0x200006c0
 80016c0:	0800a070 	.word	0x0800a070
 80016c4:	2000001c 	.word	0x2000001c
 80016c8:	2000064c 	.word	0x2000064c
 80016cc:	200006a4 	.word	0x200006a4
 80016d0:	200006a0 	.word	0x200006a0
 80016d4:	0800a08c 	.word	0x0800a08c
 80016d8:	20000660 	.word	0x20000660
 80016dc:	08000b01 	.word	0x08000b01
 80016e0:	0800a09c 	.word	0x0800a09c
 80016e4:	0800a0c4 	.word	0x0800a0c4
 80016e8:	20000650 	.word	0x20000650
 80016ec:	200006ac 	.word	0x200006ac
 80016f0:	200006a8 	.word	0x200006a8
 80016f4:	0800a0e4 	.word	0x0800a0e4
 80016f8:	20000670 	.word	0x20000670
 80016fc:	0800a0f0 	.word	0x0800a0f0

		fire_taskInit->department = FIRE;
 8001700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
		fire_taskInit->taskIdentifier = i;
 8001706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001708:	b2da      	uxtb	r2, r3
 800170a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800170c:	705a      	strb	r2, [r3, #1]
		fire_taskInit->pQhandler = &qFire;
 800170e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001710:	4a8b      	ldr	r2, [pc, #556]	@ (8001940 <initTasks+0x4d4>)
 8001712:	605a      	str	r2, [r3, #4]
		fire_taskInit->pSemHandler = &FireTasksStatusMutex;
 8001714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001716:	4a8b      	ldr	r2, [pc, #556]	@ (8001944 <initTasks+0x4d8>)
 8001718:	609a      	str	r2, [r3, #8]
		fire_taskInit->bTaskStatusArr = bFireTasksStatus;
 800171a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800171c:	4a8a      	ldr	r2, [pc, #552]	@ (8001948 <initTasks+0x4dc>)
 800171e:	60da      	str	r2, [r3, #12]
		fire_taskInit->numOfTasks = FIRE_TASKS;
 8001720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001722:	2202      	movs	r2, #2
 8001724:	741a      	strb	r2, [r3, #16]
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i);
 8001726:	f107 0014 	add.w	r0, r7, #20
 800172a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800172c:	4a87      	ldr	r2, [pc, #540]	@ (800194c <initTasks+0x4e0>)
 800172e:	2110      	movs	r1, #16
 8001730:	f007 fbc8 	bl	8008ec4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4a85      	ldr	r2, [pc, #532]	@ (8001950 <initTasks+0x4e4>)
 800173a:	4413      	add	r3, r2
 800173c:	f107 0114 	add.w	r1, r7, #20
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	232e      	movs	r3, #46	@ 0x2e
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001748:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800174c:	4881      	ldr	r0, [pc, #516]	@ (8001954 <initTasks+0x4e8>)
 800174e:	f005 f827 	bl	80067a0 <xTaskCreate>
 8001752:	6678      	str	r0, [r7, #100]	@ 0x64
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) fire_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 8001754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001756:	2b01      	cmp	r3, #1
 8001758:	f040 80e9 	bne.w	800192e <initTasks+0x4c2>
	for(int i=0; i<FIRE_TASKS; i++) {
 800175c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800175e:	3301      	adds	r3, #1
 8001760:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001764:	2b01      	cmp	r3, #1
 8001766:	dd93      	ble.n	8001690 <initTasks+0x224>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001768:	4b7b      	ldr	r3, [pc, #492]	@ (8001958 <initTasks+0x4ec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fccf 	bl	8006114 <xQueueSemaphoreTake>
 8001776:	4603      	mov	r3, r0
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10f      	bne.n	800179c <initTasks+0x330>
		printf("Started Fire Dep Threads! \r\n");
 800177c:	4877      	ldr	r0, [pc, #476]	@ (800195c <initTasks+0x4f0>)
 800177e:	f007 fb99 	bl	8008eb4 <puts>
		fflush(stdout);
 8001782:	4b77      	ldr	r3, [pc, #476]	@ (8001960 <initTasks+0x4f4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fa55 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 800178e:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <initTasks+0x4ec>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	f004 fa26 	bl	8005be8 <xQueueGenericSend>
	}

	/* CORONA TASK INIT */
	for(int i=0; i<CORONA_TASKS; i++) {
 800179c:	2300      	movs	r3, #0
 800179e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017a0:	e043      	b.n	800182a <initTasks+0x3be>
		taskInit_t* corona_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80017a2:	2014      	movs	r0, #20
 80017a4:	f006 ffb0 	bl	8008708 <pvPortMalloc>
 80017a8:	6738      	str	r0, [r7, #112]	@ 0x70
		configASSERT(corona_taskInit != NULL);
 80017aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <initTasks+0x360>
	__asm volatile
 80017b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017b4:	b672      	cpsid	i
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	b662      	cpsie	i
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <initTasks+0x35c>

		corona_taskInit->department = CORONA;
 80017cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017ce:	2203      	movs	r2, #3
 80017d0:	701a      	strb	r2, [r3, #0]
		corona_taskInit->taskIdentifier = i;
 80017d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017d8:	705a      	strb	r2, [r3, #1]
		corona_taskInit->pQhandler = &qCorona;
 80017da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017dc:	4a61      	ldr	r2, [pc, #388]	@ (8001964 <initTasks+0x4f8>)
 80017de:	605a      	str	r2, [r3, #4]
		corona_taskInit->pSemHandler = &CorTasksStatusMutex;
 80017e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017e2:	4a61      	ldr	r2, [pc, #388]	@ (8001968 <initTasks+0x4fc>)
 80017e4:	609a      	str	r2, [r3, #8]
		corona_taskInit->bTaskStatusArr = bCorTasksStatus;
 80017e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017e8:	4a60      	ldr	r2, [pc, #384]	@ (800196c <initTasks+0x500>)
 80017ea:	60da      	str	r2, [r3, #12]
		corona_taskInit->numOfTasks = CORONA_TASKS;
 80017ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017ee:	2204      	movs	r2, #4
 80017f0:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i);
 80017f2:	1d38      	adds	r0, r7, #4
 80017f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001970 <initTasks+0x504>)
 80017f8:	2110      	movs	r1, #16
 80017fa:	f007 fb63 	bl	8008ec4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80017fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4a5c      	ldr	r2, [pc, #368]	@ (8001974 <initTasks+0x508>)
 8001804:	4413      	add	r3, r2
 8001806:	1d39      	adds	r1, r7, #4
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	232e      	movs	r3, #46	@ 0x2e
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001810:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001814:	484f      	ldr	r0, [pc, #316]	@ (8001954 <initTasks+0x4e8>)
 8001816:	f004 ffc3 	bl	80067a0 <xTaskCreate>
 800181a:	66f8      	str	r0, [r7, #108]	@ 0x6c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) corona_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 800181c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 8087 	bne.w	8001932 <initTasks+0x4c6>
	for(int i=0; i<CORONA_TASKS; i++) {
 8001824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001826:	3301      	adds	r3, #1
 8001828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800182a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800182c:	2b03      	cmp	r3, #3
 800182e:	ddb8      	ble.n	80017a2 <initTasks+0x336>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001830:	4b49      	ldr	r3, [pc, #292]	@ (8001958 <initTasks+0x4ec>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fc6b 	bl	8006114 <xQueueSemaphoreTake>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10f      	bne.n	8001864 <initTasks+0x3f8>
		printf("Started Corona Threads! \r\n");
 8001844:	484c      	ldr	r0, [pc, #304]	@ (8001978 <initTasks+0x50c>)
 8001846:	f007 fb35 	bl	8008eb4 <puts>
		fflush(stdout);
 800184a:	4b45      	ldr	r3, [pc, #276]	@ (8001960 <initTasks+0x4f4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4618      	mov	r0, r3
 8001852:	f007 f9f1 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 8001856:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <initTasks+0x4ec>)
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	f004 f9c2 	bl	8005be8 <xQueueGenericSend>
	}

	vTaskDelay(100);
 8001864:	2064      	movs	r0, #100	@ 0x64
 8001866:	f005 f8fb 	bl	8006a60 <vTaskDelay>

	BaseType_t status = xTaskCreate((TaskFunction_t)vDispatcherCode,
 800186a:	4b44      	ldr	r3, [pc, #272]	@ (800197c <initTasks+0x510>)
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	232c      	movs	r3, #44	@ 0x2c
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001878:	4941      	ldr	r1, [pc, #260]	@ (8001980 <initTasks+0x514>)
 800187a:	4842      	ldr	r0, [pc, #264]	@ (8001984 <initTasks+0x518>)
 800187c:	f004 ff90 	bl	80067a0 <xTaskCreate>
 8001880:	6778      	str	r0, [r7, #116]	@ 0x74
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							DISPATCHER_TASK_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 8001882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001884:	2b01      	cmp	r3, #1
 8001886:	d156      	bne.n	8001936 <initTasks+0x4ca>
		return;
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001888:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <initTasks+0x4ec>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	4618      	mov	r0, r3
 8001892:	f004 fc3f 	bl	8006114 <xQueueSemaphoreTake>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10f      	bne.n	80018bc <initTasks+0x450>
		printf("Started Dispatcher Thread! \r\n");
 800189c:	483a      	ldr	r0, [pc, #232]	@ (8001988 <initTasks+0x51c>)
 800189e:	f007 fb09 	bl	8008eb4 <puts>
		fflush(stdout);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <initTasks+0x4f4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f007 f9c5 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 80018ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <initTasks+0x4ec>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	f004 f996 	bl	8005be8 <xQueueGenericSend>
	}

	status = xTaskCreate((TaskFunction_t)tasksManagerTask,
 80018bc:	4b33      	ldr	r3, [pc, #204]	@ (800198c <initTasks+0x520>)
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	232b      	movs	r3, #43	@ 0x2b
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018ca:	4931      	ldr	r1, [pc, #196]	@ (8001990 <initTasks+0x524>)
 80018cc:	4831      	ldr	r0, [pc, #196]	@ (8001994 <initTasks+0x528>)
 80018ce:	f004 ff67 	bl	80067a0 <xTaskCreate>
 80018d2:	6778      	str	r0, [r7, #116]	@ 0x74
						(void*)1,
						MANAGER_TASK_PRIORITY,
						&vTasksManagerTask);


	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80018d4:	4830      	ldr	r0, [pc, #192]	@ (8001998 <initTasks+0x52c>)
 80018d6:	f002 fb43 	bl	8003f60 <HAL_TIM_Base_Start_IT>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <initTasks+0x478>
		Error_Handler();
 80018e0:	f000 f95a 	bl	8001b98 <Error_Handler>
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <initTasks+0x4ec>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fc11 	bl	8006114 <xQueueSemaphoreTake>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10f      	bne.n	8001918 <initTasks+0x4ac>
		printf("Timer interrupts enabled! \r\n");
 80018f8:	4828      	ldr	r0, [pc, #160]	@ (800199c <initTasks+0x530>)
 80018fa:	f007 fadb 	bl	8008eb4 <puts>
		fflush(stdout);
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <initTasks+0x4f4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4618      	mov	r0, r3
 8001906:	f007 f997 	bl	8008c38 <fflush>
		xSemaphoreGive(printfMutex);
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <initTasks+0x4ec>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	f004 f968 	bl	8005be8 <xQueueGenericSend>
	//	Error_Handler();
	//}
	//vTaskDelay(100);
	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001918:	463a      	mov	r2, r7
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f005 fee5 	bl	80076f0 <xTaskNotifyWait>
	for(;;) {
 8001926:	bf00      	nop
 8001928:	e7f6      	b.n	8001918 <initTasks+0x4ac>
	 		return;
 800192a:	bf00      	nop
 800192c:	e004      	b.n	8001938 <initTasks+0x4cc>
	 		return;
 800192e:	bf00      	nop
 8001930:	e002      	b.n	8001938 <initTasks+0x4cc>
	 		return;
 8001932:	bf00      	nop
 8001934:	e000      	b.n	8001938 <initTasks+0x4cc>
		return;
 8001936:	bf00      	nop
	}
}
 8001938:	3788      	adds	r7, #136	@ 0x88
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000654 	.word	0x20000654
 8001944:	200006b4 	.word	0x200006b4
 8001948:	200006b0 	.word	0x200006b0
 800194c:	0800a10c 	.word	0x0800a10c
 8001950:	2000067c 	.word	0x2000067c
 8001954:	08000b01 	.word	0x08000b01
 8001958:	200006c0 	.word	0x200006c0
 800195c:	0800a114 	.word	0x0800a114
 8001960:	2000001c 	.word	0x2000001c
 8001964:	20000658 	.word	0x20000658
 8001968:	200006bc 	.word	0x200006bc
 800196c:	200006b8 	.word	0x200006b8
 8001970:	0800a130 	.word	0x0800a130
 8001974:	20000684 	.word	0x20000684
 8001978:	0800a13c 	.word	0x0800a13c
 800197c:	20000694 	.word	0x20000694
 8001980:	0800a158 	.word	0x0800a158
 8001984:	080005a1 	.word	0x080005a1
 8001988:	0800a168 	.word	0x0800a168
 800198c:	2000069c 	.word	0x2000069c
 8001990:	0800a188 	.word	0x0800a188
 8001994:	080008b9 	.word	0x080008b9
 8001998:	20000098 	.word	0x20000098
 800199c:	0800a198 	.word	0x0800a198

080019a0 <initQueues>:

void initQueues(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	/* TODO: Consider setting attributed for each queue */

	qAmbulance = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80019a4:	2200      	movs	r2, #0
 80019a6:	2168      	movs	r1, #104	@ 0x68
 80019a8:	200a      	movs	r0, #10
 80019aa:	f004 f884 	bl	8005ab6 <xQueueGenericCreate>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <initQueues+0x8c>)
 80019b2:	6013      	str	r3, [r2, #0]
	if(qAmbulance == NULL) {
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <initQueues+0x8c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02f      	beq.n	8001a1c <initQueues+0x7c>
		/* TODO: handle this error */
		return;
	}
	qPolice = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80019bc:	2200      	movs	r2, #0
 80019be:	2168      	movs	r1, #104	@ 0x68
 80019c0:	200a      	movs	r0, #10
 80019c2:	f004 f878 	bl	8005ab6 <xQueueGenericCreate>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <initQueues+0x90>)
 80019ca:	6013      	str	r3, [r2, #0]
	if(qPolice == NULL) {
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <initQueues+0x90>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d025      	beq.n	8001a20 <initQueues+0x80>
		/* TODO: handle this error */
		return;
	}
	qFire = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80019d4:	2200      	movs	r2, #0
 80019d6:	2168      	movs	r1, #104	@ 0x68
 80019d8:	200a      	movs	r0, #10
 80019da:	f004 f86c 	bl	8005ab6 <xQueueGenericCreate>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <initQueues+0x94>)
 80019e2:	6013      	str	r3, [r2, #0]
	if(qFire == NULL) {
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <initQueues+0x94>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <initQueues+0x84>
		/* TODO: handle this error */
		return;
	}
	qCorona = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80019ec:	2200      	movs	r2, #0
 80019ee:	2168      	movs	r1, #104	@ 0x68
 80019f0:	200a      	movs	r0, #10
 80019f2:	f004 f860 	bl	8005ab6 <xQueueGenericCreate>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <initQueues+0x98>)
 80019fa:	6013      	str	r3, [r2, #0]
	if(qCorona == NULL) {
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <initQueues+0x98>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d011      	beq.n	8001a28 <initQueues+0x88>
		/* TODO: handle this error */
		return;
	}
	qDispatcher = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8001a04:	2200      	movs	r2, #0
 8001a06:	2168      	movs	r1, #104	@ 0x68
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f004 f854 	bl	8005ab6 <xQueueGenericCreate>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <initQueues+0x9c>)
 8001a12:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <initQueues+0x9c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	e006      	b.n	8001a2a <initQueues+0x8a>
		return;
 8001a1c:	bf00      	nop
 8001a1e:	e004      	b.n	8001a2a <initQueues+0x8a>
		return;
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <initQueues+0x8a>
		return;
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <initQueues+0x8a>
		return;
 8001a28:	bf00      	nop
		/* TODO: handle this error */
		return;
	}
	/* TODO: log a message queues were initialized */

}
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000064c 	.word	0x2000064c
 8001a30:	20000650 	.word	0x20000650
 8001a34:	20000654 	.word	0x20000654
 8001a38:	20000658 	.word	0x20000658
 8001a3c:	2000065c 	.word	0x2000065c

08001a40 <initSemaphores>:





void initSemaphores(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	printfMutex = xSemaphoreCreateMutex();
 8001a44:	2001      	movs	r0, #1
 8001a46:	f004 f8b6 	bl	8005bb6 <xQueueCreateMutex>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <initSemaphores+0x90>)
 8001a4e:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <initSemaphores+0x90>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d031      	beq.n	8001abc <initSemaphores+0x7c>
		return;
	}
	xTasksDataMutex = xSemaphoreCreateMutex();
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f004 f8ac 	bl	8005bb6 <xQueueCreateMutex>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <initSemaphores+0x94>)
 8001a62:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <initSemaphores+0x90>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d029      	beq.n	8001ac0 <initSemaphores+0x80>
		return;
	}
	AmbTasksStatusMutex = xSemaphoreCreateMutex();
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f004 f8a2 	bl	8005bb6 <xQueueCreateMutex>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a18      	ldr	r2, [pc, #96]	@ (8001ad8 <initSemaphores+0x98>)
 8001a76:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <initSemaphores+0x90>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <initSemaphores+0x84>
		return;
	}
	PolTasksStatusMutex = xSemaphoreCreateMutex();
 8001a80:	2001      	movs	r0, #1
 8001a82:	f004 f898 	bl	8005bb6 <xQueueCreateMutex>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <initSemaphores+0x9c>)
 8001a8a:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <initSemaphores+0x90>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d019      	beq.n	8001ac8 <initSemaphores+0x88>
		return;
	}
	FireTasksStatusMutex = xSemaphoreCreateMutex();
 8001a94:	2001      	movs	r0, #1
 8001a96:	f004 f88e 	bl	8005bb6 <xQueueCreateMutex>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <initSemaphores+0xa0>)
 8001a9e:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <initSemaphores+0x90>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d011      	beq.n	8001acc <initSemaphores+0x8c>
		return;
	}
	CorTasksStatusMutex = xSemaphoreCreateMutex();
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f004 f884 	bl	8005bb6 <xQueueCreateMutex>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <initSemaphores+0xa4>)
 8001ab2:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <initSemaphores+0x90>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	e008      	b.n	8001ace <initSemaphores+0x8e>
		return;
 8001abc:	bf00      	nop
 8001abe:	e006      	b.n	8001ace <initSemaphores+0x8e>
		return;
 8001ac0:	bf00      	nop
 8001ac2:	e004      	b.n	8001ace <initSemaphores+0x8e>
		return;
 8001ac4:	bf00      	nop
 8001ac6:	e002      	b.n	8001ace <initSemaphores+0x8e>
		return;
 8001ac8:	bf00      	nop
 8001aca:	e000      	b.n	8001ace <initSemaphores+0x8e>
		return;
 8001acc:	bf00      	nop
		return;
	}
}
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200006c0 	.word	0x200006c0
 8001ad4:	200006d4 	.word	0x200006d4
 8001ad8:	200006a4 	.word	0x200006a4
 8001adc:	200006ac 	.word	0x200006ac
 8001ae0:	200006b4 	.word	0x200006b4
 8001ae4:	200006bc 	.word	0x200006bc

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a0      	sub	sp, #128	@ 0x80
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af8:	d13a      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x88>
		DispatcherPacket new_packet;
		generateDispatcherMSG(&new_packet);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fdfa 	bl	80006f8 <generateDispatcherMSG>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	673b      	str	r3, [r7, #112]	@ 0x70
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 8001b08:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fc3a 	bl	8006386 <uxQueueMessagesWaitingFromISR>
 8001b12:	6778      	str	r0, [r7, #116]	@ 0x74
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
		if( qItems != TASKS_QUEUE_SIZE) {
 8001b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d012      	beq.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x58>
			xQueueSendFromISR(qDispatcher, &new_packet, NULL);
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	2300      	movs	r3, #0
 8001b24:	2200      	movs	r2, #0
 8001b26:	f004 f969 	bl	8005dfc <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f005 ff01 	bl	8007940 <xTaskGenericNotifyFromISR>
 8001b3e:	e009      	b.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x6c>
			//printf("Added to queue! \r\n");
			//fflush(stdout);
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f005 fef6 	bl	8007940 <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 8001b54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10a      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x88>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	f3bf 8f6f 	isb	sy
		/*
		 * TODO: add a random item to dispatcher queue.
		 */
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x96>
    HAL_IncTick();
 8001b7a:	f000 fb4f 	bl	800221c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	3778      	adds	r7, #120	@ 0x78
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000065c 	.word	0x2000065c
 8001b8c:	20000694 	.word	0x20000694
 8001b90:	e000ed04 	.word	0xe000ed04
 8001b94:	40001000 	.word	0x40001000

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <Error_Handler+0x8>

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_MspInit+0x70>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_MspInit+0x70>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_MspInit+0x70>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_MspInit+0x70>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <HAL_MspInit+0x70>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_MspInit+0x70>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	210f      	movs	r1, #15
 8001bde:	f06f 0001 	mvn.w	r0, #1
 8001be2:	f000 fc17 	bl	8002414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1  , 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2104      	movs	r1, #4
 8001bea:	2050      	movs	r0, #80	@ 0x50
 8001bec:	f000 fc12 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001bf0:	2050      	movs	r0, #80	@ 0x50
 8001bf2:	f000 fc2b 	bl	800244c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	201c      	movs	r0, #28
 8001bfc:	f000 fc0a 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c00:	201c      	movs	r0, #28
 8001c02:	f000 fc23 	bl	800244c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 fbf9 	bl	80023fe <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0a4      	sub	sp, #144	@ 0x90
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2284      	movs	r2, #132	@ 0x84
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 fa57 	bl	80090dc <memset>
  if(hrng->Instance==RNG)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a15      	ldr	r2, [pc, #84]	@ (8001c88 <HAL_RNG_MspInit+0x70>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d123      	bne.n	8001c80 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fc59 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001c54:	f7ff ffa0 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_RNG_MspInit+0x74>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <HAL_RNG_MspInit+0x74>)
 8001c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c62:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RNG_MspInit+0x74>)
 8001c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	210f      	movs	r1, #15
 8001c74:	2050      	movs	r0, #80	@ 0x50
 8001c76:	f000 fbcd 	bl	8002414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001c7a:	2050      	movs	r0, #80	@ 0x50
 8001c7c:	f000 fbe6 	bl	800244c <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c80:	bf00      	nop
 8001c82:	3790      	adds	r7, #144	@ 0x90
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	50060800 	.word	0x50060800
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca0:	d113      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_TIM_Base_MspInit+0x44>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <HAL_TIM_Base_MspInit+0x44>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_TIM_Base_MspInit+0x44>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	210a      	movs	r1, #10
 8001cbe:	201c      	movs	r0, #28
 8001cc0:	f000 fba8 	bl	8002414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc4:	201c      	movs	r0, #28
 8001cc6:	f000 fbc1 	bl	800244c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0aa      	sub	sp, #168	@ 0xa8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	2284      	movs	r2, #132	@ 0x84
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 f9ef 	bl	80090dc <memset>
  if(huart->Instance==USART3)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a22      	ldr	r2, [pc, #136]	@ (8001d8c <HAL_UART_MspInit+0xb4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d13c      	bne.n	8001d82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fbf2 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d22:	f7ff ff39 	bl	8001b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_UART_MspInit+0xb8>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_UART_MspInit+0xb8>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_UART_MspInit+0xb8>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0xb8>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_UART_MspInit+0xb8>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <HAL_UART_MspInit+0xb8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d70:	2307      	movs	r3, #7
 8001d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d76:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <HAL_UART_MspInit+0xbc>)
 8001d7e:	f000 fb73 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	37a8      	adds	r7, #168	@ 0xa8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40004800 	.word	0x40004800
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020c00 	.word	0x40020c00

08001d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	2284      	movs	r2, #132	@ 0x84
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f007 f98f 	bl	80090dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc6:	d159      	bne.n	8001e7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001dc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fb91 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001de4:	f7ff fed8 	bl	8001b98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4818      	ldr	r0, [pc, #96]	@ (8001e88 <HAL_PCD_MspInit+0xf0>)
 8001e28:	f000 fb1e 	bl	8002468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e44:	4619      	mov	r1, r3
 8001e46:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <HAL_PCD_MspInit+0xf0>)
 8001e48:	f000 fb0e 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e56:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <HAL_PCD_MspInit+0xec>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	37b0      	adds	r7, #176	@ 0xb0
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08e      	sub	sp, #56	@ 0x38
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9c:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea8:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_InitTick+0xe0>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb4:	f107 0210 	add.w	r2, r7, #16
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 faec 	bl	800349c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ece:	f001 fabd 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8001ed2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ed4:	e004      	b.n	8001ee0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed6:	f001 fab9 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee2:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_InitTick+0xe4>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	3b01      	subs	r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001ef0:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <HAL_InitTick+0xec>)
 8001ef2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001ef6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001efa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f14:	4817      	ldr	r0, [pc, #92]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f16:	f001 ffcc 	bl	8003eb2 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11b      	bne.n	8001f60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <HAL_InitTick+0xe8>)
 8001f2a:	f002 f819 	bl	8003f60 <HAL_TIM_Base_Start_IT>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f3c:	2036      	movs	r0, #54	@ 0x36
 8001f3e:	f000 fa85 	bl	800244c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d808      	bhi.n	8001f5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	2036      	movs	r0, #54	@ 0x36
 8001f4e:	f000 fa61 	bl	8002414 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_InitTick+0xf0>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e002      	b.n	8001f60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3738      	adds	r7, #56	@ 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	200006d8 	.word	0x200006d8
 8001f78:	40001000 	.word	0x40001000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <NMI_Handler+0x4>

08001f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <MemManage_Handler+0x4>

08001f98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <TIM2_IRQHandler+0x10>)
 8001fbe:	f002 f847 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000098 	.word	0x20000098

08001fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <TIM6_DAC_IRQHandler+0x10>)
 8001fd2:	f002 f83d 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200006d8 	.word	0x200006d8

08001fe0 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <RNG_IRQHandler+0x10>)
 8001fe6:	f001 fefb 	bl	8003de0 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000088 	.word	0x20000088

08001ff4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <ITM_SendChar+0x48>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a0e      	ldr	r2, [pc, #56]	@ (800203c <ITM_SendChar+0x48>)
 8002004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002008:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <ITM_SendChar+0x4c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a0c      	ldr	r2, [pc, #48]	@ (8002040 <ITM_SendChar+0x4c>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002016:	bf00      	nop
 8002018:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f8      	beq.n	8002018 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 8002026:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	6013      	str	r3, [r2, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000edfc 	.word	0xe000edfc
 8002040:	e0000e00 	.word	0xe0000e00

08002044 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e00a      	b.n	800206c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002056:	f3af 8000 	nop.w
 800205a:	4601      	mov	r1, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf0      	blt.n	8002056 <_read+0x12>
  }

  return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e009      	b.n	80020a4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ffab 	bl	8001ff4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf1      	blt.n	8002090 <_write+0x12>
  }
  return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_close>:

int _close(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020de:	605a      	str	r2, [r3, #4]
  return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_isatty>:

int _isatty(int file)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f007 f87c 	bl	800924c <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20050000 	.word	0x20050000
 8002180:	00000400 	.word	0x00000400
 8002184:	20000724 	.word	0x20000724
 8002188:	20019cf8 	.word	0x20019cf8

0800218c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b4:	f7ff ffea 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021de:	f007 f83b 	bl	8009258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7fe fef5 	bl	8000fd0 <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80021f4:	0800ade0 	.word	0x0800ade0
  ldr r2, =_sbss
 80021f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80021fc:	20019cf4 	.word	0x20019cf4

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>

08002202 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002206:	2003      	movs	r0, #3
 8002208:	f000 f8f9 	bl	80023fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220c:	200f      	movs	r0, #15
 800220e:	f7ff fe3d 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002212:	f7ff fcc7 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008
 8002240:	20000728 	.word	0x20000728

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000728 	.word	0x20000728

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000008 	.word	0x20000008

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <__NVIC_SetPriorityGrouping+0x40>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <__NVIC_SetPriorityGrouping+0x40>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00
 80022e8:	05fa0000 	.word	0x05fa0000

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	@ (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	@ (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	@ (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	@ 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	@ 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff4c 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002426:	f7ff ff61 	bl	80022ec <__NVIC_GetPriorityGrouping>
 800242a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f7ff ffb1 	bl	8002398 <NVIC_EncodePriority>
 8002436:	4602      	mov	r2, r0
 8002438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff80 	bl	8002344 <__NVIC_SetPriority>
}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff54 	bl	8002308 <__NVIC_EnableIRQ>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	@ 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e175      	b.n	8002774 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8164 	bne.w	800276e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d005      	beq.n	80024be <HAL_GPIO_Init+0x56>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d130      	bne.n	8002520 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 0201 	and.w	r2, r3, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b03      	cmp	r3, #3
 800252a:	d017      	beq.n	800255c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d123      	bne.n	80025b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80be 	beq.w	800276e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_GPIO_Init+0x324>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_GPIO_Init+0x324>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b63      	ldr	r3, [pc, #396]	@ (800278c <HAL_GPIO_Init+0x324>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800260a:	4a61      	ldr	r2, [pc, #388]	@ (8002790 <HAL_GPIO_Init+0x328>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <HAL_GPIO_Init+0x32c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d037      	beq.n	80026a6 <HAL_GPIO_Init+0x23e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a57      	ldr	r2, [pc, #348]	@ (8002798 <HAL_GPIO_Init+0x330>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d031      	beq.n	80026a2 <HAL_GPIO_Init+0x23a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a56      	ldr	r2, [pc, #344]	@ (800279c <HAL_GPIO_Init+0x334>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02b      	beq.n	800269e <HAL_GPIO_Init+0x236>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a55      	ldr	r2, [pc, #340]	@ (80027a0 <HAL_GPIO_Init+0x338>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d025      	beq.n	800269a <HAL_GPIO_Init+0x232>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a54      	ldr	r2, [pc, #336]	@ (80027a4 <HAL_GPIO_Init+0x33c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <HAL_GPIO_Init+0x22e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a53      	ldr	r2, [pc, #332]	@ (80027a8 <HAL_GPIO_Init+0x340>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x22a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_GPIO_Init+0x344>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x226>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a51      	ldr	r2, [pc, #324]	@ (80027b0 <HAL_GPIO_Init+0x348>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x222>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_GPIO_Init+0x34c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x21e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_GPIO_Init+0x350>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x21a>
 800267e:	2309      	movs	r3, #9
 8002680:	e012      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 8002682:	230a      	movs	r3, #10
 8002684:	e010      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 8002686:	2308      	movs	r3, #8
 8002688:	e00e      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 800268a:	2307      	movs	r3, #7
 800268c:	e00c      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 800268e:	2306      	movs	r3, #6
 8002690:	e00a      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 8002692:	2305      	movs	r3, #5
 8002694:	e008      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 8002696:	2304      	movs	r3, #4
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 800269a:	2303      	movs	r3, #3
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 800269e:	2302      	movs	r3, #2
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x240>
 80026a6:	2300      	movs	r3, #0
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f002 0203 	and.w	r2, r2, #3
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	@ (8002790 <HAL_GPIO_Init+0x328>)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c6:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <HAL_GPIO_Init+0x354>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ea:	4a34      	ldr	r2, [pc, #208]	@ (80027bc <HAL_GPIO_Init+0x354>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f0:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <HAL_GPIO_Init+0x354>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002714:	4a29      	ldr	r2, [pc, #164]	@ (80027bc <HAL_GPIO_Init+0x354>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271a:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_GPIO_Init+0x354>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273e:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <HAL_GPIO_Init+0x354>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <HAL_GPIO_Init+0x354>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002768:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <HAL_GPIO_Init+0x354>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	f67f ae86 	bls.w	8002488 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	40021c00 	.word	0x40021c00
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022400 	.word	0x40022400
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e108      	b.n	8002a16 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff faba 	bl	8001d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002832:	d102      	bne.n	800283a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f002 fcc8 	bl	80051d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7c1a      	ldrb	r2, [r3, #16]
 800284c:	f88d 2000 	strb.w	r2, [sp]
 8002850:	3304      	adds	r3, #4
 8002852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002854:	f002 fc64 	bl	8005120 <USB_CoreInit>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0d5      	b.n	8002a16 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fcc0 	bl	80051f6 <USB_SetCurrentMode>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0c6      	b.n	8002a16 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e04a      	b.n	8002924 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3315      	adds	r3, #21
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3314      	adds	r3, #20
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	b298      	uxth	r0, r3
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	332e      	adds	r3, #46	@ 0x2e
 80028ca:	4602      	mov	r2, r0
 80028cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3318      	adds	r3, #24
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	331c      	adds	r3, #28
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3320      	adds	r3, #32
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3324      	adds	r3, #36	@ 0x24
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	3301      	adds	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	791b      	ldrb	r3, [r3, #4]
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	429a      	cmp	r2, r3
 800292c:	d3af      	bcc.n	800288e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e044      	b.n	80029be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	791b      	ldrb	r3, [r3, #4]
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3b5      	bcc.n	8002934 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7c1a      	ldrb	r2, [r3, #16]
 80029d0:	f88d 2000 	strb.w	r2, [sp]
 80029d4:	3304      	adds	r3, #4
 80029d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d8:	f002 fc5a 	bl	8005290 <USB_DevInit>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e013      	b.n	8002a16 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b1b      	ldrb	r3, [r3, #12]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d102      	bne.n	8002a0a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f80b 	bl	8002a20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 fe15 	bl	800563e <USB_DevDisconnect>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a4e:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	10000003 	.word	0x10000003

08002a68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b23      	ldr	r3, [pc, #140]	@ (8002b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	4a22      	ldr	r2, [pc, #136]	@ (8002b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a96:	f7ff fbd5 	bl	8002244 <HAL_GetTick>
 8002a9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a9c:	e009      	b.n	8002ab2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a9e:	f7ff fbd1 	bl	8002244 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aac:	d901      	bls.n	8002ab2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e022      	b.n	8002af8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ab2:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abe:	d1ee      	bne.n	8002a9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ac0:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002acc:	f7ff fbba 	bl	8002244 <HAL_GetTick>
 8002ad0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ad2:	e009      	b.n	8002ae8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ad4:	f7ff fbb6 	bl	8002244 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ae2:	d901      	bls.n	8002ae8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e007      	b.n	8002af8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002af4:	d1ee      	bne.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40007000 	.word	0x40007000

08002b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e291      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8087 	beq.w	8002c3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b2c:	4b96      	ldr	r3, [pc, #600]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d00c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b38:	4b93      	ldr	r3, [pc, #588]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d112      	bne.n	8002b6a <HAL_RCC_OscConfig+0x62>
 8002b44:	4b90      	ldr	r3, [pc, #576]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b50:	d10b      	bne.n	8002b6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b52:	4b8d      	ldr	r3, [pc, #564]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x130>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d168      	bne.n	8002c38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e26b      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x7a>
 8002b74:	4b84      	ldr	r3, [pc, #528]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a83      	ldr	r2, [pc, #524]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	e02e      	b.n	8002be0 <HAL_RCC_OscConfig+0xd8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x9c>
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b7c      	ldr	r3, [pc, #496]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xd8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xc0>
 8002bae:	4b76      	ldr	r3, [pc, #472]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b73      	ldr	r3, [pc, #460]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xd8>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7ff fb2c 	bl	8002244 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7ff fb28 	bl	8002244 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	@ 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e21f      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b61      	ldr	r3, [pc, #388]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe8>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7ff fb18 	bl	8002244 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7ff fb14 	bl	8002244 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	@ 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e20b      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b57      	ldr	r3, [pc, #348]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x110>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d069      	beq.n	8002d1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c46:	4b50      	ldr	r3, [pc, #320]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b4d      	ldr	r3, [pc, #308]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x190>
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b47      	ldr	r3, [pc, #284]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x17a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1df      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	493d      	ldr	r1, [pc, #244]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e040      	b.n	8002d1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d023      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b39      	ldr	r3, [pc, #228]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a38      	ldr	r2, [pc, #224]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff faca 	bl	8002244 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff fac6 	bl	8002244 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1bd      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc6:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4929      	ldr	r1, [pc, #164]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
 8002ce6:	e018      	b.n	8002d1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a26      	ldr	r2, [pc, #152]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff faa6 	bl	8002244 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7ff faa2 	bl	8002244 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e199      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d038      	beq.n	8002d98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7ff fa83 	bl	8002244 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d42:	f7ff fa7f 	bl	8002244 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e176      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x23a>
 8002d60:	e01a      	b.n	8002d98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <HAL_RCC_OscConfig+0x280>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7ff fa69 	bl	8002244 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7ff fa65 	bl	8002244 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d903      	bls.n	8002d8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e15c      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
 8002d88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	4b91      	ldr	r3, [pc, #580]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a4 	beq.w	8002eee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da6:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10d      	bne.n	8002dce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b88      	ldr	r3, [pc, #544]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a87      	ldr	r2, [pc, #540]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b85      	ldr	r3, [pc, #532]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dce:	4b82      	ldr	r3, [pc, #520]	@ (8002fd8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dda:	4b7f      	ldr	r3, [pc, #508]	@ (8002fd8 <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7e      	ldr	r2, [pc, #504]	@ (8002fd8 <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff fa2d 	bl	8002244 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7ff fa29 	bl	8002244 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	@ 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e120      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e00:	4b75      	ldr	r3, [pc, #468]	@ (8002fd8 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x31a>
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e18:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e20:	e02d      	b.n	8002e7e <HAL_RCC_OscConfig+0x376>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x33c>
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	4a69      	ldr	r2, [pc, #420]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e36:	4b67      	ldr	r3, [pc, #412]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	4a66      	ldr	r2, [pc, #408]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e42:	e01c      	b.n	8002e7e <HAL_RCC_OscConfig+0x376>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCC_OscConfig+0x35e>
 8002e4c:	4b61      	ldr	r3, [pc, #388]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	4a60      	ldr	r2, [pc, #384]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e58:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e64:	e00b      	b.n	8002e7e <HAL_RCC_OscConfig+0x376>
 8002e66:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e72:	4b58      	ldr	r3, [pc, #352]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	4a57      	ldr	r2, [pc, #348]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7ff f9dd 	bl	8002244 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7ff f9d9 	bl	8002244 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0ce      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ee      	beq.n	8002e8e <HAL_RCC_OscConfig+0x386>
 8002eb0:	e014      	b.n	8002edc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7ff f9c7 	bl	8002244 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7ff f9c3 	bl	8002244 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	4b40      	ldr	r3, [pc, #256]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ee      	bne.n	8002eba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d105      	bne.n	8002eee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80a4 	beq.w	8003040 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef8:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d06b      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d149      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a30      	ldr	r2, [pc, #192]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7ff f994 	bl	8002244 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7ff f990 	bl	8002244 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e087      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	4313      	orrs	r3, r2
 8002f64:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7ff f964 	bl	8002244 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7ff f960 	bl	8002244 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e057      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x478>
 8002f9e:	e04f      	b.n	8003040 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff f94a 	bl	8002244 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7ff f946 	bl	8002244 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e03d      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_RCC_OscConfig+0x4cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4ac>
 8002fd2:	e035      	b.n	8003040 <HAL_RCC_OscConfig+0x538>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_OscConfig+0x544>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d028      	beq.n	800303c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d121      	bne.n	800303c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11a      	bne.n	800303c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003012:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003014:	4293      	cmp	r3, r2
 8003016:	d111      	bne.n	800303c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	3b01      	subs	r3, #1
 8003026:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b6a      	ldr	r3, [pc, #424]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b67      	ldr	r3, [pc, #412]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	4965      	ldr	r1, [pc, #404]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d040      	beq.n	8003174 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e073      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4936      	ldr	r1, [pc, #216]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7ff f87e 	bl	8002244 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7ff f87a 	bl	8002244 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e053      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2d      	ldr	r3, [pc, #180]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d210      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 020f 	bic.w	r2, r3, #15
 800318a:	4922      	ldr	r1, [pc, #136]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	@ (800321c <HAL_RCC_ClockConfig+0x1cc>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <HAL_RCC_ClockConfig+0x1d0>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCC_ClockConfig+0x1d4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fe42 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	0800ad84 	.word	0x0800ad84
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322c:	b094      	sub	sp, #80	@ 0x50
 800322e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	647b      	str	r3, [r7, #68]	@ 0x44
 8003234:	2300      	movs	r3, #0
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003238:	2300      	movs	r3, #0
 800323a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003240:	4b79      	ldr	r3, [pc, #484]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d00d      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 800324c:	2b08      	cmp	r3, #8
 800324e:	f200 80e1 	bhi.w	8003414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x34>
 8003256:	2b04      	cmp	r3, #4
 8003258:	d003      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x3a>
 800325a:	e0db      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b73      	ldr	r3, [pc, #460]	@ (800342c <HAL_RCC_GetSysClockFreq+0x204>)
 800325e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003260:	e0db      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b73      	ldr	r3, [pc, #460]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x208>)
 8003264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003266:	e0d8      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003268:	4b6f      	ldr	r3, [pc, #444]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003270:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003272:	4b6d      	ldr	r3, [pc, #436]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d063      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327e:	4b6a      	ldr	r3, [pc, #424]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	2200      	movs	r2, #0
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003288:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003290:	633b      	str	r3, [r7, #48]	@ 0x30
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
 8003296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	f04f 0000 	mov.w	r0, #0
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	0159      	lsls	r1, r3, #5
 80032a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ac:	0150      	lsls	r0, r2, #5
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4621      	mov	r1, r4
 80032b4:	1a51      	subs	r1, r2, r1
 80032b6:	6139      	str	r1, [r7, #16]
 80032b8:	4629      	mov	r1, r5
 80032ba:	eb63 0301 	sbc.w	r3, r3, r1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032cc:	4659      	mov	r1, fp
 80032ce:	018b      	lsls	r3, r1, #6
 80032d0:	4651      	mov	r1, sl
 80032d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032d6:	4651      	mov	r1, sl
 80032d8:	018a      	lsls	r2, r1, #6
 80032da:	4651      	mov	r1, sl
 80032dc:	ebb2 0801 	subs.w	r8, r2, r1
 80032e0:	4659      	mov	r1, fp
 80032e2:	eb63 0901 	sbc.w	r9, r3, r1
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032fa:	4690      	mov	r8, r2
 80032fc:	4699      	mov	r9, r3
 80032fe:	4623      	mov	r3, r4
 8003300:	eb18 0303 	adds.w	r3, r8, r3
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	462b      	mov	r3, r5
 8003308:	eb49 0303 	adc.w	r3, r9, r3
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800331a:	4629      	mov	r1, r5
 800331c:	024b      	lsls	r3, r1, #9
 800331e:	4621      	mov	r1, r4
 8003320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003324:	4621      	mov	r1, r4
 8003326:	024a      	lsls	r2, r1, #9
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800332e:	2200      	movs	r2, #0
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003338:	f7fc ffba 	bl	80002b0 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4613      	mov	r3, r2
 8003342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003344:	e058      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003346:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	2200      	movs	r2, #0
 800334e:	4618      	mov	r0, r3
 8003350:	4611      	mov	r1, r2
 8003352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	@ 0x24
 800335c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	f04f 0000 	mov.w	r0, #0
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	0159      	lsls	r1, r3, #5
 800336e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003372:	0150      	lsls	r0, r2, #5
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4641      	mov	r1, r8
 800337a:	ebb2 0a01 	subs.w	sl, r2, r1
 800337e:	4649      	mov	r1, r9
 8003380:	eb63 0b01 	sbc.w	fp, r3, r1
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003398:	ebb2 040a 	subs.w	r4, r2, sl
 800339c:	eb63 050b 	sbc.w	r5, r3, fp
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	00eb      	lsls	r3, r5, #3
 80033aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ae:	00e2      	lsls	r2, r4, #3
 80033b0:	4614      	mov	r4, r2
 80033b2:	461d      	mov	r5, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	18e3      	adds	r3, r4, r3
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	464b      	mov	r3, r9
 80033bc:	eb45 0303 	adc.w	r3, r5, r3
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ce:	4629      	mov	r1, r5
 80033d0:	028b      	lsls	r3, r1, #10
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d8:	4621      	mov	r1, r4
 80033da:	028a      	lsls	r2, r1, #10
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033e2:	2200      	movs	r2, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	61fa      	str	r2, [r7, #28]
 80033e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ec:	f7fc ff60 	bl	80002b0 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800340a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003412:	e002      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetSysClockFreq+0x204>)
 8003416:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800341c:	4618      	mov	r0, r3
 800341e:	3750      	adds	r7, #80	@ 0x50
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	@ (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	@ (800346c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a9b      	lsrs	r3, r3, #10
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	@ (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	0800ad94 	.word	0x0800ad94

08003474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003478:	f7ff ffdc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0b5b      	lsrs	r3, r3, #13
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	@ (8003498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	0800ad94 	.word	0x0800ad94

0800349c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	220f      	movs	r2, #15
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034ac:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034d0:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_RCC_GetClockConfig+0x60>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003528:	4b69      	ldr	r3, [pc, #420]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a68      	ldr	r2, [pc, #416]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	4b66      	ldr	r3, [pc, #408]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353c:	4964      	ldr	r1, [pc, #400]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355a:	4b5d      	ldr	r3, [pc, #372]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003560:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	4959      	ldr	r1, [pc, #356]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003596:	4b4e      	ldr	r3, [pc, #312]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800359c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	494a      	ldr	r1, [pc, #296]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 808b 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	4b3a      	ldr	r3, [pc, #232]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	4a39      	ldr	r2, [pc, #228]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f0:	4b37      	ldr	r3, [pc, #220]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035fc:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a34      	ldr	r2, [pc, #208]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fe fe1c 	bl	8002244 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fe fe18 	bl	8002244 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e357      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003622:	4b2c      	ldr	r3, [pc, #176]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800362e:	4b28      	ldr	r3, [pc, #160]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d035      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d02e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800364c:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003654:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	4b1e      	ldr	r3, [pc, #120]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	4a1d      	ldr	r2, [pc, #116]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003662:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a1a      	ldr	r2, [pc, #104]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003674:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d114      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fde0 	bl	8002244 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe fddc 	bl	8002244 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e319      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b6:	d111      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036c4:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036c6:	400b      	ands	r3, r1
 80036c8:	4901      	ldr	r1, [pc, #4]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40007000 	.word	0x40007000
 80036d8:	0ffffcff 	.word	0x0ffffcff
 80036dc:	4baa      	ldr	r3, [pc, #680]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4aa9      	ldr	r2, [pc, #676]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	4ba7      	ldr	r3, [pc, #668]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f4:	49a4      	ldr	r1, [pc, #656]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003706:	4ba0      	ldr	r3, [pc, #640]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800370c:	4a9e      	ldr	r2, [pc, #632]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003712:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003716:	4b9c      	ldr	r3, [pc, #624]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003718:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	4999      	ldr	r1, [pc, #612]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003734:	4b94      	ldr	r3, [pc, #592]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003742:	4991      	ldr	r1, [pc, #580]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003756:	4b8c      	ldr	r3, [pc, #560]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003764:	4988      	ldr	r1, [pc, #544]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003778:	4b83      	ldr	r3, [pc, #524]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003786:	4980      	ldr	r1, [pc, #512]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379a:	4b7b      	ldr	r3, [pc, #492]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4977      	ldr	r1, [pc, #476]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037bc:	4b72      	ldr	r3, [pc, #456]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	496f      	ldr	r1, [pc, #444]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037de:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e4:	f023 020c 	bic.w	r2, r3, #12
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ec:	4966      	ldr	r1, [pc, #408]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003800:	4b61      	ldr	r3, [pc, #388]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380e:	495e      	ldr	r1, [pc, #376]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003822:	4b59      	ldr	r3, [pc, #356]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003830:	4955      	ldr	r1, [pc, #340]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003844:	4b50      	ldr	r3, [pc, #320]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	494d      	ldr	r1, [pc, #308]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003866:	4b48      	ldr	r3, [pc, #288]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	4944      	ldr	r1, [pc, #272]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003888:	4b3f      	ldr	r3, [pc, #252]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	493c      	ldr	r1, [pc, #240]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038aa:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	4933      	ldr	r1, [pc, #204]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038da:	492b      	ldr	r1, [pc, #172]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d011      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ee:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038fc:	4922      	ldr	r1, [pc, #136]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392e:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003934:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393c:	4912      	ldr	r1, [pc, #72]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003950:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003956:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003960:	4909      	ldr	r1, [pc, #36]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d006      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80d9 	beq.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800397c:	4b02      	ldr	r3, [pc, #8]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a01      	ldr	r2, [pc, #4]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003982:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003986:	e001      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003988:	40023800 	.word	0x40023800
 800398c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398e:	f7fe fc59 	bl	8002244 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003996:	f7fe fc55 	bl	8002244 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b64      	cmp	r3, #100	@ 0x64
 80039a2:	d901      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e194      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f0      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d021      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11d      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039c8:	4b64      	ldr	r3, [pc, #400]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039d6:	4b61      	ldr	r3, [pc, #388]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	019a      	lsls	r2, r3, #6
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	071b      	lsls	r3, r3, #28
 80039fc:	4957      	ldr	r1, [pc, #348]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2e:	d129      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a30:	4b4a      	ldr	r3, [pc, #296]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a36:	0c1b      	lsrs	r3, r3, #16
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a3e:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a44:	0f1b      	lsrs	r3, r3, #28
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	019a      	lsls	r2, r3, #6
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	071b      	lsls	r3, r3, #28
 8003a64:	493d      	ldr	r1, [pc, #244]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a72:	f023 021f 	bic.w	r2, r3, #31
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	4937      	ldr	r1, [pc, #220]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a90:	4b32      	ldr	r3, [pc, #200]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a96:	0e1b      	lsrs	r3, r3, #24
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa4:	0f1b      	lsrs	r3, r3, #28
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	019a      	lsls	r2, r3, #6
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	071b      	lsls	r3, r3, #28
 8003ac4:	4925      	ldr	r1, [pc, #148]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d011      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	019a      	lsls	r2, r3, #6
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	071b      	lsls	r3, r3, #28
 8003af4:	4919      	ldr	r1, [pc, #100]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003afc:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b08:	f7fe fb9c 	bl	8002244 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b10:	f7fe fb98 	bl	8002244 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	@ 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0d7      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b22:	4b0e      	ldr	r3, [pc, #56]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 80cd 	bne.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b36:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b42:	f7fe fb7f 	bl	8002244 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b4a:	f7fe fb7b 	bl	8002244 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b64      	cmp	r3, #100	@ 0x64
 8003b56:	d903      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0ba      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b60:	4b5e      	ldr	r3, [pc, #376]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6c:	d0ed      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b96:	4b51      	ldr	r3, [pc, #324]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	0f1b      	lsrs	r3, r3, #28
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	019a      	lsls	r2, r3, #6
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	071b      	lsls	r3, r3, #28
 8003bca:	4944      	ldr	r1, [pc, #272]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bd2:	4b42      	ldr	r3, [pc, #264]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	493d      	ldr	r1, [pc, #244]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d022      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c00:	d11d      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c02:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c10:	4b32      	ldr	r3, [pc, #200]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	0f1b      	lsrs	r3, r3, #28
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	4929      	ldr	r1, [pc, #164]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d028      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	0e1b      	lsrs	r3, r3, #24
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c58:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	019a      	lsls	r2, r3, #6
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	4917      	ldr	r1, [pc, #92]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	4911      	ldr	r1, [pc, #68]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fe facc 	bl	8002244 <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb0:	f7fe fac8 	bl	8002244 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e007      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cce:	d1ef      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e01c      	b.n	8003d2c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	795b      	ldrb	r3, [r3, #5]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd ff88 	bl	8001c18 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0204 	orr.w	r2, r2, #4
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	791b      	ldrb	r3, [r3, #4]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_RNG_GenerateRandomNumber+0x1a>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e044      	b.n	8003dd8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	795b      	ldrb	r3, [r3, #5]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d133      	bne.n	8003dc6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d64:	f7fe fa6e 	bl	8002244 <HAL_GetTick>
 8003d68:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d6a:	e018      	b.n	8003d9e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003d6c:	f7fe fa6a 	bl	8002244 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d911      	bls.n	8003d9e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d00a      	beq.n	8003d9e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d1df      	bne.n	8003d6c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	715a      	strb	r2, [r3, #5]
 8003dc4:	e004      	b.n	8003dd0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	711a      	strb	r2, [r3, #4]

  return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2210      	movs	r2, #16
 8003e02:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003e04:	2301      	movs	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e009      	b.n	8003e1e <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2208      	movs	r2, #8
 8003e18:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d10b      	bne.n	8003e3c <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2204      	movs	r2, #4
 8003e28:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f837 	bl	8003e9e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8003e38:	605a      	str	r2, [r3, #4]

    return;
 8003e3a:	e022      	b.n	8003e82 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01d      	beq.n	8003e82 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0208 	bic.w	r2, r2, #8
 8003e54:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	795b      	ldrb	r3, [r3, #5]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d00b      	beq.n	8003e82 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f803 	bl	8003e88 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e049      	b.n	8003f58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fd fed9 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 faa7 	bl	8004444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d001      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e054      	b.n	8004022 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a26      	ldr	r2, [pc, #152]	@ (8004030 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d01d      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a22      	ldr	r2, [pc, #136]	@ (8004034 <HAL_TIM_Base_Start_IT+0xd4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a21      	ldr	r2, [pc, #132]	@ (8004038 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004040 <HAL_TIM_Base_Start_IT+0xe0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x80>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <HAL_TIM_Base_Start_IT+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d115      	bne.n	800400c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_TIM_Base_Start_IT+0xec>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d015      	beq.n	800401e <HAL_TIM_Base_Start_IT+0xbe>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff8:	d011      	beq.n	800401e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	e008      	b.n	800401e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e000      	b.n	8004020 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800
 800403c:	40000c00 	.word	0x40000c00
 8004040:	40010400 	.word	0x40010400
 8004044:	40014000 	.word	0x40014000
 8004048:	40001800 	.word	0x40001800
 800404c:	00010007 	.word	0x00010007

08004050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0202 	mvn.w	r2, #2
 8004084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9b4 	bl	8004408 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9a6 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f9b7 	bl	800441c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d020      	beq.n	8004100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0204 	mvn.w	r2, #4
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f98e 	bl	8004408 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f980 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f991 	bl	800441c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d020      	beq.n	800414c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01b      	beq.n	800414c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0208 	mvn.w	r2, #8
 800411c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2204      	movs	r2, #4
 8004122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f968 	bl	8004408 <HAL_TIM_IC_CaptureCallback>
 8004138:	e005      	b.n	8004146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f95a 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f96b 	bl	800441c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d020      	beq.n	8004198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01b      	beq.n	8004198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2208      	movs	r2, #8
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f942 	bl	8004408 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f934 	bl	80043f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f945 	bl	800441c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0201 	mvn.w	r2, #1
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd fc96 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80041e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fb0b 	bl	8004800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb03 	bl	8004814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8ff 	bl	8004430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f06f 0220 	mvn.w	r2, #32
 800424e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 facb 	bl	80047ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIM_ConfigClockSource+0x1c>
 8004278:	2302      	movs	r3, #2
 800427a:	e0b4      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x186>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4b56      	ldr	r3, [pc, #344]	@ (80043f0 <HAL_TIM_ConfigClockSource+0x190>)
 8004298:	4013      	ands	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b4:	d03e      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0xd4>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ba:	f200 8087 	bhi.w	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c2:	f000 8086 	beq.w	80043d2 <HAL_TIM_ConfigClockSource+0x172>
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d87f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b70      	cmp	r3, #112	@ 0x70
 80042ce:	d01a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xa6>
 80042d0:	2b70      	cmp	r3, #112	@ 0x70
 80042d2:	d87b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b60      	cmp	r3, #96	@ 0x60
 80042d6:	d050      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x11a>
 80042d8:	2b60      	cmp	r3, #96	@ 0x60
 80042da:	d877      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b50      	cmp	r3, #80	@ 0x50
 80042de:	d03c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xfa>
 80042e0:	2b50      	cmp	r3, #80	@ 0x50
 80042e2:	d873      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d058      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x13a>
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d86f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b30      	cmp	r3, #48	@ 0x30
 80042ee:	d064      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	2b30      	cmp	r3, #48	@ 0x30
 80042f2:	d86b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d060      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d867      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	2b10      	cmp	r3, #16
 8004302:	d05a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 8004304:	e062      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004316:	f000 f9bb 	bl	8004690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	609a      	str	r2, [r3, #8]
      break;
 8004332:	e04f      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004344:	f000 f9a4 	bl	8004690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e03c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f918 	bl	800459c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2150      	movs	r1, #80	@ 0x50
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f971 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 8004378:	e02c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004386:	461a      	mov	r2, r3
 8004388:	f000 f937 	bl	80045fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2160      	movs	r1, #96	@ 0x60
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f961 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 8004398:	e01c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 f8f8 	bl	800459c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2140      	movs	r1, #64	@ 0x40
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f951 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 f948 	bl	800465a <TIM_ITRx_SetConfig>
      break;
 80043ca:	e003      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e000      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	fffeff88 	.word	0xfffeff88

080043f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <TIM_Base_SetConfig+0x12c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a43      	ldr	r2, [pc, #268]	@ (8004574 <TIM_Base_SetConfig+0x130>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a42      	ldr	r2, [pc, #264]	@ (8004578 <TIM_Base_SetConfig+0x134>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a41      	ldr	r2, [pc, #260]	@ (800457c <TIM_Base_SetConfig+0x138>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a40      	ldr	r2, [pc, #256]	@ (8004580 <TIM_Base_SetConfig+0x13c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a35      	ldr	r2, [pc, #212]	@ (8004570 <TIM_Base_SetConfig+0x12c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a4:	d027      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a32      	ldr	r2, [pc, #200]	@ (8004574 <TIM_Base_SetConfig+0x130>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d023      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a31      	ldr	r2, [pc, #196]	@ (8004578 <TIM_Base_SetConfig+0x134>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a30      	ldr	r2, [pc, #192]	@ (800457c <TIM_Base_SetConfig+0x138>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004580 <TIM_Base_SetConfig+0x13c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d017      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004584 <TIM_Base_SetConfig+0x140>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <TIM_Base_SetConfig+0x144>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2c      	ldr	r2, [pc, #176]	@ (800458c <TIM_Base_SetConfig+0x148>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <TIM_Base_SetConfig+0x14c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <TIM_Base_SetConfig+0x150>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a29      	ldr	r2, [pc, #164]	@ (8004598 <TIM_Base_SetConfig+0x154>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a10      	ldr	r2, [pc, #64]	@ (8004570 <TIM_Base_SetConfig+0x12c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <TIM_Base_SetConfig+0x13c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]
  }
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40010400 	.word	0x40010400
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800
 8004590:	40001800 	.word	0x40001800
 8004594:	40001c00 	.word	0x40001c00
 8004598:	40002000 	.word	0x40002000

0800459c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 030a 	bic.w	r3, r3, #10
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f023 0210 	bic.w	r2, r3, #16
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004636:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	f043 0307 	orr.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e06d      	b.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a30      	ldr	r2, [pc, #192]	@ (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2f      	ldr	r2, [pc, #188]	@ (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a20      	ldr	r2, [pc, #128]	@ (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475a:	d01d      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1a      	ldr	r2, [pc, #104]	@ (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a15      	ldr	r2, [pc, #84]	@ (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	@ (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10c      	bne.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800479e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e040      	b.n	80048bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fa44 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	@ 0x24
 8004854:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa8c 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f825 	bl	80048c4 <UART_SetConfig>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e01b      	b.n	80048bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb0b 	bl	8004ed0 <UART_CheckIdleState>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004b88 <UART_SetConfig+0x2c4>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a94      	ldr	r2, [pc, #592]	@ (8004b8c <UART_SetConfig+0x2c8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d120      	bne.n	8004982 <UART_SetConfig+0xbe>
 8004940:	4b93      	ldr	r3, [pc, #588]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b03      	cmp	r3, #3
 800494c:	d816      	bhi.n	800497c <UART_SetConfig+0xb8>
 800494e:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <UART_SetConfig+0x90>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	08004965 	.word	0x08004965
 8004958:	08004971 	.word	0x08004971
 800495c:	0800496b 	.word	0x0800496b
 8004960:	08004977 	.word	0x08004977
 8004964:	2301      	movs	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e150      	b.n	8004c0c <UART_SetConfig+0x348>
 800496a:	2302      	movs	r3, #2
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e14d      	b.n	8004c0c <UART_SetConfig+0x348>
 8004970:	2304      	movs	r3, #4
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e14a      	b.n	8004c0c <UART_SetConfig+0x348>
 8004976:	2308      	movs	r3, #8
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e147      	b.n	8004c0c <UART_SetConfig+0x348>
 800497c:	2310      	movs	r3, #16
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e144      	b.n	8004c0c <UART_SetConfig+0x348>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a83      	ldr	r2, [pc, #524]	@ (8004b94 <UART_SetConfig+0x2d0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d132      	bne.n	80049f2 <UART_SetConfig+0x12e>
 800498c:	4b80      	ldr	r3, [pc, #512]	@ (8004b90 <UART_SetConfig+0x2cc>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d828      	bhi.n	80049ec <UART_SetConfig+0x128>
 800499a:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <UART_SetConfig+0xdc>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049d5 	.word	0x080049d5
 80049a4:	080049ed 	.word	0x080049ed
 80049a8:	080049ed 	.word	0x080049ed
 80049ac:	080049ed 	.word	0x080049ed
 80049b0:	080049e1 	.word	0x080049e1
 80049b4:	080049ed 	.word	0x080049ed
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	080049ed 	.word	0x080049ed
 80049c0:	080049db 	.word	0x080049db
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	080049ed 	.word	0x080049ed
 80049d0:	080049e7 	.word	0x080049e7
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e118      	b.n	8004c0c <UART_SetConfig+0x348>
 80049da:	2302      	movs	r3, #2
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e115      	b.n	8004c0c <UART_SetConfig+0x348>
 80049e0:	2304      	movs	r3, #4
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e112      	b.n	8004c0c <UART_SetConfig+0x348>
 80049e6:	2308      	movs	r3, #8
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e10f      	b.n	8004c0c <UART_SetConfig+0x348>
 80049ec:	2310      	movs	r3, #16
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e10c      	b.n	8004c0c <UART_SetConfig+0x348>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a68      	ldr	r2, [pc, #416]	@ (8004b98 <UART_SetConfig+0x2d4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d120      	bne.n	8004a3e <UART_SetConfig+0x17a>
 80049fc:	4b64      	ldr	r3, [pc, #400]	@ (8004b90 <UART_SetConfig+0x2cc>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a06:	2b30      	cmp	r3, #48	@ 0x30
 8004a08:	d013      	beq.n	8004a32 <UART_SetConfig+0x16e>
 8004a0a:	2b30      	cmp	r3, #48	@ 0x30
 8004a0c:	d814      	bhi.n	8004a38 <UART_SetConfig+0x174>
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d009      	beq.n	8004a26 <UART_SetConfig+0x162>
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d810      	bhi.n	8004a38 <UART_SetConfig+0x174>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <UART_SetConfig+0x15c>
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d006      	beq.n	8004a2c <UART_SetConfig+0x168>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x174>
 8004a20:	2300      	movs	r3, #0
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e0f2      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a26:	2302      	movs	r3, #2
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e0ef      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e0ec      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a32:	2308      	movs	r3, #8
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e0e9      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e0e6      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a56      	ldr	r2, [pc, #344]	@ (8004b9c <UART_SetConfig+0x2d8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d120      	bne.n	8004a8a <UART_SetConfig+0x1c6>
 8004a48:	4b51      	ldr	r3, [pc, #324]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a54:	d013      	beq.n	8004a7e <UART_SetConfig+0x1ba>
 8004a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a58:	d814      	bhi.n	8004a84 <UART_SetConfig+0x1c0>
 8004a5a:	2b80      	cmp	r3, #128	@ 0x80
 8004a5c:	d009      	beq.n	8004a72 <UART_SetConfig+0x1ae>
 8004a5e:	2b80      	cmp	r3, #128	@ 0x80
 8004a60:	d810      	bhi.n	8004a84 <UART_SetConfig+0x1c0>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <UART_SetConfig+0x1a8>
 8004a66:	2b40      	cmp	r3, #64	@ 0x40
 8004a68:	d006      	beq.n	8004a78 <UART_SetConfig+0x1b4>
 8004a6a:	e00b      	b.n	8004a84 <UART_SetConfig+0x1c0>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e0cc      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a72:	2302      	movs	r3, #2
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e0c9      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e0c6      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a7e:	2308      	movs	r3, #8
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e0c3      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a84:	2310      	movs	r3, #16
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e0c0      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a44      	ldr	r2, [pc, #272]	@ (8004ba0 <UART_SetConfig+0x2dc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d125      	bne.n	8004ae0 <UART_SetConfig+0x21c>
 8004a94:	4b3e      	ldr	r3, [pc, #248]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa2:	d017      	beq.n	8004ad4 <UART_SetConfig+0x210>
 8004aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa8:	d817      	bhi.n	8004ada <UART_SetConfig+0x216>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aae:	d00b      	beq.n	8004ac8 <UART_SetConfig+0x204>
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab4:	d811      	bhi.n	8004ada <UART_SetConfig+0x216>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <UART_SetConfig+0x1fe>
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x20a>
 8004ac0:	e00b      	b.n	8004ada <UART_SetConfig+0x216>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e0a1      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e09e      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e09b      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e098      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ada:	2310      	movs	r3, #16
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e095      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba4 <UART_SetConfig+0x2e0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d125      	bne.n	8004b36 <UART_SetConfig+0x272>
 8004aea:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004af4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004af8:	d017      	beq.n	8004b2a <UART_SetConfig+0x266>
 8004afa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004afe:	d817      	bhi.n	8004b30 <UART_SetConfig+0x26c>
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b04:	d00b      	beq.n	8004b1e <UART_SetConfig+0x25a>
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0a:	d811      	bhi.n	8004b30 <UART_SetConfig+0x26c>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <UART_SetConfig+0x254>
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b14:	d006      	beq.n	8004b24 <UART_SetConfig+0x260>
 8004b16:	e00b      	b.n	8004b30 <UART_SetConfig+0x26c>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e076      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e073      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b24:	2304      	movs	r3, #4
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e070      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e06d      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b30:	2310      	movs	r3, #16
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e06a      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <UART_SetConfig+0x2e4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d138      	bne.n	8004bb2 <UART_SetConfig+0x2ee>
 8004b40:	4b13      	ldr	r3, [pc, #76]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b4e:	d017      	beq.n	8004b80 <UART_SetConfig+0x2bc>
 8004b50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b54:	d82a      	bhi.n	8004bac <UART_SetConfig+0x2e8>
 8004b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b5a:	d00b      	beq.n	8004b74 <UART_SetConfig+0x2b0>
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b60:	d824      	bhi.n	8004bac <UART_SetConfig+0x2e8>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <UART_SetConfig+0x2aa>
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6a:	d006      	beq.n	8004b7a <UART_SetConfig+0x2b6>
 8004b6c:	e01e      	b.n	8004bac <UART_SetConfig+0x2e8>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e04b      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b74:	2302      	movs	r3, #2
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e048      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e045      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b80:	2308      	movs	r3, #8
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e042      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b86:	bf00      	nop
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40004400 	.word	0x40004400
 8004b98:	40004800 	.word	0x40004800
 8004b9c:	40004c00 	.word	0x40004c00
 8004ba0:	40005000 	.word	0x40005000
 8004ba4:	40011400 	.word	0x40011400
 8004ba8:	40007800 	.word	0x40007800
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e02c      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a72      	ldr	r2, [pc, #456]	@ (8004d80 <UART_SetConfig+0x4bc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d125      	bne.n	8004c08 <UART_SetConfig+0x344>
 8004bbc:	4b71      	ldr	r3, [pc, #452]	@ (8004d84 <UART_SetConfig+0x4c0>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bc6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bca:	d017      	beq.n	8004bfc <UART_SetConfig+0x338>
 8004bcc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bd0:	d817      	bhi.n	8004c02 <UART_SetConfig+0x33e>
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd6:	d00b      	beq.n	8004bf0 <UART_SetConfig+0x32c>
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bdc:	d811      	bhi.n	8004c02 <UART_SetConfig+0x33e>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <UART_SetConfig+0x326>
 8004be2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004be6:	d006      	beq.n	8004bf6 <UART_SetConfig+0x332>
 8004be8:	e00b      	b.n	8004c02 <UART_SetConfig+0x33e>
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e00d      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e00a      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e007      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e004      	b.n	8004c0c <UART_SetConfig+0x348>
 8004c02:	2310      	movs	r3, #16
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e001      	b.n	8004c0c <UART_SetConfig+0x348>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c14:	d15b      	bne.n	8004cce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c16:	7ffb      	ldrb	r3, [r7, #31]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d828      	bhi.n	8004c6e <UART_SetConfig+0x3aa>
 8004c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <UART_SetConfig+0x360>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c59 	.word	0x08004c59
 8004c30:	08004c6f 	.word	0x08004c6f
 8004c34:	08004c5f 	.word	0x08004c5f
 8004c38:	08004c6f 	.word	0x08004c6f
 8004c3c:	08004c6f 	.word	0x08004c6f
 8004c40:	08004c6f 	.word	0x08004c6f
 8004c44:	08004c67 	.word	0x08004c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fe fc00 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004c4c:	61b8      	str	r0, [r7, #24]
        break;
 8004c4e:	e013      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c50:	f7fe fc10 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 8004c54:	61b8      	str	r0, [r7, #24]
        break;
 8004c56:	e00f      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c58:	4b4b      	ldr	r3, [pc, #300]	@ (8004d88 <UART_SetConfig+0x4c4>)
 8004c5a:	61bb      	str	r3, [r7, #24]
        break;
 8004c5c:	e00c      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c5e:	f7fe fae3 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 8004c62:	61b8      	str	r0, [r7, #24]
        break;
 8004c64:	e008      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6a:	61bb      	str	r3, [r7, #24]
        break;
 8004c6c:	e004      	b.n	8004c78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	77bb      	strb	r3, [r7, #30]
        break;
 8004c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d074      	beq.n	8004d68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	005a      	lsls	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b0f      	cmp	r3, #15
 8004c98:	d916      	bls.n	8004cc8 <UART_SetConfig+0x404>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca0:	d212      	bcs.n	8004cc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f023 030f 	bic.w	r3, r3, #15
 8004caa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	89fa      	ldrh	r2, [r7, #14]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	e04f      	b.n	8004d68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	77bb      	strb	r3, [r7, #30]
 8004ccc:	e04c      	b.n	8004d68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d828      	bhi.n	8004d26 <UART_SetConfig+0x462>
 8004cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <UART_SetConfig+0x418>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d17 	.word	0x08004d17
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d27 	.word	0x08004d27
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fe fba4 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004d04:	61b8      	str	r0, [r7, #24]
        break;
 8004d06:	e013      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fbb4 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	61b8      	str	r0, [r7, #24]
        break;
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <UART_SetConfig+0x4c4>)
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e00c      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe fa87 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 8004d1a:	61b8      	str	r0, [r7, #24]
        break;
 8004d1c:	e008      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d22:	61bb      	str	r3, [r7, #24]
        break;
 8004d24:	e004      	b.n	8004d30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	085a      	lsrs	r2, r3, #1
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	441a      	add	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b0f      	cmp	r3, #15
 8004d4e:	d909      	bls.n	8004d64 <UART_SetConfig+0x4a0>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d56:	d205      	bcs.n	8004d64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e001      	b.n	8004d68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40007c00 	.word	0x40007c00
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	@ 0x30
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee0:	f7fd f9b0 	bl	8002244 <HAL_GetTick>
 8004ee4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d12e      	bne.n	8004f52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f83b 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d021      	beq.n	8004f52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e011      	b.n	8004f76 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3728      	adds	r7, #40	@ 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8e:	e04f      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d04b      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f98:	f7fd f954 	bl	8002244 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04e      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d037      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d034      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d031      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d110      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f838 	bl	8005058 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2208      	movs	r2, #8
 8004fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e029      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500a:	d111      	bne.n	8005030 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005014:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f81e 	bl	8005058 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e00f      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	429a      	cmp	r2, r3
 800504c:	d0a0      	beq.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b095      	sub	sp, #84	@ 0x54
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800507e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005080:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005084:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d118      	bne.n	8005100 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	60bb      	str	r3, [r7, #8]
   return(result);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6979      	ldr	r1, [r7, #20]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	613b      	str	r3, [r7, #16]
   return(result);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e6      	bne.n	80050ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005114:	bf00      	nop
 8005116:	3754      	adds	r7, #84	@ 0x54
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005120:	b084      	sub	sp, #16
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	f107 001c 	add.w	r0, r7, #28
 800512e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005132:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005136:	2b01      	cmp	r3, #1
 8005138:	d121      	bne.n	800517e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	4b21      	ldr	r3, [pc, #132]	@ (80051d0 <USB_CoreInit+0xb0>)
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800515e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005162:	2b01      	cmp	r3, #1
 8005164:	d105      	bne.n	8005172 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa92 	bl	800569c <USB_CoreReset>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e010      	b.n	80051a0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fa86 	bl	800569c <USB_CoreReset>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80051a0:	7fbb      	ldrb	r3, [r7, #30]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10b      	bne.n	80051be <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f043 0206 	orr.w	r2, r3, #6
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ca:	b004      	add	sp, #16
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	ffbdffbf 	.word	0xffbdffbf

080051d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f023 0201 	bic.w	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d115      	bne.n	8005244 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005224:	200a      	movs	r0, #10
 8005226:	f7fd f819 	bl	800225c <HAL_Delay>
      ms += 10U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	330a      	adds	r3, #10
 800522e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa25 	bl	8005680 <USB_GetMode>
 8005236:	4603      	mov	r3, r0
 8005238:	2b01      	cmp	r3, #1
 800523a:	d01e      	beq.n	800527a <USB_SetCurrentMode+0x84>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005240:	d9f0      	bls.n	8005224 <USB_SetCurrentMode+0x2e>
 8005242:	e01a      	b.n	800527a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d115      	bne.n	8005276 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005256:	200a      	movs	r0, #10
 8005258:	f7fd f800 	bl	800225c <HAL_Delay>
      ms += 10U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	330a      	adds	r3, #10
 8005260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa0c 	bl	8005680 <USB_GetMode>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <USB_SetCurrentMode+0x84>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2bc7      	cmp	r3, #199	@ 0xc7
 8005272:	d9f0      	bls.n	8005256 <USB_SetCurrentMode+0x60>
 8005274:	e001      	b.n	800527a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e005      	b.n	8005286 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2bc8      	cmp	r3, #200	@ 0xc8
 800527e:	d101      	bne.n	8005284 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005290:	b084      	sub	sp, #16
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800529e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	e009      	b.n	80052c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3340      	adds	r3, #64	@ 0x40
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	3301      	adds	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0e      	cmp	r3, #14
 80052c8:	d9f2      	bls.n	80052b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d11c      	bne.n	800530c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e005      	b.n	8005318 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800531e:	461a      	mov	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005324:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10d      	bne.n	8005348 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800532c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f968 	bl	800560c <USB_SetDevSpeed>
 800533c:	e008      	b.n	8005350 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800533e:	2101      	movs	r1, #1
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f963 	bl	800560c <USB_SetDevSpeed>
 8005346:	e003      	b.n	8005350 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005348:	2103      	movs	r1, #3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f95e 	bl	800560c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005350:	2110      	movs	r1, #16
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8fa 	bl	800554c <USB_FlushTxFifo>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f924 	bl	80055b0 <USB_FlushRxFifo>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005378:	461a      	mov	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005384:	461a      	mov	r2, r3
 8005386:	2300      	movs	r3, #0
 8005388:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e043      	b.n	8005424 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b2:	d118      	bne.n	80053e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c6:	461a      	mov	r2, r3
 80053c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e013      	b.n	80053f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053dc:	461a      	mov	r2, r3
 80053de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e008      	b.n	80053f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f2:	461a      	mov	r2, r3
 80053f4:	2300      	movs	r3, #0
 80053f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005416:	461a      	mov	r2, r3
 8005418:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800541c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	3301      	adds	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005428:	461a      	mov	r2, r3
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4293      	cmp	r3, r2
 800542e:	d3b5      	bcc.n	800539c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e043      	b.n	80054be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800544c:	d118      	bne.n	8005480 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	461a      	mov	r2, r3
 8005462:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e013      	b.n	8005492 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e008      	b.n	8005492 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	2300      	movs	r3, #0
 8005490:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b0:	461a      	mov	r2, r3
 80054b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	3301      	adds	r3, #1
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054c2:	461a      	mov	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d3b5      	bcc.n	8005436 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80054ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f043 0210 	orr.w	r2, r3, #16
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	4b0f      	ldr	r3, [pc, #60]	@ (8005544 <USB_DevInit+0x2b4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800550c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f043 0208 	orr.w	r2, r3, #8
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005520:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <USB_DevInit+0x2b8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr
 8005544:	803c3800 	.word	0x803c3800
 8005548:	40000004 	.word	0x40000004

0800554c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3301      	adds	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005566:	d901      	bls.n	800556c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e01b      	b.n	80055a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	daf2      	bge.n	800555a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	019b      	lsls	r3, r3, #6
 800557c:	f043 0220 	orr.w	r2, r3, #32
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005590:	d901      	bls.n	8005596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e006      	b.n	80055a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d0f0      	beq.n	8005584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055c8:	d901      	bls.n	80055ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e018      	b.n	8005600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	daf2      	bge.n	80055bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2210      	movs	r2, #16
 80055de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055ec:	d901      	bls.n	80055f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e006      	b.n	8005600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d0f0      	beq.n	80055e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800562c:	4313      	orrs	r3, r2
 800562e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0301 	and.w	r3, r3, #1
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056b4:	d901      	bls.n	80056ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e01b      	b.n	80056f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	daf2      	bge.n	80056a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056de:	d901      	bls.n	80056e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d0f0      	beq.n	80056d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a07      	ldr	r2, [pc, #28]	@ (800572c <vApplicationGetIdleTaskMemory+0x2c>)
 8005710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4a06      	ldr	r2, [pc, #24]	@ (8005730 <vApplicationGetIdleTaskMemory+0x30>)
 8005716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2280      	movs	r2, #128	@ 0x80
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	2000072c 	.word	0x2000072c
 8005730:	200007d4 	.word	0x200007d4

08005734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <vApplicationGetTimerTaskMemory+0x2c>)
 8005744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a06      	ldr	r2, [pc, #24]	@ (8005764 <vApplicationGetTimerTaskMemory+0x30>)
 800574a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	200009d4 	.word	0x200009d4
 8005764:	20000a7c 	.word	0x20000a7c

08005768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f103 0208 	add.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f103 0208 	add.w	r2, r3, #8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 0208 	add.w	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e00c      	b.n	8005844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3308      	adds	r3, #8
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e002      	b.n	8005838 <vListInsert+0x2e>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d2f6      	bcs.n	8005832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6892      	ldr	r2, [r2, #8]
 8005892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d103      	bne.n	80058b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10d      	bne.n	8005900 <xQueueGenericReset+0x30>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	b672      	cpsid	i
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	b662      	cpsie	i
 80058f8:	60bb      	str	r3, [r7, #8]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005900:	f002 fdd4 	bl	80084ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005930:	3b01      	subs	r3, #1
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	441a      	add	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	22ff      	movs	r2, #255	@ 0xff
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22ff      	movs	r2, #255	@ 0xff
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d114      	bne.n	8005980 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01a      	beq.n	8005994 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3310      	adds	r3, #16
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fb60 	bl	8007028 <xTaskRemoveFromEventList>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <xQueueGenericReset+0xd4>)
 8005970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	e009      	b.n	8005994 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3310      	adds	r3, #16
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff feef 	bl	8005768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3324      	adds	r3, #36	@ 0x24
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff feea 	bl	8005768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005994:	f002 fdc0 	bl	8008518 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005998:	2301      	movs	r3, #1
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	@ 0x38
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10d      	bne.n	80059d8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	b672      	cpsid	i
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	b662      	cpsie	i
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	b672      	cpsid	i
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	b662      	cpsie	i
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <xQueueGenericCreateStatic+0x5e>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <xQueueGenericCreateStatic+0x62>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <xQueueGenericCreateStatic+0x64>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10d      	bne.n	8005a2c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	b672      	cpsid	i
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	b662      	cpsie	i
 8005a24:	623b      	str	r3, [r7, #32]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <xQueueGenericCreateStatic+0x90>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <xQueueGenericCreateStatic+0x94>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <xQueueGenericCreateStatic+0x96>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10d      	bne.n	8005a5e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	b672      	cpsid	i
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	b662      	cpsie	i
 8005a56:	61fb      	str	r3, [r7, #28]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a5e:	2350      	movs	r3, #80	@ 0x50
 8005a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b50      	cmp	r3, #80	@ 0x50
 8005a66:	d00d      	beq.n	8005a84 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	b672      	cpsid	i
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	b662      	cpsie	i
 8005a7c:	61bb      	str	r3, [r7, #24]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f848 	bl	8005b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3730      	adds	r7, #48	@ 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08a      	sub	sp, #40	@ 0x28
 8005aba:	af02      	add	r7, sp, #8
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10d      	bne.n	8005ae6 <xQueueGenericCreate+0x30>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	b672      	cpsid	i
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	b662      	cpsie	i
 8005ade:	613b      	str	r3, [r7, #16]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e004      	b.n	8005afc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	fb02 f303 	mul.w	r3, r2, r3
 8005afa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	3350      	adds	r3, #80	@ 0x50
 8005b00:	4618      	mov	r0, r3
 8005b02:	f002 fe01 	bl	8008708 <pvPortMalloc>
 8005b06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d011      	beq.n	8005b32 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	3350      	adds	r3, #80	@ 0x50
 8005b16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b20:	79fa      	ldrb	r2, [r7, #7]
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f805 	bl	8005b3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b32:	69bb      	ldr	r3, [r7, #24]
	}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3720      	adds	r7, #32
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e002      	b.n	8005b5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	69b8      	ldr	r0, [r7, #24]
 8005b6e:	f7ff feaf 	bl	80058d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	78fa      	ldrb	r2, [r7, #3]
 8005b76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f81d 	bl	8005be8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6939      	ldr	r1, [r7, #16]
 8005bce:	6978      	ldr	r0, [r7, #20]
 8005bd0:	f7ff ff71 	bl	8005ab6 <xQueueGenericCreate>
 8005bd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff ffd3 	bl	8005b82 <prvInitialiseMutex>

		return xNewQueue;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
	}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08e      	sub	sp, #56	@ 0x38
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10d      	bne.n	8005c20 <xQueueGenericSend+0x38>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	b672      	cpsid	i
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	b662      	cpsie	i
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <xQueueGenericSend+0x46>
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <xQueueGenericSend+0x4a>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <xQueueGenericSend+0x4c>
 8005c32:	2300      	movs	r3, #0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <xQueueGenericSend+0x6c>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	b672      	cpsid	i
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	b662      	cpsie	i
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSend+0x7a>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <xQueueGenericSend+0x7e>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueGenericSend+0x80>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10d      	bne.n	8005c88 <xQueueGenericSend+0xa0>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	b672      	cpsid	i
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	b662      	cpsie	i
 8005c80:	623b      	str	r3, [r7, #32]
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	e7fd      	b.n	8005c84 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c88:	f001 fb9c 	bl	80073c4 <xTaskGetSchedulerState>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <xQueueGenericSend+0xb0>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <xQueueGenericSend+0xb4>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <xQueueGenericSend+0xb6>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10d      	bne.n	8005cbe <xQueueGenericSend+0xd6>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	b672      	cpsid	i
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	b662      	cpsie	i
 8005cb6:	61fb      	str	r3, [r7, #28]
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	e7fd      	b.n	8005cba <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cbe:	f002 fbf5 	bl	80084ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d302      	bcc.n	8005cd4 <xQueueGenericSend+0xec>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d129      	bne.n	8005d28 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cda:	f000 fb8d 	bl	80063f8 <prvCopyDataToQueue>
 8005cde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	3324      	adds	r3, #36	@ 0x24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f99b 	bl	8007028 <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d013      	beq.n	8005d20 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8005df8 <xQueueGenericSend+0x210>)
 8005cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	e00a      	b.n	8005d20 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d10:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <xQueueGenericSend+0x210>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d20:	f002 fbfa 	bl	8008518 <vPortExitCritical>
				return pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e063      	b.n	8005df0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2e:	f002 fbf3 	bl	8008518 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e05c      	b.n	8005df0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 f9d7 	bl	80070f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4a:	f002 fbe5 	bl	8008518 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4e:	f000 ff33 	bl	8006bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d52:	f002 fbab 	bl	80084ac <vPortEnterCritical>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueGenericSend+0x184>
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSend+0x19a>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d82:	f002 fbc9 	bl	8008518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f9c6 	bl	8007120 <xTaskCheckForTimeOut>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d124      	bne.n	8005de4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d9c:	f000 fc24 	bl	80065e8 <prvIsQueueFull>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	3310      	adds	r3, #16
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 f8e4 	bl	8006f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db6:	f000 fbaf 	bl	8006518 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f000 ff0b 	bl	8006bd4 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f47f af7c 	bne.w	8005cbe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005df8 <xQueueGenericSend+0x210>)
 8005dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	e772      	b.n	8005cbe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dda:	f000 fb9d 	bl	8006518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dde:	f000 fef9 	bl	8006bd4 <xTaskResumeAll>
 8005de2:	e76c      	b.n	8005cbe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005de6:	f000 fb97 	bl	8006518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dea:	f000 fef3 	bl	8006bd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3738      	adds	r7, #56	@ 0x38
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e18:	b672      	cpsid	i
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	b662      	cpsie	i
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <xQueueGenericSendFromISR+0x42>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <xQueueGenericSendFromISR+0x46>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <xQueueGenericSendFromISR+0x48>
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	b672      	cpsid	i
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	b662      	cpsie	i
 8005e5c:	623b      	str	r3, [r7, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d103      	bne.n	8005e72 <xQueueGenericSendFromISR+0x76>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <xQueueGenericSendFromISR+0x7a>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <xQueueGenericSendFromISR+0x7c>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	b672      	cpsid	i
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	b662      	cpsie	i
 8005e90:	61fb      	str	r3, [r7, #28]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e98:	f002 fbf0 	bl	800867c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e9c:	f3ef 8211 	mrs	r2, BASEPRI
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	b672      	cpsid	i
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	b662      	cpsie	i
 8005eb4:	61ba      	str	r2, [r7, #24]
 8005eb6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <xQueueGenericSendFromISR+0xd2>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d12c      	bne.n	8005f28 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ede:	f000 fa8b 	bl	80063f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ee2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d112      	bne.n	8005f12 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	3324      	adds	r3, #36	@ 0x24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f895 	bl	8007028 <xTaskRemoveFromEventList>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00e      	beq.n	8005f22 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e007      	b.n	8005f22 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f16:	3301      	adds	r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	b25a      	sxtb	r2, r3
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f22:	2301      	movs	r3, #1
 8005f24:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005f26:	e001      	b.n	8005f2c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3738      	adds	r7, #56	@ 0x38
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08c      	sub	sp, #48	@ 0x30
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f50:	2300      	movs	r3, #0
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <xQueueReceive+0x36>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	b672      	cpsid	i
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	b662      	cpsie	i
 8005f72:	623b      	str	r3, [r7, #32]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <xQueueReceive+0x44>
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueReceive+0x48>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueReceive+0x4a>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <xQueueReceive+0x6a>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	b672      	cpsid	i
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	b662      	cpsie	i
 8005fa6:	61fb      	str	r3, [r7, #28]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fae:	f001 fa09 	bl	80073c4 <xTaskGetSchedulerState>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <xQueueReceive+0x7a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xQueueReceive+0x7e>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <xQueueReceive+0x80>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10d      	bne.n	8005fe4 <xQueueReceive+0xa0>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	b672      	cpsid	i
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	b662      	cpsie	i
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fe4:	f002 fa62 	bl	80084ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01f      	beq.n	8006034 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ff8:	f000 fa68 	bl	80064cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	1e5a      	subs	r2, r3, #1
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00f      	beq.n	800602c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	3310      	adds	r3, #16
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f809 	bl	8007028 <xTaskRemoveFromEventList>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800601c:	4b3c      	ldr	r3, [pc, #240]	@ (8006110 <xQueueReceive+0x1cc>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800602c:	f002 fa74 	bl	8008518 <vPortExitCritical>
				return pdPASS;
 8006030:	2301      	movs	r3, #1
 8006032:	e069      	b.n	8006108 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800603a:	f002 fa6d 	bl	8008518 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800603e:	2300      	movs	r3, #0
 8006040:	e062      	b.n	8006108 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006048:	f107 0310 	add.w	r3, r7, #16
 800604c:	4618      	mov	r0, r3
 800604e:	f001 f851 	bl	80070f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006052:	2301      	movs	r3, #1
 8006054:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006056:	f002 fa5f 	bl	8008518 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800605a:	f000 fdad 	bl	8006bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800605e:	f002 fa25 	bl	80084ac <vPortEnterCritical>
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006068:	b25b      	sxtb	r3, r3
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d103      	bne.n	8006078 <xQueueReceive+0x134>
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800607e:	b25b      	sxtb	r3, r3
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d103      	bne.n	800608e <xQueueReceive+0x14a>
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800608e:	f002 fa43 	bl	8008518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006092:	1d3a      	adds	r2, r7, #4
 8006094:	f107 0310 	add.w	r3, r7, #16
 8006098:	4611      	mov	r1, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f001 f840 	bl	8007120 <xTaskCheckForTimeOut>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d123      	bne.n	80060ee <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a8:	f000 fa88 	bl	80065bc <prvIsQueueEmpty>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d017      	beq.n	80060e2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	3324      	adds	r3, #36	@ 0x24
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	4611      	mov	r1, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 ff5e 	bl	8006f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060c2:	f000 fa29 	bl	8006518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060c6:	f000 fd85 	bl	8006bd4 <xTaskResumeAll>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d189      	bne.n	8005fe4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80060d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006110 <xQueueReceive+0x1cc>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	e780      	b.n	8005fe4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060e4:	f000 fa18 	bl	8006518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060e8:	f000 fd74 	bl	8006bd4 <xTaskResumeAll>
 80060ec:	e77a      	b.n	8005fe4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f0:	f000 fa12 	bl	8006518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060f4:	f000 fd6e 	bl	8006bd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060fa:	f000 fa5f 	bl	80065bc <prvIsQueueEmpty>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	f43f af6f 	beq.w	8005fe4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006106:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006108:	4618      	mov	r0, r3
 800610a:	3730      	adds	r7, #48	@ 0x30
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08e      	sub	sp, #56	@ 0x38
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006126:	2300      	movs	r3, #0
 8006128:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10d      	bne.n	800614c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006134:	b672      	cpsid	i
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	b662      	cpsie	i
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	b672      	cpsid	i
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	b662      	cpsie	i
 8006168:	61fb      	str	r3, [r7, #28]
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006170:	f001 f928 	bl	80073c4 <xTaskGetSchedulerState>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <xQueueSemaphoreTake+0x6c>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueSemaphoreTake+0x70>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueSemaphoreTake+0x72>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10d      	bne.n	80061a6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	b672      	cpsid	i
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	b662      	cpsie	i
 800619e:	61bb      	str	r3, [r7, #24]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061a6:	f002 f981 	bl	80084ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d024      	beq.n	8006200 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061c6:	f001 fa7f 	bl	80076c8 <pvTaskIncrementMutexHeldCount>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	3310      	adds	r3, #16
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 ff23 	bl	8007028 <xTaskRemoveFromEventList>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061e8:	4b55      	ldr	r3, [pc, #340]	@ (8006340 <xQueueSemaphoreTake+0x22c>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061f8:	f002 f98e 	bl	8008518 <vPortExitCritical>
				return pdPASS;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e09a      	b.n	8006336 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d114      	bne.n	8006230 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	b672      	cpsid	i
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	b662      	cpsie	i
 8006220:	617b      	str	r3, [r7, #20]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006228:	f002 f976 	bl	8008518 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800622c:	2300      	movs	r3, #0
 800622e:	e082      	b.n	8006336 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	4618      	mov	r0, r3
 800623c:	f000 ff5a 	bl	80070f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006244:	f002 f968 	bl	8008518 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006248:	f000 fcb6 	bl	8006bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800624c:	f002 f92e 	bl	80084ac <vPortEnterCritical>
 8006250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006252:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006256:	b25b      	sxtb	r3, r3
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d103      	bne.n	8006266 <xQueueSemaphoreTake+0x152>
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800626c:	b25b      	sxtb	r3, r3
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d103      	bne.n	800627c <xQueueSemaphoreTake+0x168>
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800627c:	f002 f94c 	bl	8008518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006280:	463a      	mov	r2, r7
 8006282:	f107 030c 	add.w	r3, r7, #12
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f000 ff49 	bl	8007120 <xTaskCheckForTimeOut>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d132      	bne.n	80062fa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006294:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006296:	f000 f991 	bl	80065bc <prvIsQueueEmpty>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d026      	beq.n	80062ee <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80062a8:	f002 f900 	bl	80084ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f8a5 	bl	8007400 <xTaskPriorityInherit>
 80062b6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062b8:	f002 f92e 	bl	8008518 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	3324      	adds	r3, #36	@ 0x24
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	4611      	mov	r1, r2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fe59 	bl	8006f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062cc:	f000 f924 	bl	8006518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062d0:	f000 fc80 	bl	8006bd4 <xTaskResumeAll>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f47f af65 	bne.w	80061a6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80062dc:	4b18      	ldr	r3, [pc, #96]	@ (8006340 <xQueueSemaphoreTake+0x22c>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	e75b      	b.n	80061a6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062f0:	f000 f912 	bl	8006518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062f4:	f000 fc6e 	bl	8006bd4 <xTaskResumeAll>
 80062f8:	e755      	b.n	80061a6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062fc:	f000 f90c 	bl	8006518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006300:	f000 fc68 	bl	8006bd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006306:	f000 f959 	bl	80065bc <prvIsQueueEmpty>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	f43f af4a 	beq.w	80061a6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00d      	beq.n	8006334 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006318:	f002 f8c8 	bl	80084ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800631c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800631e:	f000 f853 	bl	80063c8 <prvGetDisinheritPriorityAfterTimeout>
 8006322:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800632a:	4618      	mov	r0, r3
 800632c:	f001 f944 	bl	80075b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006330:	f002 f8f2 	bl	8008518 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006336:	4618      	mov	r0, r3
 8006338:	3738      	adds	r7, #56	@ 0x38
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	b672      	cpsid	i
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	b662      	cpsie	i
 8006366:	60bb      	str	r3, [r7, #8]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800636e:	f002 f89d 	bl	80084ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006378:	f002 f8ce 	bl	8008518 <vPortExitCritical>

	return uxReturn;
 800637c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10d      	bne.n	80063b4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	b672      	cpsid	i
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	b662      	cpsie	i
 80063ac:	60fb      	str	r3, [r7, #12]
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80063ba:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063bc:	4618      	mov	r0, r3
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e001      	b.n	80063ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063ea:	68fb      	ldr	r3, [r7, #12]
	}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d14d      	bne.n	80064ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f001 f854 	bl	80074d0 <xTaskPriorityDisinherit>
 8006428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	e043      	b.n	80064ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d119      	bne.n	800646c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6858      	ldr	r0, [r3, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006440:	461a      	mov	r2, r3
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	f002 ff2f 	bl	80092a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	441a      	add	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	d32b      	bcc.n	80064ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	e026      	b.n	80064ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68d8      	ldr	r0, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	461a      	mov	r2, r3
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	f002 ff15 	bl	80092a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006484:	425b      	negs	r3, r3
 8006486:	441a      	add	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d207      	bcs.n	80064a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a0:	425b      	negs	r3, r3
 80064a2:	441a      	add	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d105      	bne.n	80064ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064c2:	697b      	ldr	r3, [r7, #20]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d018      	beq.n	8006510 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	441a      	add	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d303      	bcc.n	8006500 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68d9      	ldr	r1, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006508:	461a      	mov	r2, r3
 800650a:	6838      	ldr	r0, [r7, #0]
 800650c:	f002 fecb 	bl	80092a6 <memcpy>
	}
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006520:	f001 ffc4 	bl	80084ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800652a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800652c:	e011      	b.n	8006552 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d012      	beq.n	800655c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3324      	adds	r3, #36	@ 0x24
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fd74 	bl	8007028 <xTaskRemoveFromEventList>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006546:	f000 fe53 	bl	80071f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	3b01      	subs	r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	dce9      	bgt.n	800652e <prvUnlockQueue+0x16>
 800655a:	e000      	b.n	800655e <prvUnlockQueue+0x46>
					break;
 800655c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	22ff      	movs	r2, #255	@ 0xff
 8006562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006566:	f001 ffd7 	bl	8008518 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800656a:	f001 ff9f 	bl	80084ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006574:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006576:	e011      	b.n	800659c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d012      	beq.n	80065a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3310      	adds	r3, #16
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fd4f 	bl	8007028 <xTaskRemoveFromEventList>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006590:	f000 fe2e 	bl	80071f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	3b01      	subs	r3, #1
 8006598:	b2db      	uxtb	r3, r3
 800659a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800659c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	dce9      	bgt.n	8006578 <prvUnlockQueue+0x60>
 80065a4:	e000      	b.n	80065a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	22ff      	movs	r2, #255	@ 0xff
 80065ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80065b0:	f001 ffb2 	bl	8008518 <vPortExitCritical>
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c4:	f001 ff72 	bl	80084ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065d0:	2301      	movs	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e001      	b.n	80065da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065da:	f001 ff9d 	bl	8008518 <vPortExitCritical>

	return xReturn;
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065f0:	f001 ff5c 	bl	80084ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d102      	bne.n	8006606 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e001      	b.n	800660a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800660a:	f001 ff85 	bl	8008518 <vPortExitCritical>

	return xReturn;
 800660e:	68fb      	ldr	r3, [r7, #12]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e014      	b.n	8006652 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006628:	4a0f      	ldr	r2, [pc, #60]	@ (8006668 <vQueueAddToRegistry+0x50>)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006634:	490c      	ldr	r1, [pc, #48]	@ (8006668 <vQueueAddToRegistry+0x50>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800663e:	4a0a      	ldr	r2, [pc, #40]	@ (8006668 <vQueueAddToRegistry+0x50>)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	4413      	add	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800664a:	e006      	b.n	800665a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b07      	cmp	r3, #7
 8006656:	d9e7      	bls.n	8006628 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000e7c 	.word	0x20000e7c

0800666c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800667c:	f001 ff16 	bl	80084ac <vPortEnterCritical>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006686:	b25b      	sxtb	r3, r3
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d103      	bne.n	8006696 <vQueueWaitForMessageRestricted+0x2a>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800669c:	b25b      	sxtb	r3, r3
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d103      	bne.n	80066ac <vQueueWaitForMessageRestricted+0x40>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066ac:	f001 ff34 	bl	8008518 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	3324      	adds	r3, #36	@ 0x24
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fc83 	bl	8006fcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066c6:	6978      	ldr	r0, [r7, #20]
 80066c8:	f7ff ff26 	bl	8006518 <prvUnlockQueue>
	}
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08e      	sub	sp, #56	@ 0x38
 80066d8:	af04      	add	r7, sp, #16
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10d      	bne.n	8006704 <xTaskCreateStatic+0x30>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	b672      	cpsid	i
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	b662      	cpsie	i
 80066fc:	623b      	str	r3, [r7, #32]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <xTaskCreateStatic+0x52>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	b672      	cpsid	i
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	b662      	cpsie	i
 800671e:	61fb      	str	r3, [r7, #28]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006726:	23a8      	movs	r3, #168	@ 0xa8
 8006728:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2ba8      	cmp	r3, #168	@ 0xa8
 800672e:	d00d      	beq.n	800674c <xTaskCreateStatic+0x78>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	b672      	cpsid	i
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	b662      	cpsie	i
 8006744:	61bb      	str	r3, [r7, #24]
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800674c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01e      	beq.n	8006792 <xTaskCreateStatic+0xbe>
 8006754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01b      	beq.n	8006792 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800675a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006762:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	2202      	movs	r2, #2
 8006768:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800676c:	2300      	movs	r3, #0
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	9302      	str	r3, [sp, #8]
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f851 	bl	800682c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800678a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800678c:	f000 f8f8 	bl	8006980 <prvAddNewTaskToReadyList>
 8006790:	e001      	b.n	8006796 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006796:	697b      	ldr	r3, [r7, #20]
	}
 8006798:	4618      	mov	r0, r3
 800679a:	3728      	adds	r7, #40	@ 0x28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	@ 0x30
 80067a4:	af04      	add	r7, sp, #16
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 ffa7 	bl	8008708 <pvPortMalloc>
 80067ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067c2:	20a8      	movs	r0, #168	@ 0xa8
 80067c4:	f001 ffa0 	bl	8008708 <pvPortMalloc>
 80067c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80067d6:	e005      	b.n	80067e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067d8:	6978      	ldr	r0, [r7, #20]
 80067da:	f002 f863 	bl	80088a4 <vPortFree>
 80067de:	e001      	b.n	80067e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d017      	beq.n	800681a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	2300      	movs	r3, #0
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	9302      	str	r3, [sp, #8]
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f80f 	bl	800682c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800680e:	69f8      	ldr	r0, [r7, #28]
 8006810:	f000 f8b6 	bl	8006980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	e002      	b.n	8006820 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006820:	69bb      	ldr	r3, [r7, #24]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	461a      	mov	r2, r3
 8006844:	21a5      	movs	r1, #165	@ 0xa5
 8006846:	f002 fc49 	bl	80090dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006854:	440b      	add	r3, r1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006872:	b672      	cpsid	i
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	b662      	cpsie	i
 8006882:	617b      	str	r3, [r7, #20]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01f      	beq.n	80068d0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e012      	b.n	80068bc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	7819      	ldrb	r1, [r3, #0]
 800689e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	3334      	adds	r3, #52	@ 0x34
 80068a6:	460a      	mov	r2, r1
 80068a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d9e9      	bls.n	8006896 <prvInitialiseNewTask+0x6a>
 80068c2:	e000      	b.n	80068c6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80068c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068ce:	e003      	b.n	80068d8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	2b37      	cmp	r3, #55	@ 0x37
 80068dc:	d901      	bls.n	80068e2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068de:	2337      	movs	r3, #55	@ 0x37
 80068e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2200      	movs	r2, #0
 80068f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	3304      	adds	r3, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe ff55 	bl	80057a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	3318      	adds	r3, #24
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe ff50 	bl	80057a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800690c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800691c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2200      	movs	r2, #0
 800692a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	3354      	adds	r3, #84	@ 0x54
 8006932:	224c      	movs	r2, #76	@ 0x4c
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f002 fbd0 	bl	80090dc <memset>
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	4a0d      	ldr	r2, [pc, #52]	@ (8006974 <prvInitialiseNewTask+0x148>)
 8006940:	659a      	str	r2, [r3, #88]	@ 0x58
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <prvInitialiseNewTask+0x14c>)
 8006946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	4a0c      	ldr	r2, [pc, #48]	@ (800697c <prvInitialiseNewTask+0x150>)
 800694c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	68f9      	ldr	r1, [r7, #12]
 8006952:	69b8      	ldr	r0, [r7, #24]
 8006954:	f001 fc9e 	bl	8008294 <pxPortInitialiseStack>
 8006958:	4602      	mov	r2, r0
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800696a:	bf00      	nop
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20019ba8 	.word	0x20019ba8
 8006978:	20019c10 	.word	0x20019c10
 800697c:	20019c78 	.word	0x20019c78

08006980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006988:	f001 fd90 	bl	80084ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800698c:	4b2d      	ldr	r3, [pc, #180]	@ (8006a44 <prvAddNewTaskToReadyList+0xc4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	4a2c      	ldr	r2, [pc, #176]	@ (8006a44 <prvAddNewTaskToReadyList+0xc4>)
 8006994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006996:	4b2c      	ldr	r3, [pc, #176]	@ (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800699e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069a4:	4b27      	ldr	r3, [pc, #156]	@ (8006a44 <prvAddNewTaskToReadyList+0xc4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d110      	bne.n	80069ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069ac:	f000 fc44 	bl	8007238 <prvInitialiseTaskLists>
 80069b0:	e00d      	b.n	80069ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069b2:	4b26      	ldr	r3, [pc, #152]	@ (8006a4c <prvAddNewTaskToReadyList+0xcc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ba:	4b23      	ldr	r3, [pc, #140]	@ (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d802      	bhi.n	80069ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069ce:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <prvAddNewTaskToReadyList+0xd0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3301      	adds	r3, #1
 80069d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a50 <prvAddNewTaskToReadyList+0xd0>)
 80069d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <prvAddNewTaskToReadyList+0xd0>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a54 <prvAddNewTaskToReadyList+0xd4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d903      	bls.n	80069f4 <prvAddNewTaskToReadyList+0x74>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <prvAddNewTaskToReadyList+0xd4>)
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4a15      	ldr	r2, [pc, #84]	@ (8006a58 <prvAddNewTaskToReadyList+0xd8>)
 8006a02:	441a      	add	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7fe fed9 	bl	80057c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a10:	f001 fd82 	bl	8008518 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a14:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <prvAddNewTaskToReadyList+0xcc>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00e      	beq.n	8006a3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a48 <prvAddNewTaskToReadyList+0xc8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d207      	bcs.n	8006a3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <prvAddNewTaskToReadyList+0xdc>)
 8006a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20001390 	.word	0x20001390
 8006a48:	20000ebc 	.word	0x20000ebc
 8006a4c:	2000139c 	.word	0x2000139c
 8006a50:	200013ac 	.word	0x200013ac
 8006a54:	20001398 	.word	0x20001398
 8006a58:	20000ec0 	.word	0x20000ec0
 8006a5c:	e000ed04 	.word	0xe000ed04

08006a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01a      	beq.n	8006aa8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a72:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <vTaskDelay+0x68>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <vTaskDelay+0x36>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7e:	b672      	cpsid	i
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	b662      	cpsie	i
 8006a8e:	60bb      	str	r3, [r7, #8]
}
 8006a90:	bf00      	nop
 8006a92:	bf00      	nop
 8006a94:	e7fd      	b.n	8006a92 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006a96:	f000 f88f 	bl	8006bb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f83d 	bl	8007b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006aa2:	f000 f897 	bl	8006bd4 <xTaskResumeAll>
 8006aa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006aae:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <vTaskDelay+0x6c>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200013b8 	.word	0x200013b8
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	@ 0x28
 8006ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ade:	463a      	mov	r2, r7
 8006ae0:	1d39      	adds	r1, r7, #4
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fe0a 	bl	8005700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	9202      	str	r2, [sp, #8]
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	460a      	mov	r2, r1
 8006afe:	4926      	ldr	r1, [pc, #152]	@ (8006b98 <vTaskStartScheduler+0xc8>)
 8006b00:	4826      	ldr	r0, [pc, #152]	@ (8006b9c <vTaskStartScheduler+0xcc>)
 8006b02:	f7ff fde7 	bl	80066d4 <xTaskCreateStatic>
 8006b06:	4603      	mov	r3, r0
 8006b08:	4a25      	ldr	r2, [pc, #148]	@ (8006ba0 <vTaskStartScheduler+0xd0>)
 8006b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b0c:	4b24      	ldr	r3, [pc, #144]	@ (8006ba0 <vTaskStartScheduler+0xd0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e001      	b.n	8006b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d102      	bne.n	8006b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b24:	f001 f84e 	bl	8007bc4 <xTimerCreateTimerTask>
 8006b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d11d      	bne.n	8006b6c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	b672      	cpsid	i
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	b662      	cpsie	i
 8006b44:	613b      	str	r3, [r7, #16]
}
 8006b46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b48:	4b16      	ldr	r3, [pc, #88]	@ (8006ba4 <vTaskStartScheduler+0xd4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3354      	adds	r3, #84	@ 0x54
 8006b4e:	4a16      	ldr	r2, [pc, #88]	@ (8006ba8 <vTaskStartScheduler+0xd8>)
 8006b50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b52:	4b16      	ldr	r3, [pc, #88]	@ (8006bac <vTaskStartScheduler+0xdc>)
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295
 8006b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <vTaskStartScheduler+0xe0>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <vTaskStartScheduler+0xe4>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b66:	f001 fc23 	bl	80083b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b6a:	e011      	b.n	8006b90 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d10d      	bne.n	8006b90 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	b672      	cpsid	i
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	b662      	cpsie	i
 8006b88:	60fb      	str	r3, [r7, #12]
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	e7fd      	b.n	8006b8c <vTaskStartScheduler+0xbc>
}
 8006b90:	bf00      	nop
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	0800a1b4 	.word	0x0800a1b4
 8006b9c:	08007209 	.word	0x08007209
 8006ba0:	200013b4 	.word	0x200013b4
 8006ba4:	20000ebc 	.word	0x20000ebc
 8006ba8:	2000001c 	.word	0x2000001c
 8006bac:	200013b0 	.word	0x200013b0
 8006bb0:	2000139c 	.word	0x2000139c
 8006bb4:	20001394 	.word	0x20001394

08006bb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bbc:	4b04      	ldr	r3, [pc, #16]	@ (8006bd0 <vTaskSuspendAll+0x18>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	4a03      	ldr	r2, [pc, #12]	@ (8006bd0 <vTaskSuspendAll+0x18>)
 8006bc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	200013b8 	.word	0x200013b8

08006bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006be2:	4b43      	ldr	r3, [pc, #268]	@ (8006cf0 <xTaskResumeAll+0x11c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10d      	bne.n	8006c06 <xTaskResumeAll+0x32>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	b672      	cpsid	i
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	b662      	cpsie	i
 8006bfe:	603b      	str	r3, [r7, #0]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c06:	f001 fc51 	bl	80084ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c0a:	4b39      	ldr	r3, [pc, #228]	@ (8006cf0 <xTaskResumeAll+0x11c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4a37      	ldr	r2, [pc, #220]	@ (8006cf0 <xTaskResumeAll+0x11c>)
 8006c12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <xTaskResumeAll+0x11c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d162      	bne.n	8006ce2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c1c:	4b35      	ldr	r3, [pc, #212]	@ (8006cf4 <xTaskResumeAll+0x120>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05e      	beq.n	8006ce2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c24:	e02f      	b.n	8006c86 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c26:	4b34      	ldr	r3, [pc, #208]	@ (8006cf8 <xTaskResumeAll+0x124>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3318      	adds	r3, #24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe fe22 	bl	800587c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fe1d 	bl	800587c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c46:	4b2d      	ldr	r3, [pc, #180]	@ (8006cfc <xTaskResumeAll+0x128>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d903      	bls.n	8006c56 <xTaskResumeAll+0x82>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	4a2a      	ldr	r2, [pc, #168]	@ (8006cfc <xTaskResumeAll+0x128>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4a27      	ldr	r2, [pc, #156]	@ (8006d00 <xTaskResumeAll+0x12c>)
 8006c64:	441a      	add	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fe fda8 	bl	80057c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4b23      	ldr	r3, [pc, #140]	@ (8006d04 <xTaskResumeAll+0x130>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006c80:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <xTaskResumeAll+0x134>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c86:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf8 <xTaskResumeAll+0x124>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1cb      	bne.n	8006c26 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c94:	f000 fb76 	bl	8007384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c98:	4b1c      	ldr	r3, [pc, #112]	@ (8006d0c <xTaskResumeAll+0x138>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d010      	beq.n	8006cc6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ca4:	f000 f846 	bl	8006d34 <xTaskIncrementTick>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006cae:	4b16      	ldr	r3, [pc, #88]	@ (8006d08 <xTaskResumeAll+0x134>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f1      	bne.n	8006ca4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006cc0:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <xTaskResumeAll+0x138>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cc6:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <xTaskResumeAll+0x134>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <xTaskResumeAll+0x13c>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ce2:	f001 fc19 	bl	8008518 <vPortExitCritical>

	return xAlreadyYielded;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200013b8 	.word	0x200013b8
 8006cf4:	20001390 	.word	0x20001390
 8006cf8:	20001350 	.word	0x20001350
 8006cfc:	20001398 	.word	0x20001398
 8006d00:	20000ec0 	.word	0x20000ec0
 8006d04:	20000ebc 	.word	0x20000ebc
 8006d08:	200013a4 	.word	0x200013a4
 8006d0c:	200013a0 	.word	0x200013a0
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d1a:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <xTaskGetTickCount+0x1c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20001394 	.word	0x20001394

08006d34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3e:	4b50      	ldr	r3, [pc, #320]	@ (8006e80 <xTaskIncrementTick+0x14c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 808c 	bne.w	8006e60 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d48:	4b4e      	ldr	r3, [pc, #312]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d50:	4a4c      	ldr	r2, [pc, #304]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d123      	bne.n	8006da4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	603b      	str	r3, [r7, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xTaskIncrementTick+0x4a>
 8006d82:	4b41      	ldr	r3, [pc, #260]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	4b40      	ldr	r3, [pc, #256]	@ (8006e8c <xTaskIncrementTick+0x158>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4a3e      	ldr	r2, [pc, #248]	@ (8006e8c <xTaskIncrementTick+0x158>)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	4b3e      	ldr	r3, [pc, #248]	@ (8006e90 <xTaskIncrementTick+0x15c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e90 <xTaskIncrementTick+0x15c>)
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	f000 faf0 	bl	8007384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006da4:	4b3b      	ldr	r3, [pc, #236]	@ (8006e94 <xTaskIncrementTick+0x160>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d349      	bcc.n	8006e42 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dae:	4b36      	ldr	r3, [pc, #216]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db8:	4b36      	ldr	r3, [pc, #216]	@ (8006e94 <xTaskIncrementTick+0x160>)
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbe:	601a      	str	r2, [r3, #0]
					break;
 8006dc0:	e03f      	b.n	8006e42 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc2:	4b31      	ldr	r3, [pc, #196]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d203      	bcs.n	8006de2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dda:	4a2e      	ldr	r2, [pc, #184]	@ (8006e94 <xTaskIncrementTick+0x160>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006de0:	e02f      	b.n	8006e42 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fd48 	bl	800587c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3318      	adds	r3, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fd3f 	bl	800587c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e02:	4b25      	ldr	r3, [pc, #148]	@ (8006e98 <xTaskIncrementTick+0x164>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d903      	bls.n	8006e12 <xTaskIncrementTick+0xde>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4a22      	ldr	r2, [pc, #136]	@ (8006e98 <xTaskIncrementTick+0x164>)
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006e9c <xTaskIncrementTick+0x168>)
 8006e20:	441a      	add	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7fe fcca 	bl	80057c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <xTaskIncrementTick+0x16c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d3b8      	bcc.n	8006dae <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e40:	e7b5      	b.n	8006dae <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e42:	4b17      	ldr	r3, [pc, #92]	@ (8006ea0 <xTaskIncrementTick+0x16c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e48:	4914      	ldr	r1, [pc, #80]	@ (8006e9c <xTaskIncrementTick+0x168>)
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d907      	bls.n	8006e6a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e004      	b.n	8006e6a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e60:	4b10      	ldr	r3, [pc, #64]	@ (8006ea4 <xTaskIncrementTick+0x170>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a0f      	ldr	r2, [pc, #60]	@ (8006ea4 <xTaskIncrementTick+0x170>)
 8006e68:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea8 <xTaskIncrementTick+0x174>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006e72:	2301      	movs	r3, #1
 8006e74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e76:	697b      	ldr	r3, [r7, #20]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	200013b8 	.word	0x200013b8
 8006e84:	20001394 	.word	0x20001394
 8006e88:	20001348 	.word	0x20001348
 8006e8c:	2000134c 	.word	0x2000134c
 8006e90:	200013a8 	.word	0x200013a8
 8006e94:	200013b0 	.word	0x200013b0
 8006e98:	20001398 	.word	0x20001398
 8006e9c:	20000ec0 	.word	0x20000ec0
 8006ea0:	20000ebc 	.word	0x20000ebc
 8006ea4:	200013a0 	.word	0x200013a0
 8006ea8:	200013a4 	.word	0x200013a4

08006eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <vTaskSwitchContext+0xb8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eba:	4b2b      	ldr	r3, [pc, #172]	@ (8006f68 <vTaskSwitchContext+0xbc>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ec0:	e049      	b.n	8006f56 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006ec2:	4b29      	ldr	r3, [pc, #164]	@ (8006f68 <vTaskSwitchContext+0xbc>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec8:	4b28      	ldr	r3, [pc, #160]	@ (8006f6c <vTaskSwitchContext+0xc0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	e013      	b.n	8006ef8 <vTaskSwitchContext+0x4c>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10d      	bne.n	8006ef2 <vTaskSwitchContext+0x46>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	b672      	cpsid	i
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	b662      	cpsie	i
 8006eea:	607b      	str	r3, [r7, #4]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <vTaskSwitchContext+0x42>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	491d      	ldr	r1, [pc, #116]	@ (8006f70 <vTaskSwitchContext+0xc4>)
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0e1      	beq.n	8006ed0 <vTaskSwitchContext+0x24>
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <vTaskSwitchContext+0xc4>)
 8006f18:	4413      	add	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d104      	bne.n	8006f3c <vTaskSwitchContext+0x90>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	605a      	str	r2, [r3, #4]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4a0c      	ldr	r2, [pc, #48]	@ (8006f74 <vTaskSwitchContext+0xc8>)
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4a09      	ldr	r2, [pc, #36]	@ (8006f6c <vTaskSwitchContext+0xc0>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f4c:	4b09      	ldr	r3, [pc, #36]	@ (8006f74 <vTaskSwitchContext+0xc8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3354      	adds	r3, #84	@ 0x54
 8006f52:	4a09      	ldr	r2, [pc, #36]	@ (8006f78 <vTaskSwitchContext+0xcc>)
 8006f54:	6013      	str	r3, [r2, #0]
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	200013b8 	.word	0x200013b8
 8006f68:	200013a4 	.word	0x200013a4
 8006f6c:	20001398 	.word	0x20001398
 8006f70:	20000ec0 	.word	0x20000ec0
 8006f74:	20000ebc 	.word	0x20000ebc
 8006f78:	2000001c 	.word	0x2000001c

08006f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	b672      	cpsid	i
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	b662      	cpsie	i
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fa8:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <vTaskPlaceOnEventList+0x4c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3318      	adds	r3, #24
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fe fc2a 	bl	800580a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	6838      	ldr	r0, [r7, #0]
 8006fba:	f000 fdaf 	bl	8007b1c <prvAddCurrentTaskToDelayedList>
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000ebc 	.word	0x20000ebc

08006fcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10d      	bne.n	8006ffa <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	b672      	cpsid	i
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	b662      	cpsie	i
 8006ff2:	617b      	str	r3, [r7, #20]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <vTaskPlaceOnEventListRestricted+0x58>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3318      	adds	r3, #24
 8007000:	4619      	mov	r1, r3
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7fe fbdd 	bl	80057c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800700e:	f04f 33ff 	mov.w	r3, #4294967295
 8007012:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f000 fd80 	bl	8007b1c <prvAddCurrentTaskToDelayedList>
	}
 800701c:	bf00      	nop
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000ebc 	.word	0x20000ebc

08007028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10d      	bne.n	800705a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007042:	b672      	cpsid	i
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	b662      	cpsie	i
 8007052:	60fb      	str	r3, [r7, #12]
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	e7fd      	b.n	8007056 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3318      	adds	r3, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fc0c 	bl	800587c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007064:	4b1d      	ldr	r3, [pc, #116]	@ (80070dc <xTaskRemoveFromEventList+0xb4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11d      	bne.n	80070a8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fc03 	bl	800587c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707a:	4b19      	ldr	r3, [pc, #100]	@ (80070e0 <xTaskRemoveFromEventList+0xb8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d903      	bls.n	800708a <xTaskRemoveFromEventList+0x62>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007086:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <xTaskRemoveFromEventList+0xb8>)
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4a13      	ldr	r2, [pc, #76]	@ (80070e4 <xTaskRemoveFromEventList+0xbc>)
 8007098:	441a      	add	r2, r3
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fe fb8e 	bl	80057c2 <vListInsertEnd>
 80070a6:	e005      	b.n	80070b4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	3318      	adds	r3, #24
 80070ac:	4619      	mov	r1, r3
 80070ae:	480e      	ldr	r0, [pc, #56]	@ (80070e8 <xTaskRemoveFromEventList+0xc0>)
 80070b0:	f7fe fb87 	bl	80057c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b8:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <xTaskRemoveFromEventList+0xc4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d905      	bls.n	80070ce <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070c6:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <xTaskRemoveFromEventList+0xc8>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e001      	b.n	80070d2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070d2:	697b      	ldr	r3, [r7, #20]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	200013b8 	.word	0x200013b8
 80070e0:	20001398 	.word	0x20001398
 80070e4:	20000ec0 	.word	0x20000ec0
 80070e8:	20001350 	.word	0x20001350
 80070ec:	20000ebc 	.word	0x20000ebc
 80070f0:	200013a4 	.word	0x200013a4

080070f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070fc:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <vTaskInternalSetTimeOutState+0x24>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007104:	4b05      	ldr	r3, [pc, #20]	@ (800711c <vTaskInternalSetTimeOutState+0x28>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	200013a8 	.word	0x200013a8
 800711c:	20001394 	.word	0x20001394

08007120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	613b      	str	r3, [r7, #16]
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	e7fd      	b.n	8007148 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10d      	bne.n	800716e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	b672      	cpsid	i
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	b662      	cpsie	i
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800716e:	f001 f99d 	bl	80084ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007172:	4b1d      	ldr	r3, [pc, #116]	@ (80071e8 <xTaskCheckForTimeOut+0xc8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d102      	bne.n	8007192 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800718c:	2300      	movs	r3, #0
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e023      	b.n	80071da <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4b15      	ldr	r3, [pc, #84]	@ (80071ec <xTaskCheckForTimeOut+0xcc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d007      	beq.n	80071ae <xTaskCheckForTimeOut+0x8e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d302      	bcc.n	80071ae <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e015      	b.n	80071da <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d20b      	bcs.n	80071d0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ff95 	bl	80070f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	e004      	b.n	80071da <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071da:	f001 f99d 	bl	8008518 <vPortExitCritical>

	return xReturn;
 80071de:	69fb      	ldr	r3, [r7, #28]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20001394 	.word	0x20001394
 80071ec:	200013a8 	.word	0x200013a8

080071f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071f4:	4b03      	ldr	r3, [pc, #12]	@ (8007204 <vTaskMissedYield+0x14>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
}
 80071fa:	bf00      	nop
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	200013a4 	.word	0x200013a4

08007208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007210:	f000 f852 	bl	80072b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007214:	4b06      	ldr	r3, [pc, #24]	@ (8007230 <prvIdleTask+0x28>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d9f9      	bls.n	8007210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <prvIdleTask+0x2c>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800722c:	e7f0      	b.n	8007210 <prvIdleTask+0x8>
 800722e:	bf00      	nop
 8007230:	20000ec0 	.word	0x20000ec0
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800723e:	2300      	movs	r3, #0
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	e00c      	b.n	800725e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4a12      	ldr	r2, [pc, #72]	@ (8007298 <prvInitialiseTaskLists+0x60>)
 8007250:	4413      	add	r3, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fa88 	bl	8005768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3301      	adds	r3, #1
 800725c:	607b      	str	r3, [r7, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b37      	cmp	r3, #55	@ 0x37
 8007262:	d9ef      	bls.n	8007244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007264:	480d      	ldr	r0, [pc, #52]	@ (800729c <prvInitialiseTaskLists+0x64>)
 8007266:	f7fe fa7f 	bl	8005768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800726a:	480d      	ldr	r0, [pc, #52]	@ (80072a0 <prvInitialiseTaskLists+0x68>)
 800726c:	f7fe fa7c 	bl	8005768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007270:	480c      	ldr	r0, [pc, #48]	@ (80072a4 <prvInitialiseTaskLists+0x6c>)
 8007272:	f7fe fa79 	bl	8005768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007276:	480c      	ldr	r0, [pc, #48]	@ (80072a8 <prvInitialiseTaskLists+0x70>)
 8007278:	f7fe fa76 	bl	8005768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800727c:	480b      	ldr	r0, [pc, #44]	@ (80072ac <prvInitialiseTaskLists+0x74>)
 800727e:	f7fe fa73 	bl	8005768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007282:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <prvInitialiseTaskLists+0x78>)
 8007284:	4a05      	ldr	r2, [pc, #20]	@ (800729c <prvInitialiseTaskLists+0x64>)
 8007286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007288:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <prvInitialiseTaskLists+0x7c>)
 800728a:	4a05      	ldr	r2, [pc, #20]	@ (80072a0 <prvInitialiseTaskLists+0x68>)
 800728c:	601a      	str	r2, [r3, #0]
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000ec0 	.word	0x20000ec0
 800729c:	20001320 	.word	0x20001320
 80072a0:	20001334 	.word	0x20001334
 80072a4:	20001350 	.word	0x20001350
 80072a8:	20001364 	.word	0x20001364
 80072ac:	2000137c 	.word	0x2000137c
 80072b0:	20001348 	.word	0x20001348
 80072b4:	2000134c 	.word	0x2000134c

080072b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072be:	e019      	b.n	80072f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072c0:	f001 f8f4 	bl	80084ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c4:	4b10      	ldr	r3, [pc, #64]	@ (8007308 <prvCheckTasksWaitingTermination+0x50>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fad3 	bl	800587c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072d6:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <prvCheckTasksWaitingTermination+0x54>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3b01      	subs	r3, #1
 80072dc:	4a0b      	ldr	r2, [pc, #44]	@ (800730c <prvCheckTasksWaitingTermination+0x54>)
 80072de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <prvCheckTasksWaitingTermination+0x58>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007310 <prvCheckTasksWaitingTermination+0x58>)
 80072e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072ea:	f001 f915 	bl	8008518 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f810 	bl	8007314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072f4:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <prvCheckTasksWaitingTermination+0x58>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e1      	bne.n	80072c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001364 	.word	0x20001364
 800730c:	20001390 	.word	0x20001390
 8007310:	20001378 	.word	0x20001378

08007314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3354      	adds	r3, #84	@ 0x54
 8007320:	4618      	mov	r0, r3
 8007322:	f001 ff07 	bl	8009134 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800732c:	2b00      	cmp	r3, #0
 800732e:	d108      	bne.n	8007342 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fab5 	bl	80088a4 <vPortFree>
				vPortFree( pxTCB );
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fab2 	bl	80088a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007340:	e01b      	b.n	800737a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007348:	2b01      	cmp	r3, #1
 800734a:	d103      	bne.n	8007354 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 faa9 	bl	80088a4 <vPortFree>
	}
 8007352:	e012      	b.n	800737a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800735a:	2b02      	cmp	r3, #2
 800735c:	d00d      	beq.n	800737a <prvDeleteTCB+0x66>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	b672      	cpsid	i
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	b662      	cpsie	i
 8007372:	60fb      	str	r3, [r7, #12]
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	e7fd      	b.n	8007376 <prvDeleteTCB+0x62>
	}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800738a:	4b0c      	ldr	r3, [pc, #48]	@ (80073bc <prvResetNextTaskUnblockTime+0x38>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007394:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007396:	f04f 32ff 	mov.w	r2, #4294967295
 800739a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800739c:	e008      	b.n	80073b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739e:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <prvResetNextTaskUnblockTime+0x38>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4a04      	ldr	r2, [pc, #16]	@ (80073c0 <prvResetNextTaskUnblockTime+0x3c>)
 80073ae:	6013      	str	r3, [r2, #0]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20001348 	.word	0x20001348
 80073c0:	200013b0 	.word	0x200013b0

080073c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <xTaskGetSchedulerState+0x34>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073d2:	2301      	movs	r3, #1
 80073d4:	607b      	str	r3, [r7, #4]
 80073d6:	e008      	b.n	80073ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d8:	4b08      	ldr	r3, [pc, #32]	@ (80073fc <xTaskGetSchedulerState+0x38>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073e0:	2302      	movs	r3, #2
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	e001      	b.n	80073ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ea:	687b      	ldr	r3, [r7, #4]
	}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	2000139c 	.word	0x2000139c
 80073fc:	200013b8 	.word	0x200013b8

08007400 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d051      	beq.n	80074ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741a:	4b2a      	ldr	r3, [pc, #168]	@ (80074c4 <xTaskPriorityInherit+0xc4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	d241      	bcs.n	80074a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	db06      	blt.n	800743a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742c:	4b25      	ldr	r3, [pc, #148]	@ (80074c4 <xTaskPriorityInherit+0xc4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6959      	ldr	r1, [r3, #20]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a1f      	ldr	r2, [pc, #124]	@ (80074c8 <xTaskPriorityInherit+0xc8>)
 800744c:	4413      	add	r3, r2
 800744e:	4299      	cmp	r1, r3
 8007450:	d122      	bne.n	8007498 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	3304      	adds	r3, #4
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fa10 	bl	800587c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800745c:	4b19      	ldr	r3, [pc, #100]	@ (80074c4 <xTaskPriorityInherit+0xc4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746a:	4b18      	ldr	r3, [pc, #96]	@ (80074cc <xTaskPriorityInherit+0xcc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d903      	bls.n	800747a <xTaskPriorityInherit+0x7a>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	4a15      	ldr	r2, [pc, #84]	@ (80074cc <xTaskPriorityInherit+0xcc>)
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4a10      	ldr	r2, [pc, #64]	@ (80074c8 <xTaskPriorityInherit+0xc8>)
 8007488:	441a      	add	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3304      	adds	r3, #4
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7fe f996 	bl	80057c2 <vListInsertEnd>
 8007496:	e004      	b.n	80074a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007498:	4b0a      	ldr	r3, [pc, #40]	@ (80074c4 <xTaskPriorityInherit+0xc4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e008      	b.n	80074ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074ac:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <xTaskPriorityInherit+0xc4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d201      	bcs.n	80074ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ba:	68fb      	ldr	r3, [r7, #12]
	}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000ebc 	.word	0x20000ebc
 80074c8:	20000ec0 	.word	0x20000ec0
 80074cc:	20001398 	.word	0x20001398

080074d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d05c      	beq.n	80075a0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074e6:	4b31      	ldr	r3, [pc, #196]	@ (80075ac <xTaskPriorityDisinherit+0xdc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d00d      	beq.n	800750c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	b672      	cpsid	i
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	b662      	cpsie	i
 8007504:	60fb      	str	r3, [r7, #12]
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10d      	bne.n	8007530 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	b672      	cpsid	i
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	b662      	cpsie	i
 8007528:	60bb      	str	r3, [r7, #8]
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	e7fd      	b.n	800752c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007534:	1e5a      	subs	r2, r3, #1
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007542:	429a      	cmp	r2, r3
 8007544:	d02c      	beq.n	80075a0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754a:	2b00      	cmp	r3, #0
 800754c:	d128      	bne.n	80075a0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3304      	adds	r3, #4
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe f992 	bl	800587c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007570:	4b0f      	ldr	r3, [pc, #60]	@ (80075b0 <xTaskPriorityDisinherit+0xe0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d903      	bls.n	8007580 <xTaskPriorityDisinherit+0xb0>
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757c:	4a0c      	ldr	r2, [pc, #48]	@ (80075b0 <xTaskPriorityDisinherit+0xe0>)
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4a09      	ldr	r2, [pc, #36]	@ (80075b4 <xTaskPriorityDisinherit+0xe4>)
 800758e:	441a      	add	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	3304      	adds	r3, #4
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f7fe f913 	bl	80057c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075a0:	697b      	ldr	r3, [r7, #20]
	}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000ebc 	.word	0x20000ebc
 80075b0:	20001398 	.word	0x20001398
 80075b4:	20000ec0 	.word	0x20000ec0

080075b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075c6:	2301      	movs	r3, #1
 80075c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d070      	beq.n	80076b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10d      	bne.n	80075f4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075dc:	b672      	cpsid	i
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	b662      	cpsie	i
 80075ec:	60fb      	str	r3, [r7, #12]
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d902      	bls.n	8007604 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	e002      	b.n	800760a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007608:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	429a      	cmp	r2, r3
 8007612:	d04e      	beq.n	80076b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	429a      	cmp	r2, r3
 800761c:	d149      	bne.n	80076b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800761e:	4b27      	ldr	r3, [pc, #156]	@ (80076bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	429a      	cmp	r2, r3
 8007626:	d10d      	bne.n	8007644 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	60bb      	str	r3, [r7, #8]
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	e7fd      	b.n	8007640 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	db04      	blt.n	8007662 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	6959      	ldr	r1, [r3, #20]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4a13      	ldr	r2, [pc, #76]	@ (80076c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007672:	4413      	add	r3, r2
 8007674:	4299      	cmp	r1, r3
 8007676:	d11c      	bne.n	80076b2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	3304      	adds	r3, #4
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe f8fd 	bl	800587c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007686:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d903      	bls.n	8007696 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	4a0c      	ldr	r2, [pc, #48]	@ (80076c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4a07      	ldr	r2, [pc, #28]	@ (80076c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80076a4:	441a      	add	r2, r3
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe f888 	bl	80057c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076b2:	bf00      	nop
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000ebc 	.word	0x20000ebc
 80076c0:	20000ec0 	.word	0x20000ec0
 80076c4:	20001398 	.word	0x20001398

080076c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076cc:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <pvTaskIncrementMutexHeldCount+0x24>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076d4:	4b05      	ldr	r3, [pc, #20]	@ (80076ec <pvTaskIncrementMutexHeldCount+0x24>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076da:	3201      	adds	r2, #1
 80076dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80076de:	4b03      	ldr	r3, [pc, #12]	@ (80076ec <pvTaskIncrementMutexHeldCount+0x24>)
 80076e0:	681b      	ldr	r3, [r3, #0]
	}
 80076e2:	4618      	mov	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000ebc 	.word	0x20000ebc

080076f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80076fe:	f000 fed5 	bl	80084ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007702:	4b29      	ldr	r3, [pc, #164]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d01c      	beq.n	800774a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007710:	4b25      	ldr	r3, [pc, #148]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	43d2      	mvns	r2, r2
 800771c:	400a      	ands	r2, r1
 800771e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007722:	4b21      	ldr	r3, [pc, #132]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007732:	2101      	movs	r1, #1
 8007734:	6838      	ldr	r0, [r7, #0]
 8007736:	f000 f9f1 	bl	8007b1c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800773a:	4b1c      	ldr	r3, [pc, #112]	@ (80077ac <xTaskNotifyWait+0xbc>)
 800773c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800774a:	f000 fee5 	bl	8008518 <vPortExitCritical>

		taskENTER_CRITICAL();
 800774e:	f000 fead 	bl	80084ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007758:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007764:	4b10      	ldr	r3, [pc, #64]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d002      	beq.n	8007778 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e00a      	b.n	800778e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007778:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	43d2      	mvns	r2, r2
 8007784:	400a      	ands	r2, r1
 8007786:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800778e:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <xTaskNotifyWait+0xb8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8007798:	f000 febe 	bl	8008518 <vPortExitCritical>

		return xReturn;
 800779c:	697b      	ldr	r3, [r7, #20]
	}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000ebc 	.word	0x20000ebc
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	@ 0x28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80077c0:	2301      	movs	r3, #1
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10d      	bne.n	80077e6 <xTaskGenericNotify+0x36>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ce:	b672      	cpsid	i
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	b662      	cpsie	i
 80077de:	61bb      	str	r3, [r7, #24]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80077ea:	f000 fe5f 	bl	80084ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007804:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2202      	movs	r2, #2
 800780a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	2b04      	cmp	r3, #4
 8007812:	d82e      	bhi.n	8007872 <xTaskGenericNotify+0xc2>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <xTaskGenericNotify+0x6c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	0800789b 	.word	0x0800789b
 8007820:	08007831 	.word	0x08007831
 8007824:	08007843 	.word	0x08007843
 8007828:	08007853 	.word	0x08007853
 800782c:	0800785d 	.word	0x0800785d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	431a      	orrs	r2, r3
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007840:	e02e      	b.n	80078a0 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007850:	e026      	b.n	80078a0 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800785a:	e021      	b.n	80078a0 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800785c:	7ffb      	ldrb	r3, [r7, #31]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d004      	beq.n	800786c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800786a:	e019      	b.n	80078a0 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007870:	e016      	b.n	80078a0 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787c:	d00f      	beq.n	800789e <xTaskGenericNotify+0xee>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007882:	b672      	cpsid	i
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	b662      	cpsie	i
 8007892:	617b      	str	r3, [r7, #20]
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <xTaskGenericNotify+0xe6>
					break;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <xTaskGenericNotify+0xf0>

					break;
 800789e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078a0:	7ffb      	ldrb	r3, [r7, #31]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d13d      	bne.n	8007922 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fd ffe6 	bl	800587c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007930 <xTaskGenericNotify+0x180>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d903      	bls.n	80078c4 <xTaskGenericNotify+0x114>
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <xTaskGenericNotify+0x180>)
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4a18      	ldr	r2, [pc, #96]	@ (8007934 <xTaskGenericNotify+0x184>)
 80078d2:	441a      	add	r2, r3
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fd ff71 	bl	80057c2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <xTaskGenericNotify+0x154>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ec:	b672      	cpsid	i
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	b662      	cpsie	i
 80078fc:	613b      	str	r3, [r7, #16]
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007908:	4b0b      	ldr	r3, [pc, #44]	@ (8007938 <xTaskGenericNotify+0x188>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	429a      	cmp	r2, r3
 8007910:	d907      	bls.n	8007922 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007912:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <xTaskGenericNotify+0x18c>)
 8007914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007922:	f000 fdf9 	bl	8008518 <vPortExitCritical>

		return xReturn;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	@ 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20001398 	.word	0x20001398
 8007934:	20000ec0 	.word	0x20000ec0
 8007938:	20000ebc 	.word	0x20000ebc
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08e      	sub	sp, #56	@ 0x38
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007950:	2301      	movs	r3, #1
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10d      	bne.n	8007976 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	b672      	cpsid	i
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	b662      	cpsie	i
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007976:	f000 fe81 	bl	800867c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800797e:	f3ef 8211 	mrs	r2, BASEPRI
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	b672      	cpsid	i
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	b662      	cpsie	i
 8007996:	623a      	str	r2, [r7, #32]
 8007998:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800799a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800799c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80079b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d82e      	bhi.n	8007a24 <xTaskGenericNotifyFromISR+0xe4>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <xTaskGenericNotifyFromISR+0x8c>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a4d 	.word	0x08007a4d
 80079d0:	080079e1 	.word	0x080079e1
 80079d4:	080079f3 	.word	0x080079f3
 80079d8:	08007a03 	.word	0x08007a03
 80079dc:	08007a0d 	.word	0x08007a0d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	431a      	orrs	r2, r3
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80079f0:	e02f      	b.n	8007a52 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007a00:	e027      	b.n	8007a52 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007a0a:	e022      	b.n	8007a52 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d004      	beq.n	8007a1e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007a1c:	e019      	b.n	8007a52 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007a22:	e016      	b.n	8007a52 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d00f      	beq.n	8007a50 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	b672      	cpsid	i
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	b662      	cpsie	i
 8007a44:	61bb      	str	r3, [r7, #24]
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	e7fd      	b.n	8007a48 <xTaskGenericNotifyFromISR+0x108>
					break;
 8007a4c:	bf00      	nop
 8007a4e:	e000      	b.n	8007a52 <xTaskGenericNotifyFromISR+0x112>
					break;
 8007a50:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d149      	bne.n	8007aee <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	617b      	str	r3, [r7, #20]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a7e:	4b21      	ldr	r3, [pc, #132]	@ (8007b04 <xTaskGenericNotifyFromISR+0x1c4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d11d      	bne.n	8007ac2 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fd fef6 	bl	800587c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a94:	4b1c      	ldr	r3, [pc, #112]	@ (8007b08 <xTaskGenericNotifyFromISR+0x1c8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d903      	bls.n	8007aa4 <xTaskGenericNotifyFromISR+0x164>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa0:	4a19      	ldr	r2, [pc, #100]	@ (8007b08 <xTaskGenericNotifyFromISR+0x1c8>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4a16      	ldr	r2, [pc, #88]	@ (8007b0c <xTaskGenericNotifyFromISR+0x1cc>)
 8007ab2:	441a      	add	r2, r3
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	f7fd fe81 	bl	80057c2 <vListInsertEnd>
 8007ac0:	e005      	b.n	8007ace <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	3318      	adds	r3, #24
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4811      	ldr	r0, [pc, #68]	@ (8007b10 <xTaskGenericNotifyFromISR+0x1d0>)
 8007aca:	f7fd fe7a 	bl	80057c2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad2:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <xTaskGenericNotifyFromISR+0x1d4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d908      	bls.n	8007aee <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <xTaskGenericNotifyFromISR+0x1d8>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f383 8811 	msr	BASEPRI, r3
}
 8007af8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3738      	adds	r7, #56	@ 0x38
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200013b8 	.word	0x200013b8
 8007b08:	20001398 	.word	0x20001398
 8007b0c:	20000ec0 	.word	0x20000ec0
 8007b10:	20001350 	.word	0x20001350
 8007b14:	20000ebc 	.word	0x20000ebc
 8007b18:	200013a4 	.word	0x200013a4

08007b1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b26:	4b21      	ldr	r3, [pc, #132]	@ (8007bac <prvAddCurrentTaskToDelayedList+0x90>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b2c:	4b20      	ldr	r3, [pc, #128]	@ (8007bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fd fea2 	bl	800587c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	d10a      	bne.n	8007b56 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b46:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4819      	ldr	r0, [pc, #100]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b50:	f7fd fe37 	bl	80057c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b54:	e026      	b.n	8007ba4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b5e:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d209      	bcs.n	8007b82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b6e:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7fd fe45 	bl	800580a <vListInsert>
}
 8007b80:	e010      	b.n	8007ba4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b82:	4b0e      	ldr	r3, [pc, #56]	@ (8007bbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fd fe3b 	bl	800580a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b94:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d202      	bcs.n	8007ba4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b9e:	4a08      	ldr	r2, [pc, #32]	@ (8007bc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6013      	str	r3, [r2, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20001394 	.word	0x20001394
 8007bb0:	20000ebc 	.word	0x20000ebc
 8007bb4:	2000137c 	.word	0x2000137c
 8007bb8:	2000134c 	.word	0x2000134c
 8007bbc:	20001348 	.word	0x20001348
 8007bc0:	200013b0 	.word	0x200013b0

08007bc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	@ 0x28
 8007bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bce:	f000 fb21 	bl	8008214 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c4c <xTimerCreateTimerTask+0x88>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d021      	beq.n	8007c1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007be2:	1d3a      	adds	r2, r7, #4
 8007be4:	f107 0108 	add.w	r1, r7, #8
 8007be8:	f107 030c 	add.w	r3, r7, #12
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fd fda1 	bl	8005734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	9202      	str	r2, [sp, #8]
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	2300      	movs	r3, #0
 8007c02:	460a      	mov	r2, r1
 8007c04:	4912      	ldr	r1, [pc, #72]	@ (8007c50 <xTimerCreateTimerTask+0x8c>)
 8007c06:	4813      	ldr	r0, [pc, #76]	@ (8007c54 <xTimerCreateTimerTask+0x90>)
 8007c08:	f7fe fd64 	bl	80066d4 <xTaskCreateStatic>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	4a12      	ldr	r2, [pc, #72]	@ (8007c58 <xTimerCreateTimerTask+0x94>)
 8007c10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c12:	4b11      	ldr	r3, [pc, #68]	@ (8007c58 <xTimerCreateTimerTask+0x94>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10d      	bne.n	8007c40 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	b672      	cpsid	i
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	b662      	cpsie	i
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	e7fd      	b.n	8007c3c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007c40:	697b      	ldr	r3, [r7, #20]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	200013ec 	.word	0x200013ec
 8007c50:	0800a1bc 	.word	0x0800a1bc
 8007c54:	08007d9d 	.word	0x08007d9d
 8007c58:	200013f0 	.word	0x200013f0

08007c5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	@ 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10d      	bne.n	8007c90 <xTimerGenericCommand+0x34>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	b672      	cpsid	i
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	b662      	cpsie	i
 8007c88:	623b      	str	r3, [r7, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	e7fd      	b.n	8007c8c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c90:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <xTimerGenericCommand+0x9c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d02a      	beq.n	8007cee <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	dc18      	bgt.n	8007cdc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007caa:	f7ff fb8b 	bl	80073c4 <xTaskGetSchedulerState>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d109      	bne.n	8007cc8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cb4:	4b10      	ldr	r3, [pc, #64]	@ (8007cf8 <xTimerGenericCommand+0x9c>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	f107 0110 	add.w	r1, r7, #16
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc0:	f7fd ff92 	bl	8005be8 <xQueueGenericSend>
 8007cc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007cc6:	e012      	b.n	8007cee <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf8 <xTimerGenericCommand+0x9c>)
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	f107 0110 	add.w	r1, r7, #16
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f7fd ff88 	bl	8005be8 <xQueueGenericSend>
 8007cd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007cda:	e008      	b.n	8007cee <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <xTimerGenericCommand+0x9c>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	f107 0110 	add.w	r1, r7, #16
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	f7fe f888 	bl	8005dfc <xQueueGenericSendFromISR>
 8007cec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3728      	adds	r7, #40	@ 0x28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200013ec 	.word	0x200013ec

08007cfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d06:	4b24      	ldr	r3, [pc, #144]	@ (8007d98 <prvProcessExpiredTimer+0x9c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fd fdb1 	bl	800587c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d025      	beq.n	8007d74 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	18d1      	adds	r1, r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	6978      	ldr	r0, [r7, #20]
 8007d36:	f000 f8d7 	bl	8007ee8 <prvInsertTimerInActiveList>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d022      	beq.n	8007d86 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d40:	2300      	movs	r3, #0
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6978      	ldr	r0, [r7, #20]
 8007d4c:	f7ff ff86 	bl	8007c5c <xTimerGenericCommand>
 8007d50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d116      	bne.n	8007d86 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	b672      	cpsid	i
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	b662      	cpsie	i
 8007d6c:	60fb      	str	r3, [r7, #12]
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	e7fd      	b.n	8007d70 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d7a:	f023 0301 	bic.w	r3, r3, #1
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	6978      	ldr	r0, [r7, #20]
 8007d8c:	4798      	blx	r3
}
 8007d8e:	bf00      	nop
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	200013e4 	.word	0x200013e4

08007d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f859 	bl	8007e60 <prvGetNextExpireTime>
 8007dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4619      	mov	r1, r3
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f805 	bl	8007dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dba:	f000 f8d7 	bl	8007f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dbe:	bf00      	nop
 8007dc0:	e7f0      	b.n	8007da4 <prvTimerTask+0x8>
	...

08007dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007dce:	f7fe fef3 	bl	8006bb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dd2:	f107 0308 	add.w	r3, r7, #8
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f866 	bl	8007ea8 <prvSampleTimeNow>
 8007ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d130      	bne.n	8007e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <prvProcessTimerOrBlockTask+0x3c>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d806      	bhi.n	8007e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007df2:	f7fe feef 	bl	8006bd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff ff7f 	bl	8007cfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dfe:	e024      	b.n	8007e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e06:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <prvProcessTimerOrBlockTask+0x90>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <prvProcessTimerOrBlockTask+0x50>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <prvProcessTimerOrBlockTask+0x52>
 8007e14:	2300      	movs	r3, #0
 8007e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e18:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <prvProcessTimerOrBlockTask+0x94>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	f7fe fc21 	bl	800666c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e2a:	f7fe fed3 	bl	8006bd4 <xTaskResumeAll>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e34:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <prvProcessTimerOrBlockTask+0x98>)
 8007e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	f3bf 8f6f 	isb	sy
}
 8007e44:	e001      	b.n	8007e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e46:	f7fe fec5 	bl	8006bd4 <xTaskResumeAll>
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	200013e8 	.word	0x200013e8
 8007e58:	200013ec 	.word	0x200013ec
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e68:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea4 <prvGetNextExpireTime+0x44>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <prvGetNextExpireTime+0x16>
 8007e72:	2201      	movs	r2, #1
 8007e74:	e000      	b.n	8007e78 <prvGetNextExpireTime+0x18>
 8007e76:	2200      	movs	r2, #0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e84:	4b07      	ldr	r3, [pc, #28]	@ (8007ea4 <prvGetNextExpireTime+0x44>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	e001      	b.n	8007e94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e94:	68fb      	ldr	r3, [r7, #12]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	200013e4 	.word	0x200013e4

08007ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007eb0:	f7fe ff30 	bl	8006d14 <xTaskGetTickCount>
 8007eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <prvSampleTimeNow+0x3c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d205      	bcs.n	8007ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ec0:	f000 f940 	bl	8008144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ed2:	4a04      	ldr	r2, [pc, #16]	@ (8007ee4 <prvSampleTimeNow+0x3c>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200013f4 	.word	0x200013f4

08007ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d812      	bhi.n	8007f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d302      	bcc.n	8007f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e01b      	b.n	8007f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f22:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <prvInsertTimerInActiveList+0x7c>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fd fc6c 	bl	800580a <vListInsert>
 8007f32:	e012      	b.n	8007f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d206      	bcs.n	8007f4a <prvInsertTimerInActiveList+0x62>
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d302      	bcc.n	8007f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	e007      	b.n	8007f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f4a:	4b07      	ldr	r3, [pc, #28]	@ (8007f68 <prvInsertTimerInActiveList+0x80>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7fd fc58 	bl	800580a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f5a:	697b      	ldr	r3, [r7, #20]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	200013e8 	.word	0x200013e8
 8007f68:	200013e4 	.word	0x200013e4

08007f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08e      	sub	sp, #56	@ 0x38
 8007f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f72:	e0d4      	b.n	800811e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da1b      	bge.n	8007fb2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f7a:	1d3b      	adds	r3, r7, #4
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10d      	bne.n	8007fa2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	b672      	cpsid	i
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	b662      	cpsie	i
 8007f9a:	61fb      	str	r3, [r7, #28]
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	e7fd      	b.n	8007f9e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fa8:	6850      	ldr	r0, [r2, #4]
 8007faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fac:	6892      	ldr	r2, [r2, #8]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f2c0 80b2 	blt.w	800811e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fd fc56 	bl	800587c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff ff68 	bl	8007ea8 <prvSampleTimeNow>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	f200 809b 	bhi.w	8008118 <prvProcessReceivedCommands+0x1ac>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <prvProcessReceivedCommands+0x7c>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	08008011 	.word	0x08008011
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	0800808b 	.word	0x0800808b
 8007ff8:	0800809f 	.word	0x0800809f
 8007ffc:	080080ef 	.word	0x080080ef
 8008000:	08008011 	.word	0x08008011
 8008004:	08008011 	.word	0x08008011
 8008008:	0800808b 	.word	0x0800808b
 800800c:	0800809f 	.word	0x0800809f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	b2da      	uxtb	r2, r3
 800801c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	18d1      	adds	r1, r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800802e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008030:	f7ff ff5a 	bl	8007ee8 <prvInsertTimerInActiveList>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d070      	beq.n	800811c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d065      	beq.n	800811c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	441a      	add	r2, r3
 8008058:	2300      	movs	r3, #0
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	2300      	movs	r3, #0
 800805e:	2100      	movs	r1, #0
 8008060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008062:	f7ff fdfb 	bl	8007c5c <xTimerGenericCommand>
 8008066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d156      	bne.n	800811c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	b672      	cpsid	i
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	b662      	cpsie	i
 8008082:	61bb      	str	r3, [r7, #24]
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	e7fd      	b.n	8008086 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800809c:	e03f      	b.n	800811e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	b672      	cpsid	i
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	b662      	cpsie	i
 80080d2:	617b      	str	r3, [r7, #20]
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	18d1      	adds	r1, r2, r3
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e8:	f7ff fefe 	bl	8007ee8 <prvInsertTimerInActiveList>
					break;
 80080ec:	e017      	b.n	800811e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80080fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080fe:	f000 fbd1 	bl	80088a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008102:	e00c      	b.n	800811e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008116:	e002      	b.n	800811e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008118:	bf00      	nop
 800811a:	e000      	b.n	800811e <prvProcessReceivedCommands+0x1b2>
					break;
 800811c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800811e:	4b08      	ldr	r3, [pc, #32]	@ (8008140 <prvProcessReceivedCommands+0x1d4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	1d39      	adds	r1, r7, #4
 8008124:	2200      	movs	r2, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd ff0c 	bl	8005f44 <xQueueReceive>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f47f af20 	bne.w	8007f74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	3730      	adds	r7, #48	@ 0x30
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200013ec 	.word	0x200013ec

08008144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800814a:	e04b      	b.n	80081e4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800814c:	4b2f      	ldr	r3, [pc, #188]	@ (800820c <prvSwitchTimerLists+0xc8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008156:	4b2d      	ldr	r3, [pc, #180]	@ (800820c <prvSwitchTimerLists+0xc8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3304      	adds	r3, #4
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd fb89 	bl	800587c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d031      	beq.n	80081e4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4413      	add	r3, r2
 8008188:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	d90e      	bls.n	80081b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800819e:	4b1b      	ldr	r3, [pc, #108]	@ (800820c <prvSwitchTimerLists+0xc8>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f7fd fb2e 	bl	800580a <vListInsert>
 80081ae:	e019      	b.n	80081e4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081b0:	2300      	movs	r3, #0
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	2100      	movs	r1, #0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fd4e 	bl	8007c5c <xTimerGenericCommand>
 80081c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10d      	bne.n	80081e4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	b672      	cpsid	i
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	b662      	cpsie	i
 80081dc:	603b      	str	r3, [r7, #0]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081e4:	4b09      	ldr	r3, [pc, #36]	@ (800820c <prvSwitchTimerLists+0xc8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ae      	bne.n	800814c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081ee:	4b07      	ldr	r3, [pc, #28]	@ (800820c <prvSwitchTimerLists+0xc8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081f4:	4b06      	ldr	r3, [pc, #24]	@ (8008210 <prvSwitchTimerLists+0xcc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a04      	ldr	r2, [pc, #16]	@ (800820c <prvSwitchTimerLists+0xc8>)
 80081fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081fc:	4a04      	ldr	r2, [pc, #16]	@ (8008210 <prvSwitchTimerLists+0xcc>)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6013      	str	r3, [r2, #0]
}
 8008202:	bf00      	nop
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	200013e4 	.word	0x200013e4
 8008210:	200013e8 	.word	0x200013e8

08008214 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800821a:	f000 f947 	bl	80084ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800821e:	4b15      	ldr	r3, [pc, #84]	@ (8008274 <prvCheckForValidListAndQueue+0x60>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d120      	bne.n	8008268 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008226:	4814      	ldr	r0, [pc, #80]	@ (8008278 <prvCheckForValidListAndQueue+0x64>)
 8008228:	f7fd fa9e 	bl	8005768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800822c:	4813      	ldr	r0, [pc, #76]	@ (800827c <prvCheckForValidListAndQueue+0x68>)
 800822e:	f7fd fa9b 	bl	8005768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008232:	4b13      	ldr	r3, [pc, #76]	@ (8008280 <prvCheckForValidListAndQueue+0x6c>)
 8008234:	4a10      	ldr	r2, [pc, #64]	@ (8008278 <prvCheckForValidListAndQueue+0x64>)
 8008236:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008238:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <prvCheckForValidListAndQueue+0x70>)
 800823a:	4a10      	ldr	r2, [pc, #64]	@ (800827c <prvCheckForValidListAndQueue+0x68>)
 800823c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800823e:	2300      	movs	r3, #0
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	4b11      	ldr	r3, [pc, #68]	@ (8008288 <prvCheckForValidListAndQueue+0x74>)
 8008244:	4a11      	ldr	r2, [pc, #68]	@ (800828c <prvCheckForValidListAndQueue+0x78>)
 8008246:	2110      	movs	r1, #16
 8008248:	200a      	movs	r0, #10
 800824a:	f7fd fbad 	bl	80059a8 <xQueueGenericCreateStatic>
 800824e:	4603      	mov	r3, r0
 8008250:	4a08      	ldr	r2, [pc, #32]	@ (8008274 <prvCheckForValidListAndQueue+0x60>)
 8008252:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008254:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <prvCheckForValidListAndQueue+0x60>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800825c:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <prvCheckForValidListAndQueue+0x60>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	490b      	ldr	r1, [pc, #44]	@ (8008290 <prvCheckForValidListAndQueue+0x7c>)
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe f9d8 	bl	8006618 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008268:	f000 f956 	bl	8008518 <vPortExitCritical>
}
 800826c:	bf00      	nop
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	200013ec 	.word	0x200013ec
 8008278:	200013bc 	.word	0x200013bc
 800827c:	200013d0 	.word	0x200013d0
 8008280:	200013e4 	.word	0x200013e4
 8008284:	200013e8 	.word	0x200013e8
 8008288:	20001498 	.word	0x20001498
 800828c:	200013f8 	.word	0x200013f8
 8008290:	0800a1c4 	.word	0x0800a1c4

08008294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3b04      	subs	r3, #4
 80082a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f023 0201 	bic.w	r2, r3, #1
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3b04      	subs	r3, #4
 80082c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082c4:	4a0c      	ldr	r2, [pc, #48]	@ (80082f8 <pxPortInitialiseStack+0x64>)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3b14      	subs	r3, #20
 80082ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3b04      	subs	r3, #4
 80082da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f06f 0202 	mvn.w	r2, #2
 80082e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3b20      	subs	r3, #32
 80082e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082ea:	68fb      	ldr	r3, [r7, #12]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	080082fd 	.word	0x080082fd

080082fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008306:	4b15      	ldr	r3, [pc, #84]	@ (800835c <prvTaskExitError+0x60>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d00d      	beq.n	800832c <prvTaskExitError+0x30>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	b672      	cpsid	i
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	b662      	cpsie	i
 8008324:	60fb      	str	r3, [r7, #12]
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <prvTaskExitError+0x2c>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	b672      	cpsid	i
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	b662      	cpsie	i
 8008340:	60bb      	str	r3, [r7, #8]
}
 8008342:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008344:	bf00      	nop
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0fc      	beq.n	8008346 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	2000000c 	.word	0x2000000c

08008360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008360:	4b07      	ldr	r3, [pc, #28]	@ (8008380 <pxCurrentTCBConst2>)
 8008362:	6819      	ldr	r1, [r3, #0]
 8008364:	6808      	ldr	r0, [r1, #0]
 8008366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836a:	f380 8809 	msr	PSP, r0
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f04f 0000 	mov.w	r0, #0
 8008376:	f380 8811 	msr	BASEPRI, r0
 800837a:	4770      	bx	lr
 800837c:	f3af 8000 	nop.w

08008380 <pxCurrentTCBConst2>:
 8008380:	20000ebc 	.word	0x20000ebc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop

08008388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008388:	4808      	ldr	r0, [pc, #32]	@ (80083ac <prvPortStartFirstTask+0x24>)
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	6800      	ldr	r0, [r0, #0]
 800838e:	f380 8808 	msr	MSP, r0
 8008392:	f04f 0000 	mov.w	r0, #0
 8008396:	f380 8814 	msr	CONTROL, r0
 800839a:	b662      	cpsie	i
 800839c:	b661      	cpsie	f
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	df00      	svc	0
 80083a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083aa:	bf00      	nop
 80083ac:	e000ed08 	.word	0xe000ed08

080083b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083b6:	4b37      	ldr	r3, [pc, #220]	@ (8008494 <xPortStartScheduler+0xe4>)
 80083b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	22ff      	movs	r2, #255	@ 0xff
 80083c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	4b2f      	ldr	r3, [pc, #188]	@ (8008498 <xPortStartScheduler+0xe8>)
 80083dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083de:	4b2f      	ldr	r3, [pc, #188]	@ (800849c <xPortStartScheduler+0xec>)
 80083e0:	2207      	movs	r2, #7
 80083e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083e4:	e009      	b.n	80083fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80083e6:	4b2d      	ldr	r3, [pc, #180]	@ (800849c <xPortStartScheduler+0xec>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a2b      	ldr	r2, [pc, #172]	@ (800849c <xPortStartScheduler+0xec>)
 80083ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008402:	2b80      	cmp	r3, #128	@ 0x80
 8008404:	d0ef      	beq.n	80083e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008406:	4b25      	ldr	r3, [pc, #148]	@ (800849c <xPortStartScheduler+0xec>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f1c3 0307 	rsb	r3, r3, #7
 800840e:	2b04      	cmp	r3, #4
 8008410:	d00d      	beq.n	800842e <xPortStartScheduler+0x7e>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	b672      	cpsid	i
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	b662      	cpsie	i
 8008426:	60bb      	str	r3, [r7, #8]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800842e:	4b1b      	ldr	r3, [pc, #108]	@ (800849c <xPortStartScheduler+0xec>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	4a19      	ldr	r2, [pc, #100]	@ (800849c <xPortStartScheduler+0xec>)
 8008436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008438:	4b18      	ldr	r3, [pc, #96]	@ (800849c <xPortStartScheduler+0xec>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008440:	4a16      	ldr	r2, [pc, #88]	@ (800849c <xPortStartScheduler+0xec>)
 8008442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	b2da      	uxtb	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800844c:	4b14      	ldr	r3, [pc, #80]	@ (80084a0 <xPortStartScheduler+0xf0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a13      	ldr	r2, [pc, #76]	@ (80084a0 <xPortStartScheduler+0xf0>)
 8008452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008458:	4b11      	ldr	r3, [pc, #68]	@ (80084a0 <xPortStartScheduler+0xf0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a10      	ldr	r2, [pc, #64]	@ (80084a0 <xPortStartScheduler+0xf0>)
 800845e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008464:	f000 f8dc 	bl	8008620 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008468:	4b0e      	ldr	r3, [pc, #56]	@ (80084a4 <xPortStartScheduler+0xf4>)
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800846e:	f000 f8fb 	bl	8008668 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008472:	4b0d      	ldr	r3, [pc, #52]	@ (80084a8 <xPortStartScheduler+0xf8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a0c      	ldr	r2, [pc, #48]	@ (80084a8 <xPortStartScheduler+0xf8>)
 8008478:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800847c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800847e:	f7ff ff83 	bl	8008388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008482:	f7fe fd13 	bl	8006eac <vTaskSwitchContext>
	prvTaskExitError();
 8008486:	f7ff ff39 	bl	80082fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	e000e400 	.word	0xe000e400
 8008498:	200014e8 	.word	0x200014e8
 800849c:	200014ec 	.word	0x200014ec
 80084a0:	e000ed20 	.word	0xe000ed20
 80084a4:	2000000c 	.word	0x2000000c
 80084a8:	e000ef34 	.word	0xe000ef34

080084ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	b672      	cpsid	i
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	b662      	cpsie	i
 80084c6:	607b      	str	r3, [r7, #4]
}
 80084c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084ca:	4b11      	ldr	r3, [pc, #68]	@ (8008510 <vPortEnterCritical+0x64>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008510 <vPortEnterCritical+0x64>)
 80084d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008510 <vPortEnterCritical+0x64>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d112      	bne.n	8008502 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <vPortEnterCritical+0x68>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00d      	beq.n	8008502 <vPortEnterCritical+0x56>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	b672      	cpsid	i
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	b662      	cpsie	i
 80084fa:	603b      	str	r3, [r7, #0]
}
 80084fc:	bf00      	nop
 80084fe:	bf00      	nop
 8008500:	e7fd      	b.n	80084fe <vPortEnterCritical+0x52>
	}
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	2000000c 	.word	0x2000000c
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800851e:	4b13      	ldr	r3, [pc, #76]	@ (800856c <vPortExitCritical+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10d      	bne.n	8008542 <vPortExitCritical+0x2a>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852a:	b672      	cpsid	i
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	b662      	cpsie	i
 800853a:	607b      	str	r3, [r7, #4]
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	e7fd      	b.n	800853e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008542:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <vPortExitCritical+0x54>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3b01      	subs	r3, #1
 8008548:	4a08      	ldr	r2, [pc, #32]	@ (800856c <vPortExitCritical+0x54>)
 800854a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <vPortExitCritical+0x54>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <vPortExitCritical+0x48>
 8008554:	2300      	movs	r3, #0
 8008556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f383 8811 	msr	BASEPRI, r3
}
 800855e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	2000000c 	.word	0x2000000c

08008570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008570:	f3ef 8009 	mrs	r0, PSP
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	4b15      	ldr	r3, [pc, #84]	@ (80085d0 <pxCurrentTCBConst>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	f01e 0f10 	tst.w	lr, #16
 8008580:	bf08      	it	eq
 8008582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008594:	b672      	cpsid	i
 8008596:	f380 8811 	msr	BASEPRI, r0
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	b662      	cpsie	i
 80085a4:	f7fe fc82 	bl	8006eac <vTaskSwitchContext>
 80085a8:	f04f 0000 	mov.w	r0, #0
 80085ac:	f380 8811 	msr	BASEPRI, r0
 80085b0:	bc09      	pop	{r0, r3}
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	6808      	ldr	r0, [r1, #0]
 80085b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	f01e 0f10 	tst.w	lr, #16
 80085be:	bf08      	it	eq
 80085c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085c4:	f380 8809 	msr	PSP, r0
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop

080085d0 <pxCurrentTCBConst>:
 80085d0:	20000ebc 	.word	0x20000ebc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	b672      	cpsid	i
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	b662      	cpsie	i
 80085f2:	607b      	str	r3, [r7, #4]
}
 80085f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085f6:	f7fe fb9d 	bl	8006d34 <xTaskIncrementTick>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008600:	4b06      	ldr	r3, [pc, #24]	@ (800861c <SysTick_Handler+0x44>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	2300      	movs	r3, #0
 800860a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f383 8811 	msr	BASEPRI, r3
}
 8008612:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008624:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <vPortSetupTimerInterrupt+0x34>)
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800862a:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <vPortSetupTimerInterrupt+0x38>)
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008630:	4b0a      	ldr	r3, [pc, #40]	@ (800865c <vPortSetupTimerInterrupt+0x3c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0a      	ldr	r2, [pc, #40]	@ (8008660 <vPortSetupTimerInterrupt+0x40>)
 8008636:	fba2 2303 	umull	r2, r3, r2, r3
 800863a:	099b      	lsrs	r3, r3, #6
 800863c:	4a09      	ldr	r2, [pc, #36]	@ (8008664 <vPortSetupTimerInterrupt+0x44>)
 800863e:	3b01      	subs	r3, #1
 8008640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008642:	4b04      	ldr	r3, [pc, #16]	@ (8008654 <vPortSetupTimerInterrupt+0x34>)
 8008644:	2207      	movs	r2, #7
 8008646:	601a      	str	r2, [r3, #0]
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	e000e010 	.word	0xe000e010
 8008658:	e000e018 	.word	0xe000e018
 800865c:	20000000 	.word	0x20000000
 8008660:	10624dd3 	.word	0x10624dd3
 8008664:	e000e014 	.word	0xe000e014

08008668 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008668:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008678 <vPortEnableVFP+0x10>
 800866c:	6801      	ldr	r1, [r0, #0]
 800866e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008672:	6001      	str	r1, [r0, #0]
 8008674:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008676:	bf00      	nop
 8008678:	e000ed88 	.word	0xe000ed88

0800867c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008682:	f3ef 8305 	mrs	r3, IPSR
 8008686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b0f      	cmp	r3, #15
 800868c:	d917      	bls.n	80086be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800868e:	4a1a      	ldr	r2, [pc, #104]	@ (80086f8 <vPortValidateInterruptPriority+0x7c>)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008698:	4b18      	ldr	r3, [pc, #96]	@ (80086fc <vPortValidateInterruptPriority+0x80>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	7afa      	ldrb	r2, [r7, #11]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d20d      	bcs.n	80086be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	b672      	cpsid	i
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	b662      	cpsie	i
 80086b6:	607b      	str	r3, [r7, #4]
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	e7fd      	b.n	80086ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086be:	4b10      	ldr	r3, [pc, #64]	@ (8008700 <vPortValidateInterruptPriority+0x84>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80086c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <vPortValidateInterruptPriority+0x88>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d90d      	bls.n	80086ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	b672      	cpsid	i
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	b662      	cpsie	i
 80086e2:	603b      	str	r3, [r7, #0]
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
 80086e8:	e7fd      	b.n	80086e6 <vPortValidateInterruptPriority+0x6a>
	}
 80086ea:	bf00      	nop
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	e000e3f0 	.word	0xe000e3f0
 80086fc:	200014e8 	.word	0x200014e8
 8008700:	e000ed0c 	.word	0xe000ed0c
 8008704:	200014ec 	.word	0x200014ec

08008708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	@ 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008714:	f7fe fa50 	bl	8006bb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008718:	4b5d      	ldr	r3, [pc, #372]	@ (8008890 <pvPortMalloc+0x188>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008720:	f000 f920 	bl	8008964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008724:	4b5b      	ldr	r3, [pc, #364]	@ (8008894 <pvPortMalloc+0x18c>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8094 	bne.w	800885a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d020      	beq.n	800877a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008738:	2208      	movs	r2, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d017      	beq.n	800877a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f023 0307 	bic.w	r3, r3, #7
 8008750:	3308      	adds	r3, #8
 8008752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <pvPortMalloc+0x72>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	b672      	cpsid	i
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	b662      	cpsie	i
 8008772:	617b      	str	r3, [r7, #20]
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop
 8008778:	e7fd      	b.n	8008776 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d06c      	beq.n	800885a <pvPortMalloc+0x152>
 8008780:	4b45      	ldr	r3, [pc, #276]	@ (8008898 <pvPortMalloc+0x190>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d867      	bhi.n	800885a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800878a:	4b44      	ldr	r3, [pc, #272]	@ (800889c <pvPortMalloc+0x194>)
 800878c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800878e:	4b43      	ldr	r3, [pc, #268]	@ (800889c <pvPortMalloc+0x194>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008794:	e004      	b.n	80087a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d903      	bls.n	80087b2 <pvPortMalloc+0xaa>
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f1      	bne.n	8008796 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087b2:	4b37      	ldr	r3, [pc, #220]	@ (8008890 <pvPortMalloc+0x188>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d04e      	beq.n	800885a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2208      	movs	r2, #8
 80087c2:	4413      	add	r3, r2
 80087c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	1ad2      	subs	r2, r2, r3
 80087d6:	2308      	movs	r3, #8
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	429a      	cmp	r2, r3
 80087dc:	d922      	bls.n	8008824 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4413      	add	r3, r2
 80087e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f003 0307 	and.w	r3, r3, #7
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00d      	beq.n	800880c <pvPortMalloc+0x104>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f4:	b672      	cpsid	i
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	b662      	cpsie	i
 8008804:	613b      	str	r3, [r7, #16]
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	1ad2      	subs	r2, r2, r3
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800881e:	69b8      	ldr	r0, [r7, #24]
 8008820:	f000 f904 	bl	8008a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008824:	4b1c      	ldr	r3, [pc, #112]	@ (8008898 <pvPortMalloc+0x190>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	4a1a      	ldr	r2, [pc, #104]	@ (8008898 <pvPortMalloc+0x190>)
 8008830:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008832:	4b19      	ldr	r3, [pc, #100]	@ (8008898 <pvPortMalloc+0x190>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b1a      	ldr	r3, [pc, #104]	@ (80088a0 <pvPortMalloc+0x198>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d203      	bcs.n	8008846 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800883e:	4b16      	ldr	r3, [pc, #88]	@ (8008898 <pvPortMalloc+0x190>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a17      	ldr	r2, [pc, #92]	@ (80088a0 <pvPortMalloc+0x198>)
 8008844:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	4b12      	ldr	r3, [pc, #72]	@ (8008894 <pvPortMalloc+0x18c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	431a      	orrs	r2, r3
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800885a:	f7fe f9bb 	bl	8006bd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00d      	beq.n	8008884 <pvPortMalloc+0x17c>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	b672      	cpsid	i
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	b662      	cpsie	i
 800887c:	60fb      	str	r3, [r7, #12]
}
 800887e:	bf00      	nop
 8008880:	bf00      	nop
 8008882:	e7fd      	b.n	8008880 <pvPortMalloc+0x178>
	return pvReturn;
 8008884:	69fb      	ldr	r3, [r7, #28]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3728      	adds	r7, #40	@ 0x28
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20019b98 	.word	0x20019b98
 8008894:	20019ba4 	.word	0x20019ba4
 8008898:	20019b9c 	.word	0x20019b9c
 800889c:	20019b90 	.word	0x20019b90
 80088a0:	20019ba0 	.word	0x20019ba0

080088a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04e      	beq.n	8008954 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088b6:	2308      	movs	r3, #8
 80088b8:	425b      	negs	r3, r3
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4413      	add	r3, r2
 80088be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	4b24      	ldr	r3, [pc, #144]	@ (800895c <vPortFree+0xb8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4013      	ands	r3, r2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10d      	bne.n	80088ee <vPortFree+0x4a>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	b672      	cpsid	i
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	b662      	cpsie	i
 80088e6:	60fb      	str	r3, [r7, #12]
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00d      	beq.n	8008912 <vPortFree+0x6e>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	b672      	cpsid	i
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	b662      	cpsie	i
 800890a:	60bb      	str	r3, [r7, #8]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	4b11      	ldr	r3, [pc, #68]	@ (800895c <vPortFree+0xb8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d019      	beq.n	8008954 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d115      	bne.n	8008954 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <vPortFree+0xb8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	43db      	mvns	r3, r3
 8008932:	401a      	ands	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008938:	f7fe f93e 	bl	8006bb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <vPortFree+0xbc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4413      	add	r3, r2
 8008946:	4a06      	ldr	r2, [pc, #24]	@ (8008960 <vPortFree+0xbc>)
 8008948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800894a:	6938      	ldr	r0, [r7, #16]
 800894c:	f000 f86e 	bl	8008a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008950:	f7fe f940 	bl	8006bd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20019ba4 	.word	0x20019ba4
 8008960:	20019b9c 	.word	0x20019b9c

08008964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800896a:	4b29      	ldr	r3, [pc, #164]	@ (8008a10 <prvHeapInit+0xac>)
 800896c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800896e:	4b29      	ldr	r3, [pc, #164]	@ (8008a14 <prvHeapInit+0xb0>)
 8008970:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00c      	beq.n	8008996 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f023 0307 	bic.w	r3, r3, #7
 8008988:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	4a20      	ldr	r2, [pc, #128]	@ (8008a14 <prvHeapInit+0xb0>)
 8008992:	4413      	add	r3, r2
 8008994:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800899a:	4a1f      	ldr	r2, [pc, #124]	@ (8008a18 <prvHeapInit+0xb4>)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a18 <prvHeapInit+0xb4>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	4413      	add	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089ae:	2208      	movs	r2, #8
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f023 0307 	bic.w	r3, r3, #7
 80089bc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4a16      	ldr	r2, [pc, #88]	@ (8008a1c <prvHeapInit+0xb8>)
 80089c2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089c4:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <prvHeapInit+0xb8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2200      	movs	r2, #0
 80089ca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089cc:	4b13      	ldr	r3, [pc, #76]	@ (8008a1c <prvHeapInit+0xb8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	1ad2      	subs	r2, r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089e2:	4b0e      	ldr	r3, [pc, #56]	@ (8008a1c <prvHeapInit+0xb8>)
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008a20 <prvHeapInit+0xbc>)
 80089f0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4a0b      	ldr	r2, [pc, #44]	@ (8008a24 <prvHeapInit+0xc0>)
 80089f8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008a28 <prvHeapInit+0xc4>)
 80089fc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a00:	601a      	str	r2, [r3, #0]
}
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	000186a0 	.word	0x000186a0
 8008a14:	200014f0 	.word	0x200014f0
 8008a18:	20019b90 	.word	0x20019b90
 8008a1c:	20019b98 	.word	0x20019b98
 8008a20:	20019ba0 	.word	0x20019ba0
 8008a24:	20019b9c 	.word	0x20019b9c
 8008a28:	20019ba4 	.word	0x20019ba4

08008a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a34:	4b28      	ldr	r3, [pc, #160]	@ (8008ad8 <prvInsertBlockIntoFreeList+0xac>)
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e002      	b.n	8008a40 <prvInsertBlockIntoFreeList+0x14>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d8f7      	bhi.n	8008a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d108      	bne.n	8008a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	441a      	add	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	441a      	add	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d118      	bne.n	8008ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b15      	ldr	r3, [pc, #84]	@ (8008adc <prvInsertBlockIntoFreeList+0xb0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d00d      	beq.n	8008aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	441a      	add	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e008      	b.n	8008abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8008adc <prvInsertBlockIntoFreeList+0xb0>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e003      	b.n	8008abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d002      	beq.n	8008aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	20019b90 	.word	0x20019b90
 8008adc:	20019b98 	.word	0x20019b98

08008ae0 <__sflush_r>:
 8008ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae8:	0716      	lsls	r6, r2, #28
 8008aea:	4605      	mov	r5, r0
 8008aec:	460c      	mov	r4, r1
 8008aee:	d454      	bmi.n	8008b9a <__sflush_r+0xba>
 8008af0:	684b      	ldr	r3, [r1, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dc02      	bgt.n	8008afc <__sflush_r+0x1c>
 8008af6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dd48      	ble.n	8008b8e <__sflush_r+0xae>
 8008afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	d045      	beq.n	8008b8e <__sflush_r+0xae>
 8008b02:	2300      	movs	r3, #0
 8008b04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b08:	682f      	ldr	r7, [r5, #0]
 8008b0a:	6a21      	ldr	r1, [r4, #32]
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	d030      	beq.n	8008b72 <__sflush_r+0x92>
 8008b10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	0759      	lsls	r1, r3, #29
 8008b16:	d505      	bpl.n	8008b24 <__sflush_r+0x44>
 8008b18:	6863      	ldr	r3, [r4, #4]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b1e:	b10b      	cbz	r3, 8008b24 <__sflush_r+0x44>
 8008b20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	2300      	movs	r3, #0
 8008b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b28:	6a21      	ldr	r1, [r4, #32]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b0      	blx	r6
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	d106      	bne.n	8008b42 <__sflush_r+0x62>
 8008b34:	6829      	ldr	r1, [r5, #0]
 8008b36:	291d      	cmp	r1, #29
 8008b38:	d82b      	bhi.n	8008b92 <__sflush_r+0xb2>
 8008b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008be4 <__sflush_r+0x104>)
 8008b3c:	410a      	asrs	r2, r1
 8008b3e:	07d6      	lsls	r6, r2, #31
 8008b40:	d427      	bmi.n	8008b92 <__sflush_r+0xb2>
 8008b42:	2200      	movs	r2, #0
 8008b44:	6062      	str	r2, [r4, #4]
 8008b46:	04d9      	lsls	r1, r3, #19
 8008b48:	6922      	ldr	r2, [r4, #16]
 8008b4a:	6022      	str	r2, [r4, #0]
 8008b4c:	d504      	bpl.n	8008b58 <__sflush_r+0x78>
 8008b4e:	1c42      	adds	r2, r0, #1
 8008b50:	d101      	bne.n	8008b56 <__sflush_r+0x76>
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	b903      	cbnz	r3, 8008b58 <__sflush_r+0x78>
 8008b56:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b5a:	602f      	str	r7, [r5, #0]
 8008b5c:	b1b9      	cbz	r1, 8008b8e <__sflush_r+0xae>
 8008b5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b62:	4299      	cmp	r1, r3
 8008b64:	d002      	beq.n	8008b6c <__sflush_r+0x8c>
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fbac 	bl	80092c4 <_free_r>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b70:	e00d      	b.n	8008b8e <__sflush_r+0xae>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	4602      	mov	r2, r0
 8008b7a:	1c50      	adds	r0, r2, #1
 8008b7c:	d1c9      	bne.n	8008b12 <__sflush_r+0x32>
 8008b7e:	682b      	ldr	r3, [r5, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0c6      	beq.n	8008b12 <__sflush_r+0x32>
 8008b84:	2b1d      	cmp	r3, #29
 8008b86:	d001      	beq.n	8008b8c <__sflush_r+0xac>
 8008b88:	2b16      	cmp	r3, #22
 8008b8a:	d11e      	bne.n	8008bca <__sflush_r+0xea>
 8008b8c:	602f      	str	r7, [r5, #0]
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e022      	b.n	8008bd8 <__sflush_r+0xf8>
 8008b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b96:	b21b      	sxth	r3, r3
 8008b98:	e01b      	b.n	8008bd2 <__sflush_r+0xf2>
 8008b9a:	690f      	ldr	r7, [r1, #16]
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	d0f6      	beq.n	8008b8e <__sflush_r+0xae>
 8008ba0:	0793      	lsls	r3, r2, #30
 8008ba2:	680e      	ldr	r6, [r1, #0]
 8008ba4:	bf08      	it	eq
 8008ba6:	694b      	ldreq	r3, [r1, #20]
 8008ba8:	600f      	str	r7, [r1, #0]
 8008baa:	bf18      	it	ne
 8008bac:	2300      	movne	r3, #0
 8008bae:	eba6 0807 	sub.w	r8, r6, r7
 8008bb2:	608b      	str	r3, [r1, #8]
 8008bb4:	f1b8 0f00 	cmp.w	r8, #0
 8008bb8:	dde9      	ble.n	8008b8e <__sflush_r+0xae>
 8008bba:	6a21      	ldr	r1, [r4, #32]
 8008bbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bbe:	4643      	mov	r3, r8
 8008bc0:	463a      	mov	r2, r7
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b0      	blx	r6
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	dc08      	bgt.n	8008bdc <__sflush_r+0xfc>
 8008bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bdc:	4407      	add	r7, r0
 8008bde:	eba8 0800 	sub.w	r8, r8, r0
 8008be2:	e7e7      	b.n	8008bb4 <__sflush_r+0xd4>
 8008be4:	dfbffffe 	.word	0xdfbffffe

08008be8 <_fflush_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	690b      	ldr	r3, [r1, #16]
 8008bec:	4605      	mov	r5, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	b913      	cbnz	r3, 8008bf8 <_fflush_r+0x10>
 8008bf2:	2500      	movs	r5, #0
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	b118      	cbz	r0, 8008c02 <_fflush_r+0x1a>
 8008bfa:	6a03      	ldr	r3, [r0, #32]
 8008bfc:	b90b      	cbnz	r3, 8008c02 <_fflush_r+0x1a>
 8008bfe:	f000 f8bb 	bl	8008d78 <__sinit>
 8008c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0f3      	beq.n	8008bf2 <_fflush_r+0xa>
 8008c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c0c:	07d0      	lsls	r0, r2, #31
 8008c0e:	d404      	bmi.n	8008c1a <_fflush_r+0x32>
 8008c10:	0599      	lsls	r1, r3, #22
 8008c12:	d402      	bmi.n	8008c1a <_fflush_r+0x32>
 8008c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c16:	f000 fb44 	bl	80092a2 <__retarget_lock_acquire_recursive>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f7ff ff5f 	bl	8008ae0 <__sflush_r>
 8008c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c24:	07da      	lsls	r2, r3, #31
 8008c26:	4605      	mov	r5, r0
 8008c28:	d4e4      	bmi.n	8008bf4 <_fflush_r+0xc>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	059b      	lsls	r3, r3, #22
 8008c2e:	d4e1      	bmi.n	8008bf4 <_fflush_r+0xc>
 8008c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c32:	f000 fb37 	bl	80092a4 <__retarget_lock_release_recursive>
 8008c36:	e7dd      	b.n	8008bf4 <_fflush_r+0xc>

08008c38 <fflush>:
 8008c38:	4601      	mov	r1, r0
 8008c3a:	b920      	cbnz	r0, 8008c46 <fflush+0xe>
 8008c3c:	4a04      	ldr	r2, [pc, #16]	@ (8008c50 <fflush+0x18>)
 8008c3e:	4905      	ldr	r1, [pc, #20]	@ (8008c54 <fflush+0x1c>)
 8008c40:	4805      	ldr	r0, [pc, #20]	@ (8008c58 <fflush+0x20>)
 8008c42:	f000 b8b1 	b.w	8008da8 <_fwalk_sglue>
 8008c46:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <fflush+0x24>)
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	f7ff bfcd 	b.w	8008be8 <_fflush_r>
 8008c4e:	bf00      	nop
 8008c50:	20000010 	.word	0x20000010
 8008c54:	08008be9 	.word	0x08008be9
 8008c58:	20000020 	.word	0x20000020
 8008c5c:	2000001c 	.word	0x2000001c

08008c60 <std>:
 8008c60:	2300      	movs	r3, #0
 8008c62:	b510      	push	{r4, lr}
 8008c64:	4604      	mov	r4, r0
 8008c66:	e9c0 3300 	strd	r3, r3, [r0]
 8008c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6e:	6083      	str	r3, [r0, #8]
 8008c70:	8181      	strh	r1, [r0, #12]
 8008c72:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c74:	81c2      	strh	r2, [r0, #14]
 8008c76:	6183      	str	r3, [r0, #24]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	305c      	adds	r0, #92	@ 0x5c
 8008c7e:	f000 fa2d 	bl	80090dc <memset>
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <std+0x58>)
 8008c84:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c86:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <std+0x5c>)
 8008c88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <std+0x60>)
 8008c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <std+0x64>)
 8008c90:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c92:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <std+0x68>)
 8008c94:	6224      	str	r4, [r4, #32]
 8008c96:	429c      	cmp	r4, r3
 8008c98:	d006      	beq.n	8008ca8 <std+0x48>
 8008c9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c9e:	4294      	cmp	r4, r2
 8008ca0:	d002      	beq.n	8008ca8 <std+0x48>
 8008ca2:	33d0      	adds	r3, #208	@ 0xd0
 8008ca4:	429c      	cmp	r4, r3
 8008ca6:	d105      	bne.n	8008cb4 <std+0x54>
 8008ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb0:	f000 baf6 	b.w	80092a0 <__retarget_lock_init_recursive>
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	bf00      	nop
 8008cb8:	08008f2d 	.word	0x08008f2d
 8008cbc:	08008f4f 	.word	0x08008f4f
 8008cc0:	08008f87 	.word	0x08008f87
 8008cc4:	08008fab 	.word	0x08008fab
 8008cc8:	20019ba8 	.word	0x20019ba8

08008ccc <stdio_exit_handler>:
 8008ccc:	4a02      	ldr	r2, [pc, #8]	@ (8008cd8 <stdio_exit_handler+0xc>)
 8008cce:	4903      	ldr	r1, [pc, #12]	@ (8008cdc <stdio_exit_handler+0x10>)
 8008cd0:	4803      	ldr	r0, [pc, #12]	@ (8008ce0 <stdio_exit_handler+0x14>)
 8008cd2:	f000 b869 	b.w	8008da8 <_fwalk_sglue>
 8008cd6:	bf00      	nop
 8008cd8:	20000010 	.word	0x20000010
 8008cdc:	08008be9 	.word	0x08008be9
 8008ce0:	20000020 	.word	0x20000020

08008ce4 <cleanup_stdio>:
 8008ce4:	6841      	ldr	r1, [r0, #4]
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d18 <cleanup_stdio+0x34>)
 8008ce8:	4299      	cmp	r1, r3
 8008cea:	b510      	push	{r4, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	d001      	beq.n	8008cf4 <cleanup_stdio+0x10>
 8008cf0:	f7ff ff7a 	bl	8008be8 <_fflush_r>
 8008cf4:	68a1      	ldr	r1, [r4, #8]
 8008cf6:	4b09      	ldr	r3, [pc, #36]	@ (8008d1c <cleanup_stdio+0x38>)
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <cleanup_stdio+0x1e>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f7ff ff73 	bl	8008be8 <_fflush_r>
 8008d02:	68e1      	ldr	r1, [r4, #12]
 8008d04:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <cleanup_stdio+0x3c>)
 8008d06:	4299      	cmp	r1, r3
 8008d08:	d004      	beq.n	8008d14 <cleanup_stdio+0x30>
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	f7ff bf6a 	b.w	8008be8 <_fflush_r>
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	bf00      	nop
 8008d18:	20019ba8 	.word	0x20019ba8
 8008d1c:	20019c10 	.word	0x20019c10
 8008d20:	20019c78 	.word	0x20019c78

08008d24 <global_stdio_init.part.0>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	4b0b      	ldr	r3, [pc, #44]	@ (8008d54 <global_stdio_init.part.0+0x30>)
 8008d28:	4c0b      	ldr	r4, [pc, #44]	@ (8008d58 <global_stdio_init.part.0+0x34>)
 8008d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d5c <global_stdio_init.part.0+0x38>)
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	2200      	movs	r2, #0
 8008d32:	2104      	movs	r1, #4
 8008d34:	f7ff ff94 	bl	8008c60 <std>
 8008d38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	2109      	movs	r1, #9
 8008d40:	f7ff ff8e 	bl	8008c60 <std>
 8008d44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d48:	2202      	movs	r2, #2
 8008d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4e:	2112      	movs	r1, #18
 8008d50:	f7ff bf86 	b.w	8008c60 <std>
 8008d54:	20019ce0 	.word	0x20019ce0
 8008d58:	20019ba8 	.word	0x20019ba8
 8008d5c:	08008ccd 	.word	0x08008ccd

08008d60 <__sfp_lock_acquire>:
 8008d60:	4801      	ldr	r0, [pc, #4]	@ (8008d68 <__sfp_lock_acquire+0x8>)
 8008d62:	f000 ba9e 	b.w	80092a2 <__retarget_lock_acquire_recursive>
 8008d66:	bf00      	nop
 8008d68:	20019ce9 	.word	0x20019ce9

08008d6c <__sfp_lock_release>:
 8008d6c:	4801      	ldr	r0, [pc, #4]	@ (8008d74 <__sfp_lock_release+0x8>)
 8008d6e:	f000 ba99 	b.w	80092a4 <__retarget_lock_release_recursive>
 8008d72:	bf00      	nop
 8008d74:	20019ce9 	.word	0x20019ce9

08008d78 <__sinit>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	f7ff fff0 	bl	8008d60 <__sfp_lock_acquire>
 8008d80:	6a23      	ldr	r3, [r4, #32]
 8008d82:	b11b      	cbz	r3, 8008d8c <__sinit+0x14>
 8008d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d88:	f7ff bff0 	b.w	8008d6c <__sfp_lock_release>
 8008d8c:	4b04      	ldr	r3, [pc, #16]	@ (8008da0 <__sinit+0x28>)
 8008d8e:	6223      	str	r3, [r4, #32]
 8008d90:	4b04      	ldr	r3, [pc, #16]	@ (8008da4 <__sinit+0x2c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1f5      	bne.n	8008d84 <__sinit+0xc>
 8008d98:	f7ff ffc4 	bl	8008d24 <global_stdio_init.part.0>
 8008d9c:	e7f2      	b.n	8008d84 <__sinit+0xc>
 8008d9e:	bf00      	nop
 8008da0:	08008ce5 	.word	0x08008ce5
 8008da4:	20019ce0 	.word	0x20019ce0

08008da8 <_fwalk_sglue>:
 8008da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dac:	4607      	mov	r7, r0
 8008dae:	4688      	mov	r8, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	2600      	movs	r6, #0
 8008db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008db8:	f1b9 0901 	subs.w	r9, r9, #1
 8008dbc:	d505      	bpl.n	8008dca <_fwalk_sglue+0x22>
 8008dbe:	6824      	ldr	r4, [r4, #0]
 8008dc0:	2c00      	cmp	r4, #0
 8008dc2:	d1f7      	bne.n	8008db4 <_fwalk_sglue+0xc>
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d907      	bls.n	8008de0 <_fwalk_sglue+0x38>
 8008dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	d003      	beq.n	8008de0 <_fwalk_sglue+0x38>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4638      	mov	r0, r7
 8008ddc:	47c0      	blx	r8
 8008dde:	4306      	orrs	r6, r0
 8008de0:	3568      	adds	r5, #104	@ 0x68
 8008de2:	e7e9      	b.n	8008db8 <_fwalk_sglue+0x10>

08008de4 <iprintf>:
 8008de4:	b40f      	push	{r0, r1, r2, r3}
 8008de6:	b507      	push	{r0, r1, r2, lr}
 8008de8:	4906      	ldr	r1, [pc, #24]	@ (8008e04 <iprintf+0x20>)
 8008dea:	ab04      	add	r3, sp, #16
 8008dec:	6808      	ldr	r0, [r1, #0]
 8008dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df2:	6881      	ldr	r1, [r0, #8]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	f000 fcdf 	bl	80097b8 <_vfiprintf_r>
 8008dfa:	b003      	add	sp, #12
 8008dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e00:	b004      	add	sp, #16
 8008e02:	4770      	bx	lr
 8008e04:	2000001c 	.word	0x2000001c

08008e08 <_puts_r>:
 8008e08:	6a03      	ldr	r3, [r0, #32]
 8008e0a:	b570      	push	{r4, r5, r6, lr}
 8008e0c:	6884      	ldr	r4, [r0, #8]
 8008e0e:	4605      	mov	r5, r0
 8008e10:	460e      	mov	r6, r1
 8008e12:	b90b      	cbnz	r3, 8008e18 <_puts_r+0x10>
 8008e14:	f7ff ffb0 	bl	8008d78 <__sinit>
 8008e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e1a:	07db      	lsls	r3, r3, #31
 8008e1c:	d405      	bmi.n	8008e2a <_puts_r+0x22>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	0598      	lsls	r0, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_puts_r+0x22>
 8008e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e26:	f000 fa3c 	bl	80092a2 <__retarget_lock_acquire_recursive>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	0719      	lsls	r1, r3, #28
 8008e2e:	d502      	bpl.n	8008e36 <_puts_r+0x2e>
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d135      	bne.n	8008ea2 <_puts_r+0x9a>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f000 f8f9 	bl	8009030 <__swsetup_r>
 8008e3e:	b380      	cbz	r0, 8008ea2 <_puts_r+0x9a>
 8008e40:	f04f 35ff 	mov.w	r5, #4294967295
 8008e44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e46:	07da      	lsls	r2, r3, #31
 8008e48:	d405      	bmi.n	8008e56 <_puts_r+0x4e>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	059b      	lsls	r3, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_puts_r+0x4e>
 8008e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e52:	f000 fa27 	bl	80092a4 <__retarget_lock_release_recursive>
 8008e56:	4628      	mov	r0, r5
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da04      	bge.n	8008e68 <_puts_r+0x60>
 8008e5e:	69a2      	ldr	r2, [r4, #24]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	dc17      	bgt.n	8008e94 <_puts_r+0x8c>
 8008e64:	290a      	cmp	r1, #10
 8008e66:	d015      	beq.n	8008e94 <_puts_r+0x8c>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	7019      	strb	r1, [r3, #0]
 8008e70:	68a3      	ldr	r3, [r4, #8]
 8008e72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e76:	3b01      	subs	r3, #1
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	2900      	cmp	r1, #0
 8008e7c:	d1ed      	bne.n	8008e5a <_puts_r+0x52>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da11      	bge.n	8008ea6 <_puts_r+0x9e>
 8008e82:	4622      	mov	r2, r4
 8008e84:	210a      	movs	r1, #10
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 f893 	bl	8008fb2 <__swbuf_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d0d7      	beq.n	8008e40 <_puts_r+0x38>
 8008e90:	250a      	movs	r5, #10
 8008e92:	e7d7      	b.n	8008e44 <_puts_r+0x3c>
 8008e94:	4622      	mov	r2, r4
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f88b 	bl	8008fb2 <__swbuf_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d1e7      	bne.n	8008e70 <_puts_r+0x68>
 8008ea0:	e7ce      	b.n	8008e40 <_puts_r+0x38>
 8008ea2:	3e01      	subs	r6, #1
 8008ea4:	e7e4      	b.n	8008e70 <_puts_r+0x68>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	6022      	str	r2, [r4, #0]
 8008eac:	220a      	movs	r2, #10
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	e7ee      	b.n	8008e90 <_puts_r+0x88>
	...

08008eb4 <puts>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	@ (8008ec0 <puts+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f7ff bfa5 	b.w	8008e08 <_puts_r>
 8008ebe:	bf00      	nop
 8008ec0:	2000001c 	.word	0x2000001c

08008ec4 <sniprintf>:
 8008ec4:	b40c      	push	{r2, r3}
 8008ec6:	b530      	push	{r4, r5, lr}
 8008ec8:	4b17      	ldr	r3, [pc, #92]	@ (8008f28 <sniprintf+0x64>)
 8008eca:	1e0c      	subs	r4, r1, #0
 8008ecc:	681d      	ldr	r5, [r3, #0]
 8008ece:	b09d      	sub	sp, #116	@ 0x74
 8008ed0:	da08      	bge.n	8008ee4 <sniprintf+0x20>
 8008ed2:	238b      	movs	r3, #139	@ 0x8b
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	b01d      	add	sp, #116	@ 0x74
 8008edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ee0:	b002      	add	sp, #8
 8008ee2:	4770      	bx	lr
 8008ee4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008ee8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008eec:	bf14      	ite	ne
 8008eee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ef2:	4623      	moveq	r3, r4
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	9307      	str	r3, [sp, #28]
 8008ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008efc:	9002      	str	r0, [sp, #8]
 8008efe:	9006      	str	r0, [sp, #24]
 8008f00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f06:	ab21      	add	r3, sp, #132	@ 0x84
 8008f08:	a902      	add	r1, sp, #8
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	f000 fb2d 	bl	800956c <_svfiprintf_r>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	bfbc      	itt	lt
 8008f16:	238b      	movlt	r3, #139	@ 0x8b
 8008f18:	602b      	strlt	r3, [r5, #0]
 8008f1a:	2c00      	cmp	r4, #0
 8008f1c:	d0dd      	beq.n	8008eda <sniprintf+0x16>
 8008f1e:	9b02      	ldr	r3, [sp, #8]
 8008f20:	2200      	movs	r2, #0
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	e7d9      	b.n	8008eda <sniprintf+0x16>
 8008f26:	bf00      	nop
 8008f28:	2000001c 	.word	0x2000001c

08008f2c <__sread>:
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f34:	f000 f966 	bl	8009204 <_read_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	bfab      	itete	ge
 8008f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f40:	181b      	addge	r3, r3, r0
 8008f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f46:	bfac      	ite	ge
 8008f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f4a:	81a3      	strhlt	r3, [r4, #12]
 8008f4c:	bd10      	pop	{r4, pc}

08008f4e <__swrite>:
 8008f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	461f      	mov	r7, r3
 8008f54:	898b      	ldrh	r3, [r1, #12]
 8008f56:	05db      	lsls	r3, r3, #23
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	d505      	bpl.n	8008f6c <__swrite+0x1e>
 8008f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f64:	2302      	movs	r3, #2
 8008f66:	2200      	movs	r2, #0
 8008f68:	f000 f93a 	bl	80091e0 <_lseek_r>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	4632      	mov	r2, r6
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	f000 b951 	b.w	8009228 <_write_r>

08008f86 <__sseek>:
 8008f86:	b510      	push	{r4, lr}
 8008f88:	460c      	mov	r4, r1
 8008f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8e:	f000 f927 	bl	80091e0 <_lseek_r>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	bf15      	itete	ne
 8008f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fa2:	81a3      	strheq	r3, [r4, #12]
 8008fa4:	bf18      	it	ne
 8008fa6:	81a3      	strhne	r3, [r4, #12]
 8008fa8:	bd10      	pop	{r4, pc}

08008faa <__sclose>:
 8008faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fae:	f000 b8b1 	b.w	8009114 <_close_r>

08008fb2 <__swbuf_r>:
 8008fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb4:	460e      	mov	r6, r1
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	4605      	mov	r5, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <__swbuf_r+0x12>
 8008fbc:	6a03      	ldr	r3, [r0, #32]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <__swbuf_r+0x12>
 8008fc0:	f7ff feda 	bl	8008d78 <__sinit>
 8008fc4:	69a3      	ldr	r3, [r4, #24]
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	071a      	lsls	r2, r3, #28
 8008fcc:	d501      	bpl.n	8008fd2 <__swbuf_r+0x20>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	b943      	cbnz	r3, 8008fe4 <__swbuf_r+0x32>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f000 f82b 	bl	8009030 <__swsetup_r>
 8008fda:	b118      	cbz	r0, 8008fe4 <__swbuf_r+0x32>
 8008fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	6922      	ldr	r2, [r4, #16]
 8008fe8:	1a98      	subs	r0, r3, r2
 8008fea:	6963      	ldr	r3, [r4, #20]
 8008fec:	b2f6      	uxtb	r6, r6
 8008fee:	4283      	cmp	r3, r0
 8008ff0:	4637      	mov	r7, r6
 8008ff2:	dc05      	bgt.n	8009000 <__swbuf_r+0x4e>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7ff fdf6 	bl	8008be8 <_fflush_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d1ed      	bne.n	8008fdc <__swbuf_r+0x2a>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	3b01      	subs	r3, #1
 8009004:	60a3      	str	r3, [r4, #8]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	701e      	strb	r6, [r3, #0]
 800900e:	6962      	ldr	r2, [r4, #20]
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	429a      	cmp	r2, r3
 8009014:	d004      	beq.n	8009020 <__swbuf_r+0x6e>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	07db      	lsls	r3, r3, #31
 800901a:	d5e1      	bpl.n	8008fe0 <__swbuf_r+0x2e>
 800901c:	2e0a      	cmp	r6, #10
 800901e:	d1df      	bne.n	8008fe0 <__swbuf_r+0x2e>
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f7ff fde0 	bl	8008be8 <_fflush_r>
 8009028:	2800      	cmp	r0, #0
 800902a:	d0d9      	beq.n	8008fe0 <__swbuf_r+0x2e>
 800902c:	e7d6      	b.n	8008fdc <__swbuf_r+0x2a>
	...

08009030 <__swsetup_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4b29      	ldr	r3, [pc, #164]	@ (80090d8 <__swsetup_r+0xa8>)
 8009034:	4605      	mov	r5, r0
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	460c      	mov	r4, r1
 800903a:	b118      	cbz	r0, 8009044 <__swsetup_r+0x14>
 800903c:	6a03      	ldr	r3, [r0, #32]
 800903e:	b90b      	cbnz	r3, 8009044 <__swsetup_r+0x14>
 8009040:	f7ff fe9a 	bl	8008d78 <__sinit>
 8009044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009048:	0719      	lsls	r1, r3, #28
 800904a:	d422      	bmi.n	8009092 <__swsetup_r+0x62>
 800904c:	06da      	lsls	r2, r3, #27
 800904e:	d407      	bmi.n	8009060 <__swsetup_r+0x30>
 8009050:	2209      	movs	r2, #9
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	e033      	b.n	80090c8 <__swsetup_r+0x98>
 8009060:	0758      	lsls	r0, r3, #29
 8009062:	d512      	bpl.n	800908a <__swsetup_r+0x5a>
 8009064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009066:	b141      	cbz	r1, 800907a <__swsetup_r+0x4a>
 8009068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800906c:	4299      	cmp	r1, r3
 800906e:	d002      	beq.n	8009076 <__swsetup_r+0x46>
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f927 	bl	80092c4 <_free_r>
 8009076:	2300      	movs	r3, #0
 8009078:	6363      	str	r3, [r4, #52]	@ 0x34
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	2300      	movs	r3, #0
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	f043 0308 	orr.w	r3, r3, #8
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	b94b      	cbnz	r3, 80090aa <__swsetup_r+0x7a>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800909c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a0:	d003      	beq.n	80090aa <__swsetup_r+0x7a>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 fe53 	bl	8009d50 <__smakebuf_r>
 80090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ae:	f013 0201 	ands.w	r2, r3, #1
 80090b2:	d00a      	beq.n	80090ca <__swsetup_r+0x9a>
 80090b4:	2200      	movs	r2, #0
 80090b6:	60a2      	str	r2, [r4, #8]
 80090b8:	6962      	ldr	r2, [r4, #20]
 80090ba:	4252      	negs	r2, r2
 80090bc:	61a2      	str	r2, [r4, #24]
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	b942      	cbnz	r2, 80090d4 <__swsetup_r+0xa4>
 80090c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090c6:	d1c5      	bne.n	8009054 <__swsetup_r+0x24>
 80090c8:	bd38      	pop	{r3, r4, r5, pc}
 80090ca:	0799      	lsls	r1, r3, #30
 80090cc:	bf58      	it	pl
 80090ce:	6962      	ldrpl	r2, [r4, #20]
 80090d0:	60a2      	str	r2, [r4, #8]
 80090d2:	e7f4      	b.n	80090be <__swsetup_r+0x8e>
 80090d4:	2000      	movs	r0, #0
 80090d6:	e7f7      	b.n	80090c8 <__swsetup_r+0x98>
 80090d8:	2000001c 	.word	0x2000001c

080090dc <memset>:
 80090dc:	4402      	add	r2, r0
 80090de:	4603      	mov	r3, r0
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d100      	bne.n	80090e6 <memset+0xa>
 80090e4:	4770      	bx	lr
 80090e6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ea:	e7f9      	b.n	80090e0 <memset+0x4>

080090ec <strncpy>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	3901      	subs	r1, #1
 80090f0:	4603      	mov	r3, r0
 80090f2:	b132      	cbz	r2, 8009102 <strncpy+0x16>
 80090f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090f8:	f803 4b01 	strb.w	r4, [r3], #1
 80090fc:	3a01      	subs	r2, #1
 80090fe:	2c00      	cmp	r4, #0
 8009100:	d1f7      	bne.n	80090f2 <strncpy+0x6>
 8009102:	441a      	add	r2, r3
 8009104:	2100      	movs	r1, #0
 8009106:	4293      	cmp	r3, r2
 8009108:	d100      	bne.n	800910c <strncpy+0x20>
 800910a:	bd10      	pop	{r4, pc}
 800910c:	f803 1b01 	strb.w	r1, [r3], #1
 8009110:	e7f9      	b.n	8009106 <strncpy+0x1a>
	...

08009114 <_close_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d06      	ldr	r5, [pc, #24]	@ (8009130 <_close_r+0x1c>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	f7f8 ffc9 	bl	80020b6 <_close>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_close_r+0x1a>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_close_r+0x1a>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20019ce4 	.word	0x20019ce4

08009134 <_reclaim_reent>:
 8009134:	4b29      	ldr	r3, [pc, #164]	@ (80091dc <_reclaim_reent+0xa8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4283      	cmp	r3, r0
 800913a:	b570      	push	{r4, r5, r6, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	d04b      	beq.n	80091d8 <_reclaim_reent+0xa4>
 8009140:	69c3      	ldr	r3, [r0, #28]
 8009142:	b1ab      	cbz	r3, 8009170 <_reclaim_reent+0x3c>
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	b16b      	cbz	r3, 8009164 <_reclaim_reent+0x30>
 8009148:	2500      	movs	r5, #0
 800914a:	69e3      	ldr	r3, [r4, #28]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	5959      	ldr	r1, [r3, r5]
 8009150:	2900      	cmp	r1, #0
 8009152:	d13b      	bne.n	80091cc <_reclaim_reent+0x98>
 8009154:	3504      	adds	r5, #4
 8009156:	2d80      	cmp	r5, #128	@ 0x80
 8009158:	d1f7      	bne.n	800914a <_reclaim_reent+0x16>
 800915a:	69e3      	ldr	r3, [r4, #28]
 800915c:	4620      	mov	r0, r4
 800915e:	68d9      	ldr	r1, [r3, #12]
 8009160:	f000 f8b0 	bl	80092c4 <_free_r>
 8009164:	69e3      	ldr	r3, [r4, #28]
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	b111      	cbz	r1, 8009170 <_reclaim_reent+0x3c>
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f8aa 	bl	80092c4 <_free_r>
 8009170:	6961      	ldr	r1, [r4, #20]
 8009172:	b111      	cbz	r1, 800917a <_reclaim_reent+0x46>
 8009174:	4620      	mov	r0, r4
 8009176:	f000 f8a5 	bl	80092c4 <_free_r>
 800917a:	69e1      	ldr	r1, [r4, #28]
 800917c:	b111      	cbz	r1, 8009184 <_reclaim_reent+0x50>
 800917e:	4620      	mov	r0, r4
 8009180:	f000 f8a0 	bl	80092c4 <_free_r>
 8009184:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009186:	b111      	cbz	r1, 800918e <_reclaim_reent+0x5a>
 8009188:	4620      	mov	r0, r4
 800918a:	f000 f89b 	bl	80092c4 <_free_r>
 800918e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009190:	b111      	cbz	r1, 8009198 <_reclaim_reent+0x64>
 8009192:	4620      	mov	r0, r4
 8009194:	f000 f896 	bl	80092c4 <_free_r>
 8009198:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800919a:	b111      	cbz	r1, 80091a2 <_reclaim_reent+0x6e>
 800919c:	4620      	mov	r0, r4
 800919e:	f000 f891 	bl	80092c4 <_free_r>
 80091a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80091a4:	b111      	cbz	r1, 80091ac <_reclaim_reent+0x78>
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f88c 	bl	80092c4 <_free_r>
 80091ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091ae:	b111      	cbz	r1, 80091b6 <_reclaim_reent+0x82>
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 f887 	bl	80092c4 <_free_r>
 80091b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80091b8:	b111      	cbz	r1, 80091c0 <_reclaim_reent+0x8c>
 80091ba:	4620      	mov	r0, r4
 80091bc:	f000 f882 	bl	80092c4 <_free_r>
 80091c0:	6a23      	ldr	r3, [r4, #32]
 80091c2:	b14b      	cbz	r3, 80091d8 <_reclaim_reent+0xa4>
 80091c4:	4620      	mov	r0, r4
 80091c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091ca:	4718      	bx	r3
 80091cc:	680e      	ldr	r6, [r1, #0]
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 f878 	bl	80092c4 <_free_r>
 80091d4:	4631      	mov	r1, r6
 80091d6:	e7bb      	b.n	8009150 <_reclaim_reent+0x1c>
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	bf00      	nop
 80091dc:	2000001c 	.word	0x2000001c

080091e0 <_lseek_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	@ (8009200 <_lseek_r+0x20>)
 80091e4:	4604      	mov	r4, r0
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	2200      	movs	r2, #0
 80091ec:	602a      	str	r2, [r5, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f7f8 ff88 	bl	8002104 <_lseek>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d102      	bne.n	80091fe <_lseek_r+0x1e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b103      	cbz	r3, 80091fe <_lseek_r+0x1e>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	20019ce4 	.word	0x20019ce4

08009204 <_read_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	@ (8009224 <_read_r+0x20>)
 8009208:	4604      	mov	r4, r0
 800920a:	4608      	mov	r0, r1
 800920c:	4611      	mov	r1, r2
 800920e:	2200      	movs	r2, #0
 8009210:	602a      	str	r2, [r5, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f7f8 ff16 	bl	8002044 <_read>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_read_r+0x1e>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_read_r+0x1e>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20019ce4 	.word	0x20019ce4

08009228 <_write_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	@ (8009248 <_write_r+0x20>)
 800922c:	4604      	mov	r4, r0
 800922e:	4608      	mov	r0, r1
 8009230:	4611      	mov	r1, r2
 8009232:	2200      	movs	r2, #0
 8009234:	602a      	str	r2, [r5, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	f7f8 ff21 	bl	800207e <_write>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_write_r+0x1e>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_write_r+0x1e>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	20019ce4 	.word	0x20019ce4

0800924c <__errno>:
 800924c:	4b01      	ldr	r3, [pc, #4]	@ (8009254 <__errno+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	2000001c 	.word	0x2000001c

08009258 <__libc_init_array>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4d0d      	ldr	r5, [pc, #52]	@ (8009290 <__libc_init_array+0x38>)
 800925c:	4c0d      	ldr	r4, [pc, #52]	@ (8009294 <__libc_init_array+0x3c>)
 800925e:	1b64      	subs	r4, r4, r5
 8009260:	10a4      	asrs	r4, r4, #2
 8009262:	2600      	movs	r6, #0
 8009264:	42a6      	cmp	r6, r4
 8009266:	d109      	bne.n	800927c <__libc_init_array+0x24>
 8009268:	4d0b      	ldr	r5, [pc, #44]	@ (8009298 <__libc_init_array+0x40>)
 800926a:	4c0c      	ldr	r4, [pc, #48]	@ (800929c <__libc_init_array+0x44>)
 800926c:	f000 fe2e 	bl	8009ecc <_init>
 8009270:	1b64      	subs	r4, r4, r5
 8009272:	10a4      	asrs	r4, r4, #2
 8009274:	2600      	movs	r6, #0
 8009276:	42a6      	cmp	r6, r4
 8009278:	d105      	bne.n	8009286 <__libc_init_array+0x2e>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009280:	4798      	blx	r3
 8009282:	3601      	adds	r6, #1
 8009284:	e7ee      	b.n	8009264 <__libc_init_array+0xc>
 8009286:	f855 3b04 	ldr.w	r3, [r5], #4
 800928a:	4798      	blx	r3
 800928c:	3601      	adds	r6, #1
 800928e:	e7f2      	b.n	8009276 <__libc_init_array+0x1e>
 8009290:	0800add8 	.word	0x0800add8
 8009294:	0800add8 	.word	0x0800add8
 8009298:	0800add8 	.word	0x0800add8
 800929c:	0800addc 	.word	0x0800addc

080092a0 <__retarget_lock_init_recursive>:
 80092a0:	4770      	bx	lr

080092a2 <__retarget_lock_acquire_recursive>:
 80092a2:	4770      	bx	lr

080092a4 <__retarget_lock_release_recursive>:
 80092a4:	4770      	bx	lr

080092a6 <memcpy>:
 80092a6:	440a      	add	r2, r1
 80092a8:	4291      	cmp	r1, r2
 80092aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80092ae:	d100      	bne.n	80092b2 <memcpy+0xc>
 80092b0:	4770      	bx	lr
 80092b2:	b510      	push	{r4, lr}
 80092b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092bc:	4291      	cmp	r1, r2
 80092be:	d1f9      	bne.n	80092b4 <memcpy+0xe>
 80092c0:	bd10      	pop	{r4, pc}
	...

080092c4 <_free_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4605      	mov	r5, r0
 80092c8:	2900      	cmp	r1, #0
 80092ca:	d041      	beq.n	8009350 <_free_r+0x8c>
 80092cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d0:	1f0c      	subs	r4, r1, #4
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfb8      	it	lt
 80092d6:	18e4      	addlt	r4, r4, r3
 80092d8:	f000 f8e0 	bl	800949c <__malloc_lock>
 80092dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009354 <_free_r+0x90>)
 80092de:	6813      	ldr	r3, [r2, #0]
 80092e0:	b933      	cbnz	r3, 80092f0 <_free_r+0x2c>
 80092e2:	6063      	str	r3, [r4, #4]
 80092e4:	6014      	str	r4, [r2, #0]
 80092e6:	4628      	mov	r0, r5
 80092e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ec:	f000 b8dc 	b.w	80094a8 <__malloc_unlock>
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	d908      	bls.n	8009306 <_free_r+0x42>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	1821      	adds	r1, r4, r0
 80092f8:	428b      	cmp	r3, r1
 80092fa:	bf01      	itttt	eq
 80092fc:	6819      	ldreq	r1, [r3, #0]
 80092fe:	685b      	ldreq	r3, [r3, #4]
 8009300:	1809      	addeq	r1, r1, r0
 8009302:	6021      	streq	r1, [r4, #0]
 8009304:	e7ed      	b.n	80092e2 <_free_r+0x1e>
 8009306:	461a      	mov	r2, r3
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	b10b      	cbz	r3, 8009310 <_free_r+0x4c>
 800930c:	42a3      	cmp	r3, r4
 800930e:	d9fa      	bls.n	8009306 <_free_r+0x42>
 8009310:	6811      	ldr	r1, [r2, #0]
 8009312:	1850      	adds	r0, r2, r1
 8009314:	42a0      	cmp	r0, r4
 8009316:	d10b      	bne.n	8009330 <_free_r+0x6c>
 8009318:	6820      	ldr	r0, [r4, #0]
 800931a:	4401      	add	r1, r0
 800931c:	1850      	adds	r0, r2, r1
 800931e:	4283      	cmp	r3, r0
 8009320:	6011      	str	r1, [r2, #0]
 8009322:	d1e0      	bne.n	80092e6 <_free_r+0x22>
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	6053      	str	r3, [r2, #4]
 800932a:	4408      	add	r0, r1
 800932c:	6010      	str	r0, [r2, #0]
 800932e:	e7da      	b.n	80092e6 <_free_r+0x22>
 8009330:	d902      	bls.n	8009338 <_free_r+0x74>
 8009332:	230c      	movs	r3, #12
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	e7d6      	b.n	80092e6 <_free_r+0x22>
 8009338:	6820      	ldr	r0, [r4, #0]
 800933a:	1821      	adds	r1, r4, r0
 800933c:	428b      	cmp	r3, r1
 800933e:	bf04      	itt	eq
 8009340:	6819      	ldreq	r1, [r3, #0]
 8009342:	685b      	ldreq	r3, [r3, #4]
 8009344:	6063      	str	r3, [r4, #4]
 8009346:	bf04      	itt	eq
 8009348:	1809      	addeq	r1, r1, r0
 800934a:	6021      	streq	r1, [r4, #0]
 800934c:	6054      	str	r4, [r2, #4]
 800934e:	e7ca      	b.n	80092e6 <_free_r+0x22>
 8009350:	bd38      	pop	{r3, r4, r5, pc}
 8009352:	bf00      	nop
 8009354:	20019cf0 	.word	0x20019cf0

08009358 <sbrk_aligned>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	4e0f      	ldr	r6, [pc, #60]	@ (8009398 <sbrk_aligned+0x40>)
 800935c:	460c      	mov	r4, r1
 800935e:	6831      	ldr	r1, [r6, #0]
 8009360:	4605      	mov	r5, r0
 8009362:	b911      	cbnz	r1, 800936a <sbrk_aligned+0x12>
 8009364:	f000 fd6c 	bl	8009e40 <_sbrk_r>
 8009368:	6030      	str	r0, [r6, #0]
 800936a:	4621      	mov	r1, r4
 800936c:	4628      	mov	r0, r5
 800936e:	f000 fd67 	bl	8009e40 <_sbrk_r>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	d103      	bne.n	800937e <sbrk_aligned+0x26>
 8009376:	f04f 34ff 	mov.w	r4, #4294967295
 800937a:	4620      	mov	r0, r4
 800937c:	bd70      	pop	{r4, r5, r6, pc}
 800937e:	1cc4      	adds	r4, r0, #3
 8009380:	f024 0403 	bic.w	r4, r4, #3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d0f8      	beq.n	800937a <sbrk_aligned+0x22>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fd58 	bl	8009e40 <_sbrk_r>
 8009390:	3001      	adds	r0, #1
 8009392:	d1f2      	bne.n	800937a <sbrk_aligned+0x22>
 8009394:	e7ef      	b.n	8009376 <sbrk_aligned+0x1e>
 8009396:	bf00      	nop
 8009398:	20019cec 	.word	0x20019cec

0800939c <_malloc_r>:
 800939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a0:	1ccd      	adds	r5, r1, #3
 80093a2:	f025 0503 	bic.w	r5, r5, #3
 80093a6:	3508      	adds	r5, #8
 80093a8:	2d0c      	cmp	r5, #12
 80093aa:	bf38      	it	cc
 80093ac:	250c      	movcc	r5, #12
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	4606      	mov	r6, r0
 80093b2:	db01      	blt.n	80093b8 <_malloc_r+0x1c>
 80093b4:	42a9      	cmp	r1, r5
 80093b6:	d904      	bls.n	80093c2 <_malloc_r+0x26>
 80093b8:	230c      	movs	r3, #12
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	2000      	movs	r0, #0
 80093be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009498 <_malloc_r+0xfc>
 80093c6:	f000 f869 	bl	800949c <__malloc_lock>
 80093ca:	f8d8 3000 	ldr.w	r3, [r8]
 80093ce:	461c      	mov	r4, r3
 80093d0:	bb44      	cbnz	r4, 8009424 <_malloc_r+0x88>
 80093d2:	4629      	mov	r1, r5
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ffbf 	bl	8009358 <sbrk_aligned>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	4604      	mov	r4, r0
 80093de:	d158      	bne.n	8009492 <_malloc_r+0xf6>
 80093e0:	f8d8 4000 	ldr.w	r4, [r8]
 80093e4:	4627      	mov	r7, r4
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	d143      	bne.n	8009472 <_malloc_r+0xd6>
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	d04b      	beq.n	8009486 <_malloc_r+0xea>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	4639      	mov	r1, r7
 80093f2:	4630      	mov	r0, r6
 80093f4:	eb04 0903 	add.w	r9, r4, r3
 80093f8:	f000 fd22 	bl	8009e40 <_sbrk_r>
 80093fc:	4581      	cmp	r9, r0
 80093fe:	d142      	bne.n	8009486 <_malloc_r+0xea>
 8009400:	6821      	ldr	r1, [r4, #0]
 8009402:	1a6d      	subs	r5, r5, r1
 8009404:	4629      	mov	r1, r5
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff ffa6 	bl	8009358 <sbrk_aligned>
 800940c:	3001      	adds	r0, #1
 800940e:	d03a      	beq.n	8009486 <_malloc_r+0xea>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	442b      	add	r3, r5
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	f8d8 3000 	ldr.w	r3, [r8]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	bb62      	cbnz	r2, 8009478 <_malloc_r+0xdc>
 800941e:	f8c8 7000 	str.w	r7, [r8]
 8009422:	e00f      	b.n	8009444 <_malloc_r+0xa8>
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	1b52      	subs	r2, r2, r5
 8009428:	d420      	bmi.n	800946c <_malloc_r+0xd0>
 800942a:	2a0b      	cmp	r2, #11
 800942c:	d917      	bls.n	800945e <_malloc_r+0xc2>
 800942e:	1961      	adds	r1, r4, r5
 8009430:	42a3      	cmp	r3, r4
 8009432:	6025      	str	r5, [r4, #0]
 8009434:	bf18      	it	ne
 8009436:	6059      	strne	r1, [r3, #4]
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	bf08      	it	eq
 800943c:	f8c8 1000 	streq.w	r1, [r8]
 8009440:	5162      	str	r2, [r4, r5]
 8009442:	604b      	str	r3, [r1, #4]
 8009444:	4630      	mov	r0, r6
 8009446:	f000 f82f 	bl	80094a8 <__malloc_unlock>
 800944a:	f104 000b 	add.w	r0, r4, #11
 800944e:	1d23      	adds	r3, r4, #4
 8009450:	f020 0007 	bic.w	r0, r0, #7
 8009454:	1ac2      	subs	r2, r0, r3
 8009456:	bf1c      	itt	ne
 8009458:	1a1b      	subne	r3, r3, r0
 800945a:	50a3      	strne	r3, [r4, r2]
 800945c:	e7af      	b.n	80093be <_malloc_r+0x22>
 800945e:	6862      	ldr	r2, [r4, #4]
 8009460:	42a3      	cmp	r3, r4
 8009462:	bf0c      	ite	eq
 8009464:	f8c8 2000 	streq.w	r2, [r8]
 8009468:	605a      	strne	r2, [r3, #4]
 800946a:	e7eb      	b.n	8009444 <_malloc_r+0xa8>
 800946c:	4623      	mov	r3, r4
 800946e:	6864      	ldr	r4, [r4, #4]
 8009470:	e7ae      	b.n	80093d0 <_malloc_r+0x34>
 8009472:	463c      	mov	r4, r7
 8009474:	687f      	ldr	r7, [r7, #4]
 8009476:	e7b6      	b.n	80093e6 <_malloc_r+0x4a>
 8009478:	461a      	mov	r2, r3
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	42a3      	cmp	r3, r4
 800947e:	d1fb      	bne.n	8009478 <_malloc_r+0xdc>
 8009480:	2300      	movs	r3, #0
 8009482:	6053      	str	r3, [r2, #4]
 8009484:	e7de      	b.n	8009444 <_malloc_r+0xa8>
 8009486:	230c      	movs	r3, #12
 8009488:	6033      	str	r3, [r6, #0]
 800948a:	4630      	mov	r0, r6
 800948c:	f000 f80c 	bl	80094a8 <__malloc_unlock>
 8009490:	e794      	b.n	80093bc <_malloc_r+0x20>
 8009492:	6005      	str	r5, [r0, #0]
 8009494:	e7d6      	b.n	8009444 <_malloc_r+0xa8>
 8009496:	bf00      	nop
 8009498:	20019cf0 	.word	0x20019cf0

0800949c <__malloc_lock>:
 800949c:	4801      	ldr	r0, [pc, #4]	@ (80094a4 <__malloc_lock+0x8>)
 800949e:	f7ff bf00 	b.w	80092a2 <__retarget_lock_acquire_recursive>
 80094a2:	bf00      	nop
 80094a4:	20019ce8 	.word	0x20019ce8

080094a8 <__malloc_unlock>:
 80094a8:	4801      	ldr	r0, [pc, #4]	@ (80094b0 <__malloc_unlock+0x8>)
 80094aa:	f7ff befb 	b.w	80092a4 <__retarget_lock_release_recursive>
 80094ae:	bf00      	nop
 80094b0:	20019ce8 	.word	0x20019ce8

080094b4 <__ssputs_r>:
 80094b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b8:	688e      	ldr	r6, [r1, #8]
 80094ba:	461f      	mov	r7, r3
 80094bc:	42be      	cmp	r6, r7
 80094be:	680b      	ldr	r3, [r1, #0]
 80094c0:	4682      	mov	sl, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4690      	mov	r8, r2
 80094c6:	d82d      	bhi.n	8009524 <__ssputs_r+0x70>
 80094c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094d0:	d026      	beq.n	8009520 <__ssputs_r+0x6c>
 80094d2:	6965      	ldr	r5, [r4, #20]
 80094d4:	6909      	ldr	r1, [r1, #16]
 80094d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094da:	eba3 0901 	sub.w	r9, r3, r1
 80094de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094e2:	1c7b      	adds	r3, r7, #1
 80094e4:	444b      	add	r3, r9
 80094e6:	106d      	asrs	r5, r5, #1
 80094e8:	429d      	cmp	r5, r3
 80094ea:	bf38      	it	cc
 80094ec:	461d      	movcc	r5, r3
 80094ee:	0553      	lsls	r3, r2, #21
 80094f0:	d527      	bpl.n	8009542 <__ssputs_r+0x8e>
 80094f2:	4629      	mov	r1, r5
 80094f4:	f7ff ff52 	bl	800939c <_malloc_r>
 80094f8:	4606      	mov	r6, r0
 80094fa:	b360      	cbz	r0, 8009556 <__ssputs_r+0xa2>
 80094fc:	6921      	ldr	r1, [r4, #16]
 80094fe:	464a      	mov	r2, r9
 8009500:	f7ff fed1 	bl	80092a6 <memcpy>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800950a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	6126      	str	r6, [r4, #16]
 8009512:	6165      	str	r5, [r4, #20]
 8009514:	444e      	add	r6, r9
 8009516:	eba5 0509 	sub.w	r5, r5, r9
 800951a:	6026      	str	r6, [r4, #0]
 800951c:	60a5      	str	r5, [r4, #8]
 800951e:	463e      	mov	r6, r7
 8009520:	42be      	cmp	r6, r7
 8009522:	d900      	bls.n	8009526 <__ssputs_r+0x72>
 8009524:	463e      	mov	r6, r7
 8009526:	6820      	ldr	r0, [r4, #0]
 8009528:	4632      	mov	r2, r6
 800952a:	4641      	mov	r1, r8
 800952c:	f000 fc4c 	bl	8009dc8 <memmove>
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	1b9b      	subs	r3, r3, r6
 8009534:	60a3      	str	r3, [r4, #8]
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	4433      	add	r3, r6
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	2000      	movs	r0, #0
 800953e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009542:	462a      	mov	r2, r5
 8009544:	f000 fc8c 	bl	8009e60 <_realloc_r>
 8009548:	4606      	mov	r6, r0
 800954a:	2800      	cmp	r0, #0
 800954c:	d1e0      	bne.n	8009510 <__ssputs_r+0x5c>
 800954e:	6921      	ldr	r1, [r4, #16]
 8009550:	4650      	mov	r0, sl
 8009552:	f7ff feb7 	bl	80092c4 <_free_r>
 8009556:	230c      	movs	r3, #12
 8009558:	f8ca 3000 	str.w	r3, [sl]
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	e7e9      	b.n	800953e <__ssputs_r+0x8a>
	...

0800956c <_svfiprintf_r>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	4698      	mov	r8, r3
 8009572:	898b      	ldrh	r3, [r1, #12]
 8009574:	061b      	lsls	r3, r3, #24
 8009576:	b09d      	sub	sp, #116	@ 0x74
 8009578:	4607      	mov	r7, r0
 800957a:	460d      	mov	r5, r1
 800957c:	4614      	mov	r4, r2
 800957e:	d510      	bpl.n	80095a2 <_svfiprintf_r+0x36>
 8009580:	690b      	ldr	r3, [r1, #16]
 8009582:	b973      	cbnz	r3, 80095a2 <_svfiprintf_r+0x36>
 8009584:	2140      	movs	r1, #64	@ 0x40
 8009586:	f7ff ff09 	bl	800939c <_malloc_r>
 800958a:	6028      	str	r0, [r5, #0]
 800958c:	6128      	str	r0, [r5, #16]
 800958e:	b930      	cbnz	r0, 800959e <_svfiprintf_r+0x32>
 8009590:	230c      	movs	r3, #12
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	b01d      	add	sp, #116	@ 0x74
 800959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959e:	2340      	movs	r3, #64	@ 0x40
 80095a0:	616b      	str	r3, [r5, #20]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095a6:	2320      	movs	r3, #32
 80095a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b0:	2330      	movs	r3, #48	@ 0x30
 80095b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009750 <_svfiprintf_r+0x1e4>
 80095b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ba:	f04f 0901 	mov.w	r9, #1
 80095be:	4623      	mov	r3, r4
 80095c0:	469a      	mov	sl, r3
 80095c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c6:	b10a      	cbz	r2, 80095cc <_svfiprintf_r+0x60>
 80095c8:	2a25      	cmp	r2, #37	@ 0x25
 80095ca:	d1f9      	bne.n	80095c0 <_svfiprintf_r+0x54>
 80095cc:	ebba 0b04 	subs.w	fp, sl, r4
 80095d0:	d00b      	beq.n	80095ea <_svfiprintf_r+0x7e>
 80095d2:	465b      	mov	r3, fp
 80095d4:	4622      	mov	r2, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	4638      	mov	r0, r7
 80095da:	f7ff ff6b 	bl	80094b4 <__ssputs_r>
 80095de:	3001      	adds	r0, #1
 80095e0:	f000 80a7 	beq.w	8009732 <_svfiprintf_r+0x1c6>
 80095e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095e6:	445a      	add	r2, fp
 80095e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80095ea:	f89a 3000 	ldrb.w	r3, [sl]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 809f 	beq.w	8009732 <_svfiprintf_r+0x1c6>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095fe:	f10a 0a01 	add.w	sl, sl, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	9307      	str	r3, [sp, #28]
 8009606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800960a:	931a      	str	r3, [sp, #104]	@ 0x68
 800960c:	4654      	mov	r4, sl
 800960e:	2205      	movs	r2, #5
 8009610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009614:	484e      	ldr	r0, [pc, #312]	@ (8009750 <_svfiprintf_r+0x1e4>)
 8009616:	f7f6 fdfb 	bl	8000210 <memchr>
 800961a:	9a04      	ldr	r2, [sp, #16]
 800961c:	b9d8      	cbnz	r0, 8009656 <_svfiprintf_r+0xea>
 800961e:	06d0      	lsls	r0, r2, #27
 8009620:	bf44      	itt	mi
 8009622:	2320      	movmi	r3, #32
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009628:	0711      	lsls	r1, r2, #28
 800962a:	bf44      	itt	mi
 800962c:	232b      	movmi	r3, #43	@ 0x2b
 800962e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009632:	f89a 3000 	ldrb.w	r3, [sl]
 8009636:	2b2a      	cmp	r3, #42	@ 0x2a
 8009638:	d015      	beq.n	8009666 <_svfiprintf_r+0xfa>
 800963a:	9a07      	ldr	r2, [sp, #28]
 800963c:	4654      	mov	r4, sl
 800963e:	2000      	movs	r0, #0
 8009640:	f04f 0c0a 	mov.w	ip, #10
 8009644:	4621      	mov	r1, r4
 8009646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964a:	3b30      	subs	r3, #48	@ 0x30
 800964c:	2b09      	cmp	r3, #9
 800964e:	d94b      	bls.n	80096e8 <_svfiprintf_r+0x17c>
 8009650:	b1b0      	cbz	r0, 8009680 <_svfiprintf_r+0x114>
 8009652:	9207      	str	r2, [sp, #28]
 8009654:	e014      	b.n	8009680 <_svfiprintf_r+0x114>
 8009656:	eba0 0308 	sub.w	r3, r0, r8
 800965a:	fa09 f303 	lsl.w	r3, r9, r3
 800965e:	4313      	orrs	r3, r2
 8009660:	9304      	str	r3, [sp, #16]
 8009662:	46a2      	mov	sl, r4
 8009664:	e7d2      	b.n	800960c <_svfiprintf_r+0xa0>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	1d19      	adds	r1, r3, #4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	9103      	str	r1, [sp, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbb      	ittet	lt
 8009672:	425b      	neglt	r3, r3
 8009674:	f042 0202 	orrlt.w	r2, r2, #2
 8009678:	9307      	strge	r3, [sp, #28]
 800967a:	9307      	strlt	r3, [sp, #28]
 800967c:	bfb8      	it	lt
 800967e:	9204      	strlt	r2, [sp, #16]
 8009680:	7823      	ldrb	r3, [r4, #0]
 8009682:	2b2e      	cmp	r3, #46	@ 0x2e
 8009684:	d10a      	bne.n	800969c <_svfiprintf_r+0x130>
 8009686:	7863      	ldrb	r3, [r4, #1]
 8009688:	2b2a      	cmp	r3, #42	@ 0x2a
 800968a:	d132      	bne.n	80096f2 <_svfiprintf_r+0x186>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	9203      	str	r2, [sp, #12]
 8009694:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009698:	3402      	adds	r4, #2
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009760 <_svfiprintf_r+0x1f4>
 80096a0:	7821      	ldrb	r1, [r4, #0]
 80096a2:	2203      	movs	r2, #3
 80096a4:	4650      	mov	r0, sl
 80096a6:	f7f6 fdb3 	bl	8000210 <memchr>
 80096aa:	b138      	cbz	r0, 80096bc <_svfiprintf_r+0x150>
 80096ac:	9b04      	ldr	r3, [sp, #16]
 80096ae:	eba0 000a 	sub.w	r0, r0, sl
 80096b2:	2240      	movs	r2, #64	@ 0x40
 80096b4:	4082      	lsls	r2, r0
 80096b6:	4313      	orrs	r3, r2
 80096b8:	3401      	adds	r4, #1
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c0:	4824      	ldr	r0, [pc, #144]	@ (8009754 <_svfiprintf_r+0x1e8>)
 80096c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096c6:	2206      	movs	r2, #6
 80096c8:	f7f6 fda2 	bl	8000210 <memchr>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d036      	beq.n	800973e <_svfiprintf_r+0x1d2>
 80096d0:	4b21      	ldr	r3, [pc, #132]	@ (8009758 <_svfiprintf_r+0x1ec>)
 80096d2:	bb1b      	cbnz	r3, 800971c <_svfiprintf_r+0x1b0>
 80096d4:	9b03      	ldr	r3, [sp, #12]
 80096d6:	3307      	adds	r3, #7
 80096d8:	f023 0307 	bic.w	r3, r3, #7
 80096dc:	3308      	adds	r3, #8
 80096de:	9303      	str	r3, [sp, #12]
 80096e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e2:	4433      	add	r3, r6
 80096e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e6:	e76a      	b.n	80095be <_svfiprintf_r+0x52>
 80096e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ec:	460c      	mov	r4, r1
 80096ee:	2001      	movs	r0, #1
 80096f0:	e7a8      	b.n	8009644 <_svfiprintf_r+0xd8>
 80096f2:	2300      	movs	r3, #0
 80096f4:	3401      	adds	r4, #1
 80096f6:	9305      	str	r3, [sp, #20]
 80096f8:	4619      	mov	r1, r3
 80096fa:	f04f 0c0a 	mov.w	ip, #10
 80096fe:	4620      	mov	r0, r4
 8009700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009704:	3a30      	subs	r2, #48	@ 0x30
 8009706:	2a09      	cmp	r2, #9
 8009708:	d903      	bls.n	8009712 <_svfiprintf_r+0x1a6>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0c6      	beq.n	800969c <_svfiprintf_r+0x130>
 800970e:	9105      	str	r1, [sp, #20]
 8009710:	e7c4      	b.n	800969c <_svfiprintf_r+0x130>
 8009712:	fb0c 2101 	mla	r1, ip, r1, r2
 8009716:	4604      	mov	r4, r0
 8009718:	2301      	movs	r3, #1
 800971a:	e7f0      	b.n	80096fe <_svfiprintf_r+0x192>
 800971c:	ab03      	add	r3, sp, #12
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	462a      	mov	r2, r5
 8009722:	4b0e      	ldr	r3, [pc, #56]	@ (800975c <_svfiprintf_r+0x1f0>)
 8009724:	a904      	add	r1, sp, #16
 8009726:	4638      	mov	r0, r7
 8009728:	f3af 8000 	nop.w
 800972c:	1c42      	adds	r2, r0, #1
 800972e:	4606      	mov	r6, r0
 8009730:	d1d6      	bne.n	80096e0 <_svfiprintf_r+0x174>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	065b      	lsls	r3, r3, #25
 8009736:	f53f af2d 	bmi.w	8009594 <_svfiprintf_r+0x28>
 800973a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800973c:	e72c      	b.n	8009598 <_svfiprintf_r+0x2c>
 800973e:	ab03      	add	r3, sp, #12
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	462a      	mov	r2, r5
 8009744:	4b05      	ldr	r3, [pc, #20]	@ (800975c <_svfiprintf_r+0x1f0>)
 8009746:	a904      	add	r1, sp, #16
 8009748:	4638      	mov	r0, r7
 800974a:	f000 f9bb 	bl	8009ac4 <_printf_i>
 800974e:	e7ed      	b.n	800972c <_svfiprintf_r+0x1c0>
 8009750:	0800ad9c 	.word	0x0800ad9c
 8009754:	0800ada6 	.word	0x0800ada6
 8009758:	00000000 	.word	0x00000000
 800975c:	080094b5 	.word	0x080094b5
 8009760:	0800ada2 	.word	0x0800ada2

08009764 <__sfputc_r>:
 8009764:	6893      	ldr	r3, [r2, #8]
 8009766:	3b01      	subs	r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	b410      	push	{r4}
 800976c:	6093      	str	r3, [r2, #8]
 800976e:	da08      	bge.n	8009782 <__sfputc_r+0x1e>
 8009770:	6994      	ldr	r4, [r2, #24]
 8009772:	42a3      	cmp	r3, r4
 8009774:	db01      	blt.n	800977a <__sfputc_r+0x16>
 8009776:	290a      	cmp	r1, #10
 8009778:	d103      	bne.n	8009782 <__sfputc_r+0x1e>
 800977a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800977e:	f7ff bc18 	b.w	8008fb2 <__swbuf_r>
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	1c58      	adds	r0, r3, #1
 8009786:	6010      	str	r0, [r2, #0]
 8009788:	7019      	strb	r1, [r3, #0]
 800978a:	4608      	mov	r0, r1
 800978c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009790:	4770      	bx	lr

08009792 <__sfputs_r>:
 8009792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009794:	4606      	mov	r6, r0
 8009796:	460f      	mov	r7, r1
 8009798:	4614      	mov	r4, r2
 800979a:	18d5      	adds	r5, r2, r3
 800979c:	42ac      	cmp	r4, r5
 800979e:	d101      	bne.n	80097a4 <__sfputs_r+0x12>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e007      	b.n	80097b4 <__sfputs_r+0x22>
 80097a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a8:	463a      	mov	r2, r7
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7ff ffda 	bl	8009764 <__sfputc_r>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d1f3      	bne.n	800979c <__sfputs_r+0xa>
 80097b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097b8 <_vfiprintf_r>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	460d      	mov	r5, r1
 80097be:	b09d      	sub	sp, #116	@ 0x74
 80097c0:	4614      	mov	r4, r2
 80097c2:	4698      	mov	r8, r3
 80097c4:	4606      	mov	r6, r0
 80097c6:	b118      	cbz	r0, 80097d0 <_vfiprintf_r+0x18>
 80097c8:	6a03      	ldr	r3, [r0, #32]
 80097ca:	b90b      	cbnz	r3, 80097d0 <_vfiprintf_r+0x18>
 80097cc:	f7ff fad4 	bl	8008d78 <__sinit>
 80097d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x2a>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x2a>
 80097dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097de:	f7ff fd60 	bl	80092a2 <__retarget_lock_acquire_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	071b      	lsls	r3, r3, #28
 80097e6:	d501      	bpl.n	80097ec <_vfiprintf_r+0x34>
 80097e8:	692b      	ldr	r3, [r5, #16]
 80097ea:	b99b      	cbnz	r3, 8009814 <_vfiprintf_r+0x5c>
 80097ec:	4629      	mov	r1, r5
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff fc1e 	bl	8009030 <__swsetup_r>
 80097f4:	b170      	cbz	r0, 8009814 <_vfiprintf_r+0x5c>
 80097f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097f8:	07dc      	lsls	r4, r3, #31
 80097fa:	d504      	bpl.n	8009806 <_vfiprintf_r+0x4e>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b01d      	add	sp, #116	@ 0x74
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	89ab      	ldrh	r3, [r5, #12]
 8009808:	0598      	lsls	r0, r3, #22
 800980a:	d4f7      	bmi.n	80097fc <_vfiprintf_r+0x44>
 800980c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800980e:	f7ff fd49 	bl	80092a4 <__retarget_lock_release_recursive>
 8009812:	e7f3      	b.n	80097fc <_vfiprintf_r+0x44>
 8009814:	2300      	movs	r3, #0
 8009816:	9309      	str	r3, [sp, #36]	@ 0x24
 8009818:	2320      	movs	r3, #32
 800981a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800981e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009822:	2330      	movs	r3, #48	@ 0x30
 8009824:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099d4 <_vfiprintf_r+0x21c>
 8009828:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800982c:	f04f 0901 	mov.w	r9, #1
 8009830:	4623      	mov	r3, r4
 8009832:	469a      	mov	sl, r3
 8009834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009838:	b10a      	cbz	r2, 800983e <_vfiprintf_r+0x86>
 800983a:	2a25      	cmp	r2, #37	@ 0x25
 800983c:	d1f9      	bne.n	8009832 <_vfiprintf_r+0x7a>
 800983e:	ebba 0b04 	subs.w	fp, sl, r4
 8009842:	d00b      	beq.n	800985c <_vfiprintf_r+0xa4>
 8009844:	465b      	mov	r3, fp
 8009846:	4622      	mov	r2, r4
 8009848:	4629      	mov	r1, r5
 800984a:	4630      	mov	r0, r6
 800984c:	f7ff ffa1 	bl	8009792 <__sfputs_r>
 8009850:	3001      	adds	r0, #1
 8009852:	f000 80a7 	beq.w	80099a4 <_vfiprintf_r+0x1ec>
 8009856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009858:	445a      	add	r2, fp
 800985a:	9209      	str	r2, [sp, #36]	@ 0x24
 800985c:	f89a 3000 	ldrb.w	r3, [sl]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 809f 	beq.w	80099a4 <_vfiprintf_r+0x1ec>
 8009866:	2300      	movs	r3, #0
 8009868:	f04f 32ff 	mov.w	r2, #4294967295
 800986c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009870:	f10a 0a01 	add.w	sl, sl, #1
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800987c:	931a      	str	r3, [sp, #104]	@ 0x68
 800987e:	4654      	mov	r4, sl
 8009880:	2205      	movs	r2, #5
 8009882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009886:	4853      	ldr	r0, [pc, #332]	@ (80099d4 <_vfiprintf_r+0x21c>)
 8009888:	f7f6 fcc2 	bl	8000210 <memchr>
 800988c:	9a04      	ldr	r2, [sp, #16]
 800988e:	b9d8      	cbnz	r0, 80098c8 <_vfiprintf_r+0x110>
 8009890:	06d1      	lsls	r1, r2, #27
 8009892:	bf44      	itt	mi
 8009894:	2320      	movmi	r3, #32
 8009896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800989a:	0713      	lsls	r3, r2, #28
 800989c:	bf44      	itt	mi
 800989e:	232b      	movmi	r3, #43	@ 0x2b
 80098a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a4:	f89a 3000 	ldrb.w	r3, [sl]
 80098a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098aa:	d015      	beq.n	80098d8 <_vfiprintf_r+0x120>
 80098ac:	9a07      	ldr	r2, [sp, #28]
 80098ae:	4654      	mov	r4, sl
 80098b0:	2000      	movs	r0, #0
 80098b2:	f04f 0c0a 	mov.w	ip, #10
 80098b6:	4621      	mov	r1, r4
 80098b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098bc:	3b30      	subs	r3, #48	@ 0x30
 80098be:	2b09      	cmp	r3, #9
 80098c0:	d94b      	bls.n	800995a <_vfiprintf_r+0x1a2>
 80098c2:	b1b0      	cbz	r0, 80098f2 <_vfiprintf_r+0x13a>
 80098c4:	9207      	str	r2, [sp, #28]
 80098c6:	e014      	b.n	80098f2 <_vfiprintf_r+0x13a>
 80098c8:	eba0 0308 	sub.w	r3, r0, r8
 80098cc:	fa09 f303 	lsl.w	r3, r9, r3
 80098d0:	4313      	orrs	r3, r2
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	46a2      	mov	sl, r4
 80098d6:	e7d2      	b.n	800987e <_vfiprintf_r+0xc6>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	1d19      	adds	r1, r3, #4
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	9103      	str	r1, [sp, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	bfbb      	ittet	lt
 80098e4:	425b      	neglt	r3, r3
 80098e6:	f042 0202 	orrlt.w	r2, r2, #2
 80098ea:	9307      	strge	r3, [sp, #28]
 80098ec:	9307      	strlt	r3, [sp, #28]
 80098ee:	bfb8      	it	lt
 80098f0:	9204      	strlt	r2, [sp, #16]
 80098f2:	7823      	ldrb	r3, [r4, #0]
 80098f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80098f6:	d10a      	bne.n	800990e <_vfiprintf_r+0x156>
 80098f8:	7863      	ldrb	r3, [r4, #1]
 80098fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80098fc:	d132      	bne.n	8009964 <_vfiprintf_r+0x1ac>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	1d1a      	adds	r2, r3, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	9203      	str	r2, [sp, #12]
 8009906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800990a:	3402      	adds	r4, #2
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099e4 <_vfiprintf_r+0x22c>
 8009912:	7821      	ldrb	r1, [r4, #0]
 8009914:	2203      	movs	r2, #3
 8009916:	4650      	mov	r0, sl
 8009918:	f7f6 fc7a 	bl	8000210 <memchr>
 800991c:	b138      	cbz	r0, 800992e <_vfiprintf_r+0x176>
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	eba0 000a 	sub.w	r0, r0, sl
 8009924:	2240      	movs	r2, #64	@ 0x40
 8009926:	4082      	lsls	r2, r0
 8009928:	4313      	orrs	r3, r2
 800992a:	3401      	adds	r4, #1
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009932:	4829      	ldr	r0, [pc, #164]	@ (80099d8 <_vfiprintf_r+0x220>)
 8009934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009938:	2206      	movs	r2, #6
 800993a:	f7f6 fc69 	bl	8000210 <memchr>
 800993e:	2800      	cmp	r0, #0
 8009940:	d03f      	beq.n	80099c2 <_vfiprintf_r+0x20a>
 8009942:	4b26      	ldr	r3, [pc, #152]	@ (80099dc <_vfiprintf_r+0x224>)
 8009944:	bb1b      	cbnz	r3, 800998e <_vfiprintf_r+0x1d6>
 8009946:	9b03      	ldr	r3, [sp, #12]
 8009948:	3307      	adds	r3, #7
 800994a:	f023 0307 	bic.w	r3, r3, #7
 800994e:	3308      	adds	r3, #8
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009954:	443b      	add	r3, r7
 8009956:	9309      	str	r3, [sp, #36]	@ 0x24
 8009958:	e76a      	b.n	8009830 <_vfiprintf_r+0x78>
 800995a:	fb0c 3202 	mla	r2, ip, r2, r3
 800995e:	460c      	mov	r4, r1
 8009960:	2001      	movs	r0, #1
 8009962:	e7a8      	b.n	80098b6 <_vfiprintf_r+0xfe>
 8009964:	2300      	movs	r3, #0
 8009966:	3401      	adds	r4, #1
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	4619      	mov	r1, r3
 800996c:	f04f 0c0a 	mov.w	ip, #10
 8009970:	4620      	mov	r0, r4
 8009972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009976:	3a30      	subs	r2, #48	@ 0x30
 8009978:	2a09      	cmp	r2, #9
 800997a:	d903      	bls.n	8009984 <_vfiprintf_r+0x1cc>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0c6      	beq.n	800990e <_vfiprintf_r+0x156>
 8009980:	9105      	str	r1, [sp, #20]
 8009982:	e7c4      	b.n	800990e <_vfiprintf_r+0x156>
 8009984:	fb0c 2101 	mla	r1, ip, r1, r2
 8009988:	4604      	mov	r4, r0
 800998a:	2301      	movs	r3, #1
 800998c:	e7f0      	b.n	8009970 <_vfiprintf_r+0x1b8>
 800998e:	ab03      	add	r3, sp, #12
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	462a      	mov	r2, r5
 8009994:	4b12      	ldr	r3, [pc, #72]	@ (80099e0 <_vfiprintf_r+0x228>)
 8009996:	a904      	add	r1, sp, #16
 8009998:	4630      	mov	r0, r6
 800999a:	f3af 8000 	nop.w
 800999e:	4607      	mov	r7, r0
 80099a0:	1c78      	adds	r0, r7, #1
 80099a2:	d1d6      	bne.n	8009952 <_vfiprintf_r+0x19a>
 80099a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a6:	07d9      	lsls	r1, r3, #31
 80099a8:	d405      	bmi.n	80099b6 <_vfiprintf_r+0x1fe>
 80099aa:	89ab      	ldrh	r3, [r5, #12]
 80099ac:	059a      	lsls	r2, r3, #22
 80099ae:	d402      	bmi.n	80099b6 <_vfiprintf_r+0x1fe>
 80099b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099b2:	f7ff fc77 	bl	80092a4 <__retarget_lock_release_recursive>
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	065b      	lsls	r3, r3, #25
 80099ba:	f53f af1f 	bmi.w	80097fc <_vfiprintf_r+0x44>
 80099be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099c0:	e71e      	b.n	8009800 <_vfiprintf_r+0x48>
 80099c2:	ab03      	add	r3, sp, #12
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	462a      	mov	r2, r5
 80099c8:	4b05      	ldr	r3, [pc, #20]	@ (80099e0 <_vfiprintf_r+0x228>)
 80099ca:	a904      	add	r1, sp, #16
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 f879 	bl	8009ac4 <_printf_i>
 80099d2:	e7e4      	b.n	800999e <_vfiprintf_r+0x1e6>
 80099d4:	0800ad9c 	.word	0x0800ad9c
 80099d8:	0800ada6 	.word	0x0800ada6
 80099dc:	00000000 	.word	0x00000000
 80099e0:	08009793 	.word	0x08009793
 80099e4:	0800ada2 	.word	0x0800ada2

080099e8 <_printf_common>:
 80099e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	4616      	mov	r6, r2
 80099ee:	4698      	mov	r8, r3
 80099f0:	688a      	ldr	r2, [r1, #8]
 80099f2:	690b      	ldr	r3, [r1, #16]
 80099f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	bfb8      	it	lt
 80099fc:	4613      	movlt	r3, r2
 80099fe:	6033      	str	r3, [r6, #0]
 8009a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a04:	4607      	mov	r7, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	b10a      	cbz	r2, 8009a0e <_printf_common+0x26>
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	6033      	str	r3, [r6, #0]
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	0699      	lsls	r1, r3, #26
 8009a12:	bf42      	ittt	mi
 8009a14:	6833      	ldrmi	r3, [r6, #0]
 8009a16:	3302      	addmi	r3, #2
 8009a18:	6033      	strmi	r3, [r6, #0]
 8009a1a:	6825      	ldr	r5, [r4, #0]
 8009a1c:	f015 0506 	ands.w	r5, r5, #6
 8009a20:	d106      	bne.n	8009a30 <_printf_common+0x48>
 8009a22:	f104 0a19 	add.w	sl, r4, #25
 8009a26:	68e3      	ldr	r3, [r4, #12]
 8009a28:	6832      	ldr	r2, [r6, #0]
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	42ab      	cmp	r3, r5
 8009a2e:	dc26      	bgt.n	8009a7e <_printf_common+0x96>
 8009a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a34:	6822      	ldr	r2, [r4, #0]
 8009a36:	3b00      	subs	r3, #0
 8009a38:	bf18      	it	ne
 8009a3a:	2301      	movne	r3, #1
 8009a3c:	0692      	lsls	r2, r2, #26
 8009a3e:	d42b      	bmi.n	8009a98 <_printf_common+0xb0>
 8009a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a44:	4641      	mov	r1, r8
 8009a46:	4638      	mov	r0, r7
 8009a48:	47c8      	blx	r9
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	d01e      	beq.n	8009a8c <_printf_common+0xa4>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	6922      	ldr	r2, [r4, #16]
 8009a52:	f003 0306 	and.w	r3, r3, #6
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	bf02      	ittt	eq
 8009a5a:	68e5      	ldreq	r5, [r4, #12]
 8009a5c:	6833      	ldreq	r3, [r6, #0]
 8009a5e:	1aed      	subeq	r5, r5, r3
 8009a60:	68a3      	ldr	r3, [r4, #8]
 8009a62:	bf0c      	ite	eq
 8009a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a68:	2500      	movne	r5, #0
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	bfc4      	itt	gt
 8009a6e:	1a9b      	subgt	r3, r3, r2
 8009a70:	18ed      	addgt	r5, r5, r3
 8009a72:	2600      	movs	r6, #0
 8009a74:	341a      	adds	r4, #26
 8009a76:	42b5      	cmp	r5, r6
 8009a78:	d11a      	bne.n	8009ab0 <_printf_common+0xc8>
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	e008      	b.n	8009a90 <_printf_common+0xa8>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4652      	mov	r2, sl
 8009a82:	4641      	mov	r1, r8
 8009a84:	4638      	mov	r0, r7
 8009a86:	47c8      	blx	r9
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d103      	bne.n	8009a94 <_printf_common+0xac>
 8009a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a94:	3501      	adds	r5, #1
 8009a96:	e7c6      	b.n	8009a26 <_printf_common+0x3e>
 8009a98:	18e1      	adds	r1, r4, r3
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	2030      	movs	r0, #48	@ 0x30
 8009a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aa2:	4422      	add	r2, r4
 8009aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009aac:	3302      	adds	r3, #2
 8009aae:	e7c7      	b.n	8009a40 <_printf_common+0x58>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	4641      	mov	r1, r8
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	47c8      	blx	r9
 8009aba:	3001      	adds	r0, #1
 8009abc:	d0e6      	beq.n	8009a8c <_printf_common+0xa4>
 8009abe:	3601      	adds	r6, #1
 8009ac0:	e7d9      	b.n	8009a76 <_printf_common+0x8e>
	...

08009ac4 <_printf_i>:
 8009ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	7e0f      	ldrb	r7, [r1, #24]
 8009aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009acc:	2f78      	cmp	r7, #120	@ 0x78
 8009ace:	4691      	mov	r9, r2
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	469a      	mov	sl, r3
 8009ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ada:	d807      	bhi.n	8009aec <_printf_i+0x28>
 8009adc:	2f62      	cmp	r7, #98	@ 0x62
 8009ade:	d80a      	bhi.n	8009af6 <_printf_i+0x32>
 8009ae0:	2f00      	cmp	r7, #0
 8009ae2:	f000 80d2 	beq.w	8009c8a <_printf_i+0x1c6>
 8009ae6:	2f58      	cmp	r7, #88	@ 0x58
 8009ae8:	f000 80b9 	beq.w	8009c5e <_printf_i+0x19a>
 8009aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009af4:	e03a      	b.n	8009b6c <_printf_i+0xa8>
 8009af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009afa:	2b15      	cmp	r3, #21
 8009afc:	d8f6      	bhi.n	8009aec <_printf_i+0x28>
 8009afe:	a101      	add	r1, pc, #4	@ (adr r1, 8009b04 <_printf_i+0x40>)
 8009b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b04:	08009b5d 	.word	0x08009b5d
 8009b08:	08009b71 	.word	0x08009b71
 8009b0c:	08009aed 	.word	0x08009aed
 8009b10:	08009aed 	.word	0x08009aed
 8009b14:	08009aed 	.word	0x08009aed
 8009b18:	08009aed 	.word	0x08009aed
 8009b1c:	08009b71 	.word	0x08009b71
 8009b20:	08009aed 	.word	0x08009aed
 8009b24:	08009aed 	.word	0x08009aed
 8009b28:	08009aed 	.word	0x08009aed
 8009b2c:	08009aed 	.word	0x08009aed
 8009b30:	08009c71 	.word	0x08009c71
 8009b34:	08009b9b 	.word	0x08009b9b
 8009b38:	08009c2b 	.word	0x08009c2b
 8009b3c:	08009aed 	.word	0x08009aed
 8009b40:	08009aed 	.word	0x08009aed
 8009b44:	08009c93 	.word	0x08009c93
 8009b48:	08009aed 	.word	0x08009aed
 8009b4c:	08009b9b 	.word	0x08009b9b
 8009b50:	08009aed 	.word	0x08009aed
 8009b54:	08009aed 	.word	0x08009aed
 8009b58:	08009c33 	.word	0x08009c33
 8009b5c:	6833      	ldr	r3, [r6, #0]
 8009b5e:	1d1a      	adds	r2, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6032      	str	r2, [r6, #0]
 8009b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e09d      	b.n	8009cac <_printf_i+0x1e8>
 8009b70:	6833      	ldr	r3, [r6, #0]
 8009b72:	6820      	ldr	r0, [r4, #0]
 8009b74:	1d19      	adds	r1, r3, #4
 8009b76:	6031      	str	r1, [r6, #0]
 8009b78:	0606      	lsls	r6, r0, #24
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0xbc>
 8009b7c:	681d      	ldr	r5, [r3, #0]
 8009b7e:	e003      	b.n	8009b88 <_printf_i+0xc4>
 8009b80:	0645      	lsls	r5, r0, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0xb8>
 8009b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	da03      	bge.n	8009b94 <_printf_i+0xd0>
 8009b8c:	232d      	movs	r3, #45	@ 0x2d
 8009b8e:	426d      	negs	r5, r5
 8009b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b94:	4859      	ldr	r0, [pc, #356]	@ (8009cfc <_printf_i+0x238>)
 8009b96:	230a      	movs	r3, #10
 8009b98:	e011      	b.n	8009bbe <_printf_i+0xfa>
 8009b9a:	6821      	ldr	r1, [r4, #0]
 8009b9c:	6833      	ldr	r3, [r6, #0]
 8009b9e:	0608      	lsls	r0, r1, #24
 8009ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ba4:	d402      	bmi.n	8009bac <_printf_i+0xe8>
 8009ba6:	0649      	lsls	r1, r1, #25
 8009ba8:	bf48      	it	mi
 8009baa:	b2ad      	uxthmi	r5, r5
 8009bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bae:	4853      	ldr	r0, [pc, #332]	@ (8009cfc <_printf_i+0x238>)
 8009bb0:	6033      	str	r3, [r6, #0]
 8009bb2:	bf14      	ite	ne
 8009bb4:	230a      	movne	r3, #10
 8009bb6:	2308      	moveq	r3, #8
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bbe:	6866      	ldr	r6, [r4, #4]
 8009bc0:	60a6      	str	r6, [r4, #8]
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	bfa2      	ittt	ge
 8009bc6:	6821      	ldrge	r1, [r4, #0]
 8009bc8:	f021 0104 	bicge.w	r1, r1, #4
 8009bcc:	6021      	strge	r1, [r4, #0]
 8009bce:	b90d      	cbnz	r5, 8009bd4 <_printf_i+0x110>
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	d04b      	beq.n	8009c6c <_printf_i+0x1a8>
 8009bd4:	4616      	mov	r6, r2
 8009bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bda:	fb03 5711 	mls	r7, r3, r1, r5
 8009bde:	5dc7      	ldrb	r7, [r0, r7]
 8009be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009be4:	462f      	mov	r7, r5
 8009be6:	42bb      	cmp	r3, r7
 8009be8:	460d      	mov	r5, r1
 8009bea:	d9f4      	bls.n	8009bd6 <_printf_i+0x112>
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d10b      	bne.n	8009c08 <_printf_i+0x144>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	07df      	lsls	r7, r3, #31
 8009bf4:	d508      	bpl.n	8009c08 <_printf_i+0x144>
 8009bf6:	6923      	ldr	r3, [r4, #16]
 8009bf8:	6861      	ldr	r1, [r4, #4]
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	bfde      	ittt	le
 8009bfe:	2330      	movle	r3, #48	@ 0x30
 8009c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c08:	1b92      	subs	r2, r2, r6
 8009c0a:	6122      	str	r2, [r4, #16]
 8009c0c:	f8cd a000 	str.w	sl, [sp]
 8009c10:	464b      	mov	r3, r9
 8009c12:	aa03      	add	r2, sp, #12
 8009c14:	4621      	mov	r1, r4
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7ff fee6 	bl	80099e8 <_printf_common>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d14a      	bne.n	8009cb6 <_printf_i+0x1f2>
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	b004      	add	sp, #16
 8009c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	f043 0320 	orr.w	r3, r3, #32
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	4833      	ldr	r0, [pc, #204]	@ (8009d00 <_printf_i+0x23c>)
 8009c34:	2778      	movs	r7, #120	@ 0x78
 8009c36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	6831      	ldr	r1, [r6, #0]
 8009c3e:	061f      	lsls	r7, r3, #24
 8009c40:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c44:	d402      	bmi.n	8009c4c <_printf_i+0x188>
 8009c46:	065f      	lsls	r7, r3, #25
 8009c48:	bf48      	it	mi
 8009c4a:	b2ad      	uxthmi	r5, r5
 8009c4c:	6031      	str	r1, [r6, #0]
 8009c4e:	07d9      	lsls	r1, r3, #31
 8009c50:	bf44      	itt	mi
 8009c52:	f043 0320 	orrmi.w	r3, r3, #32
 8009c56:	6023      	strmi	r3, [r4, #0]
 8009c58:	b11d      	cbz	r5, 8009c62 <_printf_i+0x19e>
 8009c5a:	2310      	movs	r3, #16
 8009c5c:	e7ac      	b.n	8009bb8 <_printf_i+0xf4>
 8009c5e:	4827      	ldr	r0, [pc, #156]	@ (8009cfc <_printf_i+0x238>)
 8009c60:	e7e9      	b.n	8009c36 <_printf_i+0x172>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f023 0320 	bic.w	r3, r3, #32
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	e7f6      	b.n	8009c5a <_printf_i+0x196>
 8009c6c:	4616      	mov	r6, r2
 8009c6e:	e7bd      	b.n	8009bec <_printf_i+0x128>
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	6825      	ldr	r5, [r4, #0]
 8009c74:	6961      	ldr	r1, [r4, #20]
 8009c76:	1d18      	adds	r0, r3, #4
 8009c78:	6030      	str	r0, [r6, #0]
 8009c7a:	062e      	lsls	r6, r5, #24
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	d501      	bpl.n	8009c84 <_printf_i+0x1c0>
 8009c80:	6019      	str	r1, [r3, #0]
 8009c82:	e002      	b.n	8009c8a <_printf_i+0x1c6>
 8009c84:	0668      	lsls	r0, r5, #25
 8009c86:	d5fb      	bpl.n	8009c80 <_printf_i+0x1bc>
 8009c88:	8019      	strh	r1, [r3, #0]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	6123      	str	r3, [r4, #16]
 8009c8e:	4616      	mov	r6, r2
 8009c90:	e7bc      	b.n	8009c0c <_printf_i+0x148>
 8009c92:	6833      	ldr	r3, [r6, #0]
 8009c94:	1d1a      	adds	r2, r3, #4
 8009c96:	6032      	str	r2, [r6, #0]
 8009c98:	681e      	ldr	r6, [r3, #0]
 8009c9a:	6862      	ldr	r2, [r4, #4]
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7f6 fab6 	bl	8000210 <memchr>
 8009ca4:	b108      	cbz	r0, 8009caa <_printf_i+0x1e6>
 8009ca6:	1b80      	subs	r0, r0, r6
 8009ca8:	6060      	str	r0, [r4, #4]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	6123      	str	r3, [r4, #16]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb4:	e7aa      	b.n	8009c0c <_printf_i+0x148>
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	4632      	mov	r2, r6
 8009cba:	4649      	mov	r1, r9
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	47d0      	blx	sl
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d0ad      	beq.n	8009c20 <_printf_i+0x15c>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	079b      	lsls	r3, r3, #30
 8009cc8:	d413      	bmi.n	8009cf2 <_printf_i+0x22e>
 8009cca:	68e0      	ldr	r0, [r4, #12]
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	4298      	cmp	r0, r3
 8009cd0:	bfb8      	it	lt
 8009cd2:	4618      	movlt	r0, r3
 8009cd4:	e7a6      	b.n	8009c24 <_printf_i+0x160>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4649      	mov	r1, r9
 8009cdc:	4640      	mov	r0, r8
 8009cde:	47d0      	blx	sl
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d09d      	beq.n	8009c20 <_printf_i+0x15c>
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	68e3      	ldr	r3, [r4, #12]
 8009ce8:	9903      	ldr	r1, [sp, #12]
 8009cea:	1a5b      	subs	r3, r3, r1
 8009cec:	42ab      	cmp	r3, r5
 8009cee:	dcf2      	bgt.n	8009cd6 <_printf_i+0x212>
 8009cf0:	e7eb      	b.n	8009cca <_printf_i+0x206>
 8009cf2:	2500      	movs	r5, #0
 8009cf4:	f104 0619 	add.w	r6, r4, #25
 8009cf8:	e7f5      	b.n	8009ce6 <_printf_i+0x222>
 8009cfa:	bf00      	nop
 8009cfc:	0800adad 	.word	0x0800adad
 8009d00:	0800adbe 	.word	0x0800adbe

08009d04 <__swhatbuf_r>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	460c      	mov	r4, r1
 8009d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	b096      	sub	sp, #88	@ 0x58
 8009d10:	4615      	mov	r5, r2
 8009d12:	461e      	mov	r6, r3
 8009d14:	da0d      	bge.n	8009d32 <__swhatbuf_r+0x2e>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d1c:	f04f 0100 	mov.w	r1, #0
 8009d20:	bf14      	ite	ne
 8009d22:	2340      	movne	r3, #64	@ 0x40
 8009d24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d28:	2000      	movs	r0, #0
 8009d2a:	6031      	str	r1, [r6, #0]
 8009d2c:	602b      	str	r3, [r5, #0]
 8009d2e:	b016      	add	sp, #88	@ 0x58
 8009d30:	bd70      	pop	{r4, r5, r6, pc}
 8009d32:	466a      	mov	r2, sp
 8009d34:	f000 f862 	bl	8009dfc <_fstat_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dbec      	blt.n	8009d16 <__swhatbuf_r+0x12>
 8009d3c:	9901      	ldr	r1, [sp, #4]
 8009d3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d46:	4259      	negs	r1, r3
 8009d48:	4159      	adcs	r1, r3
 8009d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d4e:	e7eb      	b.n	8009d28 <__swhatbuf_r+0x24>

08009d50 <__smakebuf_r>:
 8009d50:	898b      	ldrh	r3, [r1, #12]
 8009d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d54:	079d      	lsls	r5, r3, #30
 8009d56:	4606      	mov	r6, r0
 8009d58:	460c      	mov	r4, r1
 8009d5a:	d507      	bpl.n	8009d6c <__smakebuf_r+0x1c>
 8009d5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	6123      	str	r3, [r4, #16]
 8009d64:	2301      	movs	r3, #1
 8009d66:	6163      	str	r3, [r4, #20]
 8009d68:	b003      	add	sp, #12
 8009d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6c:	ab01      	add	r3, sp, #4
 8009d6e:	466a      	mov	r2, sp
 8009d70:	f7ff ffc8 	bl	8009d04 <__swhatbuf_r>
 8009d74:	9f00      	ldr	r7, [sp, #0]
 8009d76:	4605      	mov	r5, r0
 8009d78:	4639      	mov	r1, r7
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff fb0e 	bl	800939c <_malloc_r>
 8009d80:	b948      	cbnz	r0, 8009d96 <__smakebuf_r+0x46>
 8009d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d86:	059a      	lsls	r2, r3, #22
 8009d88:	d4ee      	bmi.n	8009d68 <__smakebuf_r+0x18>
 8009d8a:	f023 0303 	bic.w	r3, r3, #3
 8009d8e:	f043 0302 	orr.w	r3, r3, #2
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	e7e2      	b.n	8009d5c <__smakebuf_r+0xc>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	6020      	str	r0, [r4, #0]
 8009d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009da6:	b15b      	cbz	r3, 8009dc0 <__smakebuf_r+0x70>
 8009da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dac:	4630      	mov	r0, r6
 8009dae:	f000 f837 	bl	8009e20 <_isatty_r>
 8009db2:	b128      	cbz	r0, 8009dc0 <__smakebuf_r+0x70>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f023 0303 	bic.w	r3, r3, #3
 8009dba:	f043 0301 	orr.w	r3, r3, #1
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	431d      	orrs	r5, r3
 8009dc4:	81a5      	strh	r5, [r4, #12]
 8009dc6:	e7cf      	b.n	8009d68 <__smakebuf_r+0x18>

08009dc8 <memmove>:
 8009dc8:	4288      	cmp	r0, r1
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	eb01 0402 	add.w	r4, r1, r2
 8009dd0:	d902      	bls.n	8009dd8 <memmove+0x10>
 8009dd2:	4284      	cmp	r4, r0
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	d807      	bhi.n	8009de8 <memmove+0x20>
 8009dd8:	1e43      	subs	r3, r0, #1
 8009dda:	42a1      	cmp	r1, r4
 8009ddc:	d008      	beq.n	8009df0 <memmove+0x28>
 8009dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009de6:	e7f8      	b.n	8009dda <memmove+0x12>
 8009de8:	4402      	add	r2, r0
 8009dea:	4601      	mov	r1, r0
 8009dec:	428a      	cmp	r2, r1
 8009dee:	d100      	bne.n	8009df2 <memmove+0x2a>
 8009df0:	bd10      	pop	{r4, pc}
 8009df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dfa:	e7f7      	b.n	8009dec <memmove+0x24>

08009dfc <_fstat_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	@ (8009e1c <_fstat_r+0x20>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	f7f8 f960 	bl	80020ce <_fstat>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d102      	bne.n	8009e18 <_fstat_r+0x1c>
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	b103      	cbz	r3, 8009e18 <_fstat_r+0x1c>
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	bd38      	pop	{r3, r4, r5, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20019ce4 	.word	0x20019ce4

08009e20 <_isatty_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d06      	ldr	r5, [pc, #24]	@ (8009e3c <_isatty_r+0x1c>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f8 f95f 	bl	80020ee <_isatty>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_isatty_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_isatty_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20019ce4 	.word	0x20019ce4

08009e40 <_sbrk_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	@ (8009e5c <_sbrk_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f8 f968 	bl	8002120 <_sbrk>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_sbrk_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_sbrk_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20019ce4 	.word	0x20019ce4

08009e60 <_realloc_r>:
 8009e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e64:	4680      	mov	r8, r0
 8009e66:	4615      	mov	r5, r2
 8009e68:	460c      	mov	r4, r1
 8009e6a:	b921      	cbnz	r1, 8009e76 <_realloc_r+0x16>
 8009e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	4611      	mov	r1, r2
 8009e72:	f7ff ba93 	b.w	800939c <_malloc_r>
 8009e76:	b92a      	cbnz	r2, 8009e84 <_realloc_r+0x24>
 8009e78:	f7ff fa24 	bl	80092c4 <_free_r>
 8009e7c:	2400      	movs	r4, #0
 8009e7e:	4620      	mov	r0, r4
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e84:	f000 f81a 	bl	8009ebc <_malloc_usable_size_r>
 8009e88:	4285      	cmp	r5, r0
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	d802      	bhi.n	8009e94 <_realloc_r+0x34>
 8009e8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009e92:	d8f4      	bhi.n	8009e7e <_realloc_r+0x1e>
 8009e94:	4629      	mov	r1, r5
 8009e96:	4640      	mov	r0, r8
 8009e98:	f7ff fa80 	bl	800939c <_malloc_r>
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d0ec      	beq.n	8009e7c <_realloc_r+0x1c>
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	bf28      	it	cs
 8009eaa:	4632      	movcs	r2, r6
 8009eac:	f7ff f9fb 	bl	80092a6 <memcpy>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f7ff fa06 	bl	80092c4 <_free_r>
 8009eb8:	463c      	mov	r4, r7
 8009eba:	e7e0      	b.n	8009e7e <_realloc_r+0x1e>

08009ebc <_malloc_usable_size_r>:
 8009ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec0:	1f18      	subs	r0, r3, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bfbc      	itt	lt
 8009ec6:	580b      	ldrlt	r3, [r1, r0]
 8009ec8:	18c0      	addlt	r0, r0, r3
 8009eca:	4770      	bx	lr

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr


city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08008d24  08008d24  00009d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f7c  08008f7c  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f7c  08008f7c  00009f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f84  08008f84  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f84  08008f84  00009f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008f8c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019c5c  2000006c  08008ff8  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019cc8  08008ff8  0000acc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f7a0  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f5e  00000000  00000000  0002983c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0002d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001379  00000000  00000000  0002f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005242  00000000  00000000  000303b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da9b  00000000  00000000  000355fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff27c  00000000  00000000  00053096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d4  00000000  00000000  00152358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015942c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d0c 	.word	0x08008d0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008d0c 	.word	0x08008d0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	TIM_int = false;
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <main+0x60>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
	total_tasks_time = 0;
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <main+0x64>)
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 f83f 	bl	8001636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f82e 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f952 	bl	8000864 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c0:	f000 f8f2 	bl	80007a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c4:	f000 f920 	bl	8000808 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80005c8:	f000 f88c 	bl	80006e4 <MX_RNG_Init>
  MX_TIM2_Init();
 80005cc:	f000 f89e 	bl	800070c <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  initQueues();
 80005d0:	f000 fb56 	bl	8000c80 <initQueues>
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  BaseType_t status;
  //initTasks();
  status = xTaskCreate((TaskFunction_t)initTasks,
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <main+0x68>)
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2338      	movs	r3, #56	@ 0x38
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	490a      	ldr	r1, [pc, #40]	@ (800060c <main+0x6c>)
 80005e2:	480b      	ldr	r0, [pc, #44]	@ (8000610 <main+0x70>)
 80005e4:	f005 fa26 	bl	8005a34 <xTaskCreate>
 80005e8:	6078      	str	r0, [r7, #4]
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);

  xTasksDataMutex = xSemaphoreCreateMutex();
 80005ea:	2001      	movs	r0, #1
 80005ec:	f004 fc4d 	bl	8004e8a <xQueueCreateMutex>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <main+0x74>)
 80005f4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 80005f6:	f005 fb7d 	bl	8005cf4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x5a>
 80005fe:	bf00      	nop
 8000600:	20000088 	.word	0x20000088
 8000604:	200006a0 	.word	0x200006a0
 8000608:	2000069c 	.word	0x2000069c
 800060c:	08008d38 	.word	0x08008d38
 8000610:	08000a31 	.word	0x08000a31
 8000614:	200006a8 	.word	0x200006a8

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fdce 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <SystemClock_Config+0xc4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a26      	ldr	r2, [pc, #152]	@ (80006dc <SystemClock_Config+0xc4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <SystemClock_Config+0xc4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xc8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065c:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <SystemClock_Config+0xc8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <SystemClock_Config+0xc8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	@ 0x48
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fbff 	bl	8001e9c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a4:	f000 fc92 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fe8d 	bl	80023e4 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006d0:	f000 fc7c 	bl	8000fcc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_RNG_Init+0x20>)
 80006ea:	4a07      	ldr	r2, [pc, #28]	@ (8000708 <MX_RNG_Init+0x24>)
 80006ec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_RNG_Init+0x20>)
 80006f0:	f002 fcc0 	bl	8003074 <HAL_RNG_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006fa:	f000 fc67 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	50060800 	.word	0x50060800

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <MX_TIM2_Init+0x98>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_TIM2_Init+0x98>)
 8000734:	220f      	movs	r2, #15
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_TIM2_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 44999;
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_TIM2_Init+0x98>)
 8000740:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8000744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_TIM2_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_TIM2_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000752:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <MX_TIM2_Init+0x98>)
 8000754:	f002 fd16 	bl	8003184 <HAL_TIM_Base_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800075e:	f000 fc35 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <MX_TIM2_Init+0x98>)
 8000770:	f002 fee0 	bl	8003534 <HAL_TIM_ConfigClockSource>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800077a:	f000 fc27 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <MX_TIM2_Init+0x98>)
 800078c:	f003 f90a 	bl	80039a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 fc19 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000009c 	.word	0x2000009c

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <MX_USART3_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART3_UART_Init+0x58>)
 80007ec:	f003 f986 	bl	8003afc <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 fbe9 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000e8 	.word	0x200000e8
 8000804:	40004800 	.word	0x40004800

08000808 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2206      	movs	r2, #6
 8000818:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2202      	movs	r2, #2
 800082a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2201      	movs	r2, #1
 8000830:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2201      	movs	r2, #1
 8000842:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	f001 f9eb 	bl	8001c26 <HAL_PCD_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 fbb9 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000170 	.word	0x20000170

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b68      	ldr	r3, [pc, #416]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a67      	ldr	r2, [pc, #412]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b65      	ldr	r3, [pc, #404]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b62      	ldr	r3, [pc, #392]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a61      	ldr	r2, [pc, #388]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a5b      	ldr	r2, [pc, #364]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a55      	ldr	r2, [pc, #340]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a4f      	ldr	r2, [pc, #316]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b4a      	ldr	r3, [pc, #296]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a49      	ldr	r2, [pc, #292]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_GPIO_Init+0x1b8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000910:	4843      	ldr	r0, [pc, #268]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000912:	f001 f96f 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	4842      	ldr	r0, [pc, #264]	@ (8000a24 <MX_GPIO_Init+0x1c0>)
 800091c:	f001 f96a 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	483c      	ldr	r0, [pc, #240]	@ (8000a28 <MX_GPIO_Init+0x1c4>)
 8000938:	f000 ffb0 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800093c:	2332      	movs	r3, #50	@ 0x32
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094c:	230b      	movs	r3, #11
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4834      	ldr	r0, [pc, #208]	@ (8000a28 <MX_GPIO_Init+0x1c4>)
 8000958:	f000 ffa0 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800095c:	2386      	movs	r3, #134	@ 0x86
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096c:	230b      	movs	r3, #11
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482d      	ldr	r0, [pc, #180]	@ (8000a2c <MX_GPIO_Init+0x1c8>)
 8000978:	f000 ff90 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4822      	ldr	r0, [pc, #136]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000996:	f000 ff81 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80009b8:	f000 ff70 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <MX_GPIO_Init+0x1c0>)
 80009d4:	f000 ff62 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <MX_GPIO_Init+0x1c0>)
 80009ec:	f000 ff56 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a02:	230b      	movs	r3, #11
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_GPIO_Init+0x1c0>)
 8000a0e:	f000 ff45 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <initTasks>:

/* USER CODE BEGIN 4 */
void initTasks(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09c      	sub	sp, #112	@ 0x70
 8000a34:	af02      	add	r7, sp, #8
	/* TODO: consider creating a dedicated function to initialize the tasks,
	 *       the function will receive the address of the tasks array, and its size,
	 *       and will initialize it.
	 *       This will replace initializing each array specifically.
	 */
	printf("Starting initTasks task! \r\n");
 8000a36:	487c      	ldr	r0, [pc, #496]	@ (8000c28 <initTasks+0x1f8>)
 8000a38:	f007 fab2 	bl	8007fa0 <puts>
	fflush(stdout);
 8000a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8000c2c <initTasks+0x1fc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 f980 	bl	8007d48 <fflush>
	/* AMBULANCE TASK INIT */
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8000a4c:	e025      	b.n	8000a9a <initTasks+0x6a>
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i);
 8000a4e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000a52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a54:	4a76      	ldr	r2, [pc, #472]	@ (8000c30 <initTasks+0x200>)
 8000a56:	2110      	movs	r1, #16
 8000a58:	f007 faaa 	bl	8007fb0 <sniprintf>
	 	status = xTaskCreate(vHandleCall,
 8000a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4a74      	ldr	r2, [pc, #464]	@ (8000c34 <initTasks+0x204>)
 8000a62:	4413      	add	r3, r2
 8000a64:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	232e      	movs	r3, #46	@ 0x2e
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	4871      	ldr	r0, [pc, #452]	@ (8000c38 <initTasks+0x208>)
 8000a74:	f004 ffde 	bl	8005a34 <xTaskCreate>
 8000a78:	6478      	str	r0, [r7, #68]	@ 0x44
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) 1,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 8000a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d009      	beq.n	8000a94 <initTasks+0x64>
	 		/* TODO: handle this error */
	 		printf("Starting Ambulance Threads Failed! \r\n");
 8000a80:	486e      	ldr	r0, [pc, #440]	@ (8000c3c <initTasks+0x20c>)
 8000a82:	f007 fa8d 	bl	8007fa0 <puts>
	 		fflush(stdout);
 8000a86:	4b69      	ldr	r3, [pc, #420]	@ (8000c2c <initTasks+0x1fc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f007 f95b 	bl	8007d48 <fflush>
 8000a92:	e0c6      	b.n	8000c22 <initTasks+0x1f2>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8000a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a96:	3301      	adds	r3, #1
 8000a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8000a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	ddd6      	ble.n	8000a4e <initTasks+0x1e>
	 		return;
	 	}
	}
	printf("Started Ambulance Threads! \r\n");
 8000aa0:	4867      	ldr	r0, [pc, #412]	@ (8000c40 <initTasks+0x210>)
 8000aa2:	f007 fa7d 	bl	8007fa0 <puts>
	fflush(stdout);
 8000aa6:	4b61      	ldr	r3, [pc, #388]	@ (8000c2c <initTasks+0x1fc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f007 f94b 	bl	8007d48 <fflush>

	/* POLICE TASK INIT */
	for(int i=0; i<POLICE_TASKS; i++) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ab6:	e01c      	b.n	8000af2 <initTasks+0xc2>
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i);
 8000ab8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000abc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000abe:	4a61      	ldr	r2, [pc, #388]	@ (8000c44 <initTasks+0x214>)
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	f007 fa75 	bl	8007fb0 <sniprintf>
	 	status = xTaskCreate(vHandleCall,
 8000ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4a5f      	ldr	r2, [pc, #380]	@ (8000c48 <initTasks+0x218>)
 8000acc:	4413      	add	r3, r2
 8000ace:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	232e      	movs	r3, #46	@ 0x2e
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	4856      	ldr	r0, [pc, #344]	@ (8000c38 <initTasks+0x208>)
 8000ade:	f004 ffa9 	bl	8005a34 <xTaskCreate>
 8000ae2:	64b8      	str	r0, [r7, #72]	@ 0x48
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) 1,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 8000ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	f040 8094 	bne.w	8000c14 <initTasks+0x1e4>
	for(int i=0; i<POLICE_TASKS; i++) {
 8000aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000aee:	3301      	adds	r3, #1
 8000af0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	dddf      	ble.n	8000ab8 <initTasks+0x88>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	printf("Started Police Threads! \r\n");
 8000af8:	4854      	ldr	r0, [pc, #336]	@ (8000c4c <initTasks+0x21c>)
 8000afa:	f007 fa51 	bl	8007fa0 <puts>
	fflush(stdout);
 8000afe:	4b4b      	ldr	r3, [pc, #300]	@ (8000c2c <initTasks+0x1fc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 f91f 	bl	8007d48 <fflush>
	/* FIRE DEP TASK INIT */
	for(int i=0; i<FIRE_TASKS; i++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b0e:	e01b      	b.n	8000b48 <initTasks+0x118>
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i);
 8000b10:	f107 0014 	add.w	r0, r7, #20
 8000b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b16:	4a4e      	ldr	r2, [pc, #312]	@ (8000c50 <initTasks+0x220>)
 8000b18:	2110      	movs	r1, #16
 8000b1a:	f007 fa49 	bl	8007fb0 <sniprintf>
	 	status = xTaskCreate(vHandleCall,
 8000b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4a4c      	ldr	r2, [pc, #304]	@ (8000c54 <initTasks+0x224>)
 8000b24:	4413      	add	r3, r2
 8000b26:	f107 0114 	add.w	r1, r7, #20
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	232e      	movs	r3, #46	@ 0x2e
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2301      	movs	r3, #1
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	4840      	ldr	r0, [pc, #256]	@ (8000c38 <initTasks+0x208>)
 8000b36:	f004 ff7d 	bl	8005a34 <xTaskCreate>
 8000b3a:	64f8      	str	r0, [r7, #76]	@ 0x4c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) 1,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 8000b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d16a      	bne.n	8000c18 <initTasks+0x1e8>
	for(int i=0; i<FIRE_TASKS; i++) {
 8000b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b44:	3301      	adds	r3, #1
 8000b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	dde0      	ble.n	8000b10 <initTasks+0xe0>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	printf("Started Fire Dep Threads! \r\n");
 8000b4e:	4842      	ldr	r0, [pc, #264]	@ (8000c58 <initTasks+0x228>)
 8000b50:	f007 fa26 	bl	8007fa0 <puts>
	fflush(stdout);
 8000b54:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <initTasks+0x1fc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 f8f4 	bl	8007d48 <fflush>
	/* CORONA TASK INIT */
	for(int i=0; i<CORONA_TASKS; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000b64:	e019      	b.n	8000b9a <initTasks+0x16a>
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i);
 8000b66:	1d38      	adds	r0, r7, #4
 8000b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c5c <initTasks+0x22c>)
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	f007 fa1f 	bl	8007fb0 <sniprintf>
	 	status = xTaskCreate(vHandleCall,
 8000b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4a3a      	ldr	r2, [pc, #232]	@ (8000c60 <initTasks+0x230>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	1d39      	adds	r1, r7, #4
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	232e      	movs	r3, #46	@ 0x2e
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2301      	movs	r3, #1
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	482c      	ldr	r0, [pc, #176]	@ (8000c38 <initTasks+0x208>)
 8000b88:	f004 ff54 	bl	8005a34 <xTaskCreate>
 8000b8c:	6538      	str	r0, [r7, #80]	@ 0x50
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) 1,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 8000b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d143      	bne.n	8000c1c <initTasks+0x1ec>
	for(int i=0; i<CORONA_TASKS; i++) {
 8000b94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b96:	3301      	adds	r3, #1
 8000b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000b9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	dde2      	ble.n	8000b66 <initTasks+0x136>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	printf("Started Corona Threads! \r\n");
 8000ba0:	4830      	ldr	r0, [pc, #192]	@ (8000c64 <initTasks+0x234>)
 8000ba2:	f007 f9fd 	bl	8007fa0 <puts>
	fflush(stdout);
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <initTasks+0x1fc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 f8cb 	bl	8007d48 <fflush>

	BaseType_t status = xTaskCreate(vDispatcherCode,
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <initTasks+0x238>)
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	232e      	movs	r3, #46	@ 0x2e
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	492b      	ldr	r1, [pc, #172]	@ (8000c6c <initTasks+0x23c>)
 8000bc0:	482b      	ldr	r0, [pc, #172]	@ (8000c70 <initTasks+0x240>)
 8000bc2:	f004 ff37 	bl	8005a34 <xTaskCreate>
 8000bc6:	6578      	str	r0, [r7, #84]	@ 0x54
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							HANDLE_TASKS_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 8000bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d128      	bne.n	8000c20 <initTasks+0x1f0>
		return;
	}
	printf("Started Dispatcher Thread! \r\n");
 8000bce:	4829      	ldr	r0, [pc, #164]	@ (8000c74 <initTasks+0x244>)
 8000bd0:	f007 f9e6 	bl	8007fa0 <puts>
	fflush(stdout);
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <initTasks+0x1fc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 f8b4 	bl	8007d48 <fflush>

	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000be0:	4825      	ldr	r0, [pc, #148]	@ (8000c78 <initTasks+0x248>)
 8000be2:	f002 fb27 	bl	8003234 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <initTasks+0x1c0>
		Error_Handler();
 8000bec:	f000 f9ee 	bl	8000fcc <Error_Handler>
	}

	printf("Timer interrupts enabled! \r\n");
 8000bf0:	4822      	ldr	r0, [pc, #136]	@ (8000c7c <initTasks+0x24c>)
 8000bf2:	f007 f9d5 	bl	8007fa0 <puts>
	fflush(stdout);
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <initTasks+0x1fc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 f8a3 	bl	8007d48 <fflush>
	//	Error_Handler();
	//}
	//vTaskDelay(100);
	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8000c02:	463a      	mov	r2, r7
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f005 feba 	bl	8006984 <xTaskNotifyWait>
	for(;;) {
 8000c10:	bf00      	nop
 8000c12:	e7f6      	b.n	8000c02 <initTasks+0x1d2>
	 		return;
 8000c14:	bf00      	nop
 8000c16:	e004      	b.n	8000c22 <initTasks+0x1f2>
	 		return;
 8000c18:	bf00      	nop
 8000c1a:	e002      	b.n	8000c22 <initTasks+0x1f2>
	 		return;
 8000c1c:	bf00      	nop
 8000c1e:	e000      	b.n	8000c22 <initTasks+0x1f2>
		return;
 8000c20:	bf00      	nop
	}
}
 8000c22:	3768      	adds	r7, #104	@ 0x68
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08008d44 	.word	0x08008d44
 8000c2c:	2000001c 	.word	0x2000001c
 8000c30:	08008d60 	.word	0x08008d60
 8000c34:	20000664 	.word	0x20000664
 8000c38:	08000dd9 	.word	0x08000dd9
 8000c3c:	08008d70 	.word	0x08008d70
 8000c40:	08008d98 	.word	0x08008d98
 8000c44:	08008db8 	.word	0x08008db8
 8000c48:	20000674 	.word	0x20000674
 8000c4c:	08008dc4 	.word	0x08008dc4
 8000c50:	08008de0 	.word	0x08008de0
 8000c54:	20000680 	.word	0x20000680
 8000c58:	08008de8 	.word	0x08008de8
 8000c5c:	08008e04 	.word	0x08008e04
 8000c60:	20000688 	.word	0x20000688
 8000c64:	08008e10 	.word	0x08008e10
 8000c68:	20000698 	.word	0x20000698
 8000c6c:	08008e2c 	.word	0x08008e2c
 8000c70:	08000d21 	.word	0x08000d21
 8000c74:	08008e3c 	.word	0x08008e3c
 8000c78:	2000009c 	.word	0x2000009c
 8000c7c:	08008e5c 	.word	0x08008e5c

08000c80 <initQueues>:

void initQueues(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	/* TODO: Consider setting attributed for each queue */

	qAmbulance = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f004 f87e 	bl	8004d8a <xQueueGenericCreate>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <initQueues+0x8c>)
 8000c92:	6013      	str	r3, [r2, #0]
	if(qAmbulance == NULL) {
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <initQueues+0x8c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d02f      	beq.n	8000cfc <initQueues+0x7c>
		/* TODO: handle this error */
		return;
	}
	qPolice = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f004 f872 	bl	8004d8a <xQueueGenericCreate>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a19      	ldr	r2, [pc, #100]	@ (8000d10 <initQueues+0x90>)
 8000caa:	6013      	str	r3, [r2, #0]
	if(qPolice == NULL) {
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <initQueues+0x90>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d025      	beq.n	8000d00 <initQueues+0x80>
		/* TODO: handle this error */
		return;
	}
	qFire = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f004 f866 	bl	8004d8a <xQueueGenericCreate>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <initQueues+0x94>)
 8000cc2:	6013      	str	r3, [r2, #0]
	if(qFire == NULL) {
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <initQueues+0x94>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d01b      	beq.n	8000d04 <initQueues+0x84>
		/* TODO: handle this error */
		return;
	}
	qCorona = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2108      	movs	r1, #8
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f004 f85a 	bl	8004d8a <xQueueGenericCreate>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <initQueues+0x98>)
 8000cda:	6013      	str	r3, [r2, #0]
	if(qCorona == NULL) {
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <initQueues+0x98>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d011      	beq.n	8000d08 <initQueues+0x88>
		/* TODO: handle this error */
		return;
	}
	qDispatcher = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f004 f84e 	bl	8004d8a <xQueueGenericCreate>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <initQueues+0x9c>)
 8000cf2:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <initQueues+0x9c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	e006      	b.n	8000d0a <initQueues+0x8a>
		return;
 8000cfc:	bf00      	nop
 8000cfe:	e004      	b.n	8000d0a <initQueues+0x8a>
		return;
 8000d00:	bf00      	nop
 8000d02:	e002      	b.n	8000d0a <initQueues+0x8a>
		return;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <initQueues+0x8a>
		return;
 8000d08:	bf00      	nop
		/* TODO: handle this error */
		return;
	}
	/* TODO: log a message queues were initialized */

}
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000650 	.word	0x20000650
 8000d10:	20000654 	.word	0x20000654
 8000d14:	20000658 	.word	0x20000658
 8000d18:	2000065c 	.word	0x2000065c
 8000d1c:	20000660 	.word	0x20000660

08000d20 <vDispatcherCode>:

void vDispatcherCode(void *pvParameters) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d00d      	beq.n	8000d4a <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d32:	b672      	cpsid	i
 8000d34:	f383 8811 	msr	BASEPRI, r3
 8000d38:	f3bf 8f6f 	isb	sy
 8000d3c:	f3bf 8f4f 	dsb	sy
 8000d40:	b662      	cpsie	i
 8000d42:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	e7fd      	b.n	8000d46 <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;

	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	481c      	ldr	r0, [pc, #112]	@ (8000dc0 <vDispatcherCode+0xa0>)
 8000d50:	f000 ff50 	bl	8001bf4 <HAL_GPIO_WritePin>
		printf("Dispatcher Entered BLOCKED state! \r\n");
 8000d54:	481b      	ldr	r0, [pc, #108]	@ (8000dc4 <vDispatcherCode+0xa4>)
 8000d56:	f007 f923 	bl	8007fa0 <puts>
		fflush(stdout);
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <vDispatcherCode+0xa8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 fff1 	bl	8007d48 <fflush>
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8000d66:	f107 0210 	add.w	r2, r7, #16
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2000      	movs	r0, #0
 8000d72:	f005 fe07 	bl	8006984 <xTaskNotifyWait>
		printf("Dispatcher in RUNNING state! \n \tPerforming a task! \r\n");
 8000d76:	4815      	ldr	r0, [pc, #84]	@ (8000dcc <vDispatcherCode+0xac>)
 8000d78:	f007 f912 	bl	8007fa0 <puts>
		fflush(stdout);
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <vDispatcherCode+0xa8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 ffe0 	bl	8007d48 <fflush>
		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <vDispatcherCode+0xb0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f107 0108 	add.w	r1, r7, #8
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fa3f 	bl	8005218 <xQueueReceive>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d1d4      	bne.n	8000d4a <vDispatcherCode+0x2a>
			//vTaskDelay(pdMS_TO_TICKS(500));
			//vTaskDelay(400);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2180      	movs	r1, #128	@ 0x80
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <vDispatcherCode+0xa0>)
 8000da6:	f000 ff25 	bl	8001bf4 <HAL_GPIO_WritePin>
			printf("Dispatcher routing received packet! \r\n");
 8000daa:	480a      	ldr	r0, [pc, #40]	@ (8000dd4 <vDispatcherCode+0xb4>)
 8000dac:	f007 f8f8 	bl	8007fa0 <puts>
			fflush(stdout);
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <vDispatcherCode+0xa8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f006 ffc6 	bl	8007d48 <fflush>
	for(;;) {
 8000dbc:	e7c5      	b.n	8000d4a <vDispatcherCode+0x2a>
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	08008e78 	.word	0x08008e78
 8000dc8:	2000001c 	.word	0x2000001c
 8000dcc:	08008e9c 	.word	0x08008e9c
 8000dd0:	20000660 	.word	0x20000660
 8000dd4:	08008ed4 	.word	0x08008ed4

08000dd8 <vHandleCall>:
		//vTaskDelay(400);

	}
}

void vHandleCall(void* pvParameters) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d00d      	beq.n	8000e02 <vHandleCall+0x2a>
	__asm volatile
 8000de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dea:	b672      	cpsid	i
 8000dec:	f383 8811 	msr	BASEPRI, r3
 8000df0:	f3bf 8f6f 	isb	sy
 8000df4:	f3bf 8f4f 	dsb	sy
 8000df8:	b662      	cpsie	i
 8000dfa:	613b      	str	r3, [r7, #16]
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	e7fd      	b.n	8000dfe <vHandleCall+0x26>
	/*
	 * TODO: log the task has been created before transitioning to BLOCKED state.
	 */
	//vTaskDelay(1000);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2101      	movs	r1, #1
 8000e06:	4822      	ldr	r0, [pc, #136]	@ (8000e90 <vHandleCall+0xb8>)
 8000e08:	f000 fef4 	bl	8001bf4 <HAL_GPIO_WritePin>
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	2100      	movs	r1, #0
 8000e16:	2000      	movs	r0, #0
 8000e18:	f005 fdb4 	bl	8006984 <xTaskNotifyWait>
		startTick = xTaskGetTickCount();
 8000e1c:	f005 f88c 	bl	8005f38 <xTaskGetTickCount>
 8000e20:	61f8      	str	r0, [r7, #28]
		/*
		 * PERFORM TASK
		 */
		if(xTasksDataMutex != NULL) {
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <vHandleCall+0xbc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f0      	beq.n	8000e0c <vHandleCall+0x34>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <vHandleCall+0xbc>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e32:	4618      	mov	r0, r3
 8000e34:	f004 fad8 	bl	80053e8 <xQueueSemaphoreTake>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d1e6      	bne.n	8000e0c <vHandleCall+0x34>
				total_tasks_ran++;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <vHandleCall+0xc0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <vHandleCall+0xc0>)
 8000e46:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 8000e48:	f005 f876 	bl	8005f38 <xTaskGetTickCount>
 8000e4c:	61b8      	str	r0, [r7, #24]
				totalTicks = endTick - startTick;
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
				taskENTER_CRITICAL();
 8000e56:	f006 fbb1 	bl	80075bc <vPortEnterCritical>
				total_tasks_time += (float)totalTicks/configTICK_RATE_HZ;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e64:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000e9c <vHandleCall+0xc4>
 8000e68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <vHandleCall+0xc8>)
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <vHandleCall+0xc8>)
 8000e78:	edc3 7a00 	vstr	s15, [r3]
				taskEXIT_CRITICAL();
 8000e7c:	f006 fbd4 	bl	8007628 <vPortExitCritical>
				xSemaphoreGive(xTasksDataMutex);
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <vHandleCall+0xbc>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f004 f817 	bl	8004ebc <xQueueGenericSend>
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8000e8e:	e7bd      	b.n	8000e0c <vHandleCall+0x34>
 8000e90:	40020400 	.word	0x40020400
 8000e94:	200006a8 	.word	0x200006a8
 8000e98:	200006a4 	.word	0x200006a4
 8000e9c:	447a0000 	.word	0x447a0000
 8000ea0:	200006a0 	.word	0x200006a0

08000ea4 <HAL_RNG_ReadyDataCallback>:

	}
}

void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t randomPeriod = (random32bit % MAX_TIM2_IT_PERIOD) + MIN_TIM2_IT_PERIOD;
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_RNG_ReadyDataCallback+0x50>)
 8000eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ebc:	fb01 f303 	mul.w	r3, r1, r3
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	3364      	adds	r3, #100	@ 0x64
 8000ec4:	60fb      	str	r3, [r7, #12]

  // Update timer IT period
  __HAL_TIM_SET_AUTORELOAD(&htim2, randomPeriod * 2);
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_RNG_ReadyDataCallback+0x54>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_RNG_ReadyDataCallback+0x54>)
 8000ed6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <HAL_RNG_ReadyDataCallback+0x54>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_RNG_ReadyDataCallback+0x58>)
 8000ee8:	f000 fe84 	bl	8001bf4 <HAL_GPIO_WritePin>

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	10624dd3 	.word	0x10624dd3
 8000ef8:	2000009c 	.word	0x2000009c
 8000efc:	40020400 	.word	0x40020400

08000f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f10:	d143      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x9a>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 8000f16:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fb7c 	bl	8005618 <uxQueueMessagesWaitingFromISR>
 8000f20:	6178      	str	r0, [r7, #20]
		UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fb22 	bl	8006570 <uxTaskGetStackHighWaterMark>
 8000f2c:	6138      	str	r0, [r7, #16]
		if( qItems != TASKS_QUEUE_SIZE) {
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d01a      	beq.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x6a>
			xQueueSendFromISR(qDispatcher, &dispPack, NULL);
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	491e      	ldr	r1, [pc, #120]	@ (8000fb8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f3e:	f004 f8c7 	bl	80050d0 <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	f005 fd77 	bl	8006a44 <xTaskGenericNotifyFromISR>
			printf("Added to queue! \r\n");
 8000f56:	4819      	ldr	r0, [pc, #100]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f58:	f007 f822 	bl	8007fa0 <puts>
			fflush(stdout);
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 fef0 	bl	8007d48 <fflush>
 8000f68:	e009      	b.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x7e>
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f005 fd63 	bl	8006a44 <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10a      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x9a>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	f3bf 8f6f 	isb	sy
		/*
		 * TODO: add a random item to dispatcher queue.
		 */
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_TIM_PeriodElapsedCallback+0xa8>
    HAL_IncTick();
 8000fa4:	f000 fb54 	bl	8001650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000660 	.word	0x20000660
 8000fb4:	20000698 	.word	0x20000698
 8000fb8:	08008f28 	.word	0x08008f28
 8000fbc:	08008efc 	.word	0x08008efc
 8000fc0:	2000001c 	.word	0x2000001c
 8000fc4:	e000ed04 	.word	0xe000ed04
 8000fc8:	40001000 	.word	0x40001000

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <HAL_MspInit+0x70>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a19      	ldr	r2, [pc, #100]	@ (8001048 <HAL_MspInit+0x70>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_MspInit+0x70>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_MspInit+0x70>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <HAL_MspInit+0x70>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001000:	6453      	str	r3, [r2, #68]	@ 0x44
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_MspInit+0x70>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210f      	movs	r1, #15
 8001012:	f06f 0001 	mvn.w	r0, #1
 8001016:	f000 fc17 	bl	8001848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	2050      	movs	r0, #80	@ 0x50
 8001020:	f000 fc12 	bl	8001848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001024:	2050      	movs	r0, #80	@ 0x50
 8001026:	f000 fc2b 	bl	8001880 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	201c      	movs	r0, #28
 8001030:	f000 fc0a 	bl	8001848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001034:	201c      	movs	r0, #28
 8001036:	f000 fc23 	bl	8001880 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 fbf9 	bl	8001832 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0a4      	sub	sp, #144	@ 0x90
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2284      	movs	r2, #132	@ 0x84
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f007 f8b3 	bl	80081c8 <memset>
  if(hrng->Instance==RNG)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <HAL_RNG_MspInit+0x70>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d123      	bne.n	80010b4 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800106c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001070:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fc09 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001088:	f7ff ffa0 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_RNG_MspInit+0x74>)
 800108e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_RNG_MspInit+0x74>)
 8001092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001096:	6353      	str	r3, [r2, #52]	@ 0x34
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_RNG_MspInit+0x74>)
 800109a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	210f      	movs	r1, #15
 80010a8:	2050      	movs	r0, #80	@ 0x50
 80010aa:	f000 fbcd 	bl	8001848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80010ae:	2050      	movs	r0, #80	@ 0x50
 80010b0:	f000 fbe6 	bl	8001880 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	3790      	adds	r7, #144	@ 0x90
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	50060800 	.word	0x50060800
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d113      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	210a      	movs	r1, #10
 80010f2:	201c      	movs	r0, #28
 80010f4:	f000 fba8 	bl	8001848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f8:	201c      	movs	r0, #28
 80010fa:	f000 fbc1 	bl	8001880 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0aa      	sub	sp, #168	@ 0xa8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2284      	movs	r2, #132	@ 0x84
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f007 f84b 	bl	80081c8 <memset>
  if(huart->Instance==USART3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a22      	ldr	r2, [pc, #136]	@ (80011c0 <HAL_UART_MspInit+0xb4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d13c      	bne.n	80011b6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800113c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001140:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001142:	2300      	movs	r3, #0
 8001144:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fba2 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001156:	f7ff ff39 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <HAL_UART_MspInit+0xb8>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a19      	ldr	r2, [pc, #100]	@ (80011c4 <HAL_UART_MspInit+0xb8>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <HAL_UART_MspInit+0xb8>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_UART_MspInit+0xb8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a13      	ldr	r2, [pc, #76]	@ (80011c4 <HAL_UART_MspInit+0xb8>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <HAL_UART_MspInit+0xb8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800118e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_UART_MspInit+0xbc>)
 80011b2:	f000 fb73 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011b6:	bf00      	nop
 80011b8:	37a8      	adds	r7, #168	@ 0xa8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004800 	.word	0x40004800
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020c00 	.word	0x40020c00

080011cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ac      	sub	sp, #176	@ 0xb0
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	2284      	movs	r2, #132	@ 0x84
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 ffeb 	bl	80081c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011fa:	d159      	bne.n	80012b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001200:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fb41 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001218:	f7ff fed8 	bl	8000fcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	4a25      	ldr	r2, [pc, #148]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6313      	str	r3, [r2, #48]	@ 0x30
 8001228:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001234:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800124e:	230a      	movs	r3, #10
 8001250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001258:	4619      	mov	r1, r3
 800125a:	4818      	ldr	r0, [pc, #96]	@ (80012bc <HAL_PCD_MspInit+0xf0>)
 800125c:	f000 fb1e 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001278:	4619      	mov	r1, r3
 800127a:	4810      	ldr	r0, [pc, #64]	@ (80012bc <HAL_PCD_MspInit+0xf0>)
 800127c:	f000 fb0e 	bl	800189c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 8001282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 8001286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128a:	6353      	str	r3, [r2, #52]	@ 0x34
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 800128e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <HAL_PCD_MspInit+0xec>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012b0:	bf00      	nop
 80012b2:	37b0      	adds	r7, #176	@ 0xb0
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	@ 0x38
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <HAL_InitTick+0xe0>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <HAL_InitTick+0xe0>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <HAL_InitTick+0xe0>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e8:	f107 0210 	add.w	r2, r7, #16
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fa9c 	bl	8002830 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d103      	bne.n	800130a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001302:	f001 fa6d 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8001306:	6378      	str	r0, [r7, #52]	@ 0x34
 8001308:	e004      	b.n	8001314 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800130a:	f001 fa69 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 800130e:	4603      	mov	r3, r0
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001316:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <HAL_InitTick+0xe4>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	0c9b      	lsrs	r3, r3, #18
 800131e:	3b01      	subs	r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <HAL_InitTick+0xe8>)
 8001324:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <HAL_InitTick+0xec>)
 8001326:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <HAL_InitTick+0xe8>)
 800132a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800132e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001330:	4a1d      	ldr	r2, [pc, #116]	@ (80013a8 <HAL_InitTick+0xe8>)
 8001332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001334:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <HAL_InitTick+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <HAL_InitTick+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_InitTick+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001348:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <HAL_InitTick+0xe8>)
 800134a:	f001 ff1b 	bl	8003184 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001354:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001358:	2b00      	cmp	r3, #0
 800135a:	d11b      	bne.n	8001394 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800135c:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <HAL_InitTick+0xe8>)
 800135e:	f001 ff69 	bl	8003234 <HAL_TIM_Base_Start_IT>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001368:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800136c:	2b00      	cmp	r3, #0
 800136e:	d111      	bne.n	8001394 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001370:	2036      	movs	r0, #54	@ 0x36
 8001372:	f000 fa85 	bl	8001880 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d808      	bhi.n	800138e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	2036      	movs	r0, #54	@ 0x36
 8001382:	f000 fa61 	bl	8001848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_InitTick+0xf0>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e002      	b.n	8001394 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001394:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001398:	4618      	mov	r0, r3
 800139a:	3738      	adds	r7, #56	@ 0x38
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	200006ac 	.word	0x200006ac
 80013ac:	40001000 	.word	0x40001000
 80013b0:	20000004 	.word	0x20000004

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <NMI_Handler+0x4>

080013bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <MemManage_Handler+0x4>

080013cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <UsageFault_Handler+0x4>

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <TIM2_IRQHandler+0x10>)
 80013f2:	f001 ff97 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000009c 	.word	0x2000009c

08001400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <TIM6_DAC_IRQHandler+0x10>)
 8001406:	f001 ff8d 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200006ac 	.word	0x200006ac

08001414 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <RNG_IRQHandler+0x10>)
 800141a:	f001 fe55 	bl	80030c8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000008c 	.word	0x2000008c

08001428 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <ITM_SendChar+0x48>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <ITM_SendChar+0x48>)
 8001438:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800143c:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <ITM_SendChar+0x4c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0c      	ldr	r2, [pc, #48]	@ (8001474 <ITM_SendChar+0x4c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 800144a:	bf00      	nop
 800144c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f8      	beq.n	800144c <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800145a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000edfc 	.word	0xe000edfc
 8001474:	e0000e00 	.word	0xe0000e00

08001478 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
  }

  return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffab 	bl	8001428 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf1      	blt.n	80014c4 <_write+0x12>
  }
  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001512:	605a      	str	r2, [r3, #4]
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_isatty>:

int _isatty(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	@ (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f006 fec4 	bl	8008310 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20050000 	.word	0x20050000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	200006f8 	.word	0x200006f8
 80015bc:	20019cc8 	.word	0x20019cc8

080015c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800161c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	@ (8001630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001612:	f006 fe83 	bl	800831c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7fe ffc3 	bl	80005a0 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001628:	08008f8c 	.word	0x08008f8c
  ldr r2, =_sbss
 800162c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001630:	20019cc8 	.word	0x20019cc8

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>

08001636 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f8f9 	bl	8001832 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001640:	200f      	movs	r0, #15
 8001642:	f7ff fe3d 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001646:	f7ff fcc7 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	200006fc 	.word	0x200006fc

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200006fc 	.word	0x200006fc

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	05fa0000 	.word	0x05fa0000

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff4c 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185a:	f7ff ff61 	bl	8001720 <__NVIC_GetPriorityGrouping>
 800185e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f7ff ffb1 	bl	80017cc <NVIC_EncodePriority>
 800186a:	4602      	mov	r2, r0
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff80 	bl	8001778 <__NVIC_SetPriority>
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff54 	bl	800173c <__NVIC_EnableIRQ>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e175      	b.n	8001ba8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8164 	bne.w	8001ba2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_GPIO_Init+0x56>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b03      	cmp	r3, #3
 800195e:	d017      	beq.n	8001990 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d123      	bne.n	80019e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80be 	beq.w	8001ba2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a65      	ldr	r2, [pc, #404]	@ (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b63      	ldr	r3, [pc, #396]	@ (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a3e:	4a61      	ldr	r2, [pc, #388]	@ (8001bc4 <HAL_GPIO_Init+0x328>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a58      	ldr	r2, [pc, #352]	@ (8001bc8 <HAL_GPIO_Init+0x32c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d037      	beq.n	8001ada <HAL_GPIO_Init+0x23e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a57      	ldr	r2, [pc, #348]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d031      	beq.n	8001ad6 <HAL_GPIO_Init+0x23a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a56      	ldr	r2, [pc, #344]	@ (8001bd0 <HAL_GPIO_Init+0x334>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02b      	beq.n	8001ad2 <HAL_GPIO_Init+0x236>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a55      	ldr	r2, [pc, #340]	@ (8001bd4 <HAL_GPIO_Init+0x338>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x232>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a54      	ldr	r2, [pc, #336]	@ (8001bd8 <HAL_GPIO_Init+0x33c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x22e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a53      	ldr	r2, [pc, #332]	@ (8001bdc <HAL_GPIO_Init+0x340>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x22a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a52      	ldr	r2, [pc, #328]	@ (8001be0 <HAL_GPIO_Init+0x344>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a51      	ldr	r2, [pc, #324]	@ (8001be4 <HAL_GPIO_Init+0x348>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x222>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	@ (8001be8 <HAL_GPIO_Init+0x34c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x21e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4f      	ldr	r2, [pc, #316]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x21a>
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	e012      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	e010      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001aba:	2308      	movs	r3, #8
 8001abc:	e00e      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00c      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00a      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e008      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e004      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ada:	2300      	movs	r3, #0
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aec:	4935      	ldr	r1, [pc, #212]	@ (8001bc4 <HAL_GPIO_Init+0x328>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a34      	ldr	r2, [pc, #208]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a29      	ldr	r2, [pc, #164]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b72:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f67f ae86 	bls.w	80018bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40021400 	.word	0x40021400
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40021c00 	.word	0x40021c00
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40022400 	.word	0x40022400
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af02      	add	r7, sp, #8
 8001c2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e108      	b.n	8001e4a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff faba 	bl	80011cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 fc18 	bl	80044a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7c1a      	ldrb	r2, [r3, #16]
 8001c80:	f88d 2000 	strb.w	r2, [sp]
 8001c84:	3304      	adds	r3, #4
 8001c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c88:	f002 fbb4 	bl	80043f4 <USB_CoreInit>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0d5      	b.n	8001e4a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fc10 	bl	80044ca <USB_SetCurrentMode>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0c6      	b.n	8001e4a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e04a      	b.n	8001d58 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	3315      	adds	r3, #21
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3314      	adds	r3, #20
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	332e      	adds	r3, #46	@ 0x2e
 8001cfe:	4602      	mov	r2, r0
 8001d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3318      	adds	r3, #24
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	331c      	adds	r3, #28
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3320      	adds	r3, #32
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3324      	adds	r3, #36	@ 0x24
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	791b      	ldrb	r3, [r3, #4]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d3af      	bcc.n	8001cc2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e044      	b.n	8001df2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	791b      	ldrb	r3, [r3, #4]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3b5      	bcc.n	8001d68 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7c1a      	ldrb	r2, [r3, #16]
 8001e04:	f88d 2000 	strb.w	r2, [sp]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0c:	f002 fbaa 	bl	8004564 <USB_DevInit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e013      	b.n	8001e4a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7b1b      	ldrb	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f80b 	bl	8001e54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fd65 	bl	8004912 <USB_DevDisconnect>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	10000003 	.word	0x10000003

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e291      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec0:	4b96      	ldr	r3, [pc, #600]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d00c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ecc:	4b93      	ldr	r3, [pc, #588]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d112      	bne.n	8001efe <HAL_RCC_OscConfig+0x62>
 8001ed8:	4b90      	ldr	r3, [pc, #576]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x130>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d168      	bne.n	8001fcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e26b      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x7a>
 8001f08:	4b84      	ldr	r3, [pc, #528]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a83      	ldr	r2, [pc, #524]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e02e      	b.n	8001f74 <HAL_RCC_OscConfig+0xd8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x9c>
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7e      	ldr	r2, [pc, #504]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xd8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f42:	4b76      	ldr	r3, [pc, #472]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a75      	ldr	r2, [pc, #468]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b73      	ldr	r3, [pc, #460]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a72      	ldr	r2, [pc, #456]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xd8>
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6e      	ldr	r2, [pc, #440]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b6c      	ldr	r3, [pc, #432]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fb7c 	bl	8001678 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fb78 	bl	8001678 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	@ 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e21f      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b61      	ldr	r3, [pc, #388]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fb68 	bl	8001678 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff fb64 	bl	8001678 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	@ 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e20b      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b57      	ldr	r3, [pc, #348]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x110>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d069      	beq.n	80020ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	4b50      	ldr	r3, [pc, #320]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d11c      	bne.n	800202c <HAL_RCC_OscConfig+0x190>
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d116      	bne.n	800202c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x17a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e1df      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	493d      	ldr	r1, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	e040      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d023      	beq.n	800207c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002034:	4b39      	ldr	r3, [pc, #228]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a38      	ldr	r2, [pc, #224]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fb1a 	bl	8001678 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff fb16 	bl	8001678 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1bd      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b30      	ldr	r3, [pc, #192]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4929      	ldr	r1, [pc, #164]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a26      	ldr	r2, [pc, #152]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff faf6 	bl	8001678 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff faf2 	bl	8001678 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e199      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d038      	beq.n	800212c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d019      	beq.n	80020f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b16      	ldr	r3, [pc, #88]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c6:	4a15      	ldr	r2, [pc, #84]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7ff fad3 	bl	8001678 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff facf 	bl	8001678 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e176      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x23a>
 80020f4:	e01a      	b.n	800212c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_RCC_OscConfig+0x280>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7ff fab9 	bl	8001678 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff fab5 	bl	8001678 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d903      	bls.n	8002120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e15c      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
 800211c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b91      	ldr	r3, [pc, #580]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ee      	bne.n	800210a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a4 	beq.w	8002282 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b8b      	ldr	r3, [pc, #556]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b88      	ldr	r3, [pc, #544]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	4a87      	ldr	r2, [pc, #540]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	@ 0x40
 8002152:	4b85      	ldr	r3, [pc, #532]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002162:	4b82      	ldr	r3, [pc, #520]	@ (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800216e:	4b7f      	ldr	r3, [pc, #508]	@ (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7e      	ldr	r2, [pc, #504]	@ (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7ff fa7d 	bl	8001678 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7ff fa79 	bl	8001678 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	@ 0x64
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e120      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002194:	4b75      	ldr	r3, [pc, #468]	@ (800236c <HAL_RCC_OscConfig+0x4d0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x31a>
 80021a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x33c>
 80021be:	4b6a      	ldr	r3, [pc, #424]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	4a69      	ldr	r2, [pc, #420]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ca:	4b67      	ldr	r3, [pc, #412]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	4a66      	ldr	r2, [pc, #408]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d6:	e01c      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d10c      	bne.n	80021fa <HAL_RCC_OscConfig+0x35e>
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	4a60      	ldr	r2, [pc, #384]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
 80021fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	@ 0x70
 8002206:	4b58      	ldr	r3, [pc, #352]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a57      	ldr	r2, [pc, #348]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d015      	beq.n	8002246 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7ff fa2d 	bl	8001678 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff fa29 	bl	8001678 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0ce      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	4b4b      	ldr	r3, [pc, #300]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ee      	beq.n	8002222 <HAL_RCC_OscConfig+0x386>
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7ff fa17 	bl	8001678 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff fa13 	bl	8001678 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	4b40      	ldr	r3, [pc, #256]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ee      	bne.n	800224e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a3b      	ldr	r2, [pc, #236]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80a4 	beq.w	80023d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228c:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b08      	cmp	r3, #8
 8002296:	d06b      	beq.n	8002370 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d149      	bne.n	8002334 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b31      	ldr	r3, [pc, #196]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a30      	ldr	r2, [pc, #192]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f9e4 	bl	8001678 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f9e0 	bl	8001678 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e087      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	4313      	orrs	r3, r2
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff f9b4 	bl	8001678 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff f9b0 	bl	8001678 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e057      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x478>
 8002332:	e04f      	b.n	80023d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0b      	ldr	r2, [pc, #44]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f99a 	bl	8001678 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff f996 	bl	8001678 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e03d      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x4ac>
 8002366:	e035      	b.n	80023d4 <HAL_RCC_OscConfig+0x538>
 8002368:	40023800 	.word	0x40023800
 800236c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x544>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d028      	beq.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d121      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d11a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0d0      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b6a      	ldr	r3, [pc, #424]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b67      	ldr	r3, [pc, #412]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	4965      	ldr	r1, [pc, #404]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e073      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4936      	ldr	r1, [pc, #216]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7ff f8ce 	bl	8001678 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7ff f8ca 	bl	8001678 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e053      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d210      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	4922      	ldr	r1, [pc, #136]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fe92 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08008f30 	.word	0x08008f30
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b094      	sub	sp, #80	@ 0x50
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c8:	2300      	movs	r3, #0
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025cc:	2300      	movs	r3, #0
 80025ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4b79      	ldr	r3, [pc, #484]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d00d      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	f200 80e1 	bhi.w	80027a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ee:	e0db      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b73      	ldr	r3, [pc, #460]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025f4:	e0db      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b73      	ldr	r3, [pc, #460]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80025f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fa:	e0d8      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b6f      	ldr	r3, [pc, #444]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002604:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002606:	4b6d      	ldr	r3, [pc, #436]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d063      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b6a      	ldr	r3, [pc, #424]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	2200      	movs	r2, #0
 800261a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800261c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
 800262a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800262e:	4622      	mov	r2, r4
 8002630:	462b      	mov	r3, r5
 8002632:	f04f 0000 	mov.w	r0, #0
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	0159      	lsls	r1, r3, #5
 800263c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002640:	0150      	lsls	r0, r2, #5
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4621      	mov	r1, r4
 8002648:	1a51      	subs	r1, r2, r1
 800264a:	6139      	str	r1, [r7, #16]
 800264c:	4629      	mov	r1, r5
 800264e:	eb63 0301 	sbc.w	r3, r3, r1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002660:	4659      	mov	r1, fp
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	4651      	mov	r1, sl
 8002666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800266a:	4651      	mov	r1, sl
 800266c:	018a      	lsls	r2, r1, #6
 800266e:	4651      	mov	r1, sl
 8002670:	ebb2 0801 	subs.w	r8, r2, r1
 8002674:	4659      	mov	r1, fp
 8002676:	eb63 0901 	sbc.w	r9, r3, r1
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800268a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268e:	4690      	mov	r8, r2
 8002690:	4699      	mov	r9, r3
 8002692:	4623      	mov	r3, r4
 8002694:	eb18 0303 	adds.w	r3, r8, r3
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	462b      	mov	r3, r5
 800269c:	eb49 0303 	adc.w	r3, r9, r3
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ae:	4629      	mov	r1, r5
 80026b0:	024b      	lsls	r3, r1, #9
 80026b2:	4621      	mov	r1, r4
 80026b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026b8:	4621      	mov	r1, r4
 80026ba:	024a      	lsls	r2, r1, #9
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c2:	2200      	movs	r2, #0
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026cc:	f7fd fdf0 	bl	80002b0 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4613      	mov	r3, r2
 80026d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026d8:	e058      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026da:	4b38      	ldr	r3, [pc, #224]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	2200      	movs	r2, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	4611      	mov	r1, r2
 80026e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	f04f 0000 	mov.w	r0, #0
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	0159      	lsls	r1, r3, #5
 8002702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002706:	0150      	lsls	r0, r2, #5
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4641      	mov	r1, r8
 800270e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002712:	4649      	mov	r1, r9
 8002714:	eb63 0b01 	sbc.w	fp, r3, r1
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800272c:	ebb2 040a 	subs.w	r4, r2, sl
 8002730:	eb63 050b 	sbc.w	r5, r3, fp
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	00eb      	lsls	r3, r5, #3
 800273e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002742:	00e2      	lsls	r2, r4, #3
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
 8002748:	4643      	mov	r3, r8
 800274a:	18e3      	adds	r3, r4, r3
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	464b      	mov	r3, r9
 8002750:	eb45 0303 	adc.w	r3, r5, r3
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002762:	4629      	mov	r1, r5
 8002764:	028b      	lsls	r3, r1, #10
 8002766:	4621      	mov	r1, r4
 8002768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800276c:	4621      	mov	r1, r4
 800276e:	028a      	lsls	r2, r1, #10
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002776:	2200      	movs	r2, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	61fa      	str	r2, [r7, #28]
 800277c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002780:	f7fd fd96 	bl	80002b0 <__aeabi_uldivmod>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4613      	mov	r3, r2
 800278a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800279c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800279e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3750      	adds	r7, #80	@ 0x50
 80027b4:	46bd      	mov	sp, r7
 80027b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08008f40 	.word	0x08008f40

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800280c:	f7ff ffdc 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4903      	ldr	r1, [pc, #12]	@ (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	08008f40 	.word	0x08008f40

08002830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	220f      	movs	r2, #15
 800283e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <HAL_RCC_GetClockConfig+0x60>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 020f 	and.w	r2, r3, #15
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	601a      	str	r2, [r3, #0]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40023c00 	.word	0x40023c00

08002894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028bc:	4b69      	ldr	r3, [pc, #420]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a68      	ldr	r2, [pc, #416]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	4b66      	ldr	r3, [pc, #408]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d0:	4964      	ldr	r1, [pc, #400]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	4959      	ldr	r1, [pc, #356]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002930:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	494a      	ldr	r1, [pc, #296]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 808b 	beq.w	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	4a39      	ldr	r2, [pc, #228]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	@ 0x40
 8002984:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002990:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7fe fe6c 	bl	8001678 <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fe68 	bl	8001678 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e357      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c2:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d035      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d02e      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e0:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a00:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a08:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d114      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fe30 	bl	8001678 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fe2c 	bl	8001678 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e319      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ee      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a4a:	d111      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	4901      	ldr	r1, [pc, #4]	@ (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	0ffffcff 	.word	0x0ffffcff
 8002a70:	4baa      	ldr	r3, [pc, #680]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4aa9      	ldr	r2, [pc, #676]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a76:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a7a:	6093      	str	r3, [r2, #8]
 8002a7c:	4ba7      	ldr	r3, [pc, #668]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	49a4      	ldr	r1, [pc, #656]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a9a:	4ba0      	ldr	r3, [pc, #640]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa0:	4a9e      	ldr	r2, [pc, #632]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	4999      	ldr	r1, [pc, #612]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac8:	4b94      	ldr	r3, [pc, #592]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad6:	4991      	ldr	r1, [pc, #580]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aea:	4b8c      	ldr	r3, [pc, #560]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af8:	4988      	ldr	r1, [pc, #544]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0c:	4b83      	ldr	r3, [pc, #524]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b1a:	4980      	ldr	r1, [pc, #512]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4977      	ldr	r1, [pc, #476]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b50:	4b72      	ldr	r3, [pc, #456]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	496f      	ldr	r1, [pc, #444]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b72:	4b6a      	ldr	r3, [pc, #424]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b78:	f023 020c 	bic.w	r2, r3, #12
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	4966      	ldr	r1, [pc, #408]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b94:	4b61      	ldr	r3, [pc, #388]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	495e      	ldr	r1, [pc, #376]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb6:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc4:	4955      	ldr	r1, [pc, #340]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	494d      	ldr	r1, [pc, #308]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bfa:	4b48      	ldr	r3, [pc, #288]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	4944      	ldr	r1, [pc, #272]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	493c      	ldr	r1, [pc, #240]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	4933      	ldr	r1, [pc, #204]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c60:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c6e:	492b      	ldr	r1, [pc, #172]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d011      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c90:	4922      	ldr	r1, [pc, #136]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd0:	4912      	ldr	r1, [pc, #72]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cf4:	4909      	ldr	r1, [pc, #36]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d006      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80d9 	beq.w	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d10:	4b02      	ldr	r3, [pc, #8]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a01      	ldr	r2, [pc, #4]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d1a:	e001      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe fca9 	bl	8001678 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d2a:	f7fe fca5 	bl	8001678 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	@ 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e194      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d021      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d5c:	4b64      	ldr	r3, [pc, #400]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d6a:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d70:	0e1b      	lsrs	r3, r3, #24
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	019a      	lsls	r2, r3, #6
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	071b      	lsls	r3, r3, #28
 8002d90:	4957      	ldr	r1, [pc, #348]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d02e      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc2:	d129      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dca:	0c1b      	lsrs	r3, r3, #16
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dd2:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dd8:	0f1b      	lsrs	r3, r3, #28
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	019a      	lsls	r2, r3, #6
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	071b      	lsls	r3, r3, #28
 8002df8:	493d      	ldr	r1, [pc, #244]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e00:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e06:	f023 021f 	bic.w	r2, r3, #31
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	4937      	ldr	r1, [pc, #220]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01d      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e24:	4b32      	ldr	r3, [pc, #200]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2a:	0e1b      	lsrs	r3, r3, #24
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e32:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e38:	0f1b      	lsrs	r3, r3, #28
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	019a      	lsls	r2, r3, #6
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	4925      	ldr	r1, [pc, #148]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d011      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	019a      	lsls	r2, r3, #6
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	071b      	lsls	r3, r3, #28
 8002e88:	4919      	ldr	r1, [pc, #100]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e90:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fbec 	bl	8001678 <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ea4:	f7fe fbe8 	bl	8001678 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	@ 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0d7      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 80cd 	bne.w	8003064 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fbcf 	bl	8001678 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ede:	f7fe fbcb 	bl	8001678 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b64      	cmp	r3, #100	@ 0x64
 8002eea:	d903      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0ba      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f00:	d0ed      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02e      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d12a      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f2a:	4b51      	ldr	r3, [pc, #324]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f38:	4b4d      	ldr	r3, [pc, #308]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	0f1b      	lsrs	r3, r3, #28
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	019a      	lsls	r2, r3, #6
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	071b      	lsls	r3, r3, #28
 8002f5e:	4944      	ldr	r1, [pc, #272]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f66:	4b42      	ldr	r3, [pc, #264]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	493d      	ldr	r1, [pc, #244]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d022      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f94:	d11d      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f96:	4b36      	ldr	r3, [pc, #216]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	0e1b      	lsrs	r3, r3, #24
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fa4:	4b32      	ldr	r3, [pc, #200]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	0f1b      	lsrs	r3, r3, #28
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	019a      	lsls	r2, r3, #6
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	4929      	ldr	r1, [pc, #164]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d028      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fde:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	0e1b      	lsrs	r3, r3, #24
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	019a      	lsls	r2, r3, #6
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	431a      	orrs	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	071b      	lsls	r3, r3, #28
 8003012:	4917      	ldr	r1, [pc, #92]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800301a:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003020:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	4911      	ldr	r1, [pc, #68]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003030:	4b0f      	ldr	r3, [pc, #60]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0e      	ldr	r2, [pc, #56]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303c:	f7fe fb1c 	bl	8001678 <HAL_GetTick>
 8003040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003044:	f7fe fb18 	bl	8001678 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e007      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800305e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003062:	d1ef      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e01c      	b.n	80030c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	795b      	ldrb	r3, [r3, #5]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd ffd8 	bl	800104c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0204 	orr.w	r2, r2, #4
 80030b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2210      	movs	r2, #16
 80030ea:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e009      	b.n	8003106 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2208      	movs	r2, #8
 8003100:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8003102:	2301      	movs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10b      	bne.n	8003124 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2204      	movs	r2, #4
 8003110:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f82c 	bl	8003170 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8003120:	605a      	str	r2, [r3, #4]

    return;
 8003122:	e022      	b.n	800316a <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01d      	beq.n	800316a <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0208 	bic.w	r2, r2, #8
 800313c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	795b      	ldrb	r3, [r3, #5]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00b      	beq.n	800316a <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fe9d 	bl	8000ea4 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e049      	b.n	800322a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd ff8a 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 faa8 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e054      	b.n	80032f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <HAL_TIM_Base_Start_IT+0xd0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d022      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003276:	d01d      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <HAL_TIM_Base_Start_IT+0xd4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	@ (800330c <HAL_TIM_Base_Start_IT+0xd8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <HAL_TIM_Base_Start_IT+0xdc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_TIM_Base_Start_IT+0xe0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_TIM_Base_Start_IT+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIM_Base_Start_IT+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d115      	bne.n	80032e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	4b19      	ldr	r3, [pc, #100]	@ (8003320 <HAL_TIM_Base_Start_IT+0xec>)
 80032bc:	4013      	ands	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d015      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0xbe>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032cc:	d011      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	e008      	b.n	80032f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e000      	b.n	80032f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40010000 	.word	0x40010000
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40010400 	.word	0x40010400
 8003318:	40014000 	.word	0x40014000
 800331c:	40001800 	.word	0x40001800
 8003320:	00010007 	.word	0x00010007

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0202 	mvn.w	r2, #2
 8003358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9b4 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9a6 	bl	80036c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9b7 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f98e 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f980 	bl	80036c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f991 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0208 	mvn.w	r2, #8
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2204      	movs	r2, #4
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f968 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f95a 	bl	80036c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f96b 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0210 	mvn.w	r2, #16
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2208      	movs	r2, #8
 8003442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f942 	bl	80036dc <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f934 	bl	80036c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f945 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0201 	mvn.w	r2, #1
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fd38 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00c      	beq.n	80034be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80034b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fb0b 	bl	8003ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00c      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb03 	bl	8003ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00c      	beq.n	8003506 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8ff 	bl	8003704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00c      	beq.n	800352a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f06f 0220 	mvn.w	r2, #32
 8003522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 facb 	bl	8003ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIM_ConfigClockSource+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e0b4      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x186>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	4b56      	ldr	r3, [pc, #344]	@ (80036c4 <HAL_TIM_ConfigClockSource+0x190>)
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003588:	d03e      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xd4>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358e:	f200 8087 	bhi.w	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003596:	f000 8086 	beq.w	80036a6 <HAL_TIM_ConfigClockSource+0x172>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359e:	d87f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b70      	cmp	r3, #112	@ 0x70
 80035a2:	d01a      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xa6>
 80035a4:	2b70      	cmp	r3, #112	@ 0x70
 80035a6:	d87b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b60      	cmp	r3, #96	@ 0x60
 80035aa:	d050      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x11a>
 80035ac:	2b60      	cmp	r3, #96	@ 0x60
 80035ae:	d877      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b50      	cmp	r3, #80	@ 0x50
 80035b2:	d03c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xfa>
 80035b4:	2b50      	cmp	r3, #80	@ 0x50
 80035b6:	d873      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d058      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x13a>
 80035bc:	2b40      	cmp	r3, #64	@ 0x40
 80035be:	d86f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b30      	cmp	r3, #48	@ 0x30
 80035c2:	d064      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	2b30      	cmp	r3, #48	@ 0x30
 80035c6:	d86b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d060      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d867      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d05a      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	e062      	b.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ea:	f000 f9bb 	bl	8003964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]
      break;
 8003606:	e04f      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003618:	f000 f9a4 	bl	8003964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800362a:	609a      	str	r2, [r3, #8]
      break;
 800362c:	e03c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	461a      	mov	r2, r3
 800363c:	f000 f918 	bl	8003870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2150      	movs	r1, #80	@ 0x50
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f971 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800364c:	e02c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800365a:	461a      	mov	r2, r3
 800365c:	f000 f937 	bl	80038ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2160      	movs	r1, #96	@ 0x60
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f961 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800366c:	e01c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	461a      	mov	r2, r3
 800367c:	f000 f8f8 	bl	8003870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2140      	movs	r1, #64	@ 0x40
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f951 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800368c:	e00c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 f948 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800369e:	e003      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	fffeff88 	.word	0xfffeff88

080036c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a46      	ldr	r2, [pc, #280]	@ (8003844 <TIM_Base_SetConfig+0x12c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a43      	ldr	r2, [pc, #268]	@ (8003848 <TIM_Base_SetConfig+0x130>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a42      	ldr	r2, [pc, #264]	@ (800384c <TIM_Base_SetConfig+0x134>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a41      	ldr	r2, [pc, #260]	@ (8003850 <TIM_Base_SetConfig+0x138>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a40      	ldr	r2, [pc, #256]	@ (8003854 <TIM_Base_SetConfig+0x13c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a35      	ldr	r2, [pc, #212]	@ (8003844 <TIM_Base_SetConfig+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02b      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d027      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a32      	ldr	r2, [pc, #200]	@ (8003848 <TIM_Base_SetConfig+0x130>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d023      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a31      	ldr	r2, [pc, #196]	@ (800384c <TIM_Base_SetConfig+0x134>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01f      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a30      	ldr	r2, [pc, #192]	@ (8003850 <TIM_Base_SetConfig+0x138>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01b      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2f      	ldr	r2, [pc, #188]	@ (8003854 <TIM_Base_SetConfig+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d017      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2e      	ldr	r2, [pc, #184]	@ (8003858 <TIM_Base_SetConfig+0x140>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2d      	ldr	r2, [pc, #180]	@ (800385c <TIM_Base_SetConfig+0x144>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00f      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003860 <TIM_Base_SetConfig+0x148>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <TIM_Base_SetConfig+0x14c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003868 <TIM_Base_SetConfig+0x150>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a29      	ldr	r2, [pc, #164]	@ (800386c <TIM_Base_SetConfig+0x154>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a10      	ldr	r2, [pc, #64]	@ (8003844 <TIM_Base_SetConfig+0x12c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0xf8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a12      	ldr	r2, [pc, #72]	@ (8003854 <TIM_Base_SetConfig+0x13c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d103      	bne.n	8003818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	611a      	str	r2, [r3, #16]
  }
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	40001800 	.word	0x40001800
 8003868:	40001c00 	.word	0x40001c00
 800386c:	40002000 	.word	0x40002000

08003870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 030a 	bic.w	r3, r3, #10
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f023 0210 	bic.w	r2, r3, #16
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800390a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	f043 0307 	orr.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800397e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	431a      	orrs	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e06d      	b.n	8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	@ (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d108      	bne.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a20      	ldr	r2, [pc, #128]	@ (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d022      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2e:	d01d      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a16      	ldr	r2, [pc, #88]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a15      	ldr	r2, [pc, #84]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10c      	bne.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40001800 	.word	0x40001800

08003ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e040      	b.n	8003b90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd faf4 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa8c 	bl	8004060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f825 	bl	8003b98 <UART_SetConfig>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e01b      	b.n	8003b90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fb0b 	bl	80041a4 <UART_CheckIdleState>
 8003b8e:	4603      	mov	r3, r0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4ba6      	ldr	r3, [pc, #664]	@ (8003e5c <UART_SetConfig+0x2c4>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	6979      	ldr	r1, [r7, #20]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a94      	ldr	r2, [pc, #592]	@ (8003e60 <UART_SetConfig+0x2c8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d120      	bne.n	8003c56 <UART_SetConfig+0xbe>
 8003c14:	4b93      	ldr	r3, [pc, #588]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d816      	bhi.n	8003c50 <UART_SetConfig+0xb8>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <UART_SetConfig+0x90>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c45 	.word	0x08003c45
 8003c30:	08003c3f 	.word	0x08003c3f
 8003c34:	08003c4b 	.word	0x08003c4b
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e150      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e14d      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003c44:	2304      	movs	r3, #4
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e14a      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e147      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003c50:	2310      	movs	r3, #16
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e144      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a83      	ldr	r2, [pc, #524]	@ (8003e68 <UART_SetConfig+0x2d0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d132      	bne.n	8003cc6 <UART_SetConfig+0x12e>
 8003c60:	4b80      	ldr	r3, [pc, #512]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d828      	bhi.n	8003cc0 <UART_SetConfig+0x128>
 8003c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <UART_SetConfig+0xdc>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08003cc1 	.word	0x08003cc1
 8003c7c:	08003cc1 	.word	0x08003cc1
 8003c80:	08003cc1 	.word	0x08003cc1
 8003c84:	08003cb5 	.word	0x08003cb5
 8003c88:	08003cc1 	.word	0x08003cc1
 8003c8c:	08003cc1 	.word	0x08003cc1
 8003c90:	08003cc1 	.word	0x08003cc1
 8003c94:	08003caf 	.word	0x08003caf
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cc1 	.word	0x08003cc1
 8003ca4:	08003cbb 	.word	0x08003cbb
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e118      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e115      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e112      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e10f      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e10c      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a68      	ldr	r2, [pc, #416]	@ (8003e6c <UART_SetConfig+0x2d4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d120      	bne.n	8003d12 <UART_SetConfig+0x17a>
 8003cd0:	4b64      	ldr	r3, [pc, #400]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cda:	2b30      	cmp	r3, #48	@ 0x30
 8003cdc:	d013      	beq.n	8003d06 <UART_SetConfig+0x16e>
 8003cde:	2b30      	cmp	r3, #48	@ 0x30
 8003ce0:	d814      	bhi.n	8003d0c <UART_SetConfig+0x174>
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d009      	beq.n	8003cfa <UART_SetConfig+0x162>
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d810      	bhi.n	8003d0c <UART_SetConfig+0x174>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <UART_SetConfig+0x15c>
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d006      	beq.n	8003d00 <UART_SetConfig+0x168>
 8003cf2:	e00b      	b.n	8003d0c <UART_SetConfig+0x174>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e0f2      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e0ef      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d00:	2304      	movs	r3, #4
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e0ec      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d06:	2308      	movs	r3, #8
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e0e9      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e0e6      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a56      	ldr	r2, [pc, #344]	@ (8003e70 <UART_SetConfig+0x2d8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d120      	bne.n	8003d5e <UART_SetConfig+0x1c6>
 8003d1c:	4b51      	ldr	r3, [pc, #324]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d28:	d013      	beq.n	8003d52 <UART_SetConfig+0x1ba>
 8003d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d2c:	d814      	bhi.n	8003d58 <UART_SetConfig+0x1c0>
 8003d2e:	2b80      	cmp	r3, #128	@ 0x80
 8003d30:	d009      	beq.n	8003d46 <UART_SetConfig+0x1ae>
 8003d32:	2b80      	cmp	r3, #128	@ 0x80
 8003d34:	d810      	bhi.n	8003d58 <UART_SetConfig+0x1c0>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <UART_SetConfig+0x1a8>
 8003d3a:	2b40      	cmp	r3, #64	@ 0x40
 8003d3c:	d006      	beq.n	8003d4c <UART_SetConfig+0x1b4>
 8003d3e:	e00b      	b.n	8003d58 <UART_SetConfig+0x1c0>
 8003d40:	2300      	movs	r3, #0
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e0cc      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e0c9      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0c6      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0c3      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e0c0      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a44      	ldr	r2, [pc, #272]	@ (8003e74 <UART_SetConfig+0x2dc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d125      	bne.n	8003db4 <UART_SetConfig+0x21c>
 8003d68:	4b3e      	ldr	r3, [pc, #248]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d76:	d017      	beq.n	8003da8 <UART_SetConfig+0x210>
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7c:	d817      	bhi.n	8003dae <UART_SetConfig+0x216>
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d82:	d00b      	beq.n	8003d9c <UART_SetConfig+0x204>
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d811      	bhi.n	8003dae <UART_SetConfig+0x216>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <UART_SetConfig+0x1fe>
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d92:	d006      	beq.n	8003da2 <UART_SetConfig+0x20a>
 8003d94:	e00b      	b.n	8003dae <UART_SetConfig+0x216>
 8003d96:	2300      	movs	r3, #0
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e0a1      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e09e      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003da2:	2304      	movs	r3, #4
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e09b      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003da8:	2308      	movs	r3, #8
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e098      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003dae:	2310      	movs	r3, #16
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e095      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e78 <UART_SetConfig+0x2e0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d125      	bne.n	8003e0a <UART_SetConfig+0x272>
 8003dbe:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dcc:	d017      	beq.n	8003dfe <UART_SetConfig+0x266>
 8003dce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dd2:	d817      	bhi.n	8003e04 <UART_SetConfig+0x26c>
 8003dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd8:	d00b      	beq.n	8003df2 <UART_SetConfig+0x25a>
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dde:	d811      	bhi.n	8003e04 <UART_SetConfig+0x26c>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <UART_SetConfig+0x254>
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de8:	d006      	beq.n	8003df8 <UART_SetConfig+0x260>
 8003dea:	e00b      	b.n	8003e04 <UART_SetConfig+0x26c>
 8003dec:	2301      	movs	r3, #1
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e076      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003df2:	2302      	movs	r3, #2
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e073      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e070      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003dfe:	2308      	movs	r3, #8
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e06d      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e06a      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <UART_SetConfig+0x2e4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d138      	bne.n	8003e86 <UART_SetConfig+0x2ee>
 8003e14:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <UART_SetConfig+0x2cc>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e22:	d017      	beq.n	8003e54 <UART_SetConfig+0x2bc>
 8003e24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e28:	d82a      	bhi.n	8003e80 <UART_SetConfig+0x2e8>
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2e:	d00b      	beq.n	8003e48 <UART_SetConfig+0x2b0>
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e34:	d824      	bhi.n	8003e80 <UART_SetConfig+0x2e8>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <UART_SetConfig+0x2aa>
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3e:	d006      	beq.n	8003e4e <UART_SetConfig+0x2b6>
 8003e40:	e01e      	b.n	8003e80 <UART_SetConfig+0x2e8>
 8003e42:	2300      	movs	r3, #0
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e04b      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e048      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e4e:	2304      	movs	r3, #4
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e045      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e54:	2308      	movs	r3, #8
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e042      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e5a:	bf00      	nop
 8003e5c:	efff69f3 	.word	0xefff69f3
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40004400 	.word	0x40004400
 8003e6c:	40004800 	.word	0x40004800
 8003e70:	40004c00 	.word	0x40004c00
 8003e74:	40005000 	.word	0x40005000
 8003e78:	40011400 	.word	0x40011400
 8003e7c:	40007800 	.word	0x40007800
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e02c      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a72      	ldr	r2, [pc, #456]	@ (8004054 <UART_SetConfig+0x4bc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d125      	bne.n	8003edc <UART_SetConfig+0x344>
 8003e90:	4b71      	ldr	r3, [pc, #452]	@ (8004058 <UART_SetConfig+0x4c0>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e9a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e9e:	d017      	beq.n	8003ed0 <UART_SetConfig+0x338>
 8003ea0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ea4:	d817      	bhi.n	8003ed6 <UART_SetConfig+0x33e>
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eaa:	d00b      	beq.n	8003ec4 <UART_SetConfig+0x32c>
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb0:	d811      	bhi.n	8003ed6 <UART_SetConfig+0x33e>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <UART_SetConfig+0x326>
 8003eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eba:	d006      	beq.n	8003eca <UART_SetConfig+0x332>
 8003ebc:	e00b      	b.n	8003ed6 <UART_SetConfig+0x33e>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e00d      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e00a      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003eca:	2304      	movs	r3, #4
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e007      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e004      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e001      	b.n	8003ee0 <UART_SetConfig+0x348>
 8003edc:	2310      	movs	r3, #16
 8003ede:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee8:	d15b      	bne.n	8003fa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d828      	bhi.n	8003f42 <UART_SetConfig+0x3aa>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <UART_SetConfig+0x360>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f43 	.word	0x08003f43
 8003f08:	08003f33 	.word	0x08003f33
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe fc60 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8003f20:	61b8      	str	r0, [r7, #24]
        break;
 8003f22:	e013      	b.n	8003f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7fe fc70 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8003f28:	61b8      	str	r0, [r7, #24]
        break;
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800405c <UART_SetConfig+0x4c4>)
 8003f2e:	61bb      	str	r3, [r7, #24]
        break;
 8003f30:	e00c      	b.n	8003f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe fb43 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003f36:	61b8      	str	r0, [r7, #24]
        break;
 8003f38:	e008      	b.n	8003f4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f3e:	61bb      	str	r3, [r7, #24]
        break;
 8003f40:	e004      	b.n	8003f4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	77bb      	strb	r3, [r7, #30]
        break;
 8003f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d074      	beq.n	800403c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	005a      	lsls	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	441a      	add	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d916      	bls.n	8003f9c <UART_SetConfig+0x404>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f74:	d212      	bcs.n	8003f9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f023 030f 	bic.w	r3, r3, #15
 8003f7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	89fb      	ldrh	r3, [r7, #14]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	89fa      	ldrh	r2, [r7, #14]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e04f      	b.n	800403c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	77bb      	strb	r3, [r7, #30]
 8003fa0:	e04c      	b.n	800403c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa2:	7ffb      	ldrb	r3, [r7, #31]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d828      	bhi.n	8003ffa <UART_SetConfig+0x462>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <UART_SetConfig+0x418>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ffb 	.word	0x08003ffb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7fe fc04 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	61b8      	str	r0, [r7, #24]
        break;
 8003fda:	e013      	b.n	8004004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe fc14 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	61b8      	str	r0, [r7, #24]
        break;
 8003fe2:	e00f      	b.n	8004004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <UART_SetConfig+0x4c4>)
 8003fe6:	61bb      	str	r3, [r7, #24]
        break;
 8003fe8:	e00c      	b.n	8004004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe fae7 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003fee:	61b8      	str	r0, [r7, #24]
        break;
 8003ff0:	e008      	b.n	8004004 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff6:	61bb      	str	r3, [r7, #24]
        break;
 8003ff8:	e004      	b.n	8004004 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	77bb      	strb	r3, [r7, #30]
        break;
 8004002:	bf00      	nop
    }

    if (pclk != 0U)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085a      	lsrs	r2, r3, #1
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d909      	bls.n	8004038 <UART_SetConfig+0x4a0>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402a:	d205      	bcs.n	8004038 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	e001      	b.n	800403c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004048:	7fbb      	ldrb	r3, [r7, #30]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40007c00 	.word	0x40007c00
 8004058:	40023800 	.word	0x40023800
 800405c:	00f42400 	.word	0x00f42400

08004060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01a      	beq.n	8004176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800415e:	d10a      	bne.n	8004176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	@ 0x30
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b4:	f7fd fa60 	bl	8001678 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d12e      	bne.n	8004226 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	2200      	movs	r2, #0
 80041d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f83b 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d021      	beq.n	8004226 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	617b      	str	r3, [r7, #20]
   return(result);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e011      	b.n	800424a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3728      	adds	r7, #40	@ 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	e04f      	b.n	8004304 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d04b      	beq.n	8004304 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7fd fa04 	bl	8001678 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <UART_WaitOnFlagUntilTimeout+0x30>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e04e      	b.n	8004324 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d037      	beq.n	8004304 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d034      	beq.n	8004304 <UART_WaitOnFlagUntilTimeout+0xb2>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d031      	beq.n	8004304 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d110      	bne.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2208      	movs	r2, #8
 80042b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f838 	bl	800432c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2208      	movs	r2, #8
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e029      	b.n	8004324 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042de:	d111      	bne.n	8004304 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f81e 	bl	800432c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e00f      	b.n	8004324 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	429a      	cmp	r2, r3
 8004320:	d0a0      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b095      	sub	sp, #84	@ 0x54
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004348:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004352:	643b      	str	r3, [r7, #64]	@ 0x40
 8004354:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004358:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	61fb      	str	r3, [r7, #28]
   return(result);
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004386:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004388:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800438c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d118      	bne.n	80043d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 80043b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6979      	ldr	r1, [r7, #20]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	613b      	str	r3, [r7, #16]
   return(result);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e6      	bne.n	80043a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043e8:	bf00      	nop
 80043ea:	3754      	adds	r7, #84	@ 0x54
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f4:	b084      	sub	sp, #16
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	f107 001c 	add.w	r0, r7, #28
 8004402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004406:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800440a:	2b01      	cmp	r3, #1
 800440c:	d121      	bne.n	8004452 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <USB_CoreInit+0xb0>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa92 	bl	8004970 <USB_CoreReset>
 800444c:	4603      	mov	r3, r0
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	e010      	b.n	8004474 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa86 	bl	8004970 <USB_CoreReset>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004474:	7fbb      	ldrb	r3, [r7, #30]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10b      	bne.n	8004492 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f043 0206 	orr.w	r2, r3, #6
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800449e:	b004      	add	sp, #16
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	ffbdffbf 	.word	0xffbdffbf

080044a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 0201 	bic.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d115      	bne.n	8004518 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044f8:	200a      	movs	r0, #10
 80044fa:	f7fd f8c9 	bl	8001690 <HAL_Delay>
      ms += 10U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	330a      	adds	r3, #10
 8004502:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa25 	bl	8004954 <USB_GetMode>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d01e      	beq.n	800454e <USB_SetCurrentMode+0x84>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2bc7      	cmp	r3, #199	@ 0xc7
 8004514:	d9f0      	bls.n	80044f8 <USB_SetCurrentMode+0x2e>
 8004516:	e01a      	b.n	800454e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d115      	bne.n	800454a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800452a:	200a      	movs	r0, #10
 800452c:	f7fd f8b0 	bl	8001690 <HAL_Delay>
      ms += 10U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	330a      	adds	r3, #10
 8004534:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa0c 	bl	8004954 <USB_GetMode>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <USB_SetCurrentMode+0x84>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2bc7      	cmp	r3, #199	@ 0xc7
 8004546:	d9f0      	bls.n	800452a <USB_SetCurrentMode+0x60>
 8004548:	e001      	b.n	800454e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e005      	b.n	800455a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2bc8      	cmp	r3, #200	@ 0xc8
 8004552:	d101      	bne.n	8004558 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004564:	b084      	sub	sp, #16
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e009      	b.n	8004598 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3340      	adds	r3, #64	@ 0x40
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	2200      	movs	r2, #0
 8004590:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	3301      	adds	r3, #1
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0e      	cmp	r3, #14
 800459c:	d9f2      	bls.n	8004584 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800459e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11c      	bne.n	80045e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e005      	b.n	80045ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10d      	bne.n	800461c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004608:	2100      	movs	r1, #0
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f968 	bl	80048e0 <USB_SetDevSpeed>
 8004610:	e008      	b.n	8004624 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004612:	2101      	movs	r1, #1
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f963 	bl	80048e0 <USB_SetDevSpeed>
 800461a:	e003      	b.n	8004624 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800461c:	2103      	movs	r1, #3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f95e 	bl	80048e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004624:	2110      	movs	r1, #16
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8fa 	bl	8004820 <USB_FlushTxFifo>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f924 	bl	8004884 <USB_FlushRxFifo>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004664:	461a      	mov	r2, r3
 8004666:	2300      	movs	r3, #0
 8004668:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e043      	b.n	80046f8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004686:	d118      	bne.n	80046ba <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e013      	b.n	80046cc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e008      	b.n	80046cc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c6:	461a      	mov	r2, r3
 80046c8:	2300      	movs	r3, #0
 80046ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d8:	461a      	mov	r2, r3
 80046da:	2300      	movs	r3, #0
 80046dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ea:	461a      	mov	r2, r3
 80046ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046fc:	461a      	mov	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4293      	cmp	r3, r2
 8004702:	d3b5      	bcc.n	8004670 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	e043      	b.n	8004792 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800471c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004720:	d118      	bne.n	8004754 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e013      	b.n	8004766 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e008      	b.n	8004766 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004760:	461a      	mov	r2, r3
 8004762:	2300      	movs	r3, #0
 8004764:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	2300      	movs	r3, #0
 8004776:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004784:	461a      	mov	r2, r3
 8004786:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800478a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	3301      	adds	r3, #1
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004796:	461a      	mov	r2, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4293      	cmp	r3, r2
 800479c:	d3b5      	bcc.n	800470a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <USB_DevInit+0x2b4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f043 0208 	orr.w	r2, r3, #8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <USB_DevInit+0x2b8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004814:	b004      	add	sp, #16
 8004816:	4770      	bx	lr
 8004818:	803c3800 	.word	0x803c3800
 800481c:	40000004 	.word	0x40000004

08004820 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800483a:	d901      	bls.n	8004840 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e01b      	b.n	8004878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	daf2      	bge.n	800482e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	019b      	lsls	r3, r3, #6
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004864:	d901      	bls.n	800486a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e006      	b.n	8004878 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b20      	cmp	r3, #32
 8004874:	d0f0      	beq.n	8004858 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800489c:	d901      	bls.n	80048a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e018      	b.n	80048d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	daf2      	bge.n	8004890 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2210      	movs	r2, #16
 80048b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c0:	d901      	bls.n	80048c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e006      	b.n	80048d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d0f0      	beq.n	80048b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800492c:	f023 0303 	bic.w	r3, r3, #3
 8004930:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0301 	and.w	r3, r3, #1
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004988:	d901      	bls.n	800498e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e01b      	b.n	80049c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	daf2      	bge.n	800497c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f043 0201 	orr.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049b2:	d901      	bls.n	80049b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e006      	b.n	80049c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d0f0      	beq.n	80049a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a07      	ldr	r2, [pc, #28]	@ (8004a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80049e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4a06      	ldr	r2, [pc, #24]	@ (8004a04 <vApplicationGetIdleTaskMemory+0x30>)
 80049ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2280      	movs	r2, #128	@ 0x80
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000700 	.word	0x20000700
 8004a04:	200007a8 	.word	0x200007a8

08004a08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a06      	ldr	r2, [pc, #24]	@ (8004a38 <vApplicationGetTimerTaskMemory+0x30>)
 8004a1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	200009a8 	.word	0x200009a8
 8004a38:	20000a50 	.word	0x20000a50

08004a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f103 0208 	add.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f103 0208 	add.w	r2, r3, #8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f103 0208 	add.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d103      	bne.n	8004afe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e00c      	b.n	8004b18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3308      	adds	r3, #8
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e002      	b.n	8004b0c <vListInsert+0x2e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d2f6      	bcs.n	8004b06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6852      	ldr	r2, [r2, #4]
 8004b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d103      	bne.n	8004b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	1e5a      	subs	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <xQueueGenericReset+0x30>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	b672      	cpsid	i
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	b662      	cpsie	i
 8004bcc:	60bb      	str	r3, [r7, #8]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004bd4:	f002 fcf2 	bl	80075bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	441a      	add	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	3b01      	subs	r3, #1
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	22ff      	movs	r2, #255	@ 0xff
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	22ff      	movs	r2, #255	@ 0xff
 8004c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d114      	bne.n	8004c54 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01a      	beq.n	8004c68 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3310      	adds	r3, #16
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 fb08 	bl	800624c <xTaskRemoveFromEventList>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d012      	beq.n	8004c68 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <xQueueGenericReset+0xd4>)
 8004c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	e009      	b.n	8004c68 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3310      	adds	r3, #16
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff feef 	bl	8004a3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3324      	adds	r3, #36	@ 0x24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff feea 	bl	8004a3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c68:	f002 fcde 	bl	8007628 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c6c:	2301      	movs	r3, #1
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	@ 0x38
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10d      	bne.n	8004cac <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	b672      	cpsid	i
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	b662      	cpsie	i
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ca6:	bf00      	nop
 8004ca8:	bf00      	nop
 8004caa:	e7fd      	b.n	8004ca8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb6:	b672      	cpsid	i
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	b662      	cpsie	i
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <xQueueGenericCreateStatic+0x5e>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <xQueueGenericCreateStatic+0x62>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <xQueueGenericCreateStatic+0x64>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	b672      	cpsid	i
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	b662      	cpsie	i
 8004cf8:	623b      	str	r3, [r7, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <xQueueGenericCreateStatic+0x90>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <xQueueGenericCreateStatic+0x94>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <xQueueGenericCreateStatic+0x96>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	b672      	cpsid	i
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	b662      	cpsie	i
 8004d2a:	61fb      	str	r3, [r7, #28]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d32:	2350      	movs	r3, #80	@ 0x50
 8004d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b50      	cmp	r3, #80	@ 0x50
 8004d3a:	d00d      	beq.n	8004d58 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	b672      	cpsid	i
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	b662      	cpsie	i
 8004d50:	61bb      	str	r3, [r7, #24]
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	e7fd      	b.n	8004d54 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f848 	bl	8004e10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3730      	adds	r7, #48	@ 0x30
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08a      	sub	sp, #40	@ 0x28
 8004d8e:	af02      	add	r7, sp, #8
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10d      	bne.n	8004dba <xQueueGenericCreate+0x30>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	b672      	cpsid	i
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	b662      	cpsie	i
 8004db2:	613b      	str	r3, [r7, #16]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e004      	b.n	8004dd0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	3350      	adds	r3, #80	@ 0x50
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 fd1f 	bl	8007818 <pvPortMalloc>
 8004dda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	3350      	adds	r3, #80	@ 0x50
 8004dea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df4:	79fa      	ldrb	r2, [r7, #7]
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f805 	bl	8004e10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e06:	69bb      	ldr	r3, [r7, #24]
	}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e3e:	2101      	movs	r1, #1
 8004e40:	69b8      	ldr	r0, [r7, #24]
 8004e42:	f7ff feaf 	bl	8004ba4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e76:	2300      	movs	r3, #0
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f81d 	bl	8004ebc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	4603      	mov	r3, r0
 8004e92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e94:	2301      	movs	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f7ff ff71 	bl	8004d8a <xQueueGenericCreate>
 8004ea8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff ffd3 	bl	8004e56 <prvInitialiseMutex>

		return xNewQueue;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
	}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	@ 0x38
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10d      	bne.n	8004ef4 <xQueueGenericSend+0x38>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	b672      	cpsid	i
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	b662      	cpsie	i
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSend+0x46>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSend+0x4a>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSend+0x4c>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10d      	bne.n	8004f28 <xQueueGenericSend+0x6c>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	b672      	cpsid	i
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	b662      	cpsie	i
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSend+0x7a>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <xQueueGenericSend+0x7e>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <xQueueGenericSend+0x80>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <xQueueGenericSend+0xa0>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	b672      	cpsid	i
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	b662      	cpsie	i
 8004f54:	623b      	str	r3, [r7, #32]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f5c:	f001 fb7c 	bl	8006658 <xTaskGetSchedulerState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <xQueueGenericSend+0xb0>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <xQueueGenericSend+0xb4>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <xQueueGenericSend+0xb6>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <xQueueGenericSend+0xd6>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	b672      	cpsid	i
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	b662      	cpsie	i
 8004f8a:	61fb      	str	r3, [r7, #28]
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	e7fd      	b.n	8004f8e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f92:	f002 fb13 	bl	80075bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <xQueueGenericSend+0xec>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d129      	bne.n	8004ffc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fae:	f000 fb6c 	bl	800568a <prvCopyDataToQueue>
 8004fb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d010      	beq.n	8004fde <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	3324      	adds	r3, #36	@ 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f943 	bl	800624c <xTaskRemoveFromEventList>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d013      	beq.n	8004ff4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80050cc <xQueueGenericSend+0x210>)
 8004fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	e00a      	b.n	8004ff4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b39      	ldr	r3, [pc, #228]	@ (80050cc <xQueueGenericSend+0x210>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ff4:	f002 fb18 	bl	8007628 <vPortExitCritical>
				return pdPASS;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e063      	b.n	80050c4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005002:	f002 fb11 	bl	8007628 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
 8005008:	e05c      	b.n	80050c4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800500a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4618      	mov	r0, r3
 8005016:	f001 f97f 	bl	8006318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800501e:	f002 fb03 	bl	8007628 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005022:	f000 fedb 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005026:	f002 fac9 	bl	80075bc <vPortEnterCritical>
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005030:	b25b      	sxtb	r3, r3
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <xQueueGenericSend+0x184>
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005046:	b25b      	sxtb	r3, r3
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d103      	bne.n	8005056 <xQueueGenericSend+0x19a>
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005056:	f002 fae7 	bl	8007628 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800505a:	1d3a      	adds	r2, r7, #4
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f96e 	bl	8006344 <xTaskCheckForTimeOut>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d124      	bne.n	80050b8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800506e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005070:	f000 fc03 	bl	800587a <prvIsQueueFull>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	3310      	adds	r3, #16
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f88c 	bl	80061a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800508a:	f000 fb8e 	bl	80057aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800508e:	f000 feb3 	bl	8005df8 <xTaskResumeAll>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f af7c 	bne.w	8004f92 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <xQueueGenericSend+0x210>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e772      	b.n	8004f92 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ae:	f000 fb7c 	bl	80057aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b2:	f000 fea1 	bl	8005df8 <xTaskResumeAll>
 80050b6:	e76c      	b.n	8004f92 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ba:	f000 fb76 	bl	80057aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050be:	f000 fe9b 	bl	8005df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3738      	adds	r7, #56	@ 0x38
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	@ 0x38
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10d      	bne.n	8005104 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ec:	b672      	cpsid	i
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	b662      	cpsie	i
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <xQueueGenericSendFromISR+0x42>
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <xQueueGenericSendFromISR+0x46>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <xQueueGenericSendFromISR+0x48>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	b672      	cpsid	i
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	b662      	cpsie	i
 8005130:	623b      	str	r3, [r7, #32]
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d103      	bne.n	8005146 <xQueueGenericSendFromISR+0x76>
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <xQueueGenericSendFromISR+0x7a>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <xQueueGenericSendFromISR+0x7c>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	61fb      	str	r3, [r7, #28]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800516c:	f002 fb0e 	bl	800778c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005170:	f3ef 8211 	mrs	r2, BASEPRI
 8005174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	61ba      	str	r2, [r7, #24]
 800518a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800518c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <xQueueGenericSendFromISR+0xd2>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d12c      	bne.n	80051fc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b2:	f000 fa6a 	bl	800568a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d112      	bne.n	80051e6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d016      	beq.n	80051f6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	3324      	adds	r3, #36	@ 0x24
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 f83d 	bl	800624c <xTaskRemoveFromEventList>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e007      	b.n	80051f6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	3301      	adds	r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	b25a      	sxtb	r2, r3
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051f6:	2301      	movs	r3, #1
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80051fa:	e001      	b.n	8005200 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800520a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800520c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800520e:	4618      	mov	r0, r3
 8005210:	3738      	adds	r7, #56	@ 0x38
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <xQueueReceive+0x36>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	623b      	str	r3, [r7, #32]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <xQueueReceive+0x44>
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <xQueueReceive+0x48>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <xQueueReceive+0x4a>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <xQueueReceive+0x6a>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	b672      	cpsid	i
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	b662      	cpsie	i
 800527a:	61fb      	str	r3, [r7, #28]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005282:	f001 f9e9 	bl	8006658 <xTaskGetSchedulerState>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <xQueueReceive+0x7a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <xQueueReceive+0x7e>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <xQueueReceive+0x80>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <xQueueReceive+0xa0>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	61bb      	str	r3, [r7, #24]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052b8:	f002 f980 	bl	80075bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01f      	beq.n	8005308 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052cc:	f000 fa47 	bl	800575e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	1e5a      	subs	r2, r3, #1
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00f      	beq.n	8005300 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	3310      	adds	r3, #16
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 ffb1 	bl	800624c <xTaskRemoveFromEventList>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052f0:	4b3c      	ldr	r3, [pc, #240]	@ (80053e4 <xQueueReceive+0x1cc>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005300:	f002 f992 	bl	8007628 <vPortExitCritical>
				return pdPASS;
 8005304:	2301      	movs	r3, #1
 8005306:	e069      	b.n	80053dc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800530e:	f002 f98b 	bl	8007628 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005312:	2300      	movs	r3, #0
 8005314:	e062      	b.n	80053dc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fff9 	bl	8006318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800532a:	f002 f97d 	bl	8007628 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800532e:	f000 fd55 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005332:	f002 f943 	bl	80075bc <vPortEnterCritical>
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800533c:	b25b      	sxtb	r3, r3
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d103      	bne.n	800534c <xQueueReceive+0x134>
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005352:	b25b      	sxtb	r3, r3
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d103      	bne.n	8005362 <xQueueReceive+0x14a>
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005362:	f002 f961 	bl	8007628 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005366:	1d3a      	adds	r2, r7, #4
 8005368:	f107 0310 	add.w	r3, r7, #16
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f000 ffe8 	bl	8006344 <xTaskCheckForTimeOut>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d123      	bne.n	80053c2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800537c:	f000 fa67 	bl	800584e <prvIsQueueEmpty>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	3324      	adds	r3, #36	@ 0x24
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff06 	bl	80061a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005396:	f000 fa08 	bl	80057aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800539a:	f000 fd2d 	bl	8005df8 <xTaskResumeAll>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d189      	bne.n	80052b8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80053a4:	4b0f      	ldr	r3, [pc, #60]	@ (80053e4 <xQueueReceive+0x1cc>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	e780      	b.n	80052b8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b8:	f000 f9f7 	bl	80057aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053bc:	f000 fd1c 	bl	8005df8 <xTaskResumeAll>
 80053c0:	e77a      	b.n	80052b8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c4:	f000 f9f1 	bl	80057aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053c8:	f000 fd16 	bl	8005df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ce:	f000 fa3e 	bl	800584e <prvIsQueueEmpty>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f43f af6f 	beq.w	80052b8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3730      	adds	r7, #48	@ 0x30
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	@ 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	623b      	str	r3, [r7, #32]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	b672      	cpsid	i
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	b662      	cpsie	i
 800543c:	61fb      	str	r3, [r7, #28]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005444:	f001 f908 	bl	8006658 <xTaskGetSchedulerState>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <xQueueSemaphoreTake+0x6c>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <xQueueSemaphoreTake+0x70>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <xQueueSemaphoreTake+0x72>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	61bb      	str	r3, [r7, #24]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800547a:	f002 f89f 	bl	80075bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d024      	beq.n	80054d4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800549a:	f001 fa5f 	bl	800695c <pvTaskIncrementMutexHeldCount>
 800549e:	4602      	mov	r2, r0
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00f      	beq.n	80054cc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	3310      	adds	r3, #16
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fecb 	bl	800624c <xTaskRemoveFromEventList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054bc:	4b55      	ldr	r3, [pc, #340]	@ (8005614 <xQueueSemaphoreTake+0x22c>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054cc:	f002 f8ac 	bl	8007628 <vPortExitCritical>
				return pdPASS;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e09a      	b.n	800560a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d114      	bne.n	8005504 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <xQueueSemaphoreTake+0x114>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	b672      	cpsid	i
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	b662      	cpsie	i
 80054f4:	617b      	str	r3, [r7, #20]
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054fc:	f002 f894 	bl	8007628 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005500:	2300      	movs	r3, #0
 8005502:	e082      	b.n	800560a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800550a:	f107 030c 	add.w	r3, r7, #12
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ff02 	bl	8006318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005518:	f002 f886 	bl	8007628 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800551c:	f000 fc5e 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005520:	f002 f84c 	bl	80075bc <vPortEnterCritical>
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <xQueueSemaphoreTake+0x152>
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005540:	b25b      	sxtb	r3, r3
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d103      	bne.n	8005550 <xQueueSemaphoreTake+0x168>
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005550:	f002 f86a 	bl	8007628 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005554:	463a      	mov	r2, r7
 8005556:	f107 030c 	add.w	r3, r7, #12
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fef1 	bl	8006344 <xTaskCheckForTimeOut>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d132      	bne.n	80055ce <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800556a:	f000 f970 	bl	800584e <prvIsQueueEmpty>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d026      	beq.n	80055c2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800557c:	f002 f81e 	bl	80075bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f885 	bl	8006694 <xTaskPriorityInherit>
 800558a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800558c:	f002 f84c 	bl	8007628 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	3324      	adds	r3, #36	@ 0x24
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fe01 	bl	80061a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800559e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055a0:	f000 f903 	bl	80057aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055a4:	f000 fc28 	bl	8005df8 <xTaskResumeAll>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f47f af65 	bne.w	800547a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80055b0:	4b18      	ldr	r3, [pc, #96]	@ (8005614 <xQueueSemaphoreTake+0x22c>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	e75b      	b.n	800547a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055c4:	f000 f8f1 	bl	80057aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055c8:	f000 fc16 	bl	8005df8 <xTaskResumeAll>
 80055cc:	e755      	b.n	800547a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055d0:	f000 f8eb 	bl	80057aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055d4:	f000 fc10 	bl	8005df8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055da:	f000 f938 	bl	800584e <prvIsQueueEmpty>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f43f af4a 	beq.w	800547a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80055ec:	f001 ffe6 	bl	80075bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055f2:	f000 f832 	bl	800565a <prvGetDisinheritPriorityAfterTimeout>
 80055f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f924 	bl	800684c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005604:	f002 f810 	bl	8007628 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800560a:	4618      	mov	r0, r3
 800560c:	3738      	adds	r7, #56	@ 0x38
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	b672      	cpsid	i
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	b662      	cpsie	i
 800563e:	60fb      	str	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	e7fd      	b.n	8005642 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800564c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d006      	beq.n	8005678 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e001      	b.n	800567c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800567c:	68fb      	ldr	r3, [r7, #12]
	}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10d      	bne.n	80056c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d14d      	bne.n	800574c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 f855 	bl	8006764 <xTaskPriorityDisinherit>
 80056ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	e043      	b.n	800574c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6858      	ldr	r0, [r3, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	461a      	mov	r2, r3
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	f002 fe48 	bl	800836a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d32b      	bcc.n	800574c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	e026      	b.n	800574c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68d8      	ldr	r0, [r3, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	461a      	mov	r2, r3
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	f002 fe2e 	bl	800836a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	425b      	negs	r3, r3
 8005718:	441a      	add	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d207      	bcs.n	800573a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	425b      	negs	r3, r3
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d105      	bne.n	800574c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3b01      	subs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d303      	bcc.n	8005792 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68d9      	ldr	r1, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	461a      	mov	r2, r3
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f002 fde4 	bl	800836a <memcpy>
	}
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057b2:	f001 ff03 	bl	80075bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057be:	e011      	b.n	80057e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3324      	adds	r3, #36	@ 0x24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fd3d 	bl	800624c <xTaskRemoveFromEventList>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057d8:	f000 fe1c 	bl	8006414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	3b01      	subs	r3, #1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dce9      	bgt.n	80057c0 <prvUnlockQueue+0x16>
 80057ec:	e000      	b.n	80057f0 <prvUnlockQueue+0x46>
					break;
 80057ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	22ff      	movs	r2, #255	@ 0xff
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057f8:	f001 ff16 	bl	8007628 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057fc:	f001 fede 	bl	80075bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005806:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005808:	e011      	b.n	800582e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d012      	beq.n	8005838 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3310      	adds	r3, #16
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fd18 	bl	800624c <xTaskRemoveFromEventList>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005822:	f000 fdf7 	bl	8006414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005826:	7bbb      	ldrb	r3, [r7, #14]
 8005828:	3b01      	subs	r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dce9      	bgt.n	800580a <prvUnlockQueue+0x60>
 8005836:	e000      	b.n	800583a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005838:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	22ff      	movs	r2, #255	@ 0xff
 800583e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005842:	f001 fef1 	bl	8007628 <vPortExitCritical>
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005856:	f001 feb1 	bl	80075bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005862:	2301      	movs	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e001      	b.n	800586c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800586c:	f001 fedc 	bl	8007628 <vPortExitCritical>

	return xReturn;
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005882:	f001 fe9b 	bl	80075bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588e:	429a      	cmp	r2, r3
 8005890:	d102      	bne.n	8005898 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e001      	b.n	800589c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800589c:	f001 fec4 	bl	8007628 <vPortExitCritical>

	return xReturn;
 80058a0:	68fb      	ldr	r3, [r7, #12]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e014      	b.n	80058e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058bc:	4a0f      	ldr	r2, [pc, #60]	@ (80058fc <vQueueAddToRegistry+0x50>)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058c8:	490c      	ldr	r1, [pc, #48]	@ (80058fc <vQueueAddToRegistry+0x50>)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058d2:	4a0a      	ldr	r2, [pc, #40]	@ (80058fc <vQueueAddToRegistry+0x50>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4413      	add	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058de:	e006      	b.n	80058ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b07      	cmp	r3, #7
 80058ea:	d9e7      	bls.n	80058bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000e50 	.word	0x20000e50

08005900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005910:	f001 fe54 	bl	80075bc <vPortEnterCritical>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800591a:	b25b      	sxtb	r3, r3
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d103      	bne.n	800592a <vQueueWaitForMessageRestricted+0x2a>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005930:	b25b      	sxtb	r3, r3
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d103      	bne.n	8005940 <vQueueWaitForMessageRestricted+0x40>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005940:	f001 fe72 	bl	8007628 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3324      	adds	r3, #36	@ 0x24
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fc4b 	bl	80061f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800595a:	6978      	ldr	r0, [r7, #20]
 800595c:	f7ff ff25 	bl	80057aa <prvUnlockQueue>
	}
 8005960:	bf00      	nop
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	@ 0x38
 800596c:	af04      	add	r7, sp, #16
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10d      	bne.n	8005998 <xTaskCreateStatic+0x30>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	b672      	cpsid	i
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	b662      	cpsie	i
 8005990:	623b      	str	r3, [r7, #32]
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <xTaskCreateStatic+0x52>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	b672      	cpsid	i
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	b662      	cpsie	i
 80059b2:	61fb      	str	r3, [r7, #28]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059ba:	23a8      	movs	r3, #168	@ 0xa8
 80059bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80059c2:	d00d      	beq.n	80059e0 <xTaskCreateStatic+0x78>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	b672      	cpsid	i
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	b662      	cpsie	i
 80059d8:	61bb      	str	r3, [r7, #24]
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01e      	beq.n	8005a26 <xTaskCreateStatic+0xbe>
 80059e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01b      	beq.n	8005a26 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a00:	2300      	movs	r3, #0
 8005a02:	9303      	str	r3, [sp, #12]
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	9302      	str	r3, [sp, #8]
 8005a08:	f107 0314 	add.w	r3, r7, #20
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f851 	bl	8005ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a20:	f000 f8f8 	bl	8005c14 <prvAddNewTaskToReadyList>
 8005a24:	e001      	b.n	8005a2a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a2a:	697b      	ldr	r3, [r7, #20]
	}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3728      	adds	r7, #40	@ 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	@ 0x30
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 fee5 	bl	8007818 <pvPortMalloc>
 8005a4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a56:	20a8      	movs	r0, #168	@ 0xa8
 8005a58:	f001 fede 	bl	8007818 <pvPortMalloc>
 8005a5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a6a:	e005      	b.n	8005a78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a6c:	6978      	ldr	r0, [r7, #20]
 8005a6e:	f001 ffa1 	bl	80079b4 <vPortFree>
 8005a72:	e001      	b.n	8005a78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d017      	beq.n	8005aae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9303      	str	r3, [sp, #12]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f80f 	bl	8005ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa2:	69f8      	ldr	r0, [r7, #28]
 8005aa4:	f000 f8b6 	bl	8005c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e002      	b.n	8005ab4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	21a5      	movs	r1, #165	@ 0xa5
 8005ada:	f002 fb75 	bl	80081c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005ae8:	440b      	add	r3, r1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f023 0307 	bic.w	r3, r3, #7
 8005af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00d      	beq.n	8005b1e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	b672      	cpsid	i
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	b662      	cpsie	i
 8005b16:	617b      	str	r3, [r7, #20]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01f      	beq.n	8005b64 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e012      	b.n	8005b50 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	7819      	ldrb	r1, [r3, #0]
 8005b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	3334      	adds	r3, #52	@ 0x34
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d006      	beq.n	8005b58 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	d9e9      	bls.n	8005b2a <prvInitialiseNewTask+0x6a>
 8005b56:	e000      	b.n	8005b5a <prvInitialiseNewTask+0x9a>
			{
				break;
 8005b58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b62:	e003      	b.n	8005b6c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	2b37      	cmp	r3, #55	@ 0x37
 8005b70:	d901      	bls.n	8005b76 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b72:	2337      	movs	r3, #55	@ 0x37
 8005b74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	2200      	movs	r2, #0
 8005b86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe ff75 	bl	8004a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	3318      	adds	r3, #24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe ff70 	bl	8004a7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	3354      	adds	r3, #84	@ 0x54
 8005bc6:	224c      	movs	r2, #76	@ 0x4c
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f002 fafc 	bl	80081c8 <memset>
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c08 <prvInitialiseNewTask+0x148>)
 8005bd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <prvInitialiseNewTask+0x14c>)
 8005bda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	4a0c      	ldr	r2, [pc, #48]	@ (8005c10 <prvInitialiseNewTask+0x150>)
 8005be0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	69b8      	ldr	r0, [r7, #24]
 8005be8:	f001 fbd6 	bl	8007398 <pxPortInitialiseStack>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bfe:	bf00      	nop
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20019b7c 	.word	0x20019b7c
 8005c0c:	20019be4 	.word	0x20019be4
 8005c10:	20019c4c 	.word	0x20019c4c

08005c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c1c:	f001 fcce 	bl	80075bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c20:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd8 <prvAddNewTaskToReadyList+0xc4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd8 <prvAddNewTaskToReadyList+0xc4>)
 8005c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c32:	4a2a      	ldr	r2, [pc, #168]	@ (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c38:	4b27      	ldr	r3, [pc, #156]	@ (8005cd8 <prvAddNewTaskToReadyList+0xc4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d110      	bne.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c40:	f000 fc0c 	bl	800645c <prvInitialiseTaskLists>
 8005c44:	e00d      	b.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c46:	4b26      	ldr	r3, [pc, #152]	@ (8005ce0 <prvAddNewTaskToReadyList+0xcc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c4e:	4b23      	ldr	r3, [pc, #140]	@ (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d802      	bhi.n	8005c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c62:	4b20      	ldr	r3, [pc, #128]	@ (8005ce4 <prvAddNewTaskToReadyList+0xd0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3301      	adds	r3, #1
 8005c68:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce4 <prvAddNewTaskToReadyList+0xd0>)
 8005c6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <prvAddNewTaskToReadyList+0xd0>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce8 <prvAddNewTaskToReadyList+0xd4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d903      	bls.n	8005c88 <prvAddNewTaskToReadyList+0x74>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	4a18      	ldr	r2, [pc, #96]	@ (8005ce8 <prvAddNewTaskToReadyList+0xd4>)
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4a15      	ldr	r2, [pc, #84]	@ (8005cec <prvAddNewTaskToReadyList+0xd8>)
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f7fe fef9 	bl	8004a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ca4:	f001 fcc0 	bl	8007628 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <prvAddNewTaskToReadyList+0xcc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00e      	beq.n	8005cce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cdc <prvAddNewTaskToReadyList+0xc8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d207      	bcs.n	8005cce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <prvAddNewTaskToReadyList+0xdc>)
 8005cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20001364 	.word	0x20001364
 8005cdc:	20000e90 	.word	0x20000e90
 8005ce0:	20001370 	.word	0x20001370
 8005ce4:	20001380 	.word	0x20001380
 8005ce8:	2000136c 	.word	0x2000136c
 8005cec:	20000e94 	.word	0x20000e94
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	@ 0x28
 8005cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d02:	463a      	mov	r2, r7
 8005d04:	1d39      	adds	r1, r7, #4
 8005d06:	f107 0308 	add.w	r3, r7, #8
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fe62 	bl	80049d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	9202      	str	r2, [sp, #8]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	460a      	mov	r2, r1
 8005d22:	4926      	ldr	r1, [pc, #152]	@ (8005dbc <vTaskStartScheduler+0xc8>)
 8005d24:	4826      	ldr	r0, [pc, #152]	@ (8005dc0 <vTaskStartScheduler+0xcc>)
 8005d26:	f7ff fe1f 	bl	8005968 <xTaskCreateStatic>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4a25      	ldr	r2, [pc, #148]	@ (8005dc4 <vTaskStartScheduler+0xd0>)
 8005d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d30:	4b24      	ldr	r3, [pc, #144]	@ (8005dc4 <vTaskStartScheduler+0xd0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e001      	b.n	8005d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d102      	bne.n	8005d4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d48:	f000 ffbe 	bl	8006cc8 <xTimerCreateTimerTask>
 8005d4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11d      	bne.n	8005d90 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	b672      	cpsid	i
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	b662      	cpsie	i
 8005d68:	613b      	str	r3, [r7, #16]
}
 8005d6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d6c:	4b16      	ldr	r3, [pc, #88]	@ (8005dc8 <vTaskStartScheduler+0xd4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3354      	adds	r3, #84	@ 0x54
 8005d72:	4a16      	ldr	r2, [pc, #88]	@ (8005dcc <vTaskStartScheduler+0xd8>)
 8005d74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d76:	4b16      	ldr	r3, [pc, #88]	@ (8005dd0 <vTaskStartScheduler+0xdc>)
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d7e:	4b15      	ldr	r3, [pc, #84]	@ (8005dd4 <vTaskStartScheduler+0xe0>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d84:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <vTaskStartScheduler+0xe4>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d8a:	f001 fb99 	bl	80074c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d8e:	e011      	b.n	8005db4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d10d      	bne.n	8005db4 <vTaskStartScheduler+0xc0>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	b672      	cpsid	i
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	b662      	cpsie	i
 8005dac:	60fb      	str	r3, [r7, #12]
}
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <vTaskStartScheduler+0xbc>
}
 8005db4:	bf00      	nop
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	08008f10 	.word	0x08008f10
 8005dc0:	0800642d 	.word	0x0800642d
 8005dc4:	20001388 	.word	0x20001388
 8005dc8:	20000e90 	.word	0x20000e90
 8005dcc:	2000001c 	.word	0x2000001c
 8005dd0:	20001384 	.word	0x20001384
 8005dd4:	20001370 	.word	0x20001370
 8005dd8:	20001368 	.word	0x20001368

08005ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <vTaskSuspendAll+0x18>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a03      	ldr	r2, [pc, #12]	@ (8005df4 <vTaskSuspendAll+0x18>)
 8005de8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	2000138c 	.word	0x2000138c

08005df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e06:	4b43      	ldr	r3, [pc, #268]	@ (8005f14 <xTaskResumeAll+0x11c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10d      	bne.n	8005e2a <xTaskResumeAll+0x32>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	b672      	cpsid	i
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	b662      	cpsie	i
 8005e22:	603b      	str	r3, [r7, #0]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e2a:	f001 fbc7 	bl	80075bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e2e:	4b39      	ldr	r3, [pc, #228]	@ (8005f14 <xTaskResumeAll+0x11c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	4a37      	ldr	r2, [pc, #220]	@ (8005f14 <xTaskResumeAll+0x11c>)
 8005e36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e38:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <xTaskResumeAll+0x11c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d162      	bne.n	8005f06 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e40:	4b35      	ldr	r3, [pc, #212]	@ (8005f18 <xTaskResumeAll+0x120>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05e      	beq.n	8005f06 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e48:	e02f      	b.n	8005eaa <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4a:	4b34      	ldr	r3, [pc, #208]	@ (8005f1c <xTaskResumeAll+0x124>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3318      	adds	r3, #24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fe7a 	bl	8004b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fe75 	bl	8004b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <xTaskResumeAll+0x128>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d903      	bls.n	8005e7a <xTaskResumeAll+0x82>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	4a2a      	ldr	r2, [pc, #168]	@ (8005f20 <xTaskResumeAll+0x128>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4a27      	ldr	r2, [pc, #156]	@ (8005f24 <xTaskResumeAll+0x12c>)
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fe fe00 	bl	8004a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9a:	4b23      	ldr	r3, [pc, #140]	@ (8005f28 <xTaskResumeAll+0x130>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005ea4:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <xTaskResumeAll+0x134>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8005f1c <xTaskResumeAll+0x124>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1cb      	bne.n	8005e4a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eb8:	f000 fbae 	bl	8006618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <xTaskResumeAll+0x138>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ec8:	f000 f846 	bl	8005f58 <xTaskIncrementTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005ed2:	4b16      	ldr	r3, [pc, #88]	@ (8005f2c <xTaskResumeAll+0x134>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f1      	bne.n	8005ec8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	@ (8005f30 <xTaskResumeAll+0x138>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eea:	4b10      	ldr	r3, [pc, #64]	@ (8005f2c <xTaskResumeAll+0x134>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f34 <xTaskResumeAll+0x13c>)
 8005ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f06:	f001 fb8f 	bl	8007628 <vPortExitCritical>

	return xAlreadyYielded;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	2000138c 	.word	0x2000138c
 8005f18:	20001364 	.word	0x20001364
 8005f1c:	20001324 	.word	0x20001324
 8005f20:	2000136c 	.word	0x2000136c
 8005f24:	20000e94 	.word	0x20000e94
 8005f28:	20000e90 	.word	0x20000e90
 8005f2c:	20001378 	.word	0x20001378
 8005f30:	20001374 	.word	0x20001374
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f3e:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <xTaskGetTickCount+0x1c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f44:	687b      	ldr	r3, [r7, #4]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20001368 	.word	0x20001368

08005f58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f62:	4b50      	ldr	r3, [pc, #320]	@ (80060a4 <xTaskIncrementTick+0x14c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 808c 	bne.w	8006084 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f74:	4a4c      	ldr	r2, [pc, #304]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d123      	bne.n	8005fc8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f80:	4b4a      	ldr	r3, [pc, #296]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00d      	beq.n	8005fa6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	b672      	cpsid	i
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	b662      	cpsie	i
 8005f9e:	603b      	str	r3, [r7, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	bf00      	nop
 8005fa4:	e7fd      	b.n	8005fa2 <xTaskIncrementTick+0x4a>
 8005fa6:	4b41      	ldr	r3, [pc, #260]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	4b40      	ldr	r3, [pc, #256]	@ (80060b0 <xTaskIncrementTick+0x158>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80060b0 <xTaskIncrementTick+0x158>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b3e      	ldr	r3, [pc, #248]	@ (80060b4 <xTaskIncrementTick+0x15c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80060b4 <xTaskIncrementTick+0x15c>)
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	f000 fb28 	bl	8006618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <xTaskIncrementTick+0x160>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d349      	bcc.n	8006066 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd2:	4b36      	ldr	r3, [pc, #216]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	4b36      	ldr	r3, [pc, #216]	@ (80060b8 <xTaskIncrementTick+0x160>)
 8005fde:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe2:	601a      	str	r2, [r3, #0]
					break;
 8005fe4:	e03f      	b.n	8006066 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe6:	4b31      	ldr	r3, [pc, #196]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d203      	bcs.n	8006006 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80060b8 <xTaskIncrementTick+0x160>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006004:	e02f      	b.n	8006066 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3304      	adds	r3, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fda0 	bl	8004b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3318      	adds	r3, #24
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fd97 	bl	8004b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006026:	4b25      	ldr	r3, [pc, #148]	@ (80060bc <xTaskIncrementTick+0x164>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <xTaskIncrementTick+0xde>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	4a22      	ldr	r2, [pc, #136]	@ (80060bc <xTaskIncrementTick+0x164>)
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4a1f      	ldr	r2, [pc, #124]	@ (80060c0 <xTaskIncrementTick+0x168>)
 8006044:	441a      	add	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3304      	adds	r3, #4
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f7fe fd22 	bl	8004a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006056:	4b1b      	ldr	r3, [pc, #108]	@ (80060c4 <xTaskIncrementTick+0x16c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d3b8      	bcc.n	8005fd2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006064:	e7b5      	b.n	8005fd2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006066:	4b17      	ldr	r3, [pc, #92]	@ (80060c4 <xTaskIncrementTick+0x16c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606c:	4914      	ldr	r1, [pc, #80]	@ (80060c0 <xTaskIncrementTick+0x168>)
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d907      	bls.n	800608e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800607e:	2301      	movs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e004      	b.n	800608e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006084:	4b10      	ldr	r3, [pc, #64]	@ (80060c8 <xTaskIncrementTick+0x170>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	4a0f      	ldr	r2, [pc, #60]	@ (80060c8 <xTaskIncrementTick+0x170>)
 800608c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800608e:	4b0f      	ldr	r3, [pc, #60]	@ (80060cc <xTaskIncrementTick+0x174>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800609a:	697b      	ldr	r3, [r7, #20]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2000138c 	.word	0x2000138c
 80060a8:	20001368 	.word	0x20001368
 80060ac:	2000131c 	.word	0x2000131c
 80060b0:	20001320 	.word	0x20001320
 80060b4:	2000137c 	.word	0x2000137c
 80060b8:	20001384 	.word	0x20001384
 80060bc:	2000136c 	.word	0x2000136c
 80060c0:	20000e94 	.word	0x20000e94
 80060c4:	20000e90 	.word	0x20000e90
 80060c8:	20001374 	.word	0x20001374
 80060cc:	20001378 	.word	0x20001378

080060d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006188 <vTaskSwitchContext+0xb8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060de:	4b2b      	ldr	r3, [pc, #172]	@ (800618c <vTaskSwitchContext+0xbc>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060e4:	e049      	b.n	800617a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80060e6:	4b29      	ldr	r3, [pc, #164]	@ (800618c <vTaskSwitchContext+0xbc>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ec:	4b28      	ldr	r3, [pc, #160]	@ (8006190 <vTaskSwitchContext+0xc0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e013      	b.n	800611c <vTaskSwitchContext+0x4c>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10d      	bne.n	8006116 <vTaskSwitchContext+0x46>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	b672      	cpsid	i
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	b662      	cpsie	i
 800610e:	607b      	str	r3, [r7, #4]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vTaskSwitchContext+0x42>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b01      	subs	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	491d      	ldr	r1, [pc, #116]	@ (8006194 <vTaskSwitchContext+0xc4>)
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0e1      	beq.n	80060f4 <vTaskSwitchContext+0x24>
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <vTaskSwitchContext+0xc4>)
 800613c:	4413      	add	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	605a      	str	r2, [r3, #4]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	3308      	adds	r3, #8
 8006152:	429a      	cmp	r2, r3
 8006154:	d104      	bne.n	8006160 <vTaskSwitchContext+0x90>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	4a0c      	ldr	r2, [pc, #48]	@ (8006198 <vTaskSwitchContext+0xc8>)
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4a09      	ldr	r2, [pc, #36]	@ (8006190 <vTaskSwitchContext+0xc0>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006170:	4b09      	ldr	r3, [pc, #36]	@ (8006198 <vTaskSwitchContext+0xc8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3354      	adds	r3, #84	@ 0x54
 8006176:	4a09      	ldr	r2, [pc, #36]	@ (800619c <vTaskSwitchContext+0xcc>)
 8006178:	6013      	str	r3, [r2, #0]
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	2000138c 	.word	0x2000138c
 800618c:	20001378 	.word	0x20001378
 8006190:	2000136c 	.word	0x2000136c
 8006194:	20000e94 	.word	0x20000e94
 8006198:	20000e90 	.word	0x20000e90
 800619c:	2000001c 	.word	0x2000001c

080061a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10d      	bne.n	80061cc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	b672      	cpsid	i
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	b662      	cpsie	i
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061cc:	4b07      	ldr	r3, [pc, #28]	@ (80061ec <vTaskPlaceOnEventList+0x4c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3318      	adds	r3, #24
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fe fc82 	bl	8004ade <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061da:	2101      	movs	r1, #1
 80061dc:	6838      	ldr	r0, [r7, #0]
 80061de:	f000 fd1f 	bl	8006c20 <prvAddCurrentTaskToDelayedList>
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000e90 	.word	0x20000e90

080061f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10d      	bne.n	800621e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	b672      	cpsid	i
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	b662      	cpsie	i
 8006216:	617b      	str	r3, [r7, #20]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800621e:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <vTaskPlaceOnEventListRestricted+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3318      	adds	r3, #24
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7fe fc35 	bl	8004a96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	68b8      	ldr	r0, [r7, #8]
 800623c:	f000 fcf0 	bl	8006c20 <prvAddCurrentTaskToDelayedList>
	}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000e90 	.word	0x20000e90

0800624c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	b672      	cpsid	i
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	b662      	cpsie	i
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	3318      	adds	r3, #24
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fc64 	bl	8004b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006288:	4b1d      	ldr	r3, [pc, #116]	@ (8006300 <xTaskRemoveFromEventList+0xb4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d11d      	bne.n	80062cc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	3304      	adds	r3, #4
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fc5b 	bl	8004b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629e:	4b19      	ldr	r3, [pc, #100]	@ (8006304 <xTaskRemoveFromEventList+0xb8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d903      	bls.n	80062ae <xTaskRemoveFromEventList+0x62>
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <xTaskRemoveFromEventList+0xb8>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4a13      	ldr	r2, [pc, #76]	@ (8006308 <xTaskRemoveFromEventList+0xbc>)
 80062bc:	441a      	add	r2, r3
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f7fe fbe6 	bl	8004a96 <vListInsertEnd>
 80062ca:	e005      	b.n	80062d8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	3318      	adds	r3, #24
 80062d0:	4619      	mov	r1, r3
 80062d2:	480e      	ldr	r0, [pc, #56]	@ (800630c <xTaskRemoveFromEventList+0xc0>)
 80062d4:	f7fe fbdf 	bl	8004a96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <xTaskRemoveFromEventList+0xc4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d905      	bls.n	80062f2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062e6:	2301      	movs	r3, #1
 80062e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006314 <xTaskRemoveFromEventList+0xc8>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e001      	b.n	80062f6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062f6:	697b      	ldr	r3, [r7, #20]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	2000138c 	.word	0x2000138c
 8006304:	2000136c 	.word	0x2000136c
 8006308:	20000e94 	.word	0x20000e94
 800630c:	20001324 	.word	0x20001324
 8006310:	20000e90 	.word	0x20000e90
 8006314:	20001378 	.word	0x20001378

08006318 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006320:	4b06      	ldr	r3, [pc, #24]	@ (800633c <vTaskInternalSetTimeOutState+0x24>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006328:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <vTaskInternalSetTimeOutState+0x28>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	605a      	str	r2, [r3, #4]
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	2000137c 	.word	0x2000137c
 8006340:	20001368 	.word	0x20001368

08006344 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10d      	bne.n	8006370 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006358:	b672      	cpsid	i
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	b662      	cpsie	i
 8006368:	613b      	str	r3, [r7, #16]
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	b672      	cpsid	i
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	b662      	cpsie	i
 800638a:	60fb      	str	r3, [r7, #12]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006392:	f001 f913 	bl	80075bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006396:	4b1d      	ldr	r3, [pc, #116]	@ (800640c <xTaskCheckForTimeOut+0xc8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d102      	bne.n	80063b6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	e023      	b.n	80063fe <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b15      	ldr	r3, [pc, #84]	@ (8006410 <xTaskCheckForTimeOut+0xcc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d007      	beq.n	80063d2 <xTaskCheckForTimeOut+0x8e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e015      	b.n	80063fe <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d20b      	bcs.n	80063f4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff ff95 	bl	8006318 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e004      	b.n	80063fe <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063fa:	2301      	movs	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063fe:	f001 f913 	bl	8007628 <vPortExitCritical>

	return xReturn;
 8006402:	69fb      	ldr	r3, [r7, #28]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20001368 	.word	0x20001368
 8006410:	2000137c 	.word	0x2000137c

08006414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006418:	4b03      	ldr	r3, [pc, #12]	@ (8006428 <vTaskMissedYield+0x14>)
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]
}
 800641e:	bf00      	nop
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20001378 	.word	0x20001378

0800642c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006434:	f000 f852 	bl	80064dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006438:	4b06      	ldr	r3, [pc, #24]	@ (8006454 <prvIdleTask+0x28>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d9f9      	bls.n	8006434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <prvIdleTask+0x2c>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006450:	e7f0      	b.n	8006434 <prvIdleTask+0x8>
 8006452:	bf00      	nop
 8006454:	20000e94 	.word	0x20000e94
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
 8006466:	e00c      	b.n	8006482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4a12      	ldr	r2, [pc, #72]	@ (80064bc <prvInitialiseTaskLists+0x60>)
 8006474:	4413      	add	r3, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fae0 	bl	8004a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3301      	adds	r3, #1
 8006480:	607b      	str	r3, [r7, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b37      	cmp	r3, #55	@ 0x37
 8006486:	d9ef      	bls.n	8006468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006488:	480d      	ldr	r0, [pc, #52]	@ (80064c0 <prvInitialiseTaskLists+0x64>)
 800648a:	f7fe fad7 	bl	8004a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800648e:	480d      	ldr	r0, [pc, #52]	@ (80064c4 <prvInitialiseTaskLists+0x68>)
 8006490:	f7fe fad4 	bl	8004a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006494:	480c      	ldr	r0, [pc, #48]	@ (80064c8 <prvInitialiseTaskLists+0x6c>)
 8006496:	f7fe fad1 	bl	8004a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800649a:	480c      	ldr	r0, [pc, #48]	@ (80064cc <prvInitialiseTaskLists+0x70>)
 800649c:	f7fe face 	bl	8004a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064a0:	480b      	ldr	r0, [pc, #44]	@ (80064d0 <prvInitialiseTaskLists+0x74>)
 80064a2:	f7fe facb 	bl	8004a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064a6:	4b0b      	ldr	r3, [pc, #44]	@ (80064d4 <prvInitialiseTaskLists+0x78>)
 80064a8:	4a05      	ldr	r2, [pc, #20]	@ (80064c0 <prvInitialiseTaskLists+0x64>)
 80064aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	@ (80064d8 <prvInitialiseTaskLists+0x7c>)
 80064ae:	4a05      	ldr	r2, [pc, #20]	@ (80064c4 <prvInitialiseTaskLists+0x68>)
 80064b0:	601a      	str	r2, [r3, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000e94 	.word	0x20000e94
 80064c0:	200012f4 	.word	0x200012f4
 80064c4:	20001308 	.word	0x20001308
 80064c8:	20001324 	.word	0x20001324
 80064cc:	20001338 	.word	0x20001338
 80064d0:	20001350 	.word	0x20001350
 80064d4:	2000131c 	.word	0x2000131c
 80064d8:	20001320 	.word	0x20001320

080064dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064e2:	e019      	b.n	8006518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064e4:	f001 f86a 	bl	80075bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e8:	4b10      	ldr	r3, [pc, #64]	@ (800652c <prvCheckTasksWaitingTermination+0x50>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe fb2b 	bl	8004b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006530 <prvCheckTasksWaitingTermination+0x54>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3b01      	subs	r3, #1
 8006500:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <prvCheckTasksWaitingTermination+0x54>)
 8006502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006504:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <prvCheckTasksWaitingTermination+0x58>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3b01      	subs	r3, #1
 800650a:	4a0a      	ldr	r2, [pc, #40]	@ (8006534 <prvCheckTasksWaitingTermination+0x58>)
 800650c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800650e:	f001 f88b 	bl	8007628 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f848 	bl	80065a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006518:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <prvCheckTasksWaitingTermination+0x58>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e1      	bne.n	80064e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20001338 	.word	0x20001338
 8006530:	20001364 	.word	0x20001364
 8006534:	2000134c 	.word	0x2000134c

08006538 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006544:	e005      	b.n	8006552 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3301      	adds	r3, #1
 800654a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2ba5      	cmp	r3, #165	@ 0xa5
 8006558:	d0f5      	beq.n	8006546 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	089b      	lsrs	r3, r3, #2
 800655e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	b29b      	uxth	r3, r3
	}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <uxTaskGetStackHighWaterMark+0x14>
 800657e:	4b09      	ldr	r3, [pc, #36]	@ (80065a4 <uxTaskGetStackHighWaterMark+0x34>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	e000      	b.n	8006586 <uxTaskGetStackHighWaterMark+0x16>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7ff ffd2 	bl	8006538 <prvTaskCheckFreeStackSpace>
 8006594:	4603      	mov	r3, r0
 8006596:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8006598:	68fb      	ldr	r3, [r7, #12]
	}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000e90 	.word	0x20000e90

080065a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3354      	adds	r3, #84	@ 0x54
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fe1f 	bl	80081f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d108      	bne.n	80065d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 f9f3 	bl	80079b4 <vPortFree>
				vPortFree( pxTCB );
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 f9f0 	bl	80079b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065d4:	e01b      	b.n	800660e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d103      	bne.n	80065e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f9e7 	bl	80079b4 <vPortFree>
	}
 80065e6:	e012      	b.n	800660e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d00d      	beq.n	800660e <prvDeleteTCB+0x66>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	b672      	cpsid	i
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	b662      	cpsie	i
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <prvDeleteTCB+0x62>
	}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661e:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <prvResetNextTaskUnblockTime+0x38>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006628:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <prvResetNextTaskUnblockTime+0x3c>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295
 800662e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006630:	e008      	b.n	8006644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006632:	4b07      	ldr	r3, [pc, #28]	@ (8006650 <prvResetNextTaskUnblockTime+0x38>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4a04      	ldr	r2, [pc, #16]	@ (8006654 <prvResetNextTaskUnblockTime+0x3c>)
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	2000131c 	.word	0x2000131c
 8006654:	20001384 	.word	0x20001384

08006658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800665e:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <xTaskGetSchedulerState+0x34>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006666:	2301      	movs	r3, #1
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	e008      	b.n	800667e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666c:	4b08      	ldr	r3, [pc, #32]	@ (8006690 <xTaskGetSchedulerState+0x38>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006674:	2302      	movs	r3, #2
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	e001      	b.n	800667e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800667e:	687b      	ldr	r3, [r7, #4]
	}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20001370 	.word	0x20001370
 8006690:	2000138c 	.word	0x2000138c

08006694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d051      	beq.n	800674e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006758 <xTaskPriorityInherit+0xc4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d241      	bcs.n	800673c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	db06      	blt.n	80066ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c0:	4b25      	ldr	r3, [pc, #148]	@ (8006758 <xTaskPriorityInherit+0xc4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <xTaskPriorityInherit+0xc8>)
 80066e0:	4413      	add	r3, r2
 80066e2:	4299      	cmp	r1, r3
 80066e4:	d122      	bne.n	800672c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fa30 	bl	8004b50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066f0:	4b19      	ldr	r3, [pc, #100]	@ (8006758 <xTaskPriorityInherit+0xc4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fe:	4b18      	ldr	r3, [pc, #96]	@ (8006760 <xTaskPriorityInherit+0xcc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d903      	bls.n	800670e <xTaskPriorityInherit+0x7a>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	4a15      	ldr	r2, [pc, #84]	@ (8006760 <xTaskPriorityInherit+0xcc>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a10      	ldr	r2, [pc, #64]	@ (800675c <xTaskPriorityInherit+0xc8>)
 800671c:	441a      	add	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f7fe f9b6 	bl	8004a96 <vListInsertEnd>
 800672a:	e004      	b.n	8006736 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <xTaskPriorityInherit+0xc4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e008      	b.n	800674e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006740:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <xTaskPriorityInherit+0xc4>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	429a      	cmp	r2, r3
 8006748:	d201      	bcs.n	800674e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800674e:	68fb      	ldr	r3, [r7, #12]
	}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000e90 	.word	0x20000e90
 800675c:	20000e94 	.word	0x20000e94
 8006760:	2000136c 	.word	0x2000136c

08006764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d05c      	beq.n	8006834 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800677a:	4b31      	ldr	r3, [pc, #196]	@ (8006840 <xTaskPriorityDisinherit+0xdc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	429a      	cmp	r2, r3
 8006782:	d00d      	beq.n	80067a0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	b672      	cpsid	i
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	b662      	cpsie	i
 8006798:	60fb      	str	r3, [r7, #12]
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	e7fd      	b.n	800679c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10d      	bne.n	80067c4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	b672      	cpsid	i
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	b662      	cpsie	i
 80067bc:	60bb      	str	r3, [r7, #8]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c8:	1e5a      	subs	r2, r3, #1
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d02c      	beq.n	8006834 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d128      	bne.n	8006834 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe f9b2 	bl	8004b50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006804:	4b0f      	ldr	r3, [pc, #60]	@ (8006844 <xTaskPriorityDisinherit+0xe0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d903      	bls.n	8006814 <xTaskPriorityDisinherit+0xb0>
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006810:	4a0c      	ldr	r2, [pc, #48]	@ (8006844 <xTaskPriorityDisinherit+0xe0>)
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4a09      	ldr	r2, [pc, #36]	@ (8006848 <xTaskPriorityDisinherit+0xe4>)
 8006822:	441a      	add	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f7fe f933 	bl	8004a96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006834:	697b      	ldr	r3, [r7, #20]
	}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000e90 	.word	0x20000e90
 8006844:	2000136c 	.word	0x2000136c
 8006848:	20000e94 	.word	0x20000e94

0800684c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d070      	beq.n	8006946 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10d      	bne.n	8006888 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	b672      	cpsid	i
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	b662      	cpsie	i
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d902      	bls.n	8006898 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	e002      	b.n	800689e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d04e      	beq.n	8006946 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d149      	bne.n	8006946 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80068b2:	4b27      	ldr	r3, [pc, #156]	@ (8006950 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d10d      	bne.n	80068d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	b672      	cpsid	i
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	b662      	cpsie	i
 80068d0:	60bb      	str	r3, [r7, #8]
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	e7fd      	b.n	80068d4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db04      	blt.n	80068f6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	6959      	ldr	r1, [r3, #20]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006906:	4413      	add	r3, r2
 8006908:	4299      	cmp	r1, r3
 800690a:	d11c      	bne.n	8006946 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe f91d 	bl	8004b50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800691a:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d903      	bls.n	800692a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006926:	4a0c      	ldr	r2, [pc, #48]	@ (8006958 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4a07      	ldr	r2, [pc, #28]	@ (8006954 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006938:	441a      	add	r2, r3
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7fe f8a8 	bl	8004a96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006946:	bf00      	nop
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000e90 	.word	0x20000e90
 8006954:	20000e94 	.word	0x20000e94
 8006958:	2000136c 	.word	0x2000136c

0800695c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006960:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <pvTaskIncrementMutexHeldCount+0x24>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006968:	4b05      	ldr	r3, [pc, #20]	@ (8006980 <pvTaskIncrementMutexHeldCount+0x24>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800696e:	3201      	adds	r2, #1
 8006970:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006972:	4b03      	ldr	r3, [pc, #12]	@ (8006980 <pvTaskIncrementMutexHeldCount+0x24>)
 8006974:	681b      	ldr	r3, [r3, #0]
	}
 8006976:	4618      	mov	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20000e90 	.word	0x20000e90

08006984 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006992:	f000 fe13 	bl	80075bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006996:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d01c      	beq.n	80069de <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80069a4:	4b25      	ldr	r3, [pc, #148]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	43d2      	mvns	r2, r2
 80069b0:	400a      	ands	r2, r1
 80069b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80069b6:	4b21      	ldr	r3, [pc, #132]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069c6:	2101      	movs	r1, #1
 80069c8:	6838      	ldr	r0, [r7, #0]
 80069ca:	f000 f929 	bl	8006c20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80069ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006a40 <xTaskNotifyWait+0xbc>)
 80069d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80069de:	f000 fe23 	bl	8007628 <vPortExitCritical>

		taskENTER_CRITICAL();
 80069e2:	f000 fdeb 	bl	80075bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80069ec:	4b13      	ldr	r3, [pc, #76]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80069f8:	4b10      	ldr	r3, [pc, #64]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d002      	beq.n	8006a0c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e00a      	b.n	8006a22 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	43d2      	mvns	r2, r2
 8006a18:	400a      	ands	r2, r1
 8006a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a22:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <xTaskNotifyWait+0xb8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006a2c:	f000 fdfc 	bl	8007628 <vPortExitCritical>

		return xReturn;
 8006a30:	697b      	ldr	r3, [r7, #20]
	}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000e90 	.word	0x20000e90
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08e      	sub	sp, #56	@ 0x38
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006a54:	2301      	movs	r3, #1
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	b672      	cpsid	i
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	b662      	cpsie	i
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	e7fd      	b.n	8006a76 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a7a:	f000 fe87 	bl	800778c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006a82:	f3ef 8211 	mrs	r2, BASEPRI
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	623a      	str	r2, [r7, #32]
 8006a9c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d82e      	bhi.n	8006b28 <xTaskGenericNotifyFromISR+0xe4>
 8006aca:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <xTaskGenericNotifyFromISR+0x8c>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006b51 	.word	0x08006b51
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006af7 	.word	0x08006af7
 8006adc:	08006b07 	.word	0x08006b07
 8006ae0:	08006b11 	.word	0x08006b11
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006af4:	e02f      	b.n	8006b56 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006b04:	e027      	b.n	8006b56 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006b0e:	e022      	b.n	8006b56 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d004      	beq.n	8006b22 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006b20:	e019      	b.n	8006b56 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8006b26:	e016      	b.n	8006b56 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d00f      	beq.n	8006b54 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	b672      	cpsid	i
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	b662      	cpsie	i
 8006b48:	61bb      	str	r3, [r7, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xTaskGenericNotifyFromISR+0x108>
					break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <xTaskGenericNotifyFromISR+0x112>
					break;
 8006b54:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d149      	bne.n	8006bf2 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	b672      	cpsid	i
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	b662      	cpsie	i
 8006b7a:	617b      	str	r3, [r7, #20]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b82:	4b21      	ldr	r3, [pc, #132]	@ (8006c08 <xTaskGenericNotifyFromISR+0x1c4>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11d      	bne.n	8006bc6 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fd ffde 	bl	8004b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b98:	4b1c      	ldr	r3, [pc, #112]	@ (8006c0c <xTaskGenericNotifyFromISR+0x1c8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d903      	bls.n	8006ba8 <xTaskGenericNotifyFromISR+0x164>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba4:	4a19      	ldr	r2, [pc, #100]	@ (8006c0c <xTaskGenericNotifyFromISR+0x1c8>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a16      	ldr	r2, [pc, #88]	@ (8006c10 <xTaskGenericNotifyFromISR+0x1cc>)
 8006bb6:	441a      	add	r2, r3
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f7fd ff69 	bl	8004a96 <vListInsertEnd>
 8006bc4:	e005      	b.n	8006bd2 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	3318      	adds	r3, #24
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4811      	ldr	r0, [pc, #68]	@ (8006c14 <xTaskGenericNotifyFromISR+0x1d0>)
 8006bce:	f7fd ff62 	bl	8004a96 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd6:	4b10      	ldr	r3, [pc, #64]	@ (8006c18 <xTaskGenericNotifyFromISR+0x1d4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d908      	bls.n	8006bf2 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006bec:	4b0b      	ldr	r3, [pc, #44]	@ (8006c1c <xTaskGenericNotifyFromISR+0x1d8>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f383 8811 	msr	BASEPRI, r3
}
 8006bfc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3738      	adds	r7, #56	@ 0x38
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	2000138c 	.word	0x2000138c
 8006c0c:	2000136c 	.word	0x2000136c
 8006c10:	20000e94 	.word	0x20000e94
 8006c14:	20001324 	.word	0x20001324
 8006c18:	20000e90 	.word	0x20000e90
 8006c1c:	20001378 	.word	0x20001378

08006c20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c2a:	4b21      	ldr	r3, [pc, #132]	@ (8006cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c30:	4b20      	ldr	r3, [pc, #128]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd ff8a 	bl	8004b50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c42:	d10a      	bne.n	8006c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4619      	mov	r1, r3
 8006c52:	4819      	ldr	r0, [pc, #100]	@ (8006cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c54:	f7fd ff1f 	bl	8004a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c58:	e026      	b.n	8006ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4413      	add	r3, r2
 8006c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d209      	bcs.n	8006c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c72:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f7fd ff2d 	bl	8004ade <vListInsert>
}
 8006c84:	e010      	b.n	8006ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c86:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7fd ff23 	bl	8004ade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c98:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d202      	bcs.n	8006ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ca2:	4a08      	ldr	r2, [pc, #32]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6013      	str	r3, [r2, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20001368 	.word	0x20001368
 8006cb4:	20000e90 	.word	0x20000e90
 8006cb8:	20001350 	.word	0x20001350
 8006cbc:	20001320 	.word	0x20001320
 8006cc0:	2000131c 	.word	0x2000131c
 8006cc4:	20001384 	.word	0x20001384

08006cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	@ 0x28
 8006ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cd2:	f000 fb21 	bl	8007318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d50 <xTimerCreateTimerTask+0x88>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d021      	beq.n	8006d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ce6:	1d3a      	adds	r2, r7, #4
 8006ce8:	f107 0108 	add.w	r1, r7, #8
 8006cec:	f107 030c 	add.w	r3, r7, #12
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fd fe89 	bl	8004a08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	9202      	str	r2, [sp, #8]
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	2302      	movs	r3, #2
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	460a      	mov	r2, r1
 8006d08:	4912      	ldr	r1, [pc, #72]	@ (8006d54 <xTimerCreateTimerTask+0x8c>)
 8006d0a:	4813      	ldr	r0, [pc, #76]	@ (8006d58 <xTimerCreateTimerTask+0x90>)
 8006d0c:	f7fe fe2c 	bl	8005968 <xTaskCreateStatic>
 8006d10:	4603      	mov	r3, r0
 8006d12:	4a12      	ldr	r2, [pc, #72]	@ (8006d5c <xTimerCreateTimerTask+0x94>)
 8006d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d16:	4b11      	ldr	r3, [pc, #68]	@ (8006d5c <xTimerCreateTimerTask+0x94>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10d      	bne.n	8006d44 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2c:	b672      	cpsid	i
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	b662      	cpsie	i
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006d44:	697b      	ldr	r3, [r7, #20]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	200013c0 	.word	0x200013c0
 8006d54:	08008f18 	.word	0x08008f18
 8006d58:	08006ea1 	.word	0x08006ea1
 8006d5c:	200013c4 	.word	0x200013c4

08006d60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	@ 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <xTimerGenericCommand+0x34>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7c:	b672      	cpsid	i
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	b662      	cpsie	i
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d94:	4b19      	ldr	r3, [pc, #100]	@ (8006dfc <xTimerGenericCommand+0x9c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02a      	beq.n	8006df2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	dc18      	bgt.n	8006de0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dae:	f7ff fc53 	bl	8006658 <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d109      	bne.n	8006dcc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006db8:	4b10      	ldr	r3, [pc, #64]	@ (8006dfc <xTimerGenericCommand+0x9c>)
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	f107 0110 	add.w	r1, r7, #16
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc4:	f7fe f87a 	bl	8004ebc <xQueueGenericSend>
 8006dc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dca:	e012      	b.n	8006df2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dfc <xTimerGenericCommand+0x9c>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	f107 0110 	add.w	r1, r7, #16
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f7fe f870 	bl	8004ebc <xQueueGenericSend>
 8006ddc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dde:	e008      	b.n	8006df2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006de0:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <xTimerGenericCommand+0x9c>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	f107 0110 	add.w	r1, r7, #16
 8006de8:	2300      	movs	r3, #0
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	f7fe f970 	bl	80050d0 <xQueueGenericSendFromISR>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3728      	adds	r7, #40	@ 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	200013c0 	.word	0x200013c0

08006e00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0a:	4b24      	ldr	r3, [pc, #144]	@ (8006e9c <prvProcessExpiredTimer+0x9c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fe99 	bl	8004b50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d025      	beq.n	8006e78 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	18d1      	adds	r1, r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	6978      	ldr	r0, [r7, #20]
 8006e3a:	f000 f8d7 	bl	8006fec <prvInsertTimerInActiveList>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d022      	beq.n	8006e8a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e44:	2300      	movs	r3, #0
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	6978      	ldr	r0, [r7, #20]
 8006e50:	f7ff ff86 	bl	8006d60 <xTimerGenericCommand>
 8006e54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d116      	bne.n	8006e8a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e60:	b672      	cpsid	i
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	b662      	cpsie	i
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	4798      	blx	r3
}
 8006e92:	bf00      	nop
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200013b8 	.word	0x200013b8

08006ea0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f859 	bl	8006f64 <prvGetNextExpireTime>
 8006eb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f805 	bl	8006ec8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ebe:	f000 f8d7 	bl	8007070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ec2:	bf00      	nop
 8006ec4:	e7f0      	b.n	8006ea8 <prvTimerTask+0x8>
	...

08006ec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ed2:	f7fe ff83 	bl	8005ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f866 	bl	8006fac <prvSampleTimeNow>
 8006ee0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d130      	bne.n	8006f4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <prvProcessTimerOrBlockTask+0x3c>
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d806      	bhi.n	8006f04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ef6:	f7fe ff7f 	bl	8005df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff ff7f 	bl	8006e00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f02:	e024      	b.n	8006f4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f0a:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <prvProcessTimerOrBlockTask+0x90>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <prvProcessTimerOrBlockTask+0x50>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <prvProcessTimerOrBlockTask+0x52>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f5c <prvProcessTimerOrBlockTask+0x94>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7fe fce9 	bl	8005900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f2e:	f7fe ff63 	bl	8005df8 <xTaskResumeAll>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f38:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <prvProcessTimerOrBlockTask+0x98>)
 8006f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	f3bf 8f6f 	isb	sy
}
 8006f48:	e001      	b.n	8006f4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f4a:	f7fe ff55 	bl	8005df8 <xTaskResumeAll>
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200013bc 	.word	0x200013bc
 8006f5c:	200013c0 	.word	0x200013c0
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa8 <prvGetNextExpireTime+0x44>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <prvGetNextExpireTime+0x16>
 8006f76:	2201      	movs	r2, #1
 8006f78:	e000      	b.n	8006f7c <prvGetNextExpireTime+0x18>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f88:	4b07      	ldr	r3, [pc, #28]	@ (8006fa8 <prvGetNextExpireTime+0x44>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e001      	b.n	8006f98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f98:	68fb      	ldr	r3, [r7, #12]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	200013b8 	.word	0x200013b8

08006fac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fb4:	f7fe ffc0 	bl	8005f38 <xTaskGetTickCount>
 8006fb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fba:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <prvSampleTimeNow+0x3c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d205      	bcs.n	8006fd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fc4:	f000 f940 	bl	8007248 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	e002      	b.n	8006fd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fd6:	4a04      	ldr	r2, [pc, #16]	@ (8006fe8 <prvSampleTimeNow+0x3c>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	200013c8 	.word	0x200013c8

08006fec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d812      	bhi.n	8007038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	429a      	cmp	r2, r3
 800701e:	d302      	bcc.n	8007026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e01b      	b.n	800705e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007026:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <prvInsertTimerInActiveList+0x7c>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7fd fd54 	bl	8004ade <vListInsert>
 8007036:	e012      	b.n	800705e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d206      	bcs.n	800704e <prvInsertTimerInActiveList+0x62>
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d302      	bcc.n	800704e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007048:	2301      	movs	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e007      	b.n	800705e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800704e:	4b07      	ldr	r3, [pc, #28]	@ (800706c <prvInsertTimerInActiveList+0x80>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7fd fd40 	bl	8004ade <vListInsert>
		}
	}

	return xProcessTimerNow;
 800705e:	697b      	ldr	r3, [r7, #20]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200013bc 	.word	0x200013bc
 800706c:	200013b8 	.word	0x200013b8

08007070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08e      	sub	sp, #56	@ 0x38
 8007074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007076:	e0d4      	b.n	8007222 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	da1b      	bge.n	80070b6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	3304      	adds	r3, #4
 8007082:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10d      	bne.n	80070a6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	b672      	cpsid	i
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	b662      	cpsie	i
 800709e:	61fb      	str	r3, [r7, #28]
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	e7fd      	b.n	80070a2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ac:	6850      	ldr	r0, [r2, #4]
 80070ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b0:	6892      	ldr	r2, [r2, #8]
 80070b2:	4611      	mov	r1, r2
 80070b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f2c0 80b2 	blt.w	8007222 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd fd3e 	bl	8004b50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070d4:	463b      	mov	r3, r7
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff68 	bl	8006fac <prvSampleTimeNow>
 80070dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	f200 809b 	bhi.w	800721c <prvProcessReceivedCommands+0x1ac>
 80070e6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <prvProcessReceivedCommands+0x7c>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007115 	.word	0x08007115
 80070f0:	08007115 	.word	0x08007115
 80070f4:	08007115 	.word	0x08007115
 80070f8:	0800718f 	.word	0x0800718f
 80070fc:	080071a3 	.word	0x080071a3
 8007100:	080071f3 	.word	0x080071f3
 8007104:	08007115 	.word	0x08007115
 8007108:	08007115 	.word	0x08007115
 800710c:	0800718f 	.word	0x0800718f
 8007110:	080071a3 	.word	0x080071a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007134:	f7ff ff5a 	bl	8006fec <prvInsertTimerInActiveList>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d070      	beq.n	8007220 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d065      	beq.n	8007220 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	441a      	add	r2, r3
 800715c:	2300      	movs	r3, #0
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	2300      	movs	r3, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007166:	f7ff fdfb 	bl	8006d60 <xTimerGenericCommand>
 800716a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d156      	bne.n	8007220 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	b672      	cpsid	i
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	b662      	cpsie	i
 8007186:	61bb      	str	r3, [r7, #24]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800718e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007194:	f023 0301 	bic.w	r3, r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071a0:	e03f      	b.n	8007222 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	b672      	cpsid	i
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	b662      	cpsie	i
 80071d6:	617b      	str	r3, [r7, #20]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	18d1      	adds	r1, r2, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ec:	f7ff fefe 	bl	8006fec <prvInsertTimerInActiveList>
					break;
 80071f0:	e017      	b.n	8007222 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007202:	f000 fbd7 	bl	80079b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007206:	e00c      	b.n	8007222 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800720e:	f023 0301 	bic.w	r3, r3, #1
 8007212:	b2da      	uxtb	r2, r3
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800721a:	e002      	b.n	8007222 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <prvProcessReceivedCommands+0x1b2>
					break;
 8007220:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007222:	4b08      	ldr	r3, [pc, #32]	@ (8007244 <prvProcessReceivedCommands+0x1d4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	1d39      	adds	r1, r7, #4
 8007228:	2200      	movs	r2, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f7fd fff4 	bl	8005218 <xQueueReceive>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	f47f af20 	bne.w	8007078 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	3730      	adds	r7, #48	@ 0x30
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200013c0 	.word	0x200013c0

08007248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800724e:	e04b      	b.n	80072e8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007250:	4b2f      	ldr	r3, [pc, #188]	@ (8007310 <prvSwitchTimerLists+0xc8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725a:	4b2d      	ldr	r3, [pc, #180]	@ (8007310 <prvSwitchTimerLists+0xc8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7fd fc71 	bl	8004b50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d031      	beq.n	80072e8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	429a      	cmp	r2, r3
 8007294:	d90e      	bls.n	80072b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007310 <prvSwitchTimerLists+0xc8>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4619      	mov	r1, r3
 80072ac:	4610      	mov	r0, r2
 80072ae:	f7fd fc16 	bl	8004ade <vListInsert>
 80072b2:	e019      	b.n	80072e8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072b4:	2300      	movs	r3, #0
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2300      	movs	r3, #0
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff fd4e 	bl	8006d60 <xTimerGenericCommand>
 80072c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	b672      	cpsid	i
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	b662      	cpsie	i
 80072e0:	603b      	str	r3, [r7, #0]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072e8:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <prvSwitchTimerLists+0xc8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1ae      	bne.n	8007250 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <prvSwitchTimerLists+0xc8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072f8:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <prvSwitchTimerLists+0xcc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a04      	ldr	r2, [pc, #16]	@ (8007310 <prvSwitchTimerLists+0xc8>)
 80072fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007300:	4a04      	ldr	r2, [pc, #16]	@ (8007314 <prvSwitchTimerLists+0xcc>)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6013      	str	r3, [r2, #0]
}
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200013b8 	.word	0x200013b8
 8007314:	200013bc 	.word	0x200013bc

08007318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800731e:	f000 f94d 	bl	80075bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007322:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d120      	bne.n	800736c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800732a:	4814      	ldr	r0, [pc, #80]	@ (800737c <prvCheckForValidListAndQueue+0x64>)
 800732c:	f7fd fb86 	bl	8004a3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007330:	4813      	ldr	r0, [pc, #76]	@ (8007380 <prvCheckForValidListAndQueue+0x68>)
 8007332:	f7fd fb83 	bl	8004a3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007336:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <prvCheckForValidListAndQueue+0x6c>)
 8007338:	4a10      	ldr	r2, [pc, #64]	@ (800737c <prvCheckForValidListAndQueue+0x64>)
 800733a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800733c:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <prvCheckForValidListAndQueue+0x70>)
 800733e:	4a10      	ldr	r2, [pc, #64]	@ (8007380 <prvCheckForValidListAndQueue+0x68>)
 8007340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007342:	2300      	movs	r3, #0
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4b11      	ldr	r3, [pc, #68]	@ (800738c <prvCheckForValidListAndQueue+0x74>)
 8007348:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <prvCheckForValidListAndQueue+0x78>)
 800734a:	2110      	movs	r1, #16
 800734c:	200a      	movs	r0, #10
 800734e:	f7fd fc95 	bl	8004c7c <xQueueGenericCreateStatic>
 8007352:	4603      	mov	r3, r0
 8007354:	4a08      	ldr	r2, [pc, #32]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 8007356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007358:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	490b      	ldr	r1, [pc, #44]	@ (8007394 <prvCheckForValidListAndQueue+0x7c>)
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe faa0 	bl	80058ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800736c:	f000 f95c 	bl	8007628 <vPortExitCritical>
}
 8007370:	bf00      	nop
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200013c0 	.word	0x200013c0
 800737c:	20001390 	.word	0x20001390
 8007380:	200013a4 	.word	0x200013a4
 8007384:	200013b8 	.word	0x200013b8
 8007388:	200013bc 	.word	0x200013bc
 800738c:	2000146c 	.word	0x2000146c
 8007390:	200013cc 	.word	0x200013cc
 8007394:	08008f20 	.word	0x08008f20

08007398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3b04      	subs	r3, #4
 80073a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3b04      	subs	r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073c8:	4a0c      	ldr	r2, [pc, #48]	@ (80073fc <pxPortInitialiseStack+0x64>)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b14      	subs	r3, #20
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3b04      	subs	r3, #4
 80073de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f06f 0202 	mvn.w	r2, #2
 80073e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3b20      	subs	r3, #32
 80073ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073ee:	68fb      	ldr	r3, [r7, #12]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	08007401 	.word	0x08007401

08007400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800740a:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <prvTaskExitError+0x60>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007412:	d00d      	beq.n	8007430 <prvTaskExitError+0x30>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	b672      	cpsid	i
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	b662      	cpsie	i
 8007428:	60fb      	str	r3, [r7, #12]
}
 800742a:	bf00      	nop
 800742c:	bf00      	nop
 800742e:	e7fd      	b.n	800742c <prvTaskExitError+0x2c>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	b672      	cpsid	i
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	b662      	cpsie	i
 8007444:	60bb      	str	r3, [r7, #8]
}
 8007446:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007448:	bf00      	nop
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0fc      	beq.n	800744a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	2000000c 	.word	0x2000000c
	...

08007470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007470:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <pxCurrentTCBConst2>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f380 8809 	msr	PSP, r0
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	4770      	bx	lr
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst2>:
 8007490:	20000e90 	.word	0x20000e90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007498:	4808      	ldr	r0, [pc, #32]	@ (80074bc <prvPortStartFirstTask+0x24>)
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f380 8808 	msr	MSP, r0
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8814 	msr	CONTROL, r0
 80074aa:	b662      	cpsie	i
 80074ac:	b661      	cpsie	f
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	df00      	svc	0
 80074b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ba:	bf00      	nop
 80074bc:	e000ed08 	.word	0xe000ed08

080074c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074c6:	4b37      	ldr	r3, [pc, #220]	@ (80075a4 <xPortStartScheduler+0xe4>)
 80074c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	22ff      	movs	r2, #255	@ 0xff
 80074d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b2f      	ldr	r3, [pc, #188]	@ (80075a8 <xPortStartScheduler+0xe8>)
 80074ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ee:	4b2f      	ldr	r3, [pc, #188]	@ (80075ac <xPortStartScheduler+0xec>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f4:	e009      	b.n	800750a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80074f6:	4b2d      	ldr	r3, [pc, #180]	@ (80075ac <xPortStartScheduler+0xec>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	4a2b      	ldr	r2, [pc, #172]	@ (80075ac <xPortStartScheduler+0xec>)
 80074fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b2db      	uxtb	r3, r3
 8007508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007512:	2b80      	cmp	r3, #128	@ 0x80
 8007514:	d0ef      	beq.n	80074f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007516:	4b25      	ldr	r3, [pc, #148]	@ (80075ac <xPortStartScheduler+0xec>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00d      	beq.n	800753e <xPortStartScheduler+0x7e>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	b672      	cpsid	i
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	b662      	cpsie	i
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800753e:	4b1b      	ldr	r3, [pc, #108]	@ (80075ac <xPortStartScheduler+0xec>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <xPortStartScheduler+0xec>)
 8007546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007548:	4b18      	ldr	r3, [pc, #96]	@ (80075ac <xPortStartScheduler+0xec>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007550:	4a16      	ldr	r2, [pc, #88]	@ (80075ac <xPortStartScheduler+0xec>)
 8007552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800755c:	4b14      	ldr	r3, [pc, #80]	@ (80075b0 <xPortStartScheduler+0xf0>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a13      	ldr	r2, [pc, #76]	@ (80075b0 <xPortStartScheduler+0xf0>)
 8007562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007568:	4b11      	ldr	r3, [pc, #68]	@ (80075b0 <xPortStartScheduler+0xf0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a10      	ldr	r2, [pc, #64]	@ (80075b0 <xPortStartScheduler+0xf0>)
 800756e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007574:	f000 f8dc 	bl	8007730 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <xPortStartScheduler+0xf4>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800757e:	f000 f8fb 	bl	8007778 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007582:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <xPortStartScheduler+0xf8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a0c      	ldr	r2, [pc, #48]	@ (80075b8 <xPortStartScheduler+0xf8>)
 8007588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800758c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800758e:	f7ff ff83 	bl	8007498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007592:	f7fe fd9d 	bl	80060d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007596:	f7ff ff33 	bl	8007400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	e000e400 	.word	0xe000e400
 80075a8:	200014bc 	.word	0x200014bc
 80075ac:	200014c0 	.word	0x200014c0
 80075b0:	e000ed20 	.word	0xe000ed20
 80075b4:	2000000c 	.word	0x2000000c
 80075b8:	e000ef34 	.word	0xe000ef34

080075bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	b672      	cpsid	i
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	b662      	cpsie	i
 80075d6:	607b      	str	r3, [r7, #4]
}
 80075d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075da:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <vPortEnterCritical+0x64>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3301      	adds	r3, #1
 80075e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007620 <vPortEnterCritical+0x64>)
 80075e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007620 <vPortEnterCritical+0x64>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d112      	bne.n	8007612 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <vPortEnterCritical+0x68>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <vPortEnterCritical+0x56>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	603b      	str	r3, [r7, #0]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <vPortEnterCritical+0x52>
	}
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	2000000c 	.word	0x2000000c
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800762e:	4b13      	ldr	r3, [pc, #76]	@ (800767c <vPortExitCritical+0x54>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10d      	bne.n	8007652 <vPortExitCritical+0x2a>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	b672      	cpsid	i
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	b662      	cpsie	i
 800764a:	607b      	str	r3, [r7, #4]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007652:	4b0a      	ldr	r3, [pc, #40]	@ (800767c <vPortExitCritical+0x54>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3b01      	subs	r3, #1
 8007658:	4a08      	ldr	r2, [pc, #32]	@ (800767c <vPortExitCritical+0x54>)
 800765a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800765c:	4b07      	ldr	r3, [pc, #28]	@ (800767c <vPortExitCritical+0x54>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <vPortExitCritical+0x48>
 8007664:	2300      	movs	r3, #0
 8007666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	2000000c 	.word	0x2000000c

08007680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007680:	f3ef 8009 	mrs	r0, PSP
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4b15      	ldr	r3, [pc, #84]	@ (80076e0 <pxCurrentTCBConst>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f01e 0f10 	tst.w	lr, #16
 8007690:	bf08      	it	eq
 8007692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f380 8811 	msr	BASEPRI, r0
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	f7fe fd0c 	bl	80060d0 <vTaskSwitchContext>
 80076b8:	f04f 0000 	mov.w	r0, #0
 80076bc:	f380 8811 	msr	BASEPRI, r0
 80076c0:	bc09      	pop	{r0, r3}
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	6808      	ldr	r0, [r1, #0]
 80076c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ca:	f01e 0f10 	tst.w	lr, #16
 80076ce:	bf08      	it	eq
 80076d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076d4:	f380 8809 	msr	PSP, r0
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop

080076e0 <pxCurrentTCBConst>:
 80076e0:	20000e90 	.word	0x20000e90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	b672      	cpsid	i
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	b662      	cpsie	i
 8007702:	607b      	str	r3, [r7, #4]
}
 8007704:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007706:	f7fe fc27 	bl	8005f58 <xTaskIncrementTick>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007710:	4b06      	ldr	r3, [pc, #24]	@ (800772c <SysTick_Handler+0x44>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	2300      	movs	r3, #0
 800771a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f383 8811 	msr	BASEPRI, r3
}
 8007722:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007734:	4b0b      	ldr	r3, [pc, #44]	@ (8007764 <vPortSetupTimerInterrupt+0x34>)
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800773a:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <vPortSetupTimerInterrupt+0x38>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007740:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <vPortSetupTimerInterrupt+0x3c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a0a      	ldr	r2, [pc, #40]	@ (8007770 <vPortSetupTimerInterrupt+0x40>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	099b      	lsrs	r3, r3, #6
 800774c:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <vPortSetupTimerInterrupt+0x44>)
 800774e:	3b01      	subs	r3, #1
 8007750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007752:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <vPortSetupTimerInterrupt+0x34>)
 8007754:	2207      	movs	r2, #7
 8007756:	601a      	str	r2, [r3, #0]
}
 8007758:	bf00      	nop
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	e000e010 	.word	0xe000e010
 8007768:	e000e018 	.word	0xe000e018
 800776c:	20000000 	.word	0x20000000
 8007770:	10624dd3 	.word	0x10624dd3
 8007774:	e000e014 	.word	0xe000e014

08007778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007778:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007788 <vPortEnableVFP+0x10>
 800777c:	6801      	ldr	r1, [r0, #0]
 800777e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007782:	6001      	str	r1, [r0, #0]
 8007784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007786:	bf00      	nop
 8007788:	e000ed88 	.word	0xe000ed88

0800778c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007792:	f3ef 8305 	mrs	r3, IPSR
 8007796:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d917      	bls.n	80077ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800779e:	4a1a      	ldr	r2, [pc, #104]	@ (8007808 <vPortValidateInterruptPriority+0x7c>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077a8:	4b18      	ldr	r3, [pc, #96]	@ (800780c <vPortValidateInterruptPriority+0x80>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	7afa      	ldrb	r2, [r7, #11]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d20d      	bcs.n	80077ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	b672      	cpsid	i
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	b662      	cpsie	i
 80077c6:	607b      	str	r3, [r7, #4]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077ce:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <vPortValidateInterruptPriority+0x84>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007814 <vPortValidateInterruptPriority+0x88>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d90d      	bls.n	80077fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	603b      	str	r3, [r7, #0]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <vPortValidateInterruptPriority+0x6a>
	}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	e000e3f0 	.word	0xe000e3f0
 800780c:	200014bc 	.word	0x200014bc
 8007810:	e000ed0c 	.word	0xe000ed0c
 8007814:	200014c0 	.word	0x200014c0

08007818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	@ 0x28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007824:	f7fe fada 	bl	8005ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007828:	4b5d      	ldr	r3, [pc, #372]	@ (80079a0 <pvPortMalloc+0x188>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007830:	f000 f920 	bl	8007a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007834:	4b5b      	ldr	r3, [pc, #364]	@ (80079a4 <pvPortMalloc+0x18c>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4013      	ands	r3, r2
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 8094 	bne.w	800796a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d020      	beq.n	800788a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007848:	2208      	movs	r2, #8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b00      	cmp	r3, #0
 8007858:	d017      	beq.n	800788a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f023 0307 	bic.w	r3, r3, #7
 8007860:	3308      	adds	r3, #8
 8007862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00d      	beq.n	800788a <pvPortMalloc+0x72>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	b672      	cpsid	i
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	b662      	cpsie	i
 8007882:	617b      	str	r3, [r7, #20]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d06c      	beq.n	800796a <pvPortMalloc+0x152>
 8007890:	4b45      	ldr	r3, [pc, #276]	@ (80079a8 <pvPortMalloc+0x190>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d867      	bhi.n	800796a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800789a:	4b44      	ldr	r3, [pc, #272]	@ (80079ac <pvPortMalloc+0x194>)
 800789c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800789e:	4b43      	ldr	r3, [pc, #268]	@ (80079ac <pvPortMalloc+0x194>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078a4:	e004      	b.n	80078b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d903      	bls.n	80078c2 <pvPortMalloc+0xaa>
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f1      	bne.n	80078a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078c2:	4b37      	ldr	r3, [pc, #220]	@ (80079a0 <pvPortMalloc+0x188>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d04e      	beq.n	800796a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2208      	movs	r2, #8
 80078d2:	4413      	add	r3, r2
 80078d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1ad2      	subs	r2, r2, r3
 80078e6:	2308      	movs	r3, #8
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d922      	bls.n	8007934 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00d      	beq.n	800791c <pvPortMalloc+0x104>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	613b      	str	r3, [r7, #16]
}
 8007916:	bf00      	nop
 8007918:	bf00      	nop
 800791a:	e7fd      	b.n	8007918 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	1ad2      	subs	r2, r2, r3
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800792e:	69b8      	ldr	r0, [r7, #24]
 8007930:	f000 f904 	bl	8007b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007934:	4b1c      	ldr	r3, [pc, #112]	@ (80079a8 <pvPortMalloc+0x190>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	4a1a      	ldr	r2, [pc, #104]	@ (80079a8 <pvPortMalloc+0x190>)
 8007940:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007942:	4b19      	ldr	r3, [pc, #100]	@ (80079a8 <pvPortMalloc+0x190>)
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <pvPortMalloc+0x198>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d203      	bcs.n	8007956 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800794e:	4b16      	ldr	r3, [pc, #88]	@ (80079a8 <pvPortMalloc+0x190>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a17      	ldr	r2, [pc, #92]	@ (80079b0 <pvPortMalloc+0x198>)
 8007954:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	4b12      	ldr	r3, [pc, #72]	@ (80079a4 <pvPortMalloc+0x18c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	431a      	orrs	r2, r3
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800796a:	f7fe fa45 	bl	8005df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00d      	beq.n	8007994 <pvPortMalloc+0x17c>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	b672      	cpsid	i
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	b662      	cpsie	i
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <pvPortMalloc+0x178>
	return pvReturn;
 8007994:	69fb      	ldr	r3, [r7, #28]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3728      	adds	r7, #40	@ 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20019b6c 	.word	0x20019b6c
 80079a4:	20019b78 	.word	0x20019b78
 80079a8:	20019b70 	.word	0x20019b70
 80079ac:	20019b64 	.word	0x20019b64
 80079b0:	20019b74 	.word	0x20019b74

080079b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d04e      	beq.n	8007a64 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079c6:	2308      	movs	r3, #8
 80079c8:	425b      	negs	r3, r3
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4413      	add	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	4b24      	ldr	r3, [pc, #144]	@ (8007a6c <vPortFree+0xb8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10d      	bne.n	80079fe <vPortFree+0x4a>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e6:	b672      	cpsid	i
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	b662      	cpsie	i
 80079f6:	60fb      	str	r3, [r7, #12]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <vPortFree+0x6e>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	b672      	cpsid	i
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	b662      	cpsie	i
 8007a1a:	60bb      	str	r3, [r7, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	e7fd      	b.n	8007a1e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	4b11      	ldr	r3, [pc, #68]	@ (8007a6c <vPortFree+0xb8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d019      	beq.n	8007a64 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d115      	bne.n	8007a64 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <vPortFree+0xb8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	401a      	ands	r2, r3
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a48:	f7fe f9c8 	bl	8005ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <vPortFree+0xbc>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4413      	add	r3, r2
 8007a56:	4a06      	ldr	r2, [pc, #24]	@ (8007a70 <vPortFree+0xbc>)
 8007a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a5a:	6938      	ldr	r0, [r7, #16]
 8007a5c:	f000 f86e 	bl	8007b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a60:	f7fe f9ca 	bl	8005df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a64:	bf00      	nop
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20019b78 	.word	0x20019b78
 8007a70:	20019b70 	.word	0x20019b70

08007a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a7a:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <prvHeapInit+0xac>)
 8007a7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a7e:	4b29      	ldr	r3, [pc, #164]	@ (8007b24 <prvHeapInit+0xb0>)
 8007a80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00c      	beq.n	8007aa6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3307      	adds	r3, #7
 8007a90:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 0307 	bic.w	r3, r3, #7
 8007a98:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	4a20      	ldr	r2, [pc, #128]	@ (8007b24 <prvHeapInit+0xb0>)
 8007aa2:	4413      	add	r3, r2
 8007aa4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8007b28 <prvHeapInit+0xb4>)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b28 <prvHeapInit+0xb4>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4413      	add	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007abe:	2208      	movs	r2, #8
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4a16      	ldr	r2, [pc, #88]	@ (8007b2c <prvHeapInit+0xb8>)
 8007ad2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ad4:	4b15      	ldr	r3, [pc, #84]	@ (8007b2c <prvHeapInit+0xb8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007adc:	4b13      	ldr	r3, [pc, #76]	@ (8007b2c <prvHeapInit+0xb8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007af2:	4b0e      	ldr	r3, [pc, #56]	@ (8007b2c <prvHeapInit+0xb8>)
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4a0c      	ldr	r2, [pc, #48]	@ (8007b30 <prvHeapInit+0xbc>)
 8007b00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4a0b      	ldr	r2, [pc, #44]	@ (8007b34 <prvHeapInit+0xc0>)
 8007b08:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b38 <prvHeapInit+0xc4>)
 8007b0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b10:	601a      	str	r2, [r3, #0]
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	000186a0 	.word	0x000186a0
 8007b24:	200014c4 	.word	0x200014c4
 8007b28:	20019b64 	.word	0x20019b64
 8007b2c:	20019b6c 	.word	0x20019b6c
 8007b30:	20019b74 	.word	0x20019b74
 8007b34:	20019b70 	.word	0x20019b70
 8007b38:	20019b78 	.word	0x20019b78

08007b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b44:	4b28      	ldr	r3, [pc, #160]	@ (8007be8 <prvInsertBlockIntoFreeList+0xac>)
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	e002      	b.n	8007b50 <prvInsertBlockIntoFreeList+0x14>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d8f7      	bhi.n	8007b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4413      	add	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d108      	bne.n	8007b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	441a      	add	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d118      	bne.n	8007bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b15      	ldr	r3, [pc, #84]	@ (8007bec <prvInsertBlockIntoFreeList+0xb0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d00d      	beq.n	8007bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	441a      	add	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e008      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bba:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <prvInsertBlockIntoFreeList+0xb0>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e003      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d002      	beq.n	8007bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20019b64 	.word	0x20019b64
 8007bec:	20019b6c 	.word	0x20019b6c

08007bf0 <__sflush_r>:
 8007bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	0716      	lsls	r6, r2, #28
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	d454      	bmi.n	8007caa <__sflush_r+0xba>
 8007c00:	684b      	ldr	r3, [r1, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dc02      	bgt.n	8007c0c <__sflush_r+0x1c>
 8007c06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dd48      	ble.n	8007c9e <__sflush_r+0xae>
 8007c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	d045      	beq.n	8007c9e <__sflush_r+0xae>
 8007c12:	2300      	movs	r3, #0
 8007c14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c18:	682f      	ldr	r7, [r5, #0]
 8007c1a:	6a21      	ldr	r1, [r4, #32]
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	d030      	beq.n	8007c82 <__sflush_r+0x92>
 8007c20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	0759      	lsls	r1, r3, #29
 8007c26:	d505      	bpl.n	8007c34 <__sflush_r+0x44>
 8007c28:	6863      	ldr	r3, [r4, #4]
 8007c2a:	1ad2      	subs	r2, r2, r3
 8007c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c2e:	b10b      	cbz	r3, 8007c34 <__sflush_r+0x44>
 8007c30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c32:	1ad2      	subs	r2, r2, r3
 8007c34:	2300      	movs	r3, #0
 8007c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c38:	6a21      	ldr	r1, [r4, #32]
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b0      	blx	r6
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	d106      	bne.n	8007c52 <__sflush_r+0x62>
 8007c44:	6829      	ldr	r1, [r5, #0]
 8007c46:	291d      	cmp	r1, #29
 8007c48:	d82b      	bhi.n	8007ca2 <__sflush_r+0xb2>
 8007c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8007cf4 <__sflush_r+0x104>)
 8007c4c:	410a      	asrs	r2, r1
 8007c4e:	07d6      	lsls	r6, r2, #31
 8007c50:	d427      	bmi.n	8007ca2 <__sflush_r+0xb2>
 8007c52:	2200      	movs	r2, #0
 8007c54:	6062      	str	r2, [r4, #4]
 8007c56:	04d9      	lsls	r1, r3, #19
 8007c58:	6922      	ldr	r2, [r4, #16]
 8007c5a:	6022      	str	r2, [r4, #0]
 8007c5c:	d504      	bpl.n	8007c68 <__sflush_r+0x78>
 8007c5e:	1c42      	adds	r2, r0, #1
 8007c60:	d101      	bne.n	8007c66 <__sflush_r+0x76>
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	b903      	cbnz	r3, 8007c68 <__sflush_r+0x78>
 8007c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c6a:	602f      	str	r7, [r5, #0]
 8007c6c:	b1b9      	cbz	r1, 8007c9e <__sflush_r+0xae>
 8007c6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c72:	4299      	cmp	r1, r3
 8007c74:	d002      	beq.n	8007c7c <__sflush_r+0x8c>
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 fb86 	bl	8008388 <_free_r>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c80:	e00d      	b.n	8007c9e <__sflush_r+0xae>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	4602      	mov	r2, r0
 8007c8a:	1c50      	adds	r0, r2, #1
 8007c8c:	d1c9      	bne.n	8007c22 <__sflush_r+0x32>
 8007c8e:	682b      	ldr	r3, [r5, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0c6      	beq.n	8007c22 <__sflush_r+0x32>
 8007c94:	2b1d      	cmp	r3, #29
 8007c96:	d001      	beq.n	8007c9c <__sflush_r+0xac>
 8007c98:	2b16      	cmp	r3, #22
 8007c9a:	d11e      	bne.n	8007cda <__sflush_r+0xea>
 8007c9c:	602f      	str	r7, [r5, #0]
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e022      	b.n	8007ce8 <__sflush_r+0xf8>
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	e01b      	b.n	8007ce2 <__sflush_r+0xf2>
 8007caa:	690f      	ldr	r7, [r1, #16]
 8007cac:	2f00      	cmp	r7, #0
 8007cae:	d0f6      	beq.n	8007c9e <__sflush_r+0xae>
 8007cb0:	0793      	lsls	r3, r2, #30
 8007cb2:	680e      	ldr	r6, [r1, #0]
 8007cb4:	bf08      	it	eq
 8007cb6:	694b      	ldreq	r3, [r1, #20]
 8007cb8:	600f      	str	r7, [r1, #0]
 8007cba:	bf18      	it	ne
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	eba6 0807 	sub.w	r8, r6, r7
 8007cc2:	608b      	str	r3, [r1, #8]
 8007cc4:	f1b8 0f00 	cmp.w	r8, #0
 8007cc8:	dde9      	ble.n	8007c9e <__sflush_r+0xae>
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cce:	4643      	mov	r3, r8
 8007cd0:	463a      	mov	r2, r7
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b0      	blx	r6
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	dc08      	bgt.n	8007cec <__sflush_r+0xfc>
 8007cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cec:	4407      	add	r7, r0
 8007cee:	eba8 0800 	sub.w	r8, r8, r0
 8007cf2:	e7e7      	b.n	8007cc4 <__sflush_r+0xd4>
 8007cf4:	dfbffffe 	.word	0xdfbffffe

08007cf8 <_fflush_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	690b      	ldr	r3, [r1, #16]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	b913      	cbnz	r3, 8007d08 <_fflush_r+0x10>
 8007d02:	2500      	movs	r5, #0
 8007d04:	4628      	mov	r0, r5
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	b118      	cbz	r0, 8007d12 <_fflush_r+0x1a>
 8007d0a:	6a03      	ldr	r3, [r0, #32]
 8007d0c:	b90b      	cbnz	r3, 8007d12 <_fflush_r+0x1a>
 8007d0e:	f000 f8bb 	bl	8007e88 <__sinit>
 8007d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0f3      	beq.n	8007d02 <_fflush_r+0xa>
 8007d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d1c:	07d0      	lsls	r0, r2, #31
 8007d1e:	d404      	bmi.n	8007d2a <_fflush_r+0x32>
 8007d20:	0599      	lsls	r1, r3, #22
 8007d22:	d402      	bmi.n	8007d2a <_fflush_r+0x32>
 8007d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d26:	f000 fb1e 	bl	8008366 <__retarget_lock_acquire_recursive>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f7ff ff5f 	bl	8007bf0 <__sflush_r>
 8007d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d34:	07da      	lsls	r2, r3, #31
 8007d36:	4605      	mov	r5, r0
 8007d38:	d4e4      	bmi.n	8007d04 <_fflush_r+0xc>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	059b      	lsls	r3, r3, #22
 8007d3e:	d4e1      	bmi.n	8007d04 <_fflush_r+0xc>
 8007d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d42:	f000 fb11 	bl	8008368 <__retarget_lock_release_recursive>
 8007d46:	e7dd      	b.n	8007d04 <_fflush_r+0xc>

08007d48 <fflush>:
 8007d48:	4601      	mov	r1, r0
 8007d4a:	b920      	cbnz	r0, 8007d56 <fflush+0xe>
 8007d4c:	4a04      	ldr	r2, [pc, #16]	@ (8007d60 <fflush+0x18>)
 8007d4e:	4905      	ldr	r1, [pc, #20]	@ (8007d64 <fflush+0x1c>)
 8007d50:	4805      	ldr	r0, [pc, #20]	@ (8007d68 <fflush+0x20>)
 8007d52:	f000 b8b1 	b.w	8007eb8 <_fwalk_sglue>
 8007d56:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <fflush+0x24>)
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	f7ff bfcd 	b.w	8007cf8 <_fflush_r>
 8007d5e:	bf00      	nop
 8007d60:	20000010 	.word	0x20000010
 8007d64:	08007cf9 	.word	0x08007cf9
 8007d68:	20000020 	.word	0x20000020
 8007d6c:	2000001c 	.word	0x2000001c

08007d70 <std>:
 8007d70:	2300      	movs	r3, #0
 8007d72:	b510      	push	{r4, lr}
 8007d74:	4604      	mov	r4, r0
 8007d76:	e9c0 3300 	strd	r3, r3, [r0]
 8007d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d7e:	6083      	str	r3, [r0, #8]
 8007d80:	8181      	strh	r1, [r0, #12]
 8007d82:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d84:	81c2      	strh	r2, [r0, #14]
 8007d86:	6183      	str	r3, [r0, #24]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	305c      	adds	r0, #92	@ 0x5c
 8007d8e:	f000 fa1b 	bl	80081c8 <memset>
 8007d92:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <std+0x58>)
 8007d94:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d96:	4b0d      	ldr	r3, [pc, #52]	@ (8007dcc <std+0x5c>)
 8007d98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <std+0x60>)
 8007d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <std+0x64>)
 8007da0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <std+0x68>)
 8007da4:	6224      	str	r4, [r4, #32]
 8007da6:	429c      	cmp	r4, r3
 8007da8:	d006      	beq.n	8007db8 <std+0x48>
 8007daa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dae:	4294      	cmp	r4, r2
 8007db0:	d002      	beq.n	8007db8 <std+0x48>
 8007db2:	33d0      	adds	r3, #208	@ 0xd0
 8007db4:	429c      	cmp	r4, r3
 8007db6:	d105      	bne.n	8007dc4 <std+0x54>
 8007db8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	f000 bad0 	b.w	8008364 <__retarget_lock_init_recursive>
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	bf00      	nop
 8007dc8:	08008019 	.word	0x08008019
 8007dcc:	0800803b 	.word	0x0800803b
 8007dd0:	08008073 	.word	0x08008073
 8007dd4:	08008097 	.word	0x08008097
 8007dd8:	20019b7c 	.word	0x20019b7c

08007ddc <stdio_exit_handler>:
 8007ddc:	4a02      	ldr	r2, [pc, #8]	@ (8007de8 <stdio_exit_handler+0xc>)
 8007dde:	4903      	ldr	r1, [pc, #12]	@ (8007dec <stdio_exit_handler+0x10>)
 8007de0:	4803      	ldr	r0, [pc, #12]	@ (8007df0 <stdio_exit_handler+0x14>)
 8007de2:	f000 b869 	b.w	8007eb8 <_fwalk_sglue>
 8007de6:	bf00      	nop
 8007de8:	20000010 	.word	0x20000010
 8007dec:	08007cf9 	.word	0x08007cf9
 8007df0:	20000020 	.word	0x20000020

08007df4 <cleanup_stdio>:
 8007df4:	6841      	ldr	r1, [r0, #4]
 8007df6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e28 <cleanup_stdio+0x34>)
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	d001      	beq.n	8007e04 <cleanup_stdio+0x10>
 8007e00:	f7ff ff7a 	bl	8007cf8 <_fflush_r>
 8007e04:	68a1      	ldr	r1, [r4, #8]
 8007e06:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <cleanup_stdio+0x38>)
 8007e08:	4299      	cmp	r1, r3
 8007e0a:	d002      	beq.n	8007e12 <cleanup_stdio+0x1e>
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f7ff ff73 	bl	8007cf8 <_fflush_r>
 8007e12:	68e1      	ldr	r1, [r4, #12]
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <cleanup_stdio+0x3c>)
 8007e16:	4299      	cmp	r1, r3
 8007e18:	d004      	beq.n	8007e24 <cleanup_stdio+0x30>
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e20:	f7ff bf6a 	b.w	8007cf8 <_fflush_r>
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	20019b7c 	.word	0x20019b7c
 8007e2c:	20019be4 	.word	0x20019be4
 8007e30:	20019c4c 	.word	0x20019c4c

08007e34 <global_stdio_init.part.0>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <global_stdio_init.part.0+0x30>)
 8007e38:	4c0b      	ldr	r4, [pc, #44]	@ (8007e68 <global_stdio_init.part.0+0x34>)
 8007e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e6c <global_stdio_init.part.0+0x38>)
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	2200      	movs	r2, #0
 8007e42:	2104      	movs	r1, #4
 8007e44:	f7ff ff94 	bl	8007d70 <std>
 8007e48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	2109      	movs	r1, #9
 8007e50:	f7ff ff8e 	bl	8007d70 <std>
 8007e54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e58:	2202      	movs	r2, #2
 8007e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e5e:	2112      	movs	r1, #18
 8007e60:	f7ff bf86 	b.w	8007d70 <std>
 8007e64:	20019cb4 	.word	0x20019cb4
 8007e68:	20019b7c 	.word	0x20019b7c
 8007e6c:	08007ddd 	.word	0x08007ddd

08007e70 <__sfp_lock_acquire>:
 8007e70:	4801      	ldr	r0, [pc, #4]	@ (8007e78 <__sfp_lock_acquire+0x8>)
 8007e72:	f000 ba78 	b.w	8008366 <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	20019cbd 	.word	0x20019cbd

08007e7c <__sfp_lock_release>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	@ (8007e84 <__sfp_lock_release+0x8>)
 8007e7e:	f000 ba73 	b.w	8008368 <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	20019cbd 	.word	0x20019cbd

08007e88 <__sinit>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	f7ff fff0 	bl	8007e70 <__sfp_lock_acquire>
 8007e90:	6a23      	ldr	r3, [r4, #32]
 8007e92:	b11b      	cbz	r3, 8007e9c <__sinit+0x14>
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	f7ff bff0 	b.w	8007e7c <__sfp_lock_release>
 8007e9c:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <__sinit+0x28>)
 8007e9e:	6223      	str	r3, [r4, #32]
 8007ea0:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <__sinit+0x2c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f5      	bne.n	8007e94 <__sinit+0xc>
 8007ea8:	f7ff ffc4 	bl	8007e34 <global_stdio_init.part.0>
 8007eac:	e7f2      	b.n	8007e94 <__sinit+0xc>
 8007eae:	bf00      	nop
 8007eb0:	08007df5 	.word	0x08007df5
 8007eb4:	20019cb4 	.word	0x20019cb4

08007eb8 <_fwalk_sglue>:
 8007eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4688      	mov	r8, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8007ecc:	d505      	bpl.n	8007eda <_fwalk_sglue+0x22>
 8007ece:	6824      	ldr	r4, [r4, #0]
 8007ed0:	2c00      	cmp	r4, #0
 8007ed2:	d1f7      	bne.n	8007ec4 <_fwalk_sglue+0xc>
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d907      	bls.n	8007ef0 <_fwalk_sglue+0x38>
 8007ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	d003      	beq.n	8007ef0 <_fwalk_sglue+0x38>
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	4306      	orrs	r6, r0
 8007ef0:	3568      	adds	r5, #104	@ 0x68
 8007ef2:	e7e9      	b.n	8007ec8 <_fwalk_sglue+0x10>

08007ef4 <_puts_r>:
 8007ef4:	6a03      	ldr	r3, [r0, #32]
 8007ef6:	b570      	push	{r4, r5, r6, lr}
 8007ef8:	6884      	ldr	r4, [r0, #8]
 8007efa:	4605      	mov	r5, r0
 8007efc:	460e      	mov	r6, r1
 8007efe:	b90b      	cbnz	r3, 8007f04 <_puts_r+0x10>
 8007f00:	f7ff ffc2 	bl	8007e88 <__sinit>
 8007f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f06:	07db      	lsls	r3, r3, #31
 8007f08:	d405      	bmi.n	8007f16 <_puts_r+0x22>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	0598      	lsls	r0, r3, #22
 8007f0e:	d402      	bmi.n	8007f16 <_puts_r+0x22>
 8007f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f12:	f000 fa28 	bl	8008366 <__retarget_lock_acquire_recursive>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	0719      	lsls	r1, r3, #28
 8007f1a:	d502      	bpl.n	8007f22 <_puts_r+0x2e>
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d135      	bne.n	8007f8e <_puts_r+0x9a>
 8007f22:	4621      	mov	r1, r4
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 f8f9 	bl	800811c <__swsetup_r>
 8007f2a:	b380      	cbz	r0, 8007f8e <_puts_r+0x9a>
 8007f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8007f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f32:	07da      	lsls	r2, r3, #31
 8007f34:	d405      	bmi.n	8007f42 <_puts_r+0x4e>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	059b      	lsls	r3, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_puts_r+0x4e>
 8007f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3e:	f000 fa13 	bl	8008368 <__retarget_lock_release_recursive>
 8007f42:	4628      	mov	r0, r5
 8007f44:	bd70      	pop	{r4, r5, r6, pc}
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da04      	bge.n	8007f54 <_puts_r+0x60>
 8007f4a:	69a2      	ldr	r2, [r4, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	dc17      	bgt.n	8007f80 <_puts_r+0x8c>
 8007f50:	290a      	cmp	r1, #10
 8007f52:	d015      	beq.n	8007f80 <_puts_r+0x8c>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	6022      	str	r2, [r4, #0]
 8007f5a:	7019      	strb	r1, [r3, #0]
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f62:	3b01      	subs	r3, #1
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d1ed      	bne.n	8007f46 <_puts_r+0x52>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da11      	bge.n	8007f92 <_puts_r+0x9e>
 8007f6e:	4622      	mov	r2, r4
 8007f70:	210a      	movs	r1, #10
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 f893 	bl	800809e <__swbuf_r>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d0d7      	beq.n	8007f2c <_puts_r+0x38>
 8007f7c:	250a      	movs	r5, #10
 8007f7e:	e7d7      	b.n	8007f30 <_puts_r+0x3c>
 8007f80:	4622      	mov	r2, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f88b 	bl	800809e <__swbuf_r>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d1e7      	bne.n	8007f5c <_puts_r+0x68>
 8007f8c:	e7ce      	b.n	8007f2c <_puts_r+0x38>
 8007f8e:	3e01      	subs	r6, #1
 8007f90:	e7e4      	b.n	8007f5c <_puts_r+0x68>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	6022      	str	r2, [r4, #0]
 8007f98:	220a      	movs	r2, #10
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	e7ee      	b.n	8007f7c <_puts_r+0x88>
	...

08007fa0 <puts>:
 8007fa0:	4b02      	ldr	r3, [pc, #8]	@ (8007fac <puts+0xc>)
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f7ff bfa5 	b.w	8007ef4 <_puts_r>
 8007faa:	bf00      	nop
 8007fac:	2000001c 	.word	0x2000001c

08007fb0 <sniprintf>:
 8007fb0:	b40c      	push	{r2, r3}
 8007fb2:	b530      	push	{r4, r5, lr}
 8007fb4:	4b17      	ldr	r3, [pc, #92]	@ (8008014 <sniprintf+0x64>)
 8007fb6:	1e0c      	subs	r4, r1, #0
 8007fb8:	681d      	ldr	r5, [r3, #0]
 8007fba:	b09d      	sub	sp, #116	@ 0x74
 8007fbc:	da08      	bge.n	8007fd0 <sniprintf+0x20>
 8007fbe:	238b      	movs	r3, #139	@ 0x8b
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc6:	b01d      	add	sp, #116	@ 0x74
 8007fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fcc:	b002      	add	sp, #8
 8007fce:	4770      	bx	lr
 8007fd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fd8:	bf14      	ite	ne
 8007fda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fde:	4623      	moveq	r3, r4
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	9307      	str	r3, [sp, #28]
 8007fe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fe8:	9002      	str	r0, [sp, #8]
 8007fea:	9006      	str	r0, [sp, #24]
 8007fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ff0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ff2:	ab21      	add	r3, sp, #132	@ 0x84
 8007ff4:	a902      	add	r1, sp, #8
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	f000 fb19 	bl	8008630 <_svfiprintf_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	bfbc      	itt	lt
 8008002:	238b      	movlt	r3, #139	@ 0x8b
 8008004:	602b      	strlt	r3, [r5, #0]
 8008006:	2c00      	cmp	r4, #0
 8008008:	d0dd      	beq.n	8007fc6 <sniprintf+0x16>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e7d9      	b.n	8007fc6 <sniprintf+0x16>
 8008012:	bf00      	nop
 8008014:	2000001c 	.word	0x2000001c

08008018 <__sread>:
 8008018:	b510      	push	{r4, lr}
 800801a:	460c      	mov	r4, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	f000 f952 	bl	80082c8 <_read_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	bfab      	itete	ge
 8008028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800802a:	89a3      	ldrhlt	r3, [r4, #12]
 800802c:	181b      	addge	r3, r3, r0
 800802e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008032:	bfac      	ite	ge
 8008034:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008036:	81a3      	strhlt	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__swrite>:
 800803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	461f      	mov	r7, r3
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	05db      	lsls	r3, r3, #23
 8008044:	4605      	mov	r5, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4616      	mov	r6, r2
 800804a:	d505      	bpl.n	8008058 <__swrite+0x1e>
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	2302      	movs	r3, #2
 8008052:	2200      	movs	r2, #0
 8008054:	f000 f926 	bl	80082a4 <_lseek_r>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800805e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	f000 b93d 	b.w	80082ec <_write_r>

08008072 <__sseek>:
 8008072:	b510      	push	{r4, lr}
 8008074:	460c      	mov	r4, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 f913 	bl	80082a4 <_lseek_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	bf15      	itete	ne
 8008084:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800808a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800808e:	81a3      	strheq	r3, [r4, #12]
 8008090:	bf18      	it	ne
 8008092:	81a3      	strhne	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__sclose>:
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 b89d 	b.w	80081d8 <_close_r>

0800809e <__swbuf_r>:
 800809e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a0:	460e      	mov	r6, r1
 80080a2:	4614      	mov	r4, r2
 80080a4:	4605      	mov	r5, r0
 80080a6:	b118      	cbz	r0, 80080b0 <__swbuf_r+0x12>
 80080a8:	6a03      	ldr	r3, [r0, #32]
 80080aa:	b90b      	cbnz	r3, 80080b0 <__swbuf_r+0x12>
 80080ac:	f7ff feec 	bl	8007e88 <__sinit>
 80080b0:	69a3      	ldr	r3, [r4, #24]
 80080b2:	60a3      	str	r3, [r4, #8]
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	071a      	lsls	r2, r3, #28
 80080b8:	d501      	bpl.n	80080be <__swbuf_r+0x20>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	b943      	cbnz	r3, 80080d0 <__swbuf_r+0x32>
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 f82b 	bl	800811c <__swsetup_r>
 80080c6:	b118      	cbz	r0, 80080d0 <__swbuf_r+0x32>
 80080c8:	f04f 37ff 	mov.w	r7, #4294967295
 80080cc:	4638      	mov	r0, r7
 80080ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	6922      	ldr	r2, [r4, #16]
 80080d4:	1a98      	subs	r0, r3, r2
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	b2f6      	uxtb	r6, r6
 80080da:	4283      	cmp	r3, r0
 80080dc:	4637      	mov	r7, r6
 80080de:	dc05      	bgt.n	80080ec <__swbuf_r+0x4e>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4628      	mov	r0, r5
 80080e4:	f7ff fe08 	bl	8007cf8 <_fflush_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1ed      	bne.n	80080c8 <__swbuf_r+0x2a>
 80080ec:	68a3      	ldr	r3, [r4, #8]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	60a3      	str	r3, [r4, #8]
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	6022      	str	r2, [r4, #0]
 80080f8:	701e      	strb	r6, [r3, #0]
 80080fa:	6962      	ldr	r2, [r4, #20]
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	429a      	cmp	r2, r3
 8008100:	d004      	beq.n	800810c <__swbuf_r+0x6e>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	07db      	lsls	r3, r3, #31
 8008106:	d5e1      	bpl.n	80080cc <__swbuf_r+0x2e>
 8008108:	2e0a      	cmp	r6, #10
 800810a:	d1df      	bne.n	80080cc <__swbuf_r+0x2e>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f7ff fdf2 	bl	8007cf8 <_fflush_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	d0d9      	beq.n	80080cc <__swbuf_r+0x2e>
 8008118:	e7d6      	b.n	80080c8 <__swbuf_r+0x2a>
	...

0800811c <__swsetup_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4b29      	ldr	r3, [pc, #164]	@ (80081c4 <__swsetup_r+0xa8>)
 8008120:	4605      	mov	r5, r0
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	460c      	mov	r4, r1
 8008126:	b118      	cbz	r0, 8008130 <__swsetup_r+0x14>
 8008128:	6a03      	ldr	r3, [r0, #32]
 800812a:	b90b      	cbnz	r3, 8008130 <__swsetup_r+0x14>
 800812c:	f7ff feac 	bl	8007e88 <__sinit>
 8008130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008134:	0719      	lsls	r1, r3, #28
 8008136:	d422      	bmi.n	800817e <__swsetup_r+0x62>
 8008138:	06da      	lsls	r2, r3, #27
 800813a:	d407      	bmi.n	800814c <__swsetup_r+0x30>
 800813c:	2209      	movs	r2, #9
 800813e:	602a      	str	r2, [r5, #0]
 8008140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	f04f 30ff 	mov.w	r0, #4294967295
 800814a:	e033      	b.n	80081b4 <__swsetup_r+0x98>
 800814c:	0758      	lsls	r0, r3, #29
 800814e:	d512      	bpl.n	8008176 <__swsetup_r+0x5a>
 8008150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008152:	b141      	cbz	r1, 8008166 <__swsetup_r+0x4a>
 8008154:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008158:	4299      	cmp	r1, r3
 800815a:	d002      	beq.n	8008162 <__swsetup_r+0x46>
 800815c:	4628      	mov	r0, r5
 800815e:	f000 f913 	bl	8008388 <_free_r>
 8008162:	2300      	movs	r3, #0
 8008164:	6363      	str	r3, [r4, #52]	@ 0x34
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	2300      	movs	r3, #0
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f043 0308 	orr.w	r3, r3, #8
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b94b      	cbnz	r3, 8008196 <__swsetup_r+0x7a>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818c:	d003      	beq.n	8008196 <__swsetup_r+0x7a>
 800818e:	4621      	mov	r1, r4
 8008190:	4628      	mov	r0, r5
 8008192:	f000 fcfd 	bl	8008b90 <__smakebuf_r>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	f013 0201 	ands.w	r2, r3, #1
 800819e:	d00a      	beq.n	80081b6 <__swsetup_r+0x9a>
 80081a0:	2200      	movs	r2, #0
 80081a2:	60a2      	str	r2, [r4, #8]
 80081a4:	6962      	ldr	r2, [r4, #20]
 80081a6:	4252      	negs	r2, r2
 80081a8:	61a2      	str	r2, [r4, #24]
 80081aa:	6922      	ldr	r2, [r4, #16]
 80081ac:	b942      	cbnz	r2, 80081c0 <__swsetup_r+0xa4>
 80081ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081b2:	d1c5      	bne.n	8008140 <__swsetup_r+0x24>
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	0799      	lsls	r1, r3, #30
 80081b8:	bf58      	it	pl
 80081ba:	6962      	ldrpl	r2, [r4, #20]
 80081bc:	60a2      	str	r2, [r4, #8]
 80081be:	e7f4      	b.n	80081aa <__swsetup_r+0x8e>
 80081c0:	2000      	movs	r0, #0
 80081c2:	e7f7      	b.n	80081b4 <__swsetup_r+0x98>
 80081c4:	2000001c 	.word	0x2000001c

080081c8 <memset>:
 80081c8:	4402      	add	r2, r0
 80081ca:	4603      	mov	r3, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <_close_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	@ (80081f4 <_close_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f9 f981 	bl	80014ea <_close>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_close_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_close_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20019cb8 	.word	0x20019cb8

080081f8 <_reclaim_reent>:
 80081f8:	4b29      	ldr	r3, [pc, #164]	@ (80082a0 <_reclaim_reent+0xa8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4283      	cmp	r3, r0
 80081fe:	b570      	push	{r4, r5, r6, lr}
 8008200:	4604      	mov	r4, r0
 8008202:	d04b      	beq.n	800829c <_reclaim_reent+0xa4>
 8008204:	69c3      	ldr	r3, [r0, #28]
 8008206:	b1ab      	cbz	r3, 8008234 <_reclaim_reent+0x3c>
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	b16b      	cbz	r3, 8008228 <_reclaim_reent+0x30>
 800820c:	2500      	movs	r5, #0
 800820e:	69e3      	ldr	r3, [r4, #28]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	5959      	ldr	r1, [r3, r5]
 8008214:	2900      	cmp	r1, #0
 8008216:	d13b      	bne.n	8008290 <_reclaim_reent+0x98>
 8008218:	3504      	adds	r5, #4
 800821a:	2d80      	cmp	r5, #128	@ 0x80
 800821c:	d1f7      	bne.n	800820e <_reclaim_reent+0x16>
 800821e:	69e3      	ldr	r3, [r4, #28]
 8008220:	4620      	mov	r0, r4
 8008222:	68d9      	ldr	r1, [r3, #12]
 8008224:	f000 f8b0 	bl	8008388 <_free_r>
 8008228:	69e3      	ldr	r3, [r4, #28]
 800822a:	6819      	ldr	r1, [r3, #0]
 800822c:	b111      	cbz	r1, 8008234 <_reclaim_reent+0x3c>
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f8aa 	bl	8008388 <_free_r>
 8008234:	6961      	ldr	r1, [r4, #20]
 8008236:	b111      	cbz	r1, 800823e <_reclaim_reent+0x46>
 8008238:	4620      	mov	r0, r4
 800823a:	f000 f8a5 	bl	8008388 <_free_r>
 800823e:	69e1      	ldr	r1, [r4, #28]
 8008240:	b111      	cbz	r1, 8008248 <_reclaim_reent+0x50>
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f8a0 	bl	8008388 <_free_r>
 8008248:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800824a:	b111      	cbz	r1, 8008252 <_reclaim_reent+0x5a>
 800824c:	4620      	mov	r0, r4
 800824e:	f000 f89b 	bl	8008388 <_free_r>
 8008252:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008254:	b111      	cbz	r1, 800825c <_reclaim_reent+0x64>
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f896 	bl	8008388 <_free_r>
 800825c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800825e:	b111      	cbz	r1, 8008266 <_reclaim_reent+0x6e>
 8008260:	4620      	mov	r0, r4
 8008262:	f000 f891 	bl	8008388 <_free_r>
 8008266:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008268:	b111      	cbz	r1, 8008270 <_reclaim_reent+0x78>
 800826a:	4620      	mov	r0, r4
 800826c:	f000 f88c 	bl	8008388 <_free_r>
 8008270:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008272:	b111      	cbz	r1, 800827a <_reclaim_reent+0x82>
 8008274:	4620      	mov	r0, r4
 8008276:	f000 f887 	bl	8008388 <_free_r>
 800827a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800827c:	b111      	cbz	r1, 8008284 <_reclaim_reent+0x8c>
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f882 	bl	8008388 <_free_r>
 8008284:	6a23      	ldr	r3, [r4, #32]
 8008286:	b14b      	cbz	r3, 800829c <_reclaim_reent+0xa4>
 8008288:	4620      	mov	r0, r4
 800828a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800828e:	4718      	bx	r3
 8008290:	680e      	ldr	r6, [r1, #0]
 8008292:	4620      	mov	r0, r4
 8008294:	f000 f878 	bl	8008388 <_free_r>
 8008298:	4631      	mov	r1, r6
 800829a:	e7bb      	b.n	8008214 <_reclaim_reent+0x1c>
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	bf00      	nop
 80082a0:	2000001c 	.word	0x2000001c

080082a4 <_lseek_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d07      	ldr	r5, [pc, #28]	@ (80082c4 <_lseek_r+0x20>)
 80082a8:	4604      	mov	r4, r0
 80082aa:	4608      	mov	r0, r1
 80082ac:	4611      	mov	r1, r2
 80082ae:	2200      	movs	r2, #0
 80082b0:	602a      	str	r2, [r5, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f7f9 f940 	bl	8001538 <_lseek>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_lseek_r+0x1e>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_lseek_r+0x1e>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20019cb8 	.word	0x20019cb8

080082c8 <_read_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d07      	ldr	r5, [pc, #28]	@ (80082e8 <_read_r+0x20>)
 80082cc:	4604      	mov	r4, r0
 80082ce:	4608      	mov	r0, r1
 80082d0:	4611      	mov	r1, r2
 80082d2:	2200      	movs	r2, #0
 80082d4:	602a      	str	r2, [r5, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f7f9 f8ce 	bl	8001478 <_read>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_read_r+0x1e>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_read_r+0x1e>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20019cb8 	.word	0x20019cb8

080082ec <_write_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	@ (800830c <_write_r+0x20>)
 80082f0:	4604      	mov	r4, r0
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	602a      	str	r2, [r5, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7f9 f8d9 	bl	80014b2 <_write>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_write_r+0x1e>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_write_r+0x1e>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20019cb8 	.word	0x20019cb8

08008310 <__errno>:
 8008310:	4b01      	ldr	r3, [pc, #4]	@ (8008318 <__errno+0x8>)
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	2000001c 	.word	0x2000001c

0800831c <__libc_init_array>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	4d0d      	ldr	r5, [pc, #52]	@ (8008354 <__libc_init_array+0x38>)
 8008320:	4c0d      	ldr	r4, [pc, #52]	@ (8008358 <__libc_init_array+0x3c>)
 8008322:	1b64      	subs	r4, r4, r5
 8008324:	10a4      	asrs	r4, r4, #2
 8008326:	2600      	movs	r6, #0
 8008328:	42a6      	cmp	r6, r4
 800832a:	d109      	bne.n	8008340 <__libc_init_array+0x24>
 800832c:	4d0b      	ldr	r5, [pc, #44]	@ (800835c <__libc_init_array+0x40>)
 800832e:	4c0c      	ldr	r4, [pc, #48]	@ (8008360 <__libc_init_array+0x44>)
 8008330:	f000 fcec 	bl	8008d0c <_init>
 8008334:	1b64      	subs	r4, r4, r5
 8008336:	10a4      	asrs	r4, r4, #2
 8008338:	2600      	movs	r6, #0
 800833a:	42a6      	cmp	r6, r4
 800833c:	d105      	bne.n	800834a <__libc_init_array+0x2e>
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	f855 3b04 	ldr.w	r3, [r5], #4
 8008344:	4798      	blx	r3
 8008346:	3601      	adds	r6, #1
 8008348:	e7ee      	b.n	8008328 <__libc_init_array+0xc>
 800834a:	f855 3b04 	ldr.w	r3, [r5], #4
 800834e:	4798      	blx	r3
 8008350:	3601      	adds	r6, #1
 8008352:	e7f2      	b.n	800833a <__libc_init_array+0x1e>
 8008354:	08008f84 	.word	0x08008f84
 8008358:	08008f84 	.word	0x08008f84
 800835c:	08008f84 	.word	0x08008f84
 8008360:	08008f88 	.word	0x08008f88

08008364 <__retarget_lock_init_recursive>:
 8008364:	4770      	bx	lr

08008366 <__retarget_lock_acquire_recursive>:
 8008366:	4770      	bx	lr

08008368 <__retarget_lock_release_recursive>:
 8008368:	4770      	bx	lr

0800836a <memcpy>:
 800836a:	440a      	add	r2, r1
 800836c:	4291      	cmp	r1, r2
 800836e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008372:	d100      	bne.n	8008376 <memcpy+0xc>
 8008374:	4770      	bx	lr
 8008376:	b510      	push	{r4, lr}
 8008378:	f811 4b01 	ldrb.w	r4, [r1], #1
 800837c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008380:	4291      	cmp	r1, r2
 8008382:	d1f9      	bne.n	8008378 <memcpy+0xe>
 8008384:	bd10      	pop	{r4, pc}
	...

08008388 <_free_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4605      	mov	r5, r0
 800838c:	2900      	cmp	r1, #0
 800838e:	d041      	beq.n	8008414 <_free_r+0x8c>
 8008390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008394:	1f0c      	subs	r4, r1, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfb8      	it	lt
 800839a:	18e4      	addlt	r4, r4, r3
 800839c:	f000 f8e0 	bl	8008560 <__malloc_lock>
 80083a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008418 <_free_r+0x90>)
 80083a2:	6813      	ldr	r3, [r2, #0]
 80083a4:	b933      	cbnz	r3, 80083b4 <_free_r+0x2c>
 80083a6:	6063      	str	r3, [r4, #4]
 80083a8:	6014      	str	r4, [r2, #0]
 80083aa:	4628      	mov	r0, r5
 80083ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b0:	f000 b8dc 	b.w	800856c <__malloc_unlock>
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	d908      	bls.n	80083ca <_free_r+0x42>
 80083b8:	6820      	ldr	r0, [r4, #0]
 80083ba:	1821      	adds	r1, r4, r0
 80083bc:	428b      	cmp	r3, r1
 80083be:	bf01      	itttt	eq
 80083c0:	6819      	ldreq	r1, [r3, #0]
 80083c2:	685b      	ldreq	r3, [r3, #4]
 80083c4:	1809      	addeq	r1, r1, r0
 80083c6:	6021      	streq	r1, [r4, #0]
 80083c8:	e7ed      	b.n	80083a6 <_free_r+0x1e>
 80083ca:	461a      	mov	r2, r3
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	b10b      	cbz	r3, 80083d4 <_free_r+0x4c>
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	d9fa      	bls.n	80083ca <_free_r+0x42>
 80083d4:	6811      	ldr	r1, [r2, #0]
 80083d6:	1850      	adds	r0, r2, r1
 80083d8:	42a0      	cmp	r0, r4
 80083da:	d10b      	bne.n	80083f4 <_free_r+0x6c>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	4401      	add	r1, r0
 80083e0:	1850      	adds	r0, r2, r1
 80083e2:	4283      	cmp	r3, r0
 80083e4:	6011      	str	r1, [r2, #0]
 80083e6:	d1e0      	bne.n	80083aa <_free_r+0x22>
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	6053      	str	r3, [r2, #4]
 80083ee:	4408      	add	r0, r1
 80083f0:	6010      	str	r0, [r2, #0]
 80083f2:	e7da      	b.n	80083aa <_free_r+0x22>
 80083f4:	d902      	bls.n	80083fc <_free_r+0x74>
 80083f6:	230c      	movs	r3, #12
 80083f8:	602b      	str	r3, [r5, #0]
 80083fa:	e7d6      	b.n	80083aa <_free_r+0x22>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	1821      	adds	r1, r4, r0
 8008400:	428b      	cmp	r3, r1
 8008402:	bf04      	itt	eq
 8008404:	6819      	ldreq	r1, [r3, #0]
 8008406:	685b      	ldreq	r3, [r3, #4]
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	bf04      	itt	eq
 800840c:	1809      	addeq	r1, r1, r0
 800840e:	6021      	streq	r1, [r4, #0]
 8008410:	6054      	str	r4, [r2, #4]
 8008412:	e7ca      	b.n	80083aa <_free_r+0x22>
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	20019cc4 	.word	0x20019cc4

0800841c <sbrk_aligned>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4e0f      	ldr	r6, [pc, #60]	@ (800845c <sbrk_aligned+0x40>)
 8008420:	460c      	mov	r4, r1
 8008422:	6831      	ldr	r1, [r6, #0]
 8008424:	4605      	mov	r5, r0
 8008426:	b911      	cbnz	r1, 800842e <sbrk_aligned+0x12>
 8008428:	f000 fc2a 	bl	8008c80 <_sbrk_r>
 800842c:	6030      	str	r0, [r6, #0]
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 fc25 	bl	8008c80 <_sbrk_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d103      	bne.n	8008442 <sbrk_aligned+0x26>
 800843a:	f04f 34ff 	mov.w	r4, #4294967295
 800843e:	4620      	mov	r0, r4
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	1cc4      	adds	r4, r0, #3
 8008444:	f024 0403 	bic.w	r4, r4, #3
 8008448:	42a0      	cmp	r0, r4
 800844a:	d0f8      	beq.n	800843e <sbrk_aligned+0x22>
 800844c:	1a21      	subs	r1, r4, r0
 800844e:	4628      	mov	r0, r5
 8008450:	f000 fc16 	bl	8008c80 <_sbrk_r>
 8008454:	3001      	adds	r0, #1
 8008456:	d1f2      	bne.n	800843e <sbrk_aligned+0x22>
 8008458:	e7ef      	b.n	800843a <sbrk_aligned+0x1e>
 800845a:	bf00      	nop
 800845c:	20019cc0 	.word	0x20019cc0

08008460 <_malloc_r>:
 8008460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008464:	1ccd      	adds	r5, r1, #3
 8008466:	f025 0503 	bic.w	r5, r5, #3
 800846a:	3508      	adds	r5, #8
 800846c:	2d0c      	cmp	r5, #12
 800846e:	bf38      	it	cc
 8008470:	250c      	movcc	r5, #12
 8008472:	2d00      	cmp	r5, #0
 8008474:	4606      	mov	r6, r0
 8008476:	db01      	blt.n	800847c <_malloc_r+0x1c>
 8008478:	42a9      	cmp	r1, r5
 800847a:	d904      	bls.n	8008486 <_malloc_r+0x26>
 800847c:	230c      	movs	r3, #12
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800855c <_malloc_r+0xfc>
 800848a:	f000 f869 	bl	8008560 <__malloc_lock>
 800848e:	f8d8 3000 	ldr.w	r3, [r8]
 8008492:	461c      	mov	r4, r3
 8008494:	bb44      	cbnz	r4, 80084e8 <_malloc_r+0x88>
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff ffbf 	bl	800841c <sbrk_aligned>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	4604      	mov	r4, r0
 80084a2:	d158      	bne.n	8008556 <_malloc_r+0xf6>
 80084a4:	f8d8 4000 	ldr.w	r4, [r8]
 80084a8:	4627      	mov	r7, r4
 80084aa:	2f00      	cmp	r7, #0
 80084ac:	d143      	bne.n	8008536 <_malloc_r+0xd6>
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	d04b      	beq.n	800854a <_malloc_r+0xea>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	4639      	mov	r1, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	eb04 0903 	add.w	r9, r4, r3
 80084bc:	f000 fbe0 	bl	8008c80 <_sbrk_r>
 80084c0:	4581      	cmp	r9, r0
 80084c2:	d142      	bne.n	800854a <_malloc_r+0xea>
 80084c4:	6821      	ldr	r1, [r4, #0]
 80084c6:	1a6d      	subs	r5, r5, r1
 80084c8:	4629      	mov	r1, r5
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ffa6 	bl	800841c <sbrk_aligned>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d03a      	beq.n	800854a <_malloc_r+0xea>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	442b      	add	r3, r5
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	f8d8 3000 	ldr.w	r3, [r8]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	bb62      	cbnz	r2, 800853c <_malloc_r+0xdc>
 80084e2:	f8c8 7000 	str.w	r7, [r8]
 80084e6:	e00f      	b.n	8008508 <_malloc_r+0xa8>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	1b52      	subs	r2, r2, r5
 80084ec:	d420      	bmi.n	8008530 <_malloc_r+0xd0>
 80084ee:	2a0b      	cmp	r2, #11
 80084f0:	d917      	bls.n	8008522 <_malloc_r+0xc2>
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	6025      	str	r5, [r4, #0]
 80084f8:	bf18      	it	ne
 80084fa:	6059      	strne	r1, [r3, #4]
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	bf08      	it	eq
 8008500:	f8c8 1000 	streq.w	r1, [r8]
 8008504:	5162      	str	r2, [r4, r5]
 8008506:	604b      	str	r3, [r1, #4]
 8008508:	4630      	mov	r0, r6
 800850a:	f000 f82f 	bl	800856c <__malloc_unlock>
 800850e:	f104 000b 	add.w	r0, r4, #11
 8008512:	1d23      	adds	r3, r4, #4
 8008514:	f020 0007 	bic.w	r0, r0, #7
 8008518:	1ac2      	subs	r2, r0, r3
 800851a:	bf1c      	itt	ne
 800851c:	1a1b      	subne	r3, r3, r0
 800851e:	50a3      	strne	r3, [r4, r2]
 8008520:	e7af      	b.n	8008482 <_malloc_r+0x22>
 8008522:	6862      	ldr	r2, [r4, #4]
 8008524:	42a3      	cmp	r3, r4
 8008526:	bf0c      	ite	eq
 8008528:	f8c8 2000 	streq.w	r2, [r8]
 800852c:	605a      	strne	r2, [r3, #4]
 800852e:	e7eb      	b.n	8008508 <_malloc_r+0xa8>
 8008530:	4623      	mov	r3, r4
 8008532:	6864      	ldr	r4, [r4, #4]
 8008534:	e7ae      	b.n	8008494 <_malloc_r+0x34>
 8008536:	463c      	mov	r4, r7
 8008538:	687f      	ldr	r7, [r7, #4]
 800853a:	e7b6      	b.n	80084aa <_malloc_r+0x4a>
 800853c:	461a      	mov	r2, r3
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	42a3      	cmp	r3, r4
 8008542:	d1fb      	bne.n	800853c <_malloc_r+0xdc>
 8008544:	2300      	movs	r3, #0
 8008546:	6053      	str	r3, [r2, #4]
 8008548:	e7de      	b.n	8008508 <_malloc_r+0xa8>
 800854a:	230c      	movs	r3, #12
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	4630      	mov	r0, r6
 8008550:	f000 f80c 	bl	800856c <__malloc_unlock>
 8008554:	e794      	b.n	8008480 <_malloc_r+0x20>
 8008556:	6005      	str	r5, [r0, #0]
 8008558:	e7d6      	b.n	8008508 <_malloc_r+0xa8>
 800855a:	bf00      	nop
 800855c:	20019cc4 	.word	0x20019cc4

08008560 <__malloc_lock>:
 8008560:	4801      	ldr	r0, [pc, #4]	@ (8008568 <__malloc_lock+0x8>)
 8008562:	f7ff bf00 	b.w	8008366 <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	20019cbc 	.word	0x20019cbc

0800856c <__malloc_unlock>:
 800856c:	4801      	ldr	r0, [pc, #4]	@ (8008574 <__malloc_unlock+0x8>)
 800856e:	f7ff befb 	b.w	8008368 <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	20019cbc 	.word	0x20019cbc

08008578 <__ssputs_r>:
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	688e      	ldr	r6, [r1, #8]
 800857e:	461f      	mov	r7, r3
 8008580:	42be      	cmp	r6, r7
 8008582:	680b      	ldr	r3, [r1, #0]
 8008584:	4682      	mov	sl, r0
 8008586:	460c      	mov	r4, r1
 8008588:	4690      	mov	r8, r2
 800858a:	d82d      	bhi.n	80085e8 <__ssputs_r+0x70>
 800858c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008590:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008594:	d026      	beq.n	80085e4 <__ssputs_r+0x6c>
 8008596:	6965      	ldr	r5, [r4, #20]
 8008598:	6909      	ldr	r1, [r1, #16]
 800859a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800859e:	eba3 0901 	sub.w	r9, r3, r1
 80085a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085a6:	1c7b      	adds	r3, r7, #1
 80085a8:	444b      	add	r3, r9
 80085aa:	106d      	asrs	r5, r5, #1
 80085ac:	429d      	cmp	r5, r3
 80085ae:	bf38      	it	cc
 80085b0:	461d      	movcc	r5, r3
 80085b2:	0553      	lsls	r3, r2, #21
 80085b4:	d527      	bpl.n	8008606 <__ssputs_r+0x8e>
 80085b6:	4629      	mov	r1, r5
 80085b8:	f7ff ff52 	bl	8008460 <_malloc_r>
 80085bc:	4606      	mov	r6, r0
 80085be:	b360      	cbz	r0, 800861a <__ssputs_r+0xa2>
 80085c0:	6921      	ldr	r1, [r4, #16]
 80085c2:	464a      	mov	r2, r9
 80085c4:	f7ff fed1 	bl	800836a <memcpy>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	6126      	str	r6, [r4, #16]
 80085d6:	6165      	str	r5, [r4, #20]
 80085d8:	444e      	add	r6, r9
 80085da:	eba5 0509 	sub.w	r5, r5, r9
 80085de:	6026      	str	r6, [r4, #0]
 80085e0:	60a5      	str	r5, [r4, #8]
 80085e2:	463e      	mov	r6, r7
 80085e4:	42be      	cmp	r6, r7
 80085e6:	d900      	bls.n	80085ea <__ssputs_r+0x72>
 80085e8:	463e      	mov	r6, r7
 80085ea:	6820      	ldr	r0, [r4, #0]
 80085ec:	4632      	mov	r2, r6
 80085ee:	4641      	mov	r1, r8
 80085f0:	f000 fb0a 	bl	8008c08 <memmove>
 80085f4:	68a3      	ldr	r3, [r4, #8]
 80085f6:	1b9b      	subs	r3, r3, r6
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	4433      	add	r3, r6
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	2000      	movs	r0, #0
 8008602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008606:	462a      	mov	r2, r5
 8008608:	f000 fb4a 	bl	8008ca0 <_realloc_r>
 800860c:	4606      	mov	r6, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	d1e0      	bne.n	80085d4 <__ssputs_r+0x5c>
 8008612:	6921      	ldr	r1, [r4, #16]
 8008614:	4650      	mov	r0, sl
 8008616:	f7ff feb7 	bl	8008388 <_free_r>
 800861a:	230c      	movs	r3, #12
 800861c:	f8ca 3000 	str.w	r3, [sl]
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	e7e9      	b.n	8008602 <__ssputs_r+0x8a>
	...

08008630 <_svfiprintf_r>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	4698      	mov	r8, r3
 8008636:	898b      	ldrh	r3, [r1, #12]
 8008638:	061b      	lsls	r3, r3, #24
 800863a:	b09d      	sub	sp, #116	@ 0x74
 800863c:	4607      	mov	r7, r0
 800863e:	460d      	mov	r5, r1
 8008640:	4614      	mov	r4, r2
 8008642:	d510      	bpl.n	8008666 <_svfiprintf_r+0x36>
 8008644:	690b      	ldr	r3, [r1, #16]
 8008646:	b973      	cbnz	r3, 8008666 <_svfiprintf_r+0x36>
 8008648:	2140      	movs	r1, #64	@ 0x40
 800864a:	f7ff ff09 	bl	8008460 <_malloc_r>
 800864e:	6028      	str	r0, [r5, #0]
 8008650:	6128      	str	r0, [r5, #16]
 8008652:	b930      	cbnz	r0, 8008662 <_svfiprintf_r+0x32>
 8008654:	230c      	movs	r3, #12
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	b01d      	add	sp, #116	@ 0x74
 800865e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008662:	2340      	movs	r3, #64	@ 0x40
 8008664:	616b      	str	r3, [r5, #20]
 8008666:	2300      	movs	r3, #0
 8008668:	9309      	str	r3, [sp, #36]	@ 0x24
 800866a:	2320      	movs	r3, #32
 800866c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008670:	f8cd 800c 	str.w	r8, [sp, #12]
 8008674:	2330      	movs	r3, #48	@ 0x30
 8008676:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008814 <_svfiprintf_r+0x1e4>
 800867a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800867e:	f04f 0901 	mov.w	r9, #1
 8008682:	4623      	mov	r3, r4
 8008684:	469a      	mov	sl, r3
 8008686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800868a:	b10a      	cbz	r2, 8008690 <_svfiprintf_r+0x60>
 800868c:	2a25      	cmp	r2, #37	@ 0x25
 800868e:	d1f9      	bne.n	8008684 <_svfiprintf_r+0x54>
 8008690:	ebba 0b04 	subs.w	fp, sl, r4
 8008694:	d00b      	beq.n	80086ae <_svfiprintf_r+0x7e>
 8008696:	465b      	mov	r3, fp
 8008698:	4622      	mov	r2, r4
 800869a:	4629      	mov	r1, r5
 800869c:	4638      	mov	r0, r7
 800869e:	f7ff ff6b 	bl	8008578 <__ssputs_r>
 80086a2:	3001      	adds	r0, #1
 80086a4:	f000 80a7 	beq.w	80087f6 <_svfiprintf_r+0x1c6>
 80086a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086aa:	445a      	add	r2, fp
 80086ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80086ae:	f89a 3000 	ldrb.w	r3, [sl]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 809f 	beq.w	80087f6 <_svfiprintf_r+0x1c6>
 80086b8:	2300      	movs	r3, #0
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c2:	f10a 0a01 	add.w	sl, sl, #1
 80086c6:	9304      	str	r3, [sp, #16]
 80086c8:	9307      	str	r3, [sp, #28]
 80086ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80086d0:	4654      	mov	r4, sl
 80086d2:	2205      	movs	r2, #5
 80086d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d8:	484e      	ldr	r0, [pc, #312]	@ (8008814 <_svfiprintf_r+0x1e4>)
 80086da:	f7f7 fd99 	bl	8000210 <memchr>
 80086de:	9a04      	ldr	r2, [sp, #16]
 80086e0:	b9d8      	cbnz	r0, 800871a <_svfiprintf_r+0xea>
 80086e2:	06d0      	lsls	r0, r2, #27
 80086e4:	bf44      	itt	mi
 80086e6:	2320      	movmi	r3, #32
 80086e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ec:	0711      	lsls	r1, r2, #28
 80086ee:	bf44      	itt	mi
 80086f0:	232b      	movmi	r3, #43	@ 0x2b
 80086f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086f6:	f89a 3000 	ldrb.w	r3, [sl]
 80086fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80086fc:	d015      	beq.n	800872a <_svfiprintf_r+0xfa>
 80086fe:	9a07      	ldr	r2, [sp, #28]
 8008700:	4654      	mov	r4, sl
 8008702:	2000      	movs	r0, #0
 8008704:	f04f 0c0a 	mov.w	ip, #10
 8008708:	4621      	mov	r1, r4
 800870a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800870e:	3b30      	subs	r3, #48	@ 0x30
 8008710:	2b09      	cmp	r3, #9
 8008712:	d94b      	bls.n	80087ac <_svfiprintf_r+0x17c>
 8008714:	b1b0      	cbz	r0, 8008744 <_svfiprintf_r+0x114>
 8008716:	9207      	str	r2, [sp, #28]
 8008718:	e014      	b.n	8008744 <_svfiprintf_r+0x114>
 800871a:	eba0 0308 	sub.w	r3, r0, r8
 800871e:	fa09 f303 	lsl.w	r3, r9, r3
 8008722:	4313      	orrs	r3, r2
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	46a2      	mov	sl, r4
 8008728:	e7d2      	b.n	80086d0 <_svfiprintf_r+0xa0>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	1d19      	adds	r1, r3, #4
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	9103      	str	r1, [sp, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfbb      	ittet	lt
 8008736:	425b      	neglt	r3, r3
 8008738:	f042 0202 	orrlt.w	r2, r2, #2
 800873c:	9307      	strge	r3, [sp, #28]
 800873e:	9307      	strlt	r3, [sp, #28]
 8008740:	bfb8      	it	lt
 8008742:	9204      	strlt	r2, [sp, #16]
 8008744:	7823      	ldrb	r3, [r4, #0]
 8008746:	2b2e      	cmp	r3, #46	@ 0x2e
 8008748:	d10a      	bne.n	8008760 <_svfiprintf_r+0x130>
 800874a:	7863      	ldrb	r3, [r4, #1]
 800874c:	2b2a      	cmp	r3, #42	@ 0x2a
 800874e:	d132      	bne.n	80087b6 <_svfiprintf_r+0x186>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	1d1a      	adds	r2, r3, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	9203      	str	r2, [sp, #12]
 8008758:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800875c:	3402      	adds	r4, #2
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008824 <_svfiprintf_r+0x1f4>
 8008764:	7821      	ldrb	r1, [r4, #0]
 8008766:	2203      	movs	r2, #3
 8008768:	4650      	mov	r0, sl
 800876a:	f7f7 fd51 	bl	8000210 <memchr>
 800876e:	b138      	cbz	r0, 8008780 <_svfiprintf_r+0x150>
 8008770:	9b04      	ldr	r3, [sp, #16]
 8008772:	eba0 000a 	sub.w	r0, r0, sl
 8008776:	2240      	movs	r2, #64	@ 0x40
 8008778:	4082      	lsls	r2, r0
 800877a:	4313      	orrs	r3, r2
 800877c:	3401      	adds	r4, #1
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008784:	4824      	ldr	r0, [pc, #144]	@ (8008818 <_svfiprintf_r+0x1e8>)
 8008786:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800878a:	2206      	movs	r2, #6
 800878c:	f7f7 fd40 	bl	8000210 <memchr>
 8008790:	2800      	cmp	r0, #0
 8008792:	d036      	beq.n	8008802 <_svfiprintf_r+0x1d2>
 8008794:	4b21      	ldr	r3, [pc, #132]	@ (800881c <_svfiprintf_r+0x1ec>)
 8008796:	bb1b      	cbnz	r3, 80087e0 <_svfiprintf_r+0x1b0>
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	3307      	adds	r3, #7
 800879c:	f023 0307 	bic.w	r3, r3, #7
 80087a0:	3308      	adds	r3, #8
 80087a2:	9303      	str	r3, [sp, #12]
 80087a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a6:	4433      	add	r3, r6
 80087a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80087aa:	e76a      	b.n	8008682 <_svfiprintf_r+0x52>
 80087ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80087b0:	460c      	mov	r4, r1
 80087b2:	2001      	movs	r0, #1
 80087b4:	e7a8      	b.n	8008708 <_svfiprintf_r+0xd8>
 80087b6:	2300      	movs	r3, #0
 80087b8:	3401      	adds	r4, #1
 80087ba:	9305      	str	r3, [sp, #20]
 80087bc:	4619      	mov	r1, r3
 80087be:	f04f 0c0a 	mov.w	ip, #10
 80087c2:	4620      	mov	r0, r4
 80087c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087c8:	3a30      	subs	r2, #48	@ 0x30
 80087ca:	2a09      	cmp	r2, #9
 80087cc:	d903      	bls.n	80087d6 <_svfiprintf_r+0x1a6>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0c6      	beq.n	8008760 <_svfiprintf_r+0x130>
 80087d2:	9105      	str	r1, [sp, #20]
 80087d4:	e7c4      	b.n	8008760 <_svfiprintf_r+0x130>
 80087d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087da:	4604      	mov	r4, r0
 80087dc:	2301      	movs	r3, #1
 80087de:	e7f0      	b.n	80087c2 <_svfiprintf_r+0x192>
 80087e0:	ab03      	add	r3, sp, #12
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	462a      	mov	r2, r5
 80087e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008820 <_svfiprintf_r+0x1f0>)
 80087e8:	a904      	add	r1, sp, #16
 80087ea:	4638      	mov	r0, r7
 80087ec:	f3af 8000 	nop.w
 80087f0:	1c42      	adds	r2, r0, #1
 80087f2:	4606      	mov	r6, r0
 80087f4:	d1d6      	bne.n	80087a4 <_svfiprintf_r+0x174>
 80087f6:	89ab      	ldrh	r3, [r5, #12]
 80087f8:	065b      	lsls	r3, r3, #25
 80087fa:	f53f af2d 	bmi.w	8008658 <_svfiprintf_r+0x28>
 80087fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008800:	e72c      	b.n	800865c <_svfiprintf_r+0x2c>
 8008802:	ab03      	add	r3, sp, #12
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	462a      	mov	r2, r5
 8008808:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <_svfiprintf_r+0x1f0>)
 800880a:	a904      	add	r1, sp, #16
 800880c:	4638      	mov	r0, r7
 800880e:	f000 f879 	bl	8008904 <_printf_i>
 8008812:	e7ed      	b.n	80087f0 <_svfiprintf_r+0x1c0>
 8008814:	08008f48 	.word	0x08008f48
 8008818:	08008f52 	.word	0x08008f52
 800881c:	00000000 	.word	0x00000000
 8008820:	08008579 	.word	0x08008579
 8008824:	08008f4e 	.word	0x08008f4e

08008828 <_printf_common>:
 8008828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800882c:	4616      	mov	r6, r2
 800882e:	4698      	mov	r8, r3
 8008830:	688a      	ldr	r2, [r1, #8]
 8008832:	690b      	ldr	r3, [r1, #16]
 8008834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008838:	4293      	cmp	r3, r2
 800883a:	bfb8      	it	lt
 800883c:	4613      	movlt	r3, r2
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008844:	4607      	mov	r7, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b10a      	cbz	r2, 800884e <_printf_common+0x26>
 800884a:	3301      	adds	r3, #1
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	0699      	lsls	r1, r3, #26
 8008852:	bf42      	ittt	mi
 8008854:	6833      	ldrmi	r3, [r6, #0]
 8008856:	3302      	addmi	r3, #2
 8008858:	6033      	strmi	r3, [r6, #0]
 800885a:	6825      	ldr	r5, [r4, #0]
 800885c:	f015 0506 	ands.w	r5, r5, #6
 8008860:	d106      	bne.n	8008870 <_printf_common+0x48>
 8008862:	f104 0a19 	add.w	sl, r4, #25
 8008866:	68e3      	ldr	r3, [r4, #12]
 8008868:	6832      	ldr	r2, [r6, #0]
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	42ab      	cmp	r3, r5
 800886e:	dc26      	bgt.n	80088be <_printf_common+0x96>
 8008870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	3b00      	subs	r3, #0
 8008878:	bf18      	it	ne
 800887a:	2301      	movne	r3, #1
 800887c:	0692      	lsls	r2, r2, #26
 800887e:	d42b      	bmi.n	80088d8 <_printf_common+0xb0>
 8008880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008884:	4641      	mov	r1, r8
 8008886:	4638      	mov	r0, r7
 8008888:	47c8      	blx	r9
 800888a:	3001      	adds	r0, #1
 800888c:	d01e      	beq.n	80088cc <_printf_common+0xa4>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	6922      	ldr	r2, [r4, #16]
 8008892:	f003 0306 	and.w	r3, r3, #6
 8008896:	2b04      	cmp	r3, #4
 8008898:	bf02      	ittt	eq
 800889a:	68e5      	ldreq	r5, [r4, #12]
 800889c:	6833      	ldreq	r3, [r6, #0]
 800889e:	1aed      	subeq	r5, r5, r3
 80088a0:	68a3      	ldr	r3, [r4, #8]
 80088a2:	bf0c      	ite	eq
 80088a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a8:	2500      	movne	r5, #0
 80088aa:	4293      	cmp	r3, r2
 80088ac:	bfc4      	itt	gt
 80088ae:	1a9b      	subgt	r3, r3, r2
 80088b0:	18ed      	addgt	r5, r5, r3
 80088b2:	2600      	movs	r6, #0
 80088b4:	341a      	adds	r4, #26
 80088b6:	42b5      	cmp	r5, r6
 80088b8:	d11a      	bne.n	80088f0 <_printf_common+0xc8>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e008      	b.n	80088d0 <_printf_common+0xa8>
 80088be:	2301      	movs	r3, #1
 80088c0:	4652      	mov	r2, sl
 80088c2:	4641      	mov	r1, r8
 80088c4:	4638      	mov	r0, r7
 80088c6:	47c8      	blx	r9
 80088c8:	3001      	adds	r0, #1
 80088ca:	d103      	bne.n	80088d4 <_printf_common+0xac>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d4:	3501      	adds	r5, #1
 80088d6:	e7c6      	b.n	8008866 <_printf_common+0x3e>
 80088d8:	18e1      	adds	r1, r4, r3
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	2030      	movs	r0, #48	@ 0x30
 80088de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088e2:	4422      	add	r2, r4
 80088e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088ec:	3302      	adds	r3, #2
 80088ee:	e7c7      	b.n	8008880 <_printf_common+0x58>
 80088f0:	2301      	movs	r3, #1
 80088f2:	4622      	mov	r2, r4
 80088f4:	4641      	mov	r1, r8
 80088f6:	4638      	mov	r0, r7
 80088f8:	47c8      	blx	r9
 80088fa:	3001      	adds	r0, #1
 80088fc:	d0e6      	beq.n	80088cc <_printf_common+0xa4>
 80088fe:	3601      	adds	r6, #1
 8008900:	e7d9      	b.n	80088b6 <_printf_common+0x8e>
	...

08008904 <_printf_i>:
 8008904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	7e0f      	ldrb	r7, [r1, #24]
 800890a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800890c:	2f78      	cmp	r7, #120	@ 0x78
 800890e:	4691      	mov	r9, r2
 8008910:	4680      	mov	r8, r0
 8008912:	460c      	mov	r4, r1
 8008914:	469a      	mov	sl, r3
 8008916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800891a:	d807      	bhi.n	800892c <_printf_i+0x28>
 800891c:	2f62      	cmp	r7, #98	@ 0x62
 800891e:	d80a      	bhi.n	8008936 <_printf_i+0x32>
 8008920:	2f00      	cmp	r7, #0
 8008922:	f000 80d2 	beq.w	8008aca <_printf_i+0x1c6>
 8008926:	2f58      	cmp	r7, #88	@ 0x58
 8008928:	f000 80b9 	beq.w	8008a9e <_printf_i+0x19a>
 800892c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008934:	e03a      	b.n	80089ac <_printf_i+0xa8>
 8008936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800893a:	2b15      	cmp	r3, #21
 800893c:	d8f6      	bhi.n	800892c <_printf_i+0x28>
 800893e:	a101      	add	r1, pc, #4	@ (adr r1, 8008944 <_printf_i+0x40>)
 8008940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008944:	0800899d 	.word	0x0800899d
 8008948:	080089b1 	.word	0x080089b1
 800894c:	0800892d 	.word	0x0800892d
 8008950:	0800892d 	.word	0x0800892d
 8008954:	0800892d 	.word	0x0800892d
 8008958:	0800892d 	.word	0x0800892d
 800895c:	080089b1 	.word	0x080089b1
 8008960:	0800892d 	.word	0x0800892d
 8008964:	0800892d 	.word	0x0800892d
 8008968:	0800892d 	.word	0x0800892d
 800896c:	0800892d 	.word	0x0800892d
 8008970:	08008ab1 	.word	0x08008ab1
 8008974:	080089db 	.word	0x080089db
 8008978:	08008a6b 	.word	0x08008a6b
 800897c:	0800892d 	.word	0x0800892d
 8008980:	0800892d 	.word	0x0800892d
 8008984:	08008ad3 	.word	0x08008ad3
 8008988:	0800892d 	.word	0x0800892d
 800898c:	080089db 	.word	0x080089db
 8008990:	0800892d 	.word	0x0800892d
 8008994:	0800892d 	.word	0x0800892d
 8008998:	08008a73 	.word	0x08008a73
 800899c:	6833      	ldr	r3, [r6, #0]
 800899e:	1d1a      	adds	r2, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6032      	str	r2, [r6, #0]
 80089a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80089ac:	2301      	movs	r3, #1
 80089ae:	e09d      	b.n	8008aec <_printf_i+0x1e8>
 80089b0:	6833      	ldr	r3, [r6, #0]
 80089b2:	6820      	ldr	r0, [r4, #0]
 80089b4:	1d19      	adds	r1, r3, #4
 80089b6:	6031      	str	r1, [r6, #0]
 80089b8:	0606      	lsls	r6, r0, #24
 80089ba:	d501      	bpl.n	80089c0 <_printf_i+0xbc>
 80089bc:	681d      	ldr	r5, [r3, #0]
 80089be:	e003      	b.n	80089c8 <_printf_i+0xc4>
 80089c0:	0645      	lsls	r5, r0, #25
 80089c2:	d5fb      	bpl.n	80089bc <_printf_i+0xb8>
 80089c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	da03      	bge.n	80089d4 <_printf_i+0xd0>
 80089cc:	232d      	movs	r3, #45	@ 0x2d
 80089ce:	426d      	negs	r5, r5
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d4:	4859      	ldr	r0, [pc, #356]	@ (8008b3c <_printf_i+0x238>)
 80089d6:	230a      	movs	r3, #10
 80089d8:	e011      	b.n	80089fe <_printf_i+0xfa>
 80089da:	6821      	ldr	r1, [r4, #0]
 80089dc:	6833      	ldr	r3, [r6, #0]
 80089de:	0608      	lsls	r0, r1, #24
 80089e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80089e4:	d402      	bmi.n	80089ec <_printf_i+0xe8>
 80089e6:	0649      	lsls	r1, r1, #25
 80089e8:	bf48      	it	mi
 80089ea:	b2ad      	uxthmi	r5, r5
 80089ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80089ee:	4853      	ldr	r0, [pc, #332]	@ (8008b3c <_printf_i+0x238>)
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	bf14      	ite	ne
 80089f4:	230a      	movne	r3, #10
 80089f6:	2308      	moveq	r3, #8
 80089f8:	2100      	movs	r1, #0
 80089fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089fe:	6866      	ldr	r6, [r4, #4]
 8008a00:	60a6      	str	r6, [r4, #8]
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	bfa2      	ittt	ge
 8008a06:	6821      	ldrge	r1, [r4, #0]
 8008a08:	f021 0104 	bicge.w	r1, r1, #4
 8008a0c:	6021      	strge	r1, [r4, #0]
 8008a0e:	b90d      	cbnz	r5, 8008a14 <_printf_i+0x110>
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	d04b      	beq.n	8008aac <_printf_i+0x1a8>
 8008a14:	4616      	mov	r6, r2
 8008a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8008a1e:	5dc7      	ldrb	r7, [r0, r7]
 8008a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a24:	462f      	mov	r7, r5
 8008a26:	42bb      	cmp	r3, r7
 8008a28:	460d      	mov	r5, r1
 8008a2a:	d9f4      	bls.n	8008a16 <_printf_i+0x112>
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d10b      	bne.n	8008a48 <_printf_i+0x144>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	07df      	lsls	r7, r3, #31
 8008a34:	d508      	bpl.n	8008a48 <_printf_i+0x144>
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	6861      	ldr	r1, [r4, #4]
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	bfde      	ittt	le
 8008a3e:	2330      	movle	r3, #48	@ 0x30
 8008a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a48:	1b92      	subs	r2, r2, r6
 8008a4a:	6122      	str	r2, [r4, #16]
 8008a4c:	f8cd a000 	str.w	sl, [sp]
 8008a50:	464b      	mov	r3, r9
 8008a52:	aa03      	add	r2, sp, #12
 8008a54:	4621      	mov	r1, r4
 8008a56:	4640      	mov	r0, r8
 8008a58:	f7ff fee6 	bl	8008828 <_printf_common>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d14a      	bne.n	8008af6 <_printf_i+0x1f2>
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	b004      	add	sp, #16
 8008a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f043 0320 	orr.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	4833      	ldr	r0, [pc, #204]	@ (8008b40 <_printf_i+0x23c>)
 8008a74:	2778      	movs	r7, #120	@ 0x78
 8008a76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	6831      	ldr	r1, [r6, #0]
 8008a7e:	061f      	lsls	r7, r3, #24
 8008a80:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a84:	d402      	bmi.n	8008a8c <_printf_i+0x188>
 8008a86:	065f      	lsls	r7, r3, #25
 8008a88:	bf48      	it	mi
 8008a8a:	b2ad      	uxthmi	r5, r5
 8008a8c:	6031      	str	r1, [r6, #0]
 8008a8e:	07d9      	lsls	r1, r3, #31
 8008a90:	bf44      	itt	mi
 8008a92:	f043 0320 	orrmi.w	r3, r3, #32
 8008a96:	6023      	strmi	r3, [r4, #0]
 8008a98:	b11d      	cbz	r5, 8008aa2 <_printf_i+0x19e>
 8008a9a:	2310      	movs	r3, #16
 8008a9c:	e7ac      	b.n	80089f8 <_printf_i+0xf4>
 8008a9e:	4827      	ldr	r0, [pc, #156]	@ (8008b3c <_printf_i+0x238>)
 8008aa0:	e7e9      	b.n	8008a76 <_printf_i+0x172>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f023 0320 	bic.w	r3, r3, #32
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	e7f6      	b.n	8008a9a <_printf_i+0x196>
 8008aac:	4616      	mov	r6, r2
 8008aae:	e7bd      	b.n	8008a2c <_printf_i+0x128>
 8008ab0:	6833      	ldr	r3, [r6, #0]
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	6961      	ldr	r1, [r4, #20]
 8008ab6:	1d18      	adds	r0, r3, #4
 8008ab8:	6030      	str	r0, [r6, #0]
 8008aba:	062e      	lsls	r6, r5, #24
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	d501      	bpl.n	8008ac4 <_printf_i+0x1c0>
 8008ac0:	6019      	str	r1, [r3, #0]
 8008ac2:	e002      	b.n	8008aca <_printf_i+0x1c6>
 8008ac4:	0668      	lsls	r0, r5, #25
 8008ac6:	d5fb      	bpl.n	8008ac0 <_printf_i+0x1bc>
 8008ac8:	8019      	strh	r1, [r3, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	6123      	str	r3, [r4, #16]
 8008ace:	4616      	mov	r6, r2
 8008ad0:	e7bc      	b.n	8008a4c <_printf_i+0x148>
 8008ad2:	6833      	ldr	r3, [r6, #0]
 8008ad4:	1d1a      	adds	r2, r3, #4
 8008ad6:	6032      	str	r2, [r6, #0]
 8008ad8:	681e      	ldr	r6, [r3, #0]
 8008ada:	6862      	ldr	r2, [r4, #4]
 8008adc:	2100      	movs	r1, #0
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7f7 fb96 	bl	8000210 <memchr>
 8008ae4:	b108      	cbz	r0, 8008aea <_printf_i+0x1e6>
 8008ae6:	1b80      	subs	r0, r0, r6
 8008ae8:	6060      	str	r0, [r4, #4]
 8008aea:	6863      	ldr	r3, [r4, #4]
 8008aec:	6123      	str	r3, [r4, #16]
 8008aee:	2300      	movs	r3, #0
 8008af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008af4:	e7aa      	b.n	8008a4c <_printf_i+0x148>
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	4632      	mov	r2, r6
 8008afa:	4649      	mov	r1, r9
 8008afc:	4640      	mov	r0, r8
 8008afe:	47d0      	blx	sl
 8008b00:	3001      	adds	r0, #1
 8008b02:	d0ad      	beq.n	8008a60 <_printf_i+0x15c>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	079b      	lsls	r3, r3, #30
 8008b08:	d413      	bmi.n	8008b32 <_printf_i+0x22e>
 8008b0a:	68e0      	ldr	r0, [r4, #12]
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	4298      	cmp	r0, r3
 8008b10:	bfb8      	it	lt
 8008b12:	4618      	movlt	r0, r3
 8008b14:	e7a6      	b.n	8008a64 <_printf_i+0x160>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4632      	mov	r2, r6
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	47d0      	blx	sl
 8008b20:	3001      	adds	r0, #1
 8008b22:	d09d      	beq.n	8008a60 <_printf_i+0x15c>
 8008b24:	3501      	adds	r5, #1
 8008b26:	68e3      	ldr	r3, [r4, #12]
 8008b28:	9903      	ldr	r1, [sp, #12]
 8008b2a:	1a5b      	subs	r3, r3, r1
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dcf2      	bgt.n	8008b16 <_printf_i+0x212>
 8008b30:	e7eb      	b.n	8008b0a <_printf_i+0x206>
 8008b32:	2500      	movs	r5, #0
 8008b34:	f104 0619 	add.w	r6, r4, #25
 8008b38:	e7f5      	b.n	8008b26 <_printf_i+0x222>
 8008b3a:	bf00      	nop
 8008b3c:	08008f59 	.word	0x08008f59
 8008b40:	08008f6a 	.word	0x08008f6a

08008b44 <__swhatbuf_r>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	b096      	sub	sp, #88	@ 0x58
 8008b50:	4615      	mov	r5, r2
 8008b52:	461e      	mov	r6, r3
 8008b54:	da0d      	bge.n	8008b72 <__swhatbuf_r+0x2e>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b5c:	f04f 0100 	mov.w	r1, #0
 8008b60:	bf14      	ite	ne
 8008b62:	2340      	movne	r3, #64	@ 0x40
 8008b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b68:	2000      	movs	r0, #0
 8008b6a:	6031      	str	r1, [r6, #0]
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	b016      	add	sp, #88	@ 0x58
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	466a      	mov	r2, sp
 8008b74:	f000 f862 	bl	8008c3c <_fstat_r>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dbec      	blt.n	8008b56 <__swhatbuf_r+0x12>
 8008b7c:	9901      	ldr	r1, [sp, #4]
 8008b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b86:	4259      	negs	r1, r3
 8008b88:	4159      	adcs	r1, r3
 8008b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b8e:	e7eb      	b.n	8008b68 <__swhatbuf_r+0x24>

08008b90 <__smakebuf_r>:
 8008b90:	898b      	ldrh	r3, [r1, #12]
 8008b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b94:	079d      	lsls	r5, r3, #30
 8008b96:	4606      	mov	r6, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	d507      	bpl.n	8008bac <__smakebuf_r+0x1c>
 8008b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	6123      	str	r3, [r4, #16]
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	b003      	add	sp, #12
 8008baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bac:	ab01      	add	r3, sp, #4
 8008bae:	466a      	mov	r2, sp
 8008bb0:	f7ff ffc8 	bl	8008b44 <__swhatbuf_r>
 8008bb4:	9f00      	ldr	r7, [sp, #0]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	4639      	mov	r1, r7
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f7ff fc50 	bl	8008460 <_malloc_r>
 8008bc0:	b948      	cbnz	r0, 8008bd6 <__smakebuf_r+0x46>
 8008bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc6:	059a      	lsls	r2, r3, #22
 8008bc8:	d4ee      	bmi.n	8008ba8 <__smakebuf_r+0x18>
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	e7e2      	b.n	8008b9c <__smakebuf_r+0xc>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	6020      	str	r0, [r4, #0]
 8008bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008be6:	b15b      	cbz	r3, 8008c00 <__smakebuf_r+0x70>
 8008be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bec:	4630      	mov	r0, r6
 8008bee:	f000 f837 	bl	8008c60 <_isatty_r>
 8008bf2:	b128      	cbz	r0, 8008c00 <__smakebuf_r+0x70>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	431d      	orrs	r5, r3
 8008c04:	81a5      	strh	r5, [r4, #12]
 8008c06:	e7cf      	b.n	8008ba8 <__smakebuf_r+0x18>

08008c08 <memmove>:
 8008c08:	4288      	cmp	r0, r1
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	eb01 0402 	add.w	r4, r1, r2
 8008c10:	d902      	bls.n	8008c18 <memmove+0x10>
 8008c12:	4284      	cmp	r4, r0
 8008c14:	4623      	mov	r3, r4
 8008c16:	d807      	bhi.n	8008c28 <memmove+0x20>
 8008c18:	1e43      	subs	r3, r0, #1
 8008c1a:	42a1      	cmp	r1, r4
 8008c1c:	d008      	beq.n	8008c30 <memmove+0x28>
 8008c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c26:	e7f8      	b.n	8008c1a <memmove+0x12>
 8008c28:	4402      	add	r2, r0
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	428a      	cmp	r2, r1
 8008c2e:	d100      	bne.n	8008c32 <memmove+0x2a>
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c3a:	e7f7      	b.n	8008c2c <memmove+0x24>

08008c3c <_fstat_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4d07      	ldr	r5, [pc, #28]	@ (8008c5c <_fstat_r+0x20>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	f7f8 fc5a 	bl	8001502 <_fstat>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d102      	bne.n	8008c58 <_fstat_r+0x1c>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b103      	cbz	r3, 8008c58 <_fstat_r+0x1c>
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20019cb8 	.word	0x20019cb8

08008c60 <_isatty_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	@ (8008c7c <_isatty_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f8 fc59 	bl	8001522 <_isatty>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_isatty_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_isatty_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20019cb8 	.word	0x20019cb8

08008c80 <_sbrk_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d06      	ldr	r5, [pc, #24]	@ (8008c9c <_sbrk_r+0x1c>)
 8008c84:	2300      	movs	r3, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	4608      	mov	r0, r1
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	f7f8 fc62 	bl	8001554 <_sbrk>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_sbrk_r+0x1a>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_sbrk_r+0x1a>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	20019cb8 	.word	0x20019cb8

08008ca0 <_realloc_r>:
 8008ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4615      	mov	r5, r2
 8008ca8:	460c      	mov	r4, r1
 8008caa:	b921      	cbnz	r1, 8008cb6 <_realloc_r+0x16>
 8008cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	f7ff bbd5 	b.w	8008460 <_malloc_r>
 8008cb6:	b92a      	cbnz	r2, 8008cc4 <_realloc_r+0x24>
 8008cb8:	f7ff fb66 	bl	8008388 <_free_r>
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	f000 f81a 	bl	8008cfc <_malloc_usable_size_r>
 8008cc8:	4285      	cmp	r5, r0
 8008cca:	4606      	mov	r6, r0
 8008ccc:	d802      	bhi.n	8008cd4 <_realloc_r+0x34>
 8008cce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008cd2:	d8f4      	bhi.n	8008cbe <_realloc_r+0x1e>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f7ff fbc2 	bl	8008460 <_malloc_r>
 8008cdc:	4607      	mov	r7, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0ec      	beq.n	8008cbc <_realloc_r+0x1c>
 8008ce2:	42b5      	cmp	r5, r6
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	bf28      	it	cs
 8008cea:	4632      	movcs	r2, r6
 8008cec:	f7ff fb3d 	bl	800836a <memcpy>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	f7ff fb48 	bl	8008388 <_free_r>
 8008cf8:	463c      	mov	r4, r7
 8008cfa:	e7e0      	b.n	8008cbe <_realloc_r+0x1e>

08008cfc <_malloc_usable_size_r>:
 8008cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d00:	1f18      	subs	r0, r3, #4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfbc      	itt	lt
 8008d06:	580b      	ldrlt	r3, [r1, r0]
 8008d08:	18c0      	addlt	r0, r0, r3
 8008d0a:	4770      	bx	lr

08008d0c <_init>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr

08008d18 <_fini>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr

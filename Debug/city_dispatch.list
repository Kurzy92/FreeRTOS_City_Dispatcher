
city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a734  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f24  0800a904  0800a904  0000b904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b828  0800b828  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b828  0800b828  0000c828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b830  0800b830  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b834  0800b834  0000c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b838  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019d54  2000006c  0800b8a4  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019dc0  0800b8a4  0000ddc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000246b0  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b69  00000000  00000000  0003174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  000362b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163e  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aae6  00000000  00000000  0003951e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d76  00000000  00000000  00064004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001025d4  00000000  00000000  00087d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a34e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008078  00000000  00000000  0018a394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0019240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a8ec 	.word	0x0800a8ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800a8ec 	.word	0x0800a8ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vDispatcherCode>:
 * This function implements the dispatcher task, which waits for notifications
 * to process and route incoming dispatcher packets to the appropriate department queues.
 *
 * @param pvParameters Parameters passed to the task (expected to be `1`).
 */
void vDispatcherCode(void *pvParameters) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b09e      	sub	sp, #120	@ 0x78
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00d      	beq.n	80005ca <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005b2:	b672      	cpsid	i
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	b662      	cpsie	i
 80005c2:	677b      	str	r3, [r7, #116]	@ 0x74
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;
	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4821      	ldr	r0, [pc, #132]	@ (8000654 <vDispatcherCode+0xb4>)
 80005d0:	f002 fc8a 	bl	8002ee8 <HAL_GPIO_WritePin>
		printf("Dispatcher Entered BLOCKED state! \r\n");
 80005d4:	4820      	ldr	r0, [pc, #128]	@ (8000658 <vDispatcherCode+0xb8>)
 80005d6:	f009 f97d 	bl	80098d4 <puts>
		fflush(stdout);
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <vDispatcherCode+0xbc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f009 f839 	bl	8009658 <fflush>
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 80005e6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	2100      	movs	r1, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f007 fd8b 	bl	800810c <xTaskNotifyWait>
		printf("Dispatcher in RUNNING state! \n \tPerforming a task! \r\n");
 80005f6:	481a      	ldr	r0, [pc, #104]	@ (8000660 <vDispatcherCode+0xc0>)
 80005f8:	f009 f96c 	bl	80098d4 <puts>
		fflush(stdout);
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <vDispatcherCode+0xbc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4618      	mov	r0, r3
 8000604:	f009 f828 	bl	8009658 <fflush>
		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <vDispatcherCode+0xc4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	4618      	mov	r0, r3
 8000616:	f006 f9a3 	bl	8006960 <xQueueReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d1d4      	bne.n	80005ca <vDispatcherCode+0x2a>
			xSemaphoreTake(xTasksDataMutex, portMAX_DELAY);
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <vDispatcherCode+0xc8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	4618      	mov	r0, r3
 800062a:	f006 fa81 	bl	8006b30 <xQueueSemaphoreTake>
			total_tasks_ran++;
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <vDispatcherCode+0xcc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <vDispatcherCode+0xcc>)
 8000636:	6013      	str	r3, [r2, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <vDispatcherCode+0xc8>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f005 ffdf 	bl	8006604 <xQueueGenericSend>
			packetRouting(&new_packet);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f810 	bl	8000670 <packetRouting>
	for(;;) {
 8000650:	e7bb      	b.n	80005ca <vDispatcherCode+0x2a>
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400
 8000658:	0800a904 	.word	0x0800a904
 800065c:	2000001c 	.word	0x2000001c
 8000660:	0800a928 	.word	0x0800a928
 8000664:	20000724 	.word	0x20000724
 8000668:	2000079c 	.word	0x2000079c
 800066c:	20000790 	.word	0x20000790

08000670 <packetRouting>:
 * This function sends the given dispatcher packet to the queue corresponding
 * to its department.
 *
 * @param new_packet Pointer to the DispatcherPacket to be routed.
 */
void packetRouting(DispatcherPacket* new_packet) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	switch(new_packet->department) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b03      	cmp	r3, #3
 800067e:	d82f      	bhi.n	80006e0 <packetRouting+0x70>
 8000680:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <packetRouting+0x18>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000699 	.word	0x08000699
 800068c:	080006ab 	.word	0x080006ab
 8000690:	080006bd 	.word	0x080006bd
 8000694:	080006cf 	.word	0x080006cf
		case AMBULANCE:
			xQueueSend(qAmbulance, new_packet, portMAX_DELAY);
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <packetRouting+0x78>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	f04f 32ff 	mov.w	r2, #4294967295
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f005 ffae 	bl	8006604 <xQueueGenericSend>
			break;
 80006a8:	e01a      	b.n	80006e0 <packetRouting+0x70>
		case POLICE:
			xQueueSend(qPolice, new_packet, portMAX_DELAY);
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <packetRouting+0x7c>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	f005 ffa5 	bl	8006604 <xQueueGenericSend>
			break;
 80006ba:	e011      	b.n	80006e0 <packetRouting+0x70>
		case FIRE:
			xQueueSend(qFire, new_packet, portMAX_DELAY);
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <packetRouting+0x80>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	f04f 32ff 	mov.w	r2, #4294967295
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f005 ff9c 	bl	8006604 <xQueueGenericSend>
			break;
 80006cc:	e008      	b.n	80006e0 <packetRouting+0x70>
		case CORONA:
			xQueueSend(qCorona, new_packet, portMAX_DELAY);
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <packetRouting+0x84>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	f005 ff93 	bl	8006604 <xQueueGenericSend>
			break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000714 	.word	0x20000714
 80006ec:	20000718 	.word	0x20000718
 80006f0:	2000071c 	.word	0x2000071c
 80006f4:	20000720 	.word	0x20000720

080006f8 <generateDispatcherMSG>:
 * This function generates a dispatcher message based on a random department and message.
 * It also sets the time required to handle the task in ticks.
 *
 * @param hDispPacket Pointer to the DispatcherPacket to be filled with generated data.
 */
void generateDispatcherMSG(DispatcherPacket* hDispPacket) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	/*
	 * TODO: Consider creating a Mutex for when trying to modify hDispPacket.
	 * 		 It's also used in the TIM2 Interrupt Handler.
	 */
	DepartmentsEnum dep;
	uint8_t msgIdx = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73bb      	strb	r3, [r7, #14]

	// Generate Department
	uint32_t random_number = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	4619      	mov	r1, r3
 800070e:	4862      	ldr	r0, [pc, #392]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000710:	f003 fea4 	bl	800445c <HAL_RNG_GenerateRandomNumber>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d107      	bne.n	800072a <generateDispatcherMSG+0x32>
	        dep = (random_number % 4);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0303 	and.w	r3, r3, #3
 8000722:	73fb      	strb	r3, [r7, #15]
	        hDispPacket->department = dep;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7bfa      	ldrb	r2, [r7, #15]
 8000728:	701a      	strb	r2, [r3, #0]
	}

	// Pick a message
	switch(dep) {
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b03      	cmp	r3, #3
 800072e:	f200 8093 	bhi.w	8000858 <generateDispatcherMSG+0x160>
 8000732:	a201      	add	r2, pc, #4	@ (adr r2, 8000738 <generateDispatcherMSG+0x40>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000749 	.word	0x08000749
 800073c:	08000787 	.word	0x08000787
 8000740:	080007d1 	.word	0x080007d1
 8000744:	0800081b 	.word	0x0800081b
		case AMBULANCE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4619      	mov	r1, r3
 800074e:	4852      	ldr	r0, [pc, #328]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000750:	f003 fe84 	bl	800445c <HAL_RNG_GenerateRandomNumber>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <generateDispatcherMSG+0x6c>
				msgIdx = (uint8_t)(random_number % AMB_STRINGS_LEN);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vAMBstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1c58      	adds	r0, r3, #1
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	2264      	movs	r2, #100	@ 0x64
 800076c:	fb02 f303 	mul.w	r3, r2, r3
 8000770:	4a4a      	ldr	r2, [pc, #296]	@ (800089c <generateDispatcherMSG+0x1a4>)
 8000772:	4413      	add	r3, r2
 8000774:	2263      	movs	r2, #99	@ 0x63
 8000776:	4619      	mov	r1, r3
 8000778:	f009 f9c8 	bl	8009b0c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000784:	e069      	b.n	800085a <generateDispatcherMSG+0x162>


		case POLICE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	4842      	ldr	r0, [pc, #264]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 800078e:	f003 fe65 	bl	800445c <HAL_RNG_GenerateRandomNumber>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <generateDispatcherMSG+0xb6>
				msgIdx = (uint8_t)(random_number % POLICE_STRINGS_LEN);
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <generateDispatcherMSG+0x1a8>)
 800079c:	fba3 2301 	umull	r2, r3, r3, r1
 80007a0:	089a      	lsrs	r2, r3, #2
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	4613      	mov	r3, r2
 80007ac:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vPOLstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1c58      	adds	r0, r3, #1
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	2264      	movs	r2, #100	@ 0x64
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	4a3a      	ldr	r2, [pc, #232]	@ (80008a4 <generateDispatcherMSG+0x1ac>)
 80007bc:	4413      	add	r3, r2
 80007be:	2263      	movs	r2, #99	@ 0x63
 80007c0:	4619      	mov	r1, r3
 80007c2:	f009 f9a3 	bl	8009b0c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 80007ce:	e044      	b.n	800085a <generateDispatcherMSG+0x162>


		case FIRE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4830      	ldr	r0, [pc, #192]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 80007d8:	f003 fe40 	bl	800445c <HAL_RNG_GenerateRandomNumber>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10a      	bne.n	80007f8 <generateDispatcherMSG+0x100>
				msgIdx = (uint8_t)(random_number % FIRE_STRINGS_LEN);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <generateDispatcherMSG+0x1b0>)
 80007e6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ea:	085a      	lsrs	r2, r3, #1
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4413      	add	r3, r2
 80007f2:	1aca      	subs	r2, r1, r3
 80007f4:	4613      	mov	r3, r2
 80007f6:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vFIREstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c58      	adds	r0, r3, #1
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	2264      	movs	r2, #100	@ 0x64
 8000800:	fb02 f303 	mul.w	r3, r2, r3
 8000804:	4a29      	ldr	r2, [pc, #164]	@ (80008ac <generateDispatcherMSG+0x1b4>)
 8000806:	4413      	add	r3, r2
 8000808:	2263      	movs	r2, #99	@ 0x63
 800080a:	4619      	mov	r1, r3
 800080c:	f009 f97e 	bl	8009b0c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000818:	e01f      	b.n	800085a <generateDispatcherMSG+0x162>


		case CORONA:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	481d      	ldr	r0, [pc, #116]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000822:	f003 fe1b 	bl	800445c <HAL_RNG_GenerateRandomNumber>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d104      	bne.n	8000836 <generateDispatcherMSG+0x13e>
				msgIdx = (uint8_t)(random_number % CORONA_STRINGS_LEN);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vCORstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c58      	adds	r0, r3, #1
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	2264      	movs	r2, #100	@ 0x64
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	4a1b      	ldr	r2, [pc, #108]	@ (80008b0 <generateDispatcherMSG+0x1b8>)
 8000844:	4413      	add	r3, r2
 8000846:	2263      	movs	r2, #99	@ 0x63
 8000848:	4619      	mov	r1, r3
 800084a:	f009 f95f 	bl	8009b0c <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			break;
 8000856:	e000      	b.n	800085a <generateDispatcherMSG+0x162>


		default:
			break;
 8000858:	bf00      	nop
	}

	// Pick handling time
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	@ (8000898 <generateDispatcherMSG+0x1a0>)
 8000862:	f003 fdfb 	bl	800445c <HAL_RNG_GenerateRandomNumber>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d110      	bne.n	800088e <generateDispatcherMSG+0x196>
		hDispPacket->timeToHandleInTicks = (uint16_t)(random_number % LONGEST_TASK_DURATION_IN_TICKS) +
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <generateDispatcherMSG+0x1bc>)
 8000870:	fba3 1302 	umull	r1, r3, r3, r2
 8000874:	09db      	lsrs	r3, r3, #7
 8000876:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800087a:	fb01 f303 	mul.w	r3, r1, r3
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000886:	b29a      	uxth	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
													SHORTEST_TASK_DURATION_IN_TICKS;
	}
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000088 	.word	0x20000088
 800089c:	0800abf8 	.word	0x0800abf8
 80008a0:	cccccccd 	.word	0xcccccccd
 80008a4:	0800af18 	.word	0x0800af18
 80008a8:	38e38e39 	.word	0x38e38e39
 80008ac:	0800b10c 	.word	0x0800b10c
 80008b0:	0800b490 	.word	0x0800b490
 80008b4:	10624dd3 	.word	0x10624dd3

080008b8 <tasksManagerTask>:
 * This function continuously checks for available tasks in the queues for
 * Ambulance, Police, Fire Department, and Corona services. If there are
 * available tasks and the current running tasks are below the maximum allowed,
 * it assigns tasks to the appropriate handlers.
 */
void tasksManagerTask(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	uint32_t ulNotificationValue;
	int8_t newTaskIndex;
	for(;;) {
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 80008be:	4b80      	ldr	r3, [pc, #512]	@ (8000ac0 <tasksManagerTask+0x208>)
 80008c0:	f993 3000 	ldrsb.w	r3, [r3]
 80008c4:	2b09      	cmp	r3, #9
 80008c6:	dd06      	ble.n	80008d6 <tasksManagerTask+0x1e>
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, TASK_MANAGER_TICKS_TO_WAIT);
 80008c8:	463a      	mov	r2, r7
 80008ca:	2328      	movs	r3, #40	@ 0x28
 80008cc:	2100      	movs	r1, #0
 80008ce:	2000      	movs	r0, #0
 80008d0:	f007 fc1c 	bl	800810c <xTaskNotifyWait>
 80008d4:	e7f3      	b.n	80008be <tasksManagerTask+0x6>
		} else {
			// Check if there are Ambulance tasks to perform
			if(uxQueueMessagesWaiting( qAmbulance ) > 0) {
 80008d6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ac4 <tasksManagerTask+0x20c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f006 fa40 	bl	8006d60 <uxQueueMessagesWaiting>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d032      	beq.n	800094c <tasksManagerTask+0x94>
				newTaskIndex = getAvailableAmbulanceTask();
 80008e6:	f000 fa73 	bl	8000dd0 <getAvailableAmbulanceTask>
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f6:	d029      	beq.n	800094c <tasksManagerTask+0x94>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80008f8:	4b73      	ldr	r3, [pc, #460]	@ (8000ac8 <tasksManagerTask+0x210>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	4618      	mov	r0, r3
 8000902:	f006 f915 	bl	8006b30 <xQueueSemaphoreTake>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d112      	bne.n	8000932 <tasksManagerTask+0x7a>
						printf("Ambulance handler number %d is now active\r\n", newTaskIndex);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4619      	mov	r1, r3
 8000912:	486e      	ldr	r0, [pc, #440]	@ (8000acc <tasksManagerTask+0x214>)
 8000914:	f008 ff76 	bl	8009804 <iprintf>
						fflush(stdout);
 8000918:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad0 <tasksManagerTask+0x218>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	4618      	mov	r0, r3
 8000920:	f008 fe9a 	bl	8009658 <fflush>
						xSemaphoreGive(printfMutex);
 8000924:	4b68      	ldr	r3, [pc, #416]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	f005 fe69 	bl	8006604 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8000932:	f000 fa01 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vAmbulanceTasks[newTaskIndex], 0, eNoAction);
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	4a66      	ldr	r2, [pc, #408]	@ (8000ad4 <tasksManagerTask+0x21c>)
 800093c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	f007 fc41 	bl	80081cc <xTaskGenericNotify>
					continue;
 800094a:	e0b8      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}
			// Check if there are Police tasks to perform
			if(uxQueueMessagesWaiting( qPolice ) > 0) {
 800094c:	4b62      	ldr	r3, [pc, #392]	@ (8000ad8 <tasksManagerTask+0x220>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f006 fa05 	bl	8006d60 <uxQueueMessagesWaiting>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d032      	beq.n	80009c2 <tasksManagerTask+0x10a>
				newTaskIndex = getAvailablePoliceeTask();
 800095c:	f000 fa78 	bl	8000e50 <getAvailablePoliceeTask>
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d029      	beq.n	80009c2 <tasksManagerTask+0x10a>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800096e:	4b56      	ldr	r3, [pc, #344]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f04f 31ff 	mov.w	r1, #4294967295
 8000976:	4618      	mov	r0, r3
 8000978:	f006 f8da 	bl	8006b30 <xQueueSemaphoreTake>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d112      	bne.n	80009a8 <tasksManagerTask+0xf0>
						printf("Police handler number %d is now active\r\n", newTaskIndex);
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	4619      	mov	r1, r3
 8000988:	4854      	ldr	r0, [pc, #336]	@ (8000adc <tasksManagerTask+0x224>)
 800098a:	f008 ff3b 	bl	8009804 <iprintf>
						fflush(stdout);
 800098e:	4b50      	ldr	r3, [pc, #320]	@ (8000ad0 <tasksManagerTask+0x218>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4618      	mov	r0, r3
 8000996:	f008 fe5f 	bl	8009658 <fflush>
						xSemaphoreGive(printfMutex);
 800099a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac8 <tasksManagerTask+0x210>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	2300      	movs	r3, #0
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	f005 fe2e 	bl	8006604 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 80009a8:	f000 f9c6 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vPoliceTasks[newTaskIndex], 0, eNoAction);
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ae0 <tasksManagerTask+0x228>)
 80009b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009b6:	2300      	movs	r3, #0
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	f007 fc06 	bl	80081cc <xTaskGenericNotify>
					continue;
 80009c0:	e07d      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}

			// Check if there are Fire Dep tasks to perform
			if(uxQueueMessagesWaiting( qFire ) > 0) {
 80009c2:	4b48      	ldr	r3, [pc, #288]	@ (8000ae4 <tasksManagerTask+0x22c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 f9ca 	bl	8006d60 <uxQueueMessagesWaiting>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d032      	beq.n	8000a38 <tasksManagerTask+0x180>
				newTaskIndex = getAvailableFireTask();
 80009d2:	f000 fa7d 	bl	8000ed0 <getAvailableFireTask>
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e2:	d029      	beq.n	8000a38 <tasksManagerTask+0x180>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80009e4:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <tasksManagerTask+0x210>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 f89f 	bl	8006b30 <xQueueSemaphoreTake>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d112      	bne.n	8000a1e <tasksManagerTask+0x166>
						printf("Fire dep handler number %d is now active\r\n", newTaskIndex);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4619      	mov	r1, r3
 80009fe:	483a      	ldr	r0, [pc, #232]	@ (8000ae8 <tasksManagerTask+0x230>)
 8000a00:	f008 ff00 	bl	8009804 <iprintf>
						fflush(stdout);
 8000a04:	4b32      	ldr	r3, [pc, #200]	@ (8000ad0 <tasksManagerTask+0x218>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f008 fe24 	bl	8009658 <fflush>
						xSemaphoreGive(printfMutex);
 8000a10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	2300      	movs	r3, #0
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f005 fdf3 	bl	8006604 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8000a1e:	f000 f98b 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vFireTasks[newTaskIndex], 0, eNoAction);
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	4a31      	ldr	r2, [pc, #196]	@ (8000aec <tasksManagerTask+0x234>)
 8000a28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	f007 fbcb 	bl	80081cc <xTaskGenericNotify>
					continue;
 8000a36:	e042      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}

			// Check if there are Corona tasks to perform
			if(uxQueueMessagesWaiting( qCorona ) > 0) {
 8000a38:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <tasksManagerTask+0x238>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f006 f98f 	bl	8006d60 <uxQueueMessagesWaiting>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d032      	beq.n	8000aae <tasksManagerTask+0x1f6>
				newTaskIndex = getAvailableCoronaTask();
 8000a48:	f000 fa82 	bl	8000f50 <getAvailableCoronaTask>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d029      	beq.n	8000aae <tasksManagerTask+0x1f6>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a62:	4618      	mov	r0, r3
 8000a64:	f006 f864 	bl	8006b30 <xQueueSemaphoreTake>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d112      	bne.n	8000a94 <tasksManagerTask+0x1dc>
						printf("Corona handler number %d is now active\r\n", newTaskIndex);
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	4619      	mov	r1, r3
 8000a74:	481f      	ldr	r0, [pc, #124]	@ (8000af4 <tasksManagerTask+0x23c>)
 8000a76:	f008 fec5 	bl	8009804 <iprintf>
						fflush(stdout);
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <tasksManagerTask+0x218>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 fde9 	bl	8009658 <fflush>
						xSemaphoreGive(printfMutex);
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <tasksManagerTask+0x210>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f005 fdb8 	bl	8006604 <xQueueGenericSend>
					}
					addCurrentRunningTask();
 8000a94:	f000 f950 	bl	8000d38 <addCurrentRunningTask>
					xTaskNotify(vCoronaTasks[newTaskIndex], 0, eNoAction);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <tasksManagerTask+0x240>)
 8000a9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f007 fb90 	bl	80081cc <xTaskGenericNotify>
					continue;
 8000aac:	e007      	b.n	8000abe <tasksManagerTask+0x206>
				}
			}
			portYIELD();
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <tasksManagerTask+0x244>)
 8000ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	f3bf 8f4f 	dsb	sy
 8000aba:	f3bf 8f6f 	isb	sy
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8000abe:	e6fe      	b.n	80008be <tasksManagerTask+0x6>
 8000ac0:	20000798 	.word	0x20000798
 8000ac4:	20000714 	.word	0x20000714
 8000ac8:	20000788 	.word	0x20000788
 8000acc:	0800a960 	.word	0x0800a960
 8000ad0:	2000001c 	.word	0x2000001c
 8000ad4:	20000728 	.word	0x20000728
 8000ad8:	20000718 	.word	0x20000718
 8000adc:	0800a98c 	.word	0x0800a98c
 8000ae0:	20000738 	.word	0x20000738
 8000ae4:	2000071c 	.word	0x2000071c
 8000ae8:	0800a9b8 	.word	0x0800a9b8
 8000aec:	20000744 	.word	0x20000744
 8000af0:	20000720 	.word	0x20000720
 8000af4:	0800a9e4 	.word	0x0800a9e4
 8000af8:	2000074c 	.word	0x2000074c
 8000afc:	e000ed04 	.word	0xe000ed04

08000b00 <vHandleCall>:
 * notifications indicating a new task to process, executes the task, and updates
 * the shared data with the results.
 *
 * @param pvParameters Pointer to the task initialization parameters.
 */
void vHandleCall(void* pvParameters) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0bc      	sub	sp, #240	@ 0xf0
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifictionValue;
	TickType_t startTick, endTick, totalTicks;
	taskInit_t* pTaskInit = (taskInit_t*)pvParameters;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	DispatcherPacket new_packet = {0};
 8000b0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b12:	2268      	movs	r2, #104	@ 0x68
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 fff0 	bl	8009afc <memset>

	char printMSG[100];
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8000b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b20:	781b      	ldrb	r3, [r3, #0]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d016      	beq.n	8000b54 <vHandleCall+0x54>
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8000b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d00f      	beq.n	8000b50 <vHandleCall+0x50>
 8000b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d008      	beq.n	8000b4c <vHandleCall+0x4c>
 8000b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d101      	bne.n	8000b48 <vHandleCall+0x48>
 8000b44:	4b6e      	ldr	r3, [pc, #440]	@ (8000d00 <vHandleCall+0x200>)
 8000b46:	e006      	b.n	8000b56 <vHandleCall+0x56>
 8000b48:	4b6e      	ldr	r3, [pc, #440]	@ (8000d04 <vHandleCall+0x204>)
 8000b4a:	e004      	b.n	8000b56 <vHandleCall+0x56>
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <vHandleCall+0x208>)
 8000b4e:	e002      	b.n	8000b56 <vHandleCall+0x56>
 8000b50:	4b6e      	ldr	r3, [pc, #440]	@ (8000d0c <vHandleCall+0x20c>)
 8000b52:	e000      	b.n	8000b56 <vHandleCall+0x56>
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8000b54:	4b6e      	ldr	r3, [pc, #440]	@ (8000d10 <vHandleCall+0x210>)
			, pTaskInit->taskIdentifier);
 8000b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000b5a:	7852      	ldrb	r2, [r2, #1]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8000b5c:	f107 0008 	add.w	r0, r7, #8
 8000b60:	9200      	str	r2, [sp, #0]
 8000b62:	4a6c      	ldr	r2, [pc, #432]	@ (8000d14 <vHandleCall+0x214>)
 8000b64:	2164      	movs	r1, #100	@ 0x64
 8000b66:	f008 febd 	bl	80098e4 <sniprintf>
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d18 <vHandleCall+0x218>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 ffdc 	bl	8006b30 <xQueueSemaphoreTake>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d111      	bne.n	8000ba2 <vHandleCall+0xa2>
		printf(printMSG);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f008 fe3e 	bl	8009804 <iprintf>
		fflush(stdout);
 8000b88:	4b64      	ldr	r3, [pc, #400]	@ (8000d1c <vHandleCall+0x21c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fd62 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 8000b94:	4b60      	ldr	r3, [pc, #384]	@ (8000d18 <vHandleCall+0x218>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f005 fd31 	bl	8006604 <xQueueGenericSend>
	}
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8000ba2:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	2100      	movs	r1, #0
 8000bac:	2000      	movs	r0, #0
 8000bae:	f007 faad 	bl	800810c <xTaskNotifyWait>
		// Get starting time tick count
		startTick = xTaskGetTickCount();
 8000bb2:	f006 fdbd 	bl	8007730 <xTaskGetTickCount>
 8000bb6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0

		// Get packet from the queue handler
		//DispatcherPacket new_packet;

		if(!(xQueueReceive(*(pTaskInit->pQhandler), &new_packet, portMAX_DELAY) == pdTRUE)) {
 8000bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f005 fec8 	bl	8006960 <xQueueReceive>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	f040 8091 	bne.w	8000cfa <vHandleCall+0x1fa>
			continue;
		}

		// Wait for the job to get done.
		// TODO: Should vTaskDelayUntil be used?
		vTaskDelay(new_packet.timeToHandleInTicks);
 8000bd8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 fc4d 	bl	800747c <vTaskDelay>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8000be2:	4b4d      	ldr	r3, [pc, #308]	@ (8000d18 <vHandleCall+0x218>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bea:	4618      	mov	r0, r3
 8000bec:	f005 ffa0 	bl	8006b30 <xQueueSemaphoreTake>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d113      	bne.n	8000c1e <vHandleCall+0x11e>
			printf("Handled task: %s \r\n", new_packet.message);
 8000bf6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4848      	ldr	r0, [pc, #288]	@ (8000d20 <vHandleCall+0x220>)
 8000c00:	f008 fe00 	bl	8009804 <iprintf>
			fflush(stdout);
 8000c04:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <vHandleCall+0x21c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f008 fd24 	bl	8009658 <fflush>
			xSemaphoreGive(printfMutex);
 8000c10:	4b41      	ldr	r3, [pc, #260]	@ (8000d18 <vHandleCall+0x218>)
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f005 fcf3 	bl	8006604 <xQueueGenericSend>
		}

		// Update shared app data
		if(xTasksDataMutex != NULL) {
 8000c1e:	4b41      	ldr	r3, [pc, #260]	@ (8000d24 <vHandleCall+0x224>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d040      	beq.n	8000ca8 <vHandleCall+0x1a8>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000c26:	4b3f      	ldr	r3, [pc, #252]	@ (8000d24 <vHandleCall+0x224>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 ff7e 	bl	8006b30 <xQueueSemaphoreTake>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d136      	bne.n	8000ca8 <vHandleCall+0x1a8>
				total_tasks_ran++;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <vHandleCall+0x228>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a39      	ldr	r2, [pc, #228]	@ (8000d28 <vHandleCall+0x228>)
 8000c42:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 8000c44:	f006 fd74 	bl	8007730 <xTaskGetTickCount>
 8000c48:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
				totalTicks = endTick - startTick;
 8000c4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
				total_tasks_time += (float)totalTicks / configTICK_RATE_HZ;
 8000c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c66:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8000d2c <vHandleCall+0x22c>
 8000c6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <vHandleCall+0x230>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c78:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <vHandleCall+0x230>)
 8000c7a:	edc3 7a00 	vstr	s15, [r3]
				average_task_time = (float)total_tasks_ran/total_tasks_time;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <vHandleCall+0x228>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <vHandleCall+0x230>)
 8000c8c:	ed93 7a00 	vldr	s14, [r3]
 8000c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <vHandleCall+0x234>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
				 * TODO: Calculating the average_task_time in this task is a waste
				 * 		 of resources. Data calculation should be done in its own
				 * 		 lower priority task and only run when printing of data
				 * 		 is required.
				 */
				xSemaphoreGive(xTasksDataMutex);
 8000c9a:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <vHandleCall+0x224>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f005 fcae 	bl	8006604 <xQueueGenericSend>
				 * The mutex couldn't be obtained. Code should never get here.
				 */
			}
		}
		// Indicate the task is now available for the next incoming packet.
		if(*pTaskInit->pSemHandler != NULL) {
 8000ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f43f af76 	beq.w	8000ba2 <vHandleCall+0xa2>
			if(xSemaphoreTake(*(pTaskInit->pSemHandler), portMAX_DELAY) ==  pdTRUE) {
 8000cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f005 ff34 	bl	8006b30 <xQueueSemaphoreTake>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	f47f af69 	bne.w	8000ba2 <vHandleCall+0xa2>
				removeCurrentRunningTask();
 8000cd0:	f000 f858 	bl	8000d84 <removeCurrentRunningTask>
				pTaskInit->bTaskStatusArr[pTaskInit->taskIdentifier] = false;
 8000cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cde:	7852      	ldrb	r2, [r2, #1]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(*(pTaskInit->pSemHandler));
 8000ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f005 fc86 	bl	8006604 <xQueueGenericSend>
 8000cf8:	e753      	b.n	8000ba2 <vHandleCall+0xa2>
			continue;
 8000cfa:	bf00      	nop
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8000cfc:	e751      	b.n	8000ba2 <vHandleCall+0xa2>
 8000cfe:	bf00      	nop
 8000d00:	0800aa10 	.word	0x0800aa10
 8000d04:	0800aa18 	.word	0x0800aa18
 8000d08:	0800aa24 	.word	0x0800aa24
 8000d0c:	0800aa30 	.word	0x0800aa30
 8000d10:	0800aa38 	.word	0x0800aa38
 8000d14:	0800aa44 	.word	0x0800aa44
 8000d18:	20000788 	.word	0x20000788
 8000d1c:	2000001c 	.word	0x2000001c
 8000d20:	0800aa70 	.word	0x0800aa70
 8000d24:	2000079c 	.word	0x2000079c
 8000d28:	20000790 	.word	0x20000790
 8000d2c:	447a0000 	.word	0x447a0000
 8000d30:	2000078c 	.word	0x2000078c
 8000d34:	20000794 	.word	0x20000794

08000d38 <addCurrentRunningTask>:
 * @brief Increments the count of currently running tasks.
 *
 * This function safely increments the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void addCurrentRunningTask(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(xTasksDataMutex != NULL) {
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <addCurrentRunningTask+0x44>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d019      	beq.n	8000d78 <addCurrentRunningTask+0x40>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <addCurrentRunningTask+0x44>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 feef 	bl	8006b30 <xQueueSemaphoreTake>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d10f      	bne.n	8000d78 <addCurrentRunningTask+0x40>
			current_running_tasks++;
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <addCurrentRunningTask+0x48>)
 8000d5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <addCurrentRunningTask+0x48>)
 8000d68:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <addCurrentRunningTask+0x44>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	f005 fc46 	bl	8006604 <xQueueGenericSend>
		}
	}
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000079c 	.word	0x2000079c
 8000d80:	20000798 	.word	0x20000798

08000d84 <removeCurrentRunningTask>:
 * @brief Decrements the count of currently running tasks.
 *
 * This function safely decrements the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void removeCurrentRunningTask(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	if(xTasksDataMutex != NULL) {
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <removeCurrentRunningTask+0x44>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d019      	beq.n	8000dc4 <removeCurrentRunningTask+0x40>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <removeCurrentRunningTask+0x44>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 fec9 	bl	8006b30 <xQueueSemaphoreTake>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10f      	bne.n	8000dc4 <removeCurrentRunningTask+0x40>
			current_running_tasks--;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <removeCurrentRunningTask+0x48>)
 8000da6:	f993 3000 	ldrsb.w	r3, [r3]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	3b01      	subs	r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <removeCurrentRunningTask+0x48>)
 8000db4:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <removeCurrentRunningTask+0x44>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f005 fc20 	bl	8006604 <xQueueGenericSend>
		}
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000079c 	.word	0x2000079c
 8000dcc:	20000798 	.word	0x20000798

08000dd0 <getAvailableAmbulanceTask>:
 * This function iterates through the ambulance task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available ambulance tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableAmbulanceTask(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(AmbTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <getAvailableAmbulanceTask+0x78>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f04f 31ff 	mov.w	r1, #4294967295
 8000dde:	4618      	mov	r0, r3
 8000de0:	f005 fea6 	bl	8006b30 <xQueueSemaphoreTake>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d127      	bne.n	8000e3a <getAvailableAmbulanceTask+0x6a>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	e01a      	b.n	8000e26 <getAvailableAmbulanceTask+0x56>
			if(bAmbTasksStatus[i] == false) {
 8000df0:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <getAvailableAmbulanceTask+0x7c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	f083 0301 	eor.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <getAvailableAmbulanceTask+0x50>
				bAmbTasksStatus[i] = true;
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <getAvailableAmbulanceTask+0x7c>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(AmbTasksStatusMutex);
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <getAvailableAmbulanceTask+0x78>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	f005 fbf5 	bl	8006604 <xQueueGenericSend>
				return (int8_t)i;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	e00e      	b.n	8000e3e <getAvailableAmbulanceTask+0x6e>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	dde1      	ble.n	8000df0 <getAvailableAmbulanceTask+0x20>
			}
		}
		xSemaphoreGive(AmbTasksStatusMutex);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <getAvailableAmbulanceTask+0x78>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	2300      	movs	r3, #0
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	f005 fbe5 	bl	8006604 <xQueueGenericSend>
	}
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000076c 	.word	0x2000076c
 8000e4c:	20000768 	.word	0x20000768

08000e50 <getAvailablePoliceeTask>:
 * This function iterates through the police task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available police tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailablePoliceeTask(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(PolTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <getAvailablePoliceeTask+0x78>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fe66 	bl	8006b30 <xQueueSemaphoreTake>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d127      	bne.n	8000eba <getAvailablePoliceeTask+0x6a>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	e01a      	b.n	8000ea6 <getAvailablePoliceeTask+0x56>
			if(bPolTasksStatus[i] == false) {
 8000e70:	4a16      	ldr	r2, [pc, #88]	@ (8000ecc <getAvailablePoliceeTask+0x7c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f083 0301 	eor.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00e      	beq.n	8000ea0 <getAvailablePoliceeTask+0x50>
				bPolTasksStatus[i] = true;
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <getAvailablePoliceeTask+0x7c>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(PolTasksStatusMutex);
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <getAvailablePoliceeTask+0x78>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	f005 fbb5 	bl	8006604 <xQueueGenericSend>
				return (int8_t)i;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	e00e      	b.n	8000ebe <getAvailablePoliceeTask+0x6e>
		for(int i = 0; i < POLICE_TASKS; i++) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	dde1      	ble.n	8000e70 <getAvailablePoliceeTask+0x20>
			}
		}
		xSemaphoreGive(PolTasksStatusMutex);
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <getAvailablePoliceeTask+0x78>)
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f005 fba5 	bl	8006604 <xQueueGenericSend>
	}
	return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000774 	.word	0x20000774
 8000ecc:	20000770 	.word	0x20000770

08000ed0 <getAvailableFireTask>:
 * This function iterates through the fire department task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available fire department tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableFireTask(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(FireTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <getAvailableFireTask+0x78>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 31ff 	mov.w	r1, #4294967295
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f005 fe26 	bl	8006b30 <xQueueSemaphoreTake>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d127      	bne.n	8000f3a <getAvailableFireTask+0x6a>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e01a      	b.n	8000f26 <getAvailableFireTask+0x56>
			if(bFireTasksStatus[i] == false) {
 8000ef0:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <getAvailableFireTask+0x7c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	f083 0301 	eor.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00e      	beq.n	8000f20 <getAvailableFireTask+0x50>
				bFireTasksStatus[i] = true;
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <getAvailableFireTask+0x7c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(FireTasksStatusMutex);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <getAvailableFireTask+0x78>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	f005 fb75 	bl	8006604 <xQueueGenericSend>
				return (int8_t)i;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	e00e      	b.n	8000f3e <getAvailableFireTask+0x6e>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	dde1      	ble.n	8000ef0 <getAvailableFireTask+0x20>
			}
		}
		xSemaphoreGive(FireTasksStatusMutex);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <getAvailableFireTask+0x78>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	f005 fb65 	bl	8006604 <xQueueGenericSend>
	}
	return -1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000077c 	.word	0x2000077c
 8000f4c:	20000778 	.word	0x20000778

08000f50 <getAvailableCoronaTask>:
 * This function iterates through the corona task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available corona tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableCoronaTask(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(CorTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <getAvailableCoronaTask+0x78>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 fde6 	bl	8006b30 <xQueueSemaphoreTake>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d127      	bne.n	8000fba <getAvailableCoronaTask+0x6a>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e01a      	b.n	8000fa6 <getAvailableCoronaTask+0x56>
			if(bCorTasksStatus[i] == false) {
 8000f70:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <getAvailableCoronaTask+0x7c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00e      	beq.n	8000fa0 <getAvailableCoronaTask+0x50>
				bCorTasksStatus[i] = true;
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <getAvailableCoronaTask+0x7c>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(CorTasksStatusMutex);
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <getAvailableCoronaTask+0x78>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	f005 fb35 	bl	8006604 <xQueueGenericSend>
				return (int8_t)i;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	e00e      	b.n	8000fbe <getAvailableCoronaTask+0x6e>
		for(int i = 0; i < CORONA_TASKS; i++) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	dde1      	ble.n	8000f70 <getAvailableCoronaTask+0x20>
			}
		}
		xSemaphoreGive(CorTasksStatusMutex);
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <getAvailableCoronaTask+0x78>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f005 fb25 	bl	8006604 <xQueueGenericSend>
	}
	return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000784 	.word	0x20000784
 8000fcc:	20000780 	.word	0x20000780

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f001 f9be 	bl	8002356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f847 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f9cd 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe2:	f000 f9ad 	bl	8001340 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000fe6:	f000 f94d 	bl	8001284 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fea:	f000 f97b 	bl	80012e4 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8000fee:	f000 f8a9 	bl	8001144 <MX_RNG_Init>
  MX_TIM2_Init();
 8000ff2:	f000 f8f9 	bl	80011e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ff6:	f000 f8b9 	bl	800116c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ffa:	f004 ffc7 	bl	8005f8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <main+0x84>)
 8001000:	2100      	movs	r1, #0
 8001002:	4815      	ldr	r0, [pc, #84]	@ (8001058 <main+0x88>)
 8001004:	f005 f82c 	bl	8006060 <osThreadNew>
 8001008:	4603      	mov	r3, r0
 800100a:	4a14      	ldr	r2, [pc, #80]	@ (800105c <main+0x8c>)
 800100c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  BaseType_t status;
  status = xTaskCreate((TaskFunction_t)initTasks,
 800100e:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <main+0x90>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2338      	movs	r3, #56	@ 0x38
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	4912      	ldr	r1, [pc, #72]	@ (8001064 <main+0x94>)
 800101c:	4812      	ldr	r0, [pc, #72]	@ (8001068 <main+0x98>)
 800101e:	f006 f8cd 	bl	80071bc <xTaskCreate>
 8001022:	6078      	str	r0, [r7, #4]
		  "init_task",
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);
  configASSERT(status ==  pdTRUE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d00d      	beq.n	8001046 <main+0x76>
	__asm volatile
 800102a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800102e:	b672      	cpsid	i
 8001030:	f383 8811 	msr	BASEPRI, r3
 8001034:	f3bf 8f6f 	isb	sy
 8001038:	f3bf 8f4f 	dsb	sy
 800103c:	b662      	cpsie	i
 800103e:	603b      	str	r3, [r7, #0]
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	e7fd      	b.n	8001042 <main+0x72>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 8001046:	f006 fa51 	bl	80074ec <vTaskStartScheduler>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800104a:	f004 ffd3 	bl	8005ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <main+0x7e>
 8001052:	bf00      	nop
 8001054:	0800b7b0 	.word	0x0800b7b0
 8001058:	08001af1 	.word	0x08001af1
 800105c:	20000710 	.word	0x20000710
 8001060:	20000760 	.word	0x20000760
 8001064:	0800aa90 	.word	0x0800aa90
 8001068:	080015bd 	.word	0x080015bd

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	@ 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	@ 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f008 fd3e 	bl	8009afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a29      	ldr	r2, [pc, #164]	@ (800113c <SystemClock_Config+0xd0>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <SystemClock_Config+0xd0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <SystemClock_Config+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a24      	ldr	r2, [pc, #144]	@ (8001140 <SystemClock_Config+0xd4>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <SystemClock_Config+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010d8:	23d8      	movs	r3, #216	@ 0xd8
 80010da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010e0:	2309      	movs	r3, #9
 80010e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 f8a1 	bl	8003230 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010f4:	f000 fd5c 	bl	8001bb0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f8:	f002 f84a 	bl	8003190 <HAL_PWREx_EnableOverDrive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001102:	f000 fd55 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001112:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2107      	movs	r1, #7
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fb27 	bl	8003778 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001130:	f000 fd3e 	bl	8001bb0 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	@ 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_RNG_Init+0x20>)
 800114a:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <MX_RNG_Init+0x24>)
 800114c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_RNG_Init+0x20>)
 8001150:	f003 f95a 	bl	8004408 <HAL_RNG_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800115a:	f000 fd29 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000088 	.word	0x20000088
 8001168:	50060800 	.word	0x50060800

0800116c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_SPI1_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <MX_SPI1_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_SPI1_Init+0x74>)
 8001178:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_SPI1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_SPI1_Init+0x74>)
 8001186:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800118a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_SPI1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <MX_SPI1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_SPI1_Init+0x74>)
 800119a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800119e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011a2:	2208      	movs	r2, #8
 80011a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_SPI1_Init+0x74>)
 80011cc:	f003 fa05 	bl	80045da <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 fceb 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000098 	.word	0x20000098
 80011e4:	40013000 	.word	0x40013000

080011e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001208:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_TIM2_Init+0x98>)
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_TIM2_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122e:	4814      	ldr	r0, [pc, #80]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001230:	f003 fa7e 	bl	8004730 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800123a:	f000 fcb9 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_TIM2_Init+0x98>)
 800124c:	f003 fc48 	bl	8004ae0 <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001256:	f000 fcab 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <MX_TIM2_Init+0x98>)
 8001268:	f003 fe72 	bl	8004f50 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001272:	f000 fc9d 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000015c 	.word	0x2000015c

08001284 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <MX_USART3_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128e:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012c8:	f003 feee 	bl	80050a8 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 fc6d 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001a8 	.word	0x200001a8
 80012e0:	40004800 	.word	0x40004800

080012e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f2:	2206      	movs	r2, #6
 80012f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001304:	2202      	movs	r2, #2
 8001306:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130a:	2201      	movs	r2, #1
 800130c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131c:	2201      	movs	r2, #1
 800131e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001328:	f001 fdf7 	bl	8002f1a <HAL_PCD_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 fc3d 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000230 	.word	0x20000230

08001340 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <MX_DMA_Init+0x38>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <MX_DMA_Init+0x38>)
 800134c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <MX_DMA_Init+0x38>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	203b      	movs	r0, #59	@ 0x3b
 8001364:	f001 f900 	bl	8002568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001368:	203b      	movs	r0, #59	@ 0x3b
 800136a:	f001 f919 	bl	80025a0 <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	4b83      	ldr	r3, [pc, #524]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a82      	ldr	r2, [pc, #520]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b7d      	ldr	r3, [pc, #500]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a7c      	ldr	r2, [pc, #496]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b7a      	ldr	r3, [pc, #488]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b77      	ldr	r3, [pc, #476]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a76      	ldr	r2, [pc, #472]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b74      	ldr	r3, [pc, #464]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b71      	ldr	r3, [pc, #452]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a70      	ldr	r2, [pc, #448]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b6e      	ldr	r3, [pc, #440]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <MX_GPIO_Init+0x224>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b65      	ldr	r3, [pc, #404]	@ (80015a0 <MX_GPIO_Init+0x224>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a64      	ldr	r2, [pc, #400]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b62      	ldr	r3, [pc, #392]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001422:	4b5f      	ldr	r3, [pc, #380]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b5c      	ldr	r3, [pc, #368]	@ (80015a0 <MX_GPIO_Init+0x224>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001440:	4858      	ldr	r0, [pc, #352]	@ (80015a4 <MX_GPIO_Init+0x228>)
 8001442:	f001 fd51 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DCX_GPIO_Port, LCD_DCX_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800144c:	4856      	ldr	r0, [pc, #344]	@ (80015a8 <MX_GPIO_Init+0x22c>)
 800144e:	f001 fd4b 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CSX_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001458:	4854      	ldr	r0, [pc, #336]	@ (80015ac <MX_GPIO_Init+0x230>)
 800145a:	f001 fd45 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2140      	movs	r1, #64	@ 0x40
 8001462:	4853      	ldr	r0, [pc, #332]	@ (80015b0 <MX_GPIO_Init+0x234>)
 8001464:	f001 fd40 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	484d      	ldr	r0, [pc, #308]	@ (80015b4 <MX_GPIO_Init+0x238>)
 8001480:	f001 fb86 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001484:	2332      	movs	r3, #50	@ 0x32
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001494:	230b      	movs	r3, #11
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4845      	ldr	r0, [pc, #276]	@ (80015b4 <MX_GPIO_Init+0x238>)
 80014a0:	f001 fb76 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014a4:	2386      	movs	r3, #134	@ 0x86
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b4:	230b      	movs	r3, #11
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	483e      	ldr	r0, [pc, #248]	@ (80015b8 <MX_GPIO_Init+0x23c>)
 80014c0:	f001 fb66 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014c4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4831      	ldr	r0, [pc, #196]	@ (80015a4 <MX_GPIO_Init+0x228>)
 80014de:	f001 fb57 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DCX_Pin */
  GPIO_InitStruct.Pin = LCD_DCX_Pin;
 80014e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DCX_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	482b      	ldr	r0, [pc, #172]	@ (80015a8 <MX_GPIO_Init+0x22c>)
 80014fc:	f001 fb48 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001512:	230b      	movs	r3, #11
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4821      	ldr	r0, [pc, #132]	@ (80015a4 <MX_GPIO_Init+0x228>)
 800151e:	f001 fb37 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CSX_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CSX_Pin|LCD_RST_Pin;
 8001522:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	481c      	ldr	r0, [pc, #112]	@ (80015ac <MX_GPIO_Init+0x230>)
 800153c:	f001 fb28 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001540:	2340      	movs	r3, #64	@ 0x40
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4816      	ldr	r0, [pc, #88]	@ (80015b0 <MX_GPIO_Init+0x234>)
 8001558:	f001 fb1a 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <MX_GPIO_Init+0x234>)
 8001570:	f001 fb0e 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001574:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001586:	230b      	movs	r3, #11
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MX_GPIO_Init+0x234>)
 8001592:	f001 fafd 	bl	8002b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40021400 	.word	0x40021400
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020000 	.word	0x40020000

080015bc <initTasks>:

/* USER CODE BEGIN 4 */
void initTasks(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0a4      	sub	sp, #144	@ 0x90
 80015c0:	af02      	add	r7, sp, #8
	/* TODO: consider creating a dedicated function to initialize the tasks,
	 *       the function will receive the address of the tasks array, and its size,
	 *       and will initialize it.
	 *       This will replace initializing each array separately.
	 */
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80015c2:	4b92      	ldr	r3, [pc, #584]	@ (800180c <initTasks+0x250>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 fab0 	bl	8006b30 <xQueueSemaphoreTake>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d113      	bne.n	80015fe <initTasks+0x42>
		portENTER_CRITICAL();
 80015d6:	f007 fc79 	bl	8008ecc <vPortEnterCritical>
		printf("Starting initTasks task! \r\n");
 80015da:	488d      	ldr	r0, [pc, #564]	@ (8001810 <initTasks+0x254>)
 80015dc:	f008 f97a 	bl	80098d4 <puts>
		fflush(stdout);
 80015e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001814 <initTasks+0x258>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f008 f836 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 80015ec:	4b87      	ldr	r3, [pc, #540]	@ (800180c <initTasks+0x250>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	f005 f805 	bl	8006604 <xQueueGenericSend>
		portEXIT_CRITICAL();
 80015fa:	f007 fc9d 	bl	8008f38 <vPortExitCritical>
	}
	/* AMBULANCE TASK INIT */
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001604:	e056      	b.n	80016b4 <initTasks+0xf8>
		taskInit_t* ambulance_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001606:	2014      	movs	r0, #20
 8001608:	f007 fd8e 	bl	8009128 <pvPortMalloc>
 800160c:	65b8      	str	r0, [r7, #88]	@ 0x58
		configASSERT(ambulance_taskInit != NULL);
 800160e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10d      	bne.n	8001630 <initTasks+0x74>
	__asm volatile
 8001614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001618:	b672      	cpsid	i
 800161a:	f383 8811 	msr	BASEPRI, r3
 800161e:	f3bf 8f6f 	isb	sy
 8001622:	f3bf 8f4f 	dsb	sy
 8001626:	b662      	cpsie	i
 8001628:	653b      	str	r3, [r7, #80]	@ 0x50
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <initTasks+0x70>

		ambulance_taskInit->department = AMBULANCE;
 8001630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		ambulance_taskInit->taskIdentifier = i;
 8001636:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800163a:	b2da      	uxtb	r2, r3
 800163c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800163e:	705a      	strb	r2, [r3, #1]
		ambulance_taskInit->pQhandler = &qAmbulance;
 8001640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001642:	4a75      	ldr	r2, [pc, #468]	@ (8001818 <initTasks+0x25c>)
 8001644:	605a      	str	r2, [r3, #4]
		ambulance_taskInit->pSemHandler = &AmbTasksStatusMutex;
 8001646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001648:	4a74      	ldr	r2, [pc, #464]	@ (800181c <initTasks+0x260>)
 800164a:	609a      	str	r2, [r3, #8]
		ambulance_taskInit->bTaskStatusArr = bAmbTasksStatus;
 800164c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800164e:	4a74      	ldr	r2, [pc, #464]	@ (8001820 <initTasks+0x264>)
 8001650:	60da      	str	r2, [r3, #12]
		ambulance_taskInit->numOfTasks = AMBULANCE_TASKS;
 8001652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001654:	2204      	movs	r2, #4
 8001656:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i);
 8001658:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800165c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001660:	4a70      	ldr	r2, [pc, #448]	@ (8001824 <initTasks+0x268>)
 8001662:	2110      	movs	r1, #16
 8001664:	f008 f93e 	bl	80098e4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <initTasks+0x26c>)
 8001670:	4413      	add	r3, r2
 8001672:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	232e      	movs	r3, #46	@ 0x2e
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800167e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001682:	486a      	ldr	r0, [pc, #424]	@ (800182c <initTasks+0x270>)
 8001684:	f005 fd9a 	bl	80071bc <xTaskCreate>
 8001688:	6578      	str	r0, [r7, #84]	@ 0x54
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*)ambulance_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 800168a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800168c:	2b01      	cmp	r3, #1
 800168e:	d00c      	beq.n	80016aa <initTasks+0xee>
	 		/* TODO: handle this error */
	 		vPortFree(ambulance_taskInit);
 8001690:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001692:	f007 fe17 	bl	80092c4 <vPortFree>
	 		printf("Starting Ambulance Threads Failed! \r\n");
 8001696:	4866      	ldr	r0, [pc, #408]	@ (8001830 <initTasks+0x274>)
 8001698:	f008 f91c 	bl	80098d4 <puts>
	 		fflush(stdout);
 800169c:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <initTasks+0x258>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f007 ffd8 	bl	8009658 <fflush>
 80016a8:	e1ee      	b.n	8001a88 <initTasks+0x4cc>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 80016aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016ae:	3301      	adds	r3, #1
 80016b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80016b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	dda4      	ble.n	8001606 <initTasks+0x4a>
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80016bc:	4b53      	ldr	r3, [pc, #332]	@ (800180c <initTasks+0x250>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	4618      	mov	r0, r3
 80016c6:	f005 fa33 	bl	8006b30 <xQueueSemaphoreTake>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d113      	bne.n	80016f8 <initTasks+0x13c>
		portENTER_CRITICAL();
 80016d0:	f007 fbfc 	bl	8008ecc <vPortEnterCritical>
		printf("Started Ambulance Threads! \r\n");
 80016d4:	4857      	ldr	r0, [pc, #348]	@ (8001834 <initTasks+0x278>)
 80016d6:	f008 f8fd 	bl	80098d4 <puts>
		fflush(stdout);
 80016da:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <initTasks+0x258>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f007 ffb9 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 80016e6:	4b49      	ldr	r3, [pc, #292]	@ (800180c <initTasks+0x250>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	f004 ff88 	bl	8006604 <xQueueGenericSend>
		portEXIT_CRITICAL();
 80016f4:	f007 fc20 	bl	8008f38 <vPortExitCritical>
	}


	/* POLICE TASK INIT */
	for(int i=0; i<POLICE_TASKS; i++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016fe:	e04a      	b.n	8001796 <initTasks+0x1da>
		taskInit_t* police_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001700:	2014      	movs	r0, #20
 8001702:	f007 fd11 	bl	8009128 <pvPortMalloc>
 8001706:	6638      	str	r0, [r7, #96]	@ 0x60
		configASSERT(police_taskInit != NULL);
 8001708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <initTasks+0x16e>
	__asm volatile
 800170e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001712:	b672      	cpsid	i
 8001714:	f383 8811 	msr	BASEPRI, r3
 8001718:	f3bf 8f6f 	isb	sy
 800171c:	f3bf 8f4f 	dsb	sy
 8001720:	b662      	cpsie	i
 8001722:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	e7fd      	b.n	8001726 <initTasks+0x16a>

		police_taskInit->department = POLICE;
 800172a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
		police_taskInit->taskIdentifier = i;
 8001730:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001734:	b2da      	uxtb	r2, r3
 8001736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001738:	705a      	strb	r2, [r3, #1]
		police_taskInit->pQhandler = &qPolice;
 800173a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800173c:	4a3e      	ldr	r2, [pc, #248]	@ (8001838 <initTasks+0x27c>)
 800173e:	605a      	str	r2, [r3, #4]
		police_taskInit->pSemHandler = &PolTasksStatusMutex;
 8001740:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001742:	4a3e      	ldr	r2, [pc, #248]	@ (800183c <initTasks+0x280>)
 8001744:	609a      	str	r2, [r3, #8]
		police_taskInit->bTaskStatusArr = bPolTasksStatus;
 8001746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001748:	4a3d      	ldr	r2, [pc, #244]	@ (8001840 <initTasks+0x284>)
 800174a:	60da      	str	r2, [r3, #12]
		police_taskInit->numOfTasks = POLICE_TASKS;
 800174c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800174e:	2203      	movs	r2, #3
 8001750:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i);
 8001752:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001756:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800175a:	4a3a      	ldr	r2, [pc, #232]	@ (8001844 <initTasks+0x288>)
 800175c:	2110      	movs	r1, #16
 800175e:	f008 f8c1 	bl	80098e4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4a37      	ldr	r2, [pc, #220]	@ (8001848 <initTasks+0x28c>)
 800176a:	4413      	add	r3, r2
 800176c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	232e      	movs	r3, #46	@ 0x2e
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001778:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800177c:	482b      	ldr	r0, [pc, #172]	@ (800182c <initTasks+0x270>)
 800177e:	f005 fd1d 	bl	80071bc <xTaskCreate>
 8001782:	65f8      	str	r0, [r7, #92]	@ 0x5c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) police_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 8001784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001786:	2b01      	cmp	r3, #1
 8001788:	f040 8177 	bne.w	8001a7a <initTasks+0x4be>
	for(int i=0; i<POLICE_TASKS; i++) {
 800178c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001790:	3301      	adds	r3, #1
 8001792:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001796:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800179a:	2b02      	cmp	r3, #2
 800179c:	ddb0      	ble.n	8001700 <initTasks+0x144>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <initTasks+0x250>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f04f 31ff 	mov.w	r1, #4294967295
 80017a6:	4618      	mov	r0, r3
 80017a8:	f005 f9c2 	bl	8006b30 <xQueueSemaphoreTake>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d113      	bne.n	80017da <initTasks+0x21e>
		portENTER_CRITICAL();
 80017b2:	f007 fb8b 	bl	8008ecc <vPortEnterCritical>
		printf("Started Police Threads! \r\n");
 80017b6:	4825      	ldr	r0, [pc, #148]	@ (800184c <initTasks+0x290>)
 80017b8:	f008 f88c 	bl	80098d4 <puts>
		fflush(stdout);
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <initTasks+0x258>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f007 ff48 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <initTasks+0x250>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	f004 ff17 	bl	8006604 <xQueueGenericSend>
		portEXIT_CRITICAL();
 80017d6:	f007 fbaf 	bl	8008f38 <vPortExitCritical>
	}

	/* FIRE DEP TASK INIT */
	for(int i=0; i<FIRE_TASKS; i++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017de:	e068      	b.n	80018b2 <initTasks+0x2f6>
		taskInit_t* fire_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80017e0:	2014      	movs	r0, #20
 80017e2:	f007 fca1 	bl	8009128 <pvPortMalloc>
 80017e6:	66b8      	str	r0, [r7, #104]	@ 0x68
		configASSERT(fire_taskInit != NULL);
 80017e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d130      	bne.n	8001850 <initTasks+0x294>
	__asm volatile
 80017ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017f2:	b672      	cpsid	i
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	b662      	cpsie	i
 8001802:	64bb      	str	r3, [r7, #72]	@ 0x48
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	e7fd      	b.n	8001806 <initTasks+0x24a>
 800180a:	bf00      	nop
 800180c:	20000788 	.word	0x20000788
 8001810:	0800aa9c 	.word	0x0800aa9c
 8001814:	2000001c 	.word	0x2000001c
 8001818:	20000714 	.word	0x20000714
 800181c:	2000076c 	.word	0x2000076c
 8001820:	20000768 	.word	0x20000768
 8001824:	0800aab8 	.word	0x0800aab8
 8001828:	20000728 	.word	0x20000728
 800182c:	08000b01 	.word	0x08000b01
 8001830:	0800aac8 	.word	0x0800aac8
 8001834:	0800aaf0 	.word	0x0800aaf0
 8001838:	20000718 	.word	0x20000718
 800183c:	20000774 	.word	0x20000774
 8001840:	20000770 	.word	0x20000770
 8001844:	0800ab10 	.word	0x0800ab10
 8001848:	20000738 	.word	0x20000738
 800184c:	0800ab1c 	.word	0x0800ab1c

		fire_taskInit->department = FIRE;
 8001850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
		fire_taskInit->taskIdentifier = i;
 8001856:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001858:	b2da      	uxtb	r2, r3
 800185a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800185c:	705a      	strb	r2, [r3, #1]
		fire_taskInit->pQhandler = &qFire;
 800185e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001860:	4a8b      	ldr	r2, [pc, #556]	@ (8001a90 <initTasks+0x4d4>)
 8001862:	605a      	str	r2, [r3, #4]
		fire_taskInit->pSemHandler = &FireTasksStatusMutex;
 8001864:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001866:	4a8b      	ldr	r2, [pc, #556]	@ (8001a94 <initTasks+0x4d8>)
 8001868:	609a      	str	r2, [r3, #8]
		fire_taskInit->bTaskStatusArr = bFireTasksStatus;
 800186a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800186c:	4a8a      	ldr	r2, [pc, #552]	@ (8001a98 <initTasks+0x4dc>)
 800186e:	60da      	str	r2, [r3, #12]
		fire_taskInit->numOfTasks = FIRE_TASKS;
 8001870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001872:	2202      	movs	r2, #2
 8001874:	741a      	strb	r2, [r3, #16]
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i);
 8001876:	f107 0014 	add.w	r0, r7, #20
 800187a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800187c:	4a87      	ldr	r2, [pc, #540]	@ (8001a9c <initTasks+0x4e0>)
 800187e:	2110      	movs	r1, #16
 8001880:	f008 f830 	bl	80098e4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001884:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4a85      	ldr	r2, [pc, #532]	@ (8001aa0 <initTasks+0x4e4>)
 800188a:	4413      	add	r3, r2
 800188c:	f107 0114 	add.w	r1, r7, #20
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	232e      	movs	r3, #46	@ 0x2e
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001898:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800189c:	4881      	ldr	r0, [pc, #516]	@ (8001aa4 <initTasks+0x4e8>)
 800189e:	f005 fc8d 	bl	80071bc <xTaskCreate>
 80018a2:	6678      	str	r0, [r7, #100]	@ 0x64
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) fire_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 80018a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f040 80e9 	bne.w	8001a7e <initTasks+0x4c2>
	for(int i=0; i<FIRE_TASKS; i++) {
 80018ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018ae:	3301      	adds	r3, #1
 80018b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	dd93      	ble.n	80017e0 <initTasks+0x224>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80018b8:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa8 <initTasks+0x4ec>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 f935 	bl	8006b30 <xQueueSemaphoreTake>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10f      	bne.n	80018ec <initTasks+0x330>
		printf("Started Fire Dep Threads! \r\n");
 80018cc:	4877      	ldr	r0, [pc, #476]	@ (8001aac <initTasks+0x4f0>)
 80018ce:	f008 f801 	bl	80098d4 <puts>
		fflush(stdout);
 80018d2:	4b77      	ldr	r3, [pc, #476]	@ (8001ab0 <initTasks+0x4f4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 febd 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 80018de:	4b72      	ldr	r3, [pc, #456]	@ (8001aa8 <initTasks+0x4ec>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	f004 fe8c 	bl	8006604 <xQueueGenericSend>
	}

	/* CORONA TASK INIT */
	for(int i=0; i<CORONA_TASKS; i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018f0:	e043      	b.n	800197a <initTasks+0x3be>
		taskInit_t* corona_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 80018f2:	2014      	movs	r0, #20
 80018f4:	f007 fc18 	bl	8009128 <pvPortMalloc>
 80018f8:	6738      	str	r0, [r7, #112]	@ 0x70
		configASSERT(corona_taskInit != NULL);
 80018fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10d      	bne.n	800191c <initTasks+0x360>
	__asm volatile
 8001900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001904:	b672      	cpsid	i
 8001906:	f383 8811 	msr	BASEPRI, r3
 800190a:	f3bf 8f6f 	isb	sy
 800190e:	f3bf 8f4f 	dsb	sy
 8001912:	b662      	cpsie	i
 8001914:	647b      	str	r3, [r7, #68]	@ 0x44
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <initTasks+0x35c>

		corona_taskInit->department = CORONA;
 800191c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800191e:	2203      	movs	r2, #3
 8001920:	701a      	strb	r2, [r3, #0]
		corona_taskInit->taskIdentifier = i;
 8001922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001924:	b2da      	uxtb	r2, r3
 8001926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001928:	705a      	strb	r2, [r3, #1]
		corona_taskInit->pQhandler = &qCorona;
 800192a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800192c:	4a61      	ldr	r2, [pc, #388]	@ (8001ab4 <initTasks+0x4f8>)
 800192e:	605a      	str	r2, [r3, #4]
		corona_taskInit->pSemHandler = &CorTasksStatusMutex;
 8001930:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001932:	4a61      	ldr	r2, [pc, #388]	@ (8001ab8 <initTasks+0x4fc>)
 8001934:	609a      	str	r2, [r3, #8]
		corona_taskInit->bTaskStatusArr = bCorTasksStatus;
 8001936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001938:	4a60      	ldr	r2, [pc, #384]	@ (8001abc <initTasks+0x500>)
 800193a:	60da      	str	r2, [r3, #12]
		corona_taskInit->numOfTasks = CORONA_TASKS;
 800193c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800193e:	2204      	movs	r2, #4
 8001940:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i);
 8001942:	1d38      	adds	r0, r7, #4
 8001944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001946:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac0 <initTasks+0x504>)
 8001948:	2110      	movs	r1, #16
 800194a:	f007 ffcb 	bl	80098e4 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 800194e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <initTasks+0x508>)
 8001954:	4413      	add	r3, r2
 8001956:	1d39      	adds	r1, r7, #4
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	232e      	movs	r3, #46	@ 0x2e
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001960:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001964:	484f      	ldr	r0, [pc, #316]	@ (8001aa4 <initTasks+0x4e8>)
 8001966:	f005 fc29 	bl	80071bc <xTaskCreate>
 800196a:	66f8      	str	r0, [r7, #108]	@ 0x6c
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) corona_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 800196c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800196e:	2b01      	cmp	r3, #1
 8001970:	f040 8087 	bne.w	8001a82 <initTasks+0x4c6>
	for(int i=0; i<CORONA_TASKS; i++) {
 8001974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001976:	3301      	adds	r3, #1
 8001978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800197a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800197c:	2b03      	cmp	r3, #3
 800197e:	ddb8      	ble.n	80018f2 <initTasks+0x336>
	 		/* TODO: handle this error */
	 		return;
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001980:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <initTasks+0x4ec>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	4618      	mov	r0, r3
 800198a:	f005 f8d1 	bl	8006b30 <xQueueSemaphoreTake>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10f      	bne.n	80019b4 <initTasks+0x3f8>
		printf("Started Corona Threads! \r\n");
 8001994:	484c      	ldr	r0, [pc, #304]	@ (8001ac8 <initTasks+0x50c>)
 8001996:	f007 ff9d 	bl	80098d4 <puts>
		fflush(stdout);
 800199a:	4b45      	ldr	r3, [pc, #276]	@ (8001ab0 <initTasks+0x4f4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f007 fe59 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 80019a6:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <initTasks+0x4ec>)
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	f004 fe28 	bl	8006604 <xQueueGenericSend>
	}

	vTaskDelay(100);
 80019b4:	2064      	movs	r0, #100	@ 0x64
 80019b6:	f005 fd61 	bl	800747c <vTaskDelay>

	BaseType_t status = xTaskCreate((TaskFunction_t)vDispatcherCode,
 80019ba:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <initTasks+0x510>)
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	232c      	movs	r3, #44	@ 0x2c
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019c8:	4941      	ldr	r1, [pc, #260]	@ (8001ad0 <initTasks+0x514>)
 80019ca:	4842      	ldr	r0, [pc, #264]	@ (8001ad4 <initTasks+0x518>)
 80019cc:	f005 fbf6 	bl	80071bc <xTaskCreate>
 80019d0:	6778      	str	r0, [r7, #116]	@ 0x74
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							DISPATCHER_TASK_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 80019d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d156      	bne.n	8001a86 <initTasks+0x4ca>
		return;
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80019d8:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <initTasks+0x4ec>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	4618      	mov	r0, r3
 80019e2:	f005 f8a5 	bl	8006b30 <xQueueSemaphoreTake>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d10f      	bne.n	8001a0c <initTasks+0x450>
		printf("Started Dispatcher Thread! \r\n");
 80019ec:	483a      	ldr	r0, [pc, #232]	@ (8001ad8 <initTasks+0x51c>)
 80019ee:	f007 ff71 	bl	80098d4 <puts>
		fflush(stdout);
 80019f2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab0 <initTasks+0x4f4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f007 fe2d 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <initTasks+0x4ec>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	f004 fdfc 	bl	8006604 <xQueueGenericSend>
	}

	status = xTaskCreate((TaskFunction_t)tasksManagerTask,
 8001a0c:	4b33      	ldr	r3, [pc, #204]	@ (8001adc <initTasks+0x520>)
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	232b      	movs	r3, #43	@ 0x2b
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a1a:	4931      	ldr	r1, [pc, #196]	@ (8001ae0 <initTasks+0x524>)
 8001a1c:	4831      	ldr	r0, [pc, #196]	@ (8001ae4 <initTasks+0x528>)
 8001a1e:	f005 fbcd 	bl	80071bc <xTaskCreate>
 8001a22:	6778      	str	r0, [r7, #116]	@ 0x74
						(void*)1,
						MANAGER_TASK_PRIORITY,
						&vTasksManagerTask);


	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001a24:	4830      	ldr	r0, [pc, #192]	@ (8001ae8 <initTasks+0x52c>)
 8001a26:	f002 fedb 	bl	80047e0 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <initTasks+0x478>
		Error_Handler();
 8001a30:	f000 f8be 	bl	8001bb0 <Error_Handler>
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <initTasks+0x4ec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f005 f877 	bl	8006b30 <xQueueSemaphoreTake>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d10f      	bne.n	8001a68 <initTasks+0x4ac>
		printf("Timer interrupts enabled! \r\n");
 8001a48:	4828      	ldr	r0, [pc, #160]	@ (8001aec <initTasks+0x530>)
 8001a4a:	f007 ff43 	bl	80098d4 <puts>
		fflush(stdout);
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <initTasks+0x4f4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 fdff 	bl	8009658 <fflush>
		xSemaphoreGive(printfMutex);
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <initTasks+0x4ec>)
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	f004 fdce 	bl	8006604 <xQueueGenericSend>
	//	Error_Handler();
	//}
	//vTaskDelay(100);
	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001a68:	463a      	mov	r2, r7
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f006 fb4b 	bl	800810c <xTaskNotifyWait>
	for(;;) {
 8001a76:	bf00      	nop
 8001a78:	e7f6      	b.n	8001a68 <initTasks+0x4ac>
	 		return;
 8001a7a:	bf00      	nop
 8001a7c:	e004      	b.n	8001a88 <initTasks+0x4cc>
	 		return;
 8001a7e:	bf00      	nop
 8001a80:	e002      	b.n	8001a88 <initTasks+0x4cc>
	 		return;
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <initTasks+0x4cc>
		return;
 8001a86:	bf00      	nop
	}
}
 8001a88:	3788      	adds	r7, #136	@ 0x88
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000071c 	.word	0x2000071c
 8001a94:	2000077c 	.word	0x2000077c
 8001a98:	20000778 	.word	0x20000778
 8001a9c:	0800ab38 	.word	0x0800ab38
 8001aa0:	20000744 	.word	0x20000744
 8001aa4:	08000b01 	.word	0x08000b01
 8001aa8:	20000788 	.word	0x20000788
 8001aac:	0800ab40 	.word	0x0800ab40
 8001ab0:	2000001c 	.word	0x2000001c
 8001ab4:	20000720 	.word	0x20000720
 8001ab8:	20000784 	.word	0x20000784
 8001abc:	20000780 	.word	0x20000780
 8001ac0:	0800ab5c 	.word	0x0800ab5c
 8001ac4:	2000074c 	.word	0x2000074c
 8001ac8:	0800ab68 	.word	0x0800ab68
 8001acc:	2000075c 	.word	0x2000075c
 8001ad0:	0800ab84 	.word	0x0800ab84
 8001ad4:	080005a1 	.word	0x080005a1
 8001ad8:	0800ab94 	.word	0x0800ab94
 8001adc:	20000764 	.word	0x20000764
 8001ae0:	0800abb4 	.word	0x0800abb4
 8001ae4:	080008b9 	.word	0x080008b9
 8001ae8:	2000015c 	.word	0x2000015c
 8001aec:	0800abc4 	.word	0x0800abc4

08001af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f004 fb57 	bl	80061ac <osDelay>
 8001afe:	e7fb      	b.n	8001af8 <StartDefaultTask+0x8>

08001b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0a0      	sub	sp, #128	@ 0x80
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b10:	d13a      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x88>
		DispatcherPacket new_packet;
		generateDispatcherMSG(&new_packet);
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fdee 	bl	80006f8 <generateDispatcherMSG>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	673b      	str	r3, [r7, #112]	@ 0x70
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 f93c 	bl	8006da2 <uxQueueMessagesWaitingFromISR>
 8001b2a:	6778      	str	r0, [r7, #116]	@ 0x74
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
		if( qItems != TASKS_QUEUE_SIZE) {
 8001b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d012      	beq.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x58>
			xQueueSendFromISR(qDispatcher, &new_packet, NULL);
 8001b32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f107 0108 	add.w	r1, r7, #8
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f004 fe6b 	bl	8006818 <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	f006 fc03 	bl	800835c <xTaskGenericNotifyFromISR>
 8001b56:	e009      	b.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x6c>
			//printf("Added to queue! \r\n");
			//fflush(stdout);
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	f006 fbf8 	bl	800835c <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10a      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x88>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	f3bf 8f6f 	isb	sy
		/*
		 * TODO: add a random item to dispatcher queue.
		 */
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x96>
    HAL_IncTick();
 8001b92:	f000 fbed 	bl	8002370 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3778      	adds	r7, #120	@ 0x78
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000724 	.word	0x20000724
 8001ba4:	2000075c 	.word	0x2000075c
 8001ba8:	e000ed04 	.word	0xe000ed04
 8001bac:	40001000 	.word	0x40001000

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <Error_Handler+0x8>

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_MspInit+0x70>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <HAL_MspInit+0x70>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_MspInit+0x70>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_MspInit+0x70>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_MspInit+0x70>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_MspInit+0x70>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	f06f 0001 	mvn.w	r0, #1
 8001bfa:	f000 fcb5 	bl	8002568 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1  , 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2104      	movs	r1, #4
 8001c02:	2050      	movs	r0, #80	@ 0x50
 8001c04:	f000 fcb0 	bl	8002568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001c08:	2050      	movs	r0, #80	@ 0x50
 8001c0a:	f000 fcc9 	bl	80025a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2104      	movs	r1, #4
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 fca8 	bl	8002568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 fcc1 	bl	80025a0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f000 fc97 	bl	8002552 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a4      	sub	sp, #144	@ 0x90
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2284      	movs	r2, #132	@ 0x84
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f007 ff5b 	bl	8009afc <memset>
  if(hrng->Instance==RNG)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ca0 <HAL_RNG_MspInit+0x70>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d123      	bne.n	8001c98 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c50:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 ffe1 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001c6c:	f7ff ffa0 	bl	8001bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_RNG_MspInit+0x74>)
 8001c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <HAL_RNG_MspInit+0x74>)
 8001c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RNG_MspInit+0x74>)
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	2050      	movs	r0, #80	@ 0x50
 8001c8e:	f000 fc6b 	bl	8002568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001c92:	2050      	movs	r0, #80	@ 0x50
 8001c94:	f000 fc84 	bl	80025a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c98:	bf00      	nop
 8001c9a:	3790      	adds	r7, #144	@ 0x90
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	50060800 	.word	0x50060800
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <HAL_SPI_MspInit+0x110>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d171      	bne.n	8001dae <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a35      	ldr	r2, [pc, #212]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_SPI_MspInit+0x114>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d12:	2360      	movs	r3, #96	@ 0x60
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d22:	2305      	movs	r3, #5
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4824      	ldr	r0, [pc, #144]	@ (8001dc0 <HAL_SPI_MspInit+0x118>)
 8001d2e:	f000 ff2f 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d32:	2320      	movs	r3, #32
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d42:	2305      	movs	r3, #5
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	481d      	ldr	r0, [pc, #116]	@ (8001dc4 <HAL_SPI_MspInit+0x11c>)
 8001d4e:	f000 ff1f 	bl	8002b90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d54:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <HAL_SPI_MspInit+0x124>)
 8001d56:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d5a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001d5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d66:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d72:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d74:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001d94:	f000 fc12 	bl	80025bc <HAL_DMA_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001d9e:	f7ff ff07 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <HAL_SPI_MspInit+0x120>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40013000 	.word	0x40013000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	200000fc 	.word	0x200000fc
 8001dcc:	40026458 	.word	0x40026458

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d113      	bne.n	8001e0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <HAL_TIM_Base_MspInit+0x44>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <HAL_TIM_Base_MspInit+0x44>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_TIM_Base_MspInit+0x44>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	210a      	movs	r1, #10
 8001dfe:	201c      	movs	r0, #28
 8001e00:	f000 fbb2 	bl	8002568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e04:	201c      	movs	r0, #28
 8001e06:	f000 fbcb 	bl	80025a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0aa      	sub	sp, #168	@ 0xa8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	2284      	movs	r2, #132	@ 0x84
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f007 fe5f 	bl	8009afc <memset>
  if(huart->Instance==USART3)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <HAL_UART_MspInit+0xb4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d13c      	bne.n	8001ec2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fee6 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e62:	f7ff fea5 	bl	8001bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_UART_MspInit+0xb8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_UART_MspInit+0xb8>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_UART_MspInit+0xb8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_UART_MspInit+0xb8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <HAL_UART_MspInit+0xb8>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_UART_MspInit+0xb8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <HAL_UART_MspInit+0xbc>)
 8001ebe:	f000 fe67 	bl	8002b90 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ec2:	bf00      	nop
 8001ec4:	37a8      	adds	r7, #168	@ 0xa8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40004800 	.word	0x40004800
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020c00 	.word	0x40020c00

08001ed8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0ac      	sub	sp, #176	@ 0xb0
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	2284      	movs	r2, #132	@ 0x84
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f007 fdff 	bl	8009afc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f06:	d159      	bne.n	8001fbc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f14:	f107 0318 	add.w	r3, r7, #24
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 fe85 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f24:	f7ff fe44 	bl	8001bb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	4a25      	ldr	r2, [pc, #148]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f40:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f64:	4619      	mov	r1, r3
 8001f66:	4818      	ldr	r0, [pc, #96]	@ (8001fc8 <HAL_PCD_MspInit+0xf0>)
 8001f68:	f000 fe12 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4810      	ldr	r0, [pc, #64]	@ (8001fc8 <HAL_PCD_MspInit+0xf0>)
 8001f88:	f000 fe02 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f90:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f96:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001faa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fae:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb0:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <HAL_PCD_MspInit+0xec>)
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001fbc:	bf00      	nop
 8001fbe:	37b0      	adds	r7, #176	@ 0xb0
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	@ 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fdc:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <HAL_InitTick+0xe0>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	4a32      	ldr	r2, [pc, #200]	@ (80020ac <HAL_InitTick+0xe0>)
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe8:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <HAL_InitTick+0xe0>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff4:	f107 0210 	add.w	r2, r7, #16
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fde0 	bl	8003bc4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d103      	bne.n	8002016 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800200e:	f001 fdb1 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8002012:	6378      	str	r0, [r7, #52]	@ 0x34
 8002014:	e004      	b.n	8002020 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002016:	f001 fdad 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 800201a:	4603      	mov	r3, r0
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002022:	4a23      	ldr	r2, [pc, #140]	@ (80020b0 <HAL_InitTick+0xe4>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	3b01      	subs	r3, #1
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800202e:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_InitTick+0xe8>)
 8002030:	4a21      	ldr	r2, [pc, #132]	@ (80020b8 <HAL_InitTick+0xec>)
 8002032:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002034:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <HAL_InitTick+0xe8>)
 8002036:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800203a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800203c:	4a1d      	ldr	r2, [pc, #116]	@ (80020b4 <HAL_InitTick+0xe8>)
 800203e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002040:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <HAL_InitTick+0xe8>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_InitTick+0xe8>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_InitTick+0xe8>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002054:	4817      	ldr	r0, [pc, #92]	@ (80020b4 <HAL_InitTick+0xe8>)
 8002056:	f002 fb6b 	bl	8004730 <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002060:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11b      	bne.n	80020a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002068:	4812      	ldr	r0, [pc, #72]	@ (80020b4 <HAL_InitTick+0xe8>)
 800206a:	f002 fbb9 	bl	80047e0 <HAL_TIM_Base_Start_IT>
 800206e:	4603      	mov	r3, r0
 8002070:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002078:	2b00      	cmp	r3, #0
 800207a:	d111      	bne.n	80020a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800207c:	2036      	movs	r0, #54	@ 0x36
 800207e:	f000 fa8f 	bl	80025a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d808      	bhi.n	800209a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002088:	2200      	movs	r2, #0
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	2036      	movs	r0, #54	@ 0x36
 800208e:	f000 fa6b 	bl	8002568 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_InitTick+0xf0>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e002      	b.n	80020a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3738      	adds	r7, #56	@ 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	431bde83 	.word	0x431bde83
 80020b4:	200007a0 	.word	0x200007a0
 80020b8:	40001000 	.word	0x40001000
 80020bc:	20000004 	.word	0x20000004

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <NMI_Handler+0x4>

080020c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <MemManage_Handler+0x4>

080020d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <TIM2_IRQHandler+0x10>)
 80020fe:	f002 fbe7 	bl	80048d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000015c 	.word	0x2000015c

0800210c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <TIM6_DAC_IRQHandler+0x10>)
 8002112:	f002 fbdd 	bl	80048d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200007a0 	.word	0x200007a0

08002120 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <DMA2_Stream3_IRQHandler+0x10>)
 8002126:	f000 faf7 	bl	8002718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200000fc 	.word	0x200000fc

08002134 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002138:	4802      	ldr	r0, [pc, #8]	@ (8002144 <RNG_IRQHandler+0x10>)
 800213a:	f002 f9e5 	bl	8004508 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000088 	.word	0x20000088

08002148 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <ITM_SendChar+0x48>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <ITM_SendChar+0x48>)
 8002158:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215c:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <ITM_SendChar+0x4c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <ITM_SendChar+0x4c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 800216a:	bf00      	nop
 800216c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f8      	beq.n	800216c <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800217a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	6013      	str	r3, [r2, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000edfc 	.word	0xe000edfc
 8002194:	e0000e00 	.word	0xe0000e00

08002198 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
  }

  return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e009      	b.n	80021f8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ffab 	bl	8002148 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf1      	blt.n	80021e4 <_write+0x12>
  }
  return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_close>:

int _close(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002232:	605a      	str	r2, [r3, #4]
  return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <_sbrk+0x5c>)
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <_sbrk+0x60>)
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002288:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <_sbrk+0x64>)
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <_sbrk+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a4:	f007 fce2 	bl	8009c6c <__errno>
 80022a8:	4603      	mov	r3, r0
 80022aa:	220c      	movs	r2, #12
 80022ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e009      	b.n	80022c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ba:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <_sbrk+0x64>)
 80022c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20050000 	.word	0x20050000
 80022d4:	00000400 	.word	0x00000400
 80022d8:	200007ec 	.word	0x200007ec
 80022dc:	20019dc0 	.word	0x20019dc0

080022e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <SystemInit+0x20>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <SystemInit+0x20>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800233c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002308:	f7ff ffea 	bl	80022e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	@ (8002340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	@ (8002350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002332:	f007 fca1 	bl	8009c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7fe fe4b 	bl	8000fd0 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002348:	0800b838 	.word	0x0800b838
  ldr r2, =_sbss
 800234c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002350:	20019dc0 	.word	0x20019dc0

08002354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC_IRQHandler>

08002356 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235a:	2003      	movs	r0, #3
 800235c:	f000 f8f9 	bl	8002552 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002360:	200f      	movs	r0, #15
 8002362:	f7ff fe33 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002366:	f7ff fc29 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	@ (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	200007f0 	.word	0x200007f0

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	200007f0 	.word	0x200007f0

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <__NVIC_SetPriorityGrouping+0x40>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	4313      	orrs	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <__NVIC_SetPriorityGrouping+0x40>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	05fa0000 	.word	0x05fa0000

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	@ (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	@ (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	@ (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	@ 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff4c 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257a:	f7ff ff61 	bl	8002440 <__NVIC_GetPriorityGrouping>
 800257e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f7ff ffb1 	bl	80024ec <NVIC_EncodePriority>
 800258a:	4602      	mov	r2, r0
 800258c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff80 	bl	8002498 <__NVIC_SetPriority>
}
 8002598:	bf00      	nop
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff54 	bl	800245c <__NVIC_EnableIRQ>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff fee6 	bl	8002398 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e099      	b.n	800270c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f8:	e00f      	b.n	800261a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025fa:	f7ff fecd 	bl	8002398 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b05      	cmp	r3, #5
 8002606:	d908      	bls.n	800261a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2203      	movs	r2, #3
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e078      	b.n	800270c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e8      	bne.n	80025fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4b38      	ldr	r3, [pc, #224]	@ (8002714 <HAL_DMA_Init+0x158>)
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	2b04      	cmp	r3, #4
 8002672:	d107      	bne.n	8002684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	4313      	orrs	r3, r2
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d117      	bne.n	80026de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00e      	beq.n	80026de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f9e9 	bl	8002a98 <DMA_CheckFifoParam>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2240      	movs	r2, #64	@ 0x40
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026da:	2301      	movs	r3, #1
 80026dc:	e016      	b.n	800270c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9a0 	bl	8002a2c <DMA_CalcBaseAndBitshift>
 80026ec:	4603      	mov	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	223f      	movs	r2, #63	@ 0x3f
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	f010803f 	.word	0xf010803f

08002718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002724:	4b8e      	ldr	r3, [pc, #568]	@ (8002960 <HAL_DMA_IRQHandler+0x248>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a8e      	ldr	r2, [pc, #568]	@ (8002964 <HAL_DMA_IRQHandler+0x24c>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	2208      	movs	r2, #8
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0204 	bic.w	r2, r2, #4
 800276a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	2208      	movs	r2, #8
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	2201      	movs	r2, #1
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d012      	beq.n	80027ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	2201      	movs	r2, #1
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	2204      	movs	r2, #4
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	2204      	movs	r2, #4
 80027de:	409a      	lsls	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	2210      	movs	r2, #16
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d043      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d03c      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	2210      	movs	r2, #16
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d018      	beq.n	800285a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d024      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
 8002846:	e01f      	b.n	8002888 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01b      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e016      	b.n	8002888 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0208 	bic.w	r2, r2, #8
 8002876:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	2220      	movs	r2, #32
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 808f 	beq.w	80029b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8087 	beq.w	80029b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	2220      	movs	r2, #32
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d136      	bne.n	8002930 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0216 	bic.w	r2, r2, #22
 80028d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <HAL_DMA_IRQHandler+0x1da>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0208 	bic.w	r2, r2, #8
 8002900:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	223f      	movs	r2, #63	@ 0x3f
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d07e      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
        }
        return;
 800292e:	e079      	b.n	8002a24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01d      	beq.n	800297a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	2b00      	cmp	r3, #0
 8002952:	d031      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
 800295c:	e02c      	b.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
 800295e:	bf00      	nop
 8002960:	20000000 	.word	0x20000000
 8002964:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d023      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
 8002978:	e01e      	b.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0210 	bic.w	r2, r2, #16
 8002996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d032      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d022      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2205      	movs	r2, #5
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d307      	bcc.n	8002a00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f2      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x2cc>
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
 8002a22:	e000      	b.n	8002a26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a24:	bf00      	nop
    }
  }
}
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3b10      	subs	r3, #16
 8002a3c:	4a13      	ldr	r2, [pc, #76]	@ (8002a8c <DMA_CalcBaseAndBitshift+0x60>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <DMA_CalcBaseAndBitshift+0x64>)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d908      	bls.n	8002a6c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <DMA_CalcBaseAndBitshift+0x68>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	1d1a      	adds	r2, r3, #4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a6a:	e006      	b.n	8002a7a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <DMA_CalcBaseAndBitshift+0x68>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	aaaaaaab 	.word	0xaaaaaaab
 8002a90:	0800b7ec 	.word	0x0800b7ec
 8002a94:	fffffc00 	.word	0xfffffc00

08002a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11f      	bne.n	8002af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d856      	bhi.n	8002b66 <DMA_CheckFifoParam+0xce>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <DMA_CheckFifoParam+0x28>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002ae3 	.word	0x08002ae3
 8002ac8:	08002ad1 	.word	0x08002ad1
 8002acc:	08002b67 	.word	0x08002b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d046      	beq.n	8002b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e043      	b.n	8002b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aea:	d140      	bne.n	8002b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e03d      	b.n	8002b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002afa:	d121      	bne.n	8002b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d837      	bhi.n	8002b72 <DMA_CheckFifoParam+0xda>
 8002b02:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <DMA_CheckFifoParam+0x70>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b1f 	.word	0x08002b1f
 8002b10:	08002b19 	.word	0x08002b19
 8002b14:	08002b31 	.word	0x08002b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e030      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d025      	beq.n	8002b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2e:	e022      	b.n	8002b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b38:	d11f      	bne.n	8002b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b3e:	e01c      	b.n	8002b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d903      	bls.n	8002b4e <DMA_CheckFifoParam+0xb6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d003      	beq.n	8002b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b4c:	e018      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      break;
 8002b52:	e015      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e00b      	b.n	8002b7e <DMA_CheckFifoParam+0xe6>
      break;
 8002b66:	bf00      	nop
 8002b68:	e00a      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e008      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e006      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	@ 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e175      	b.n	8002e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8164 	bne.w	8002e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x56>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80be 	beq.w	8002e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b66      	ldr	r3, [pc, #408]	@ (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	4a65      	ldr	r2, [pc, #404]	@ (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d26:	4b63      	ldr	r3, [pc, #396]	@ (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d32:	4a61      	ldr	r2, [pc, #388]	@ (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a58      	ldr	r2, [pc, #352]	@ (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d037      	beq.n	8002dce <HAL_GPIO_Init+0x23e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a57      	ldr	r2, [pc, #348]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_GPIO_Init+0x23a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a56      	ldr	r2, [pc, #344]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x236>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a55      	ldr	r2, [pc, #340]	@ (8002ec8 <HAL_GPIO_Init+0x338>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x232>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a54      	ldr	r2, [pc, #336]	@ (8002ecc <HAL_GPIO_Init+0x33c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x22e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a53      	ldr	r2, [pc, #332]	@ (8002ed0 <HAL_GPIO_Init+0x340>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x22a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_GPIO_Init+0x344>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	@ (8002ed8 <HAL_GPIO_Init+0x348>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	@ (8002edc <HAL_GPIO_Init+0x34c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <HAL_GPIO_Init+0x350>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x21a>
 8002da6:	2309      	movs	r3, #9
 8002da8:	e012      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002daa:	230a      	movs	r3, #10
 8002dac:	e010      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dae:	2308      	movs	r3, #8
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	@ (8002eb8 <HAL_GPIO_Init+0x328>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a34      	ldr	r2, [pc, #208]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae86 	bls.w	8002bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	@ 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af02      	add	r7, sp, #8
 8002f20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e108      	b.n	800313e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe ffc6 	bl	8001ed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f5a:	d102      	bne.n	8002f62 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fd74 	bl	8005a54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7c1a      	ldrb	r2, [r3, #16]
 8002f74:	f88d 2000 	strb.w	r2, [sp]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7c:	f002 fd10 	bl	80059a0 <USB_CoreInit>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0d5      	b.n	800313e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fd6c 	bl	8005a76 <USB_SetCurrentMode>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0c6      	b.n	800313e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e04a      	b.n	800304c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3315      	adds	r3, #21
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3314      	adds	r3, #20
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	b298      	uxth	r0, r3
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	332e      	adds	r3, #46	@ 0x2e
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3318      	adds	r3, #24
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	331c      	adds	r3, #28
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3320      	adds	r3, #32
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3324      	adds	r3, #36	@ 0x24
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	3301      	adds	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	791b      	ldrb	r3, [r3, #4]
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	429a      	cmp	r2, r3
 8003054:	d3af      	bcc.n	8002fb6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	e044      	b.n	80030e6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	3301      	adds	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	791b      	ldrb	r3, [r3, #4]
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3b5      	bcc.n	800305c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7c1a      	ldrb	r2, [r3, #16]
 80030f8:	f88d 2000 	strb.w	r2, [sp]
 80030fc:	3304      	adds	r3, #4
 80030fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003100:	f002 fd06 	bl	8005b10 <USB_DevInit>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e013      	b.n	800313e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7b1b      	ldrb	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d102      	bne.n	8003132 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f80b 	bl	8003148 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f002 fec1 	bl	8005ebe <USB_DevDisconnect>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_PCDEx_ActivateLPM+0x44>)
 8003178:	4313      	orrs	r3, r2
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	10000003 	.word	0x10000003

08003190 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_PWREx_EnableOverDrive+0x98>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	4a22      	ldr	r2, [pc, #136]	@ (8003228 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1d      	ldr	r2, [pc, #116]	@ (800322c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031be:	f7ff f8eb 	bl	8002398 <HAL_GetTick>
 80031c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031c4:	e009      	b.n	80031da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031c6:	f7ff f8e7 	bl	8002398 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031d4:	d901      	bls.n	80031da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e022      	b.n	8003220 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031da:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e6:	d1ee      	bne.n	80031c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031e8:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0f      	ldr	r2, [pc, #60]	@ (800322c <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f4:	f7ff f8d0 	bl	8002398 <HAL_GetTick>
 80031f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031fa:	e009      	b.n	8003210 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031fc:	f7ff f8cc 	bl	8002398 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800320a:	d901      	bls.n	8003210 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e007      	b.n	8003220 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800321c:	d1ee      	bne.n	80031fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e291      	b.n	800376a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8087 	beq.w	8003362 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	4b96      	ldr	r3, [pc, #600]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	d00c      	beq.n	800327a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003260:	4b93      	ldr	r3, [pc, #588]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d112      	bne.n	8003292 <HAL_RCC_OscConfig+0x62>
 800326c:	4b90      	ldr	r3, [pc, #576]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003278:	d10b      	bne.n	8003292 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	4b8d      	ldr	r3, [pc, #564]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06c      	beq.n	8003360 <HAL_RCC_OscConfig+0x130>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d168      	bne.n	8003360 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e26b      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x7a>
 800329c:	4b84      	ldr	r3, [pc, #528]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a83      	ldr	r2, [pc, #524]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e02e      	b.n	8003308 <HAL_RCC_OscConfig+0xd8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x9c>
 80032b2:	4b7f      	ldr	r3, [pc, #508]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7e      	ldr	r2, [pc, #504]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b7c      	ldr	r3, [pc, #496]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7b      	ldr	r2, [pc, #492]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xd8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xc0>
 80032d6:	4b76      	ldr	r3, [pc, #472]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a75      	ldr	r2, [pc, #468]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b73      	ldr	r3, [pc, #460]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a72      	ldr	r2, [pc, #456]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xd8>
 80032f0:	4b6f      	ldr	r3, [pc, #444]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6e      	ldr	r2, [pc, #440]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b6c      	ldr	r3, [pc, #432]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6b      	ldr	r2, [pc, #428]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7ff f842 	bl	8002398 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f83e 	bl	8002398 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e21f      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b61      	ldr	r3, [pc, #388]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xe8>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7ff f82e 	bl	8002398 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff f82a 	bl	8002398 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e20b      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b57      	ldr	r3, [pc, #348]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x110>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d069      	beq.n	8003442 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	4b50      	ldr	r3, [pc, #320]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b4d      	ldr	r3, [pc, #308]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x190>
 8003386:	4b4a      	ldr	r3, [pc, #296]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x17a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1df      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b41      	ldr	r3, [pc, #260]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	493d      	ldr	r1, [pc, #244]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e040      	b.n	8003442 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a38      	ldr	r2, [pc, #224]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe ffe0 	bl	8002398 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033dc:	f7fe ffdc 	bl	8002398 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1bd      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b30      	ldr	r3, [pc, #192]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4929      	ldr	r1, [pc, #164]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
 800340e:	e018      	b.n	8003442 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003410:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a26      	ldr	r2, [pc, #152]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe ffbc 	bl	8002398 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe ffb8 	bl	8002398 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e199      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d038      	beq.n	80034c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003456:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345a:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe ff99 	bl	8002398 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346a:	f7fe ff95 	bl	8002398 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e176      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800347e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x23a>
 8003488:	e01a      	b.n	80034c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348e:	4a08      	ldr	r2, [pc, #32]	@ (80034b0 <HAL_RCC_OscConfig+0x280>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fe ff7f 	bl	8002398 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349e:	f7fe ff7b 	bl	8002398 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d903      	bls.n	80034b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e15c      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
 80034b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	4b91      	ldr	r3, [pc, #580]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80034b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ee      	bne.n	800349e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80a4 	beq.w	8003616 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ce:	4b8b      	ldr	r3, [pc, #556]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	4a87      	ldr	r2, [pc, #540]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e6:	4b85      	ldr	r3, [pc, #532]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f6:	4b82      	ldr	r3, [pc, #520]	@ (8003700 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d118      	bne.n	8003534 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003502:	4b7f      	ldr	r3, [pc, #508]	@ (8003700 <HAL_RCC_OscConfig+0x4d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7e      	ldr	r2, [pc, #504]	@ (8003700 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800350c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350e:	f7fe ff43 	bl	8002398 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003516:	f7fe ff3f 	bl	8002398 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b64      	cmp	r3, #100	@ 0x64
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e120      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003528:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x31a>
 800353c:	4b6f      	ldr	r3, [pc, #444]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003540:	4a6e      	ldr	r2, [pc, #440]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	@ 0x70
 8003548:	e02d      	b.n	80035a6 <HAL_RCC_OscConfig+0x376>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x33c>
 8003552:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	4a69      	ldr	r2, [pc, #420]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6713      	str	r3, [r2, #112]	@ 0x70
 800355e:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a66      	ldr	r2, [pc, #408]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70
 800356a:	e01c      	b.n	80035a6 <HAL_RCC_OscConfig+0x376>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b05      	cmp	r3, #5
 8003572:	d10c      	bne.n	800358e <HAL_RCC_OscConfig+0x35e>
 8003574:	4b61      	ldr	r3, [pc, #388]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003578:	4a60      	ldr	r2, [pc, #384]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003580:	4b5e      	ldr	r3, [pc, #376]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	4a5d      	ldr	r2, [pc, #372]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	@ 0x70
 800358c:	e00b      	b.n	80035a6 <HAL_RCC_OscConfig+0x376>
 800358e:	4b5b      	ldr	r3, [pc, #364]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a5a      	ldr	r2, [pc, #360]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	4b58      	ldr	r3, [pc, #352]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a57      	ldr	r2, [pc, #348]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	f023 0304 	bic.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d015      	beq.n	80035da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fe fef3 	bl	8002398 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fe feef 	bl	8002398 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0ce      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	4b4b      	ldr	r3, [pc, #300]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0ee      	beq.n	80035b6 <HAL_RCC_OscConfig+0x386>
 80035d8:	e014      	b.n	8003604 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe fedd 	bl	8002398 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe fed9 	bl	8002398 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0b8      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f8:	4b40      	ldr	r3, [pc, #256]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ee      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360a:	4b3c      	ldr	r3, [pc, #240]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	4a3b      	ldr	r2, [pc, #236]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a4 	beq.w	8003768 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003620:	4b36      	ldr	r3, [pc, #216]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d06b      	beq.n	8003704 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d149      	bne.n	80036c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003634:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe feaa 	bl	8002398 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fea6 	bl	8002398 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e087      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b28      	ldr	r3, [pc, #160]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	3b01      	subs	r3, #1
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	4313      	orrs	r3, r2
 800368c:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800368e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003692:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 800369a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800369e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fe7a 	bl	8002398 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fe76 	bl	8002398 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e057      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x478>
 80036c6:	e04f      	b.n	8003768 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fe60 	bl	8002398 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe fe5c 	bl	8002398 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e03d      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x4ac>
 80036fa:	e035      	b.n	8003768 <HAL_RCC_OscConfig+0x538>
 80036fc:	40023800 	.word	0x40023800
 8003700:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003704:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x544>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d028      	beq.n	8003764 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d121      	bne.n	8003764 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d11a      	bne.n	8003764 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800373a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	3b01      	subs	r3, #1
 800374e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d107      	bne.n	8003764 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d0      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b6a      	ldr	r3, [pc, #424]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d910      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b67      	ldr	r3, [pc, #412]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 020f 	bic.w	r2, r3, #15
 80037a6:	4965      	ldr	r1, [pc, #404]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a58      	ldr	r2, [pc, #352]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80037de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a52      	ldr	r2, [pc, #328]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80037f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d040      	beq.n	800389c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e073      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3d      	ldr	r3, [pc, #244]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06b      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4936      	ldr	r1, [pc, #216]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386c:	f7fe fd94 	bl	8002398 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fd90 	bl	8002398 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e053      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b27      	ldr	r3, [pc, #156]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d210      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b24      	ldr	r3, [pc, #144]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 020f 	bic.w	r2, r3, #15
 80038b2:	4922      	ldr	r1, [pc, #136]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038f6:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	@ (8003944 <HAL_RCC_ClockConfig+0x1cc>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1d0>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1d4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fb4e 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00
 8003940:	40023800 	.word	0x40023800
 8003944:	0800b7d4 	.word	0x0800b7d4
 8003948:	20000000 	.word	0x20000000
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b094      	sub	sp, #80	@ 0x50
 8003956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	647b      	str	r3, [r7, #68]	@ 0x44
 800395c:	2300      	movs	r3, #0
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003960:	2300      	movs	r3, #0
 8003962:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003968:	4b79      	ldr	r3, [pc, #484]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d00d      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x40>
 8003974:	2b08      	cmp	r3, #8
 8003976:	f200 80e1 	bhi.w	8003b3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x34>
 800397e:	2b04      	cmp	r3, #4
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x3a>
 8003982:	e0db      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b73      	ldr	r3, [pc, #460]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003986:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003988:	e0db      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398a:	4b73      	ldr	r3, [pc, #460]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x208>)
 800398c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800398e:	e0d8      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003990:	4b6f      	ldr	r3, [pc, #444]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003998:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800399a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d063      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	2200      	movs	r2, #0
 80039ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ba:	2300      	movs	r3, #0
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	0159      	lsls	r1, r3, #5
 80039d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d4:	0150      	lsls	r0, r2, #5
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4621      	mov	r1, r4
 80039dc:	1a51      	subs	r1, r2, r1
 80039de:	6139      	str	r1, [r7, #16]
 80039e0:	4629      	mov	r1, r5
 80039e2:	eb63 0301 	sbc.w	r3, r3, r1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f4:	4659      	mov	r1, fp
 80039f6:	018b      	lsls	r3, r1, #6
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039fe:	4651      	mov	r1, sl
 8003a00:	018a      	lsls	r2, r1, #6
 8003a02:	4651      	mov	r1, sl
 8003a04:	ebb2 0801 	subs.w	r8, r2, r1
 8003a08:	4659      	mov	r1, fp
 8003a0a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a22:	4690      	mov	r8, r2
 8003a24:	4699      	mov	r9, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	eb18 0303 	adds.w	r3, r8, r3
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	462b      	mov	r3, r5
 8003a30:	eb49 0303 	adc.w	r3, r9, r3
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a42:	4629      	mov	r1, r5
 8003a44:	024b      	lsls	r3, r1, #9
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	024a      	lsls	r2, r1, #9
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a60:	f7fc fc26 	bl	80002b0 <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a6c:	e058      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6e:	4b38      	ldr	r3, [pc, #224]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	2200      	movs	r2, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	4611      	mov	r1, r2
 8003a7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	f04f 0000 	mov.w	r0, #0
 8003a90:	f04f 0100 	mov.w	r1, #0
 8003a94:	0159      	lsls	r1, r3, #5
 8003a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a9a:	0150      	lsls	r0, r2, #5
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003abc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ac4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	00eb      	lsls	r3, r5, #3
 8003ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad6:	00e2      	lsls	r2, r4, #3
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	4643      	mov	r3, r8
 8003ade:	18e3      	adds	r3, r4, r3
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	eb45 0303 	adc.w	r3, r5, r3
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003af6:	4629      	mov	r1, r5
 8003af8:	028b      	lsls	r3, r1, #10
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b00:	4621      	mov	r1, r4
 8003b02:	028a      	lsls	r2, r1, #10
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	61fa      	str	r2, [r7, #28]
 8003b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b14:	f7fc fbcc 	bl	80002b0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3750      	adds	r7, #80	@ 0x50
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	007a1200 	.word	0x007a1200

08003b5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000000 	.word	0x20000000

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b78:	f7ff fff0 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0a9b      	lsrs	r3, r3, #10
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	0800b7e4 	.word	0x0800b7e4

08003b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba0:	f7ff ffdc 	bl	8003b5c <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0b5b      	lsrs	r3, r3, #13
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	@ (8003bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	0800b7e4 	.word	0x0800b7e4

08003bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0203 	and.w	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003be0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <HAL_RCC_GetClockConfig+0x5c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <HAL_RCC_GetClockConfig+0x5c>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_GetClockConfig+0x5c>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	08db      	lsrs	r3, r3, #3
 8003bfe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c06:	4b07      	ldr	r3, [pc, #28]	@ (8003c24 <HAL_RCC_GetClockConfig+0x60>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	601a      	str	r2, [r3, #0]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40023c00 	.word	0x40023c00

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d012      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c50:	4b69      	ldr	r3, [pc, #420]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a68      	ldr	r2, [pc, #416]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c5a:	6093      	str	r3, [r2, #8]
 8003c5c:	4b66      	ldr	r3, [pc, #408]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	4964      	ldr	r1, [pc, #400]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c82:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c90:	4959      	ldr	r1, [pc, #356]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d017      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cc4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	494a      	ldr	r1, [pc, #296]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 808b 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	4a39      	ldr	r2, [pc, #228]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d18:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d24:	4b35      	ldr	r3, [pc, #212]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a34      	ldr	r2, [pc, #208]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d30:	f7fe fb32 	bl	8002398 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d38:	f7fe fb2e 	bl	8002398 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	@ 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e357      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d56:	4b28      	ldr	r3, [pc, #160]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d035      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d02e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d74:	4b20      	ldr	r3, [pc, #128]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d96:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d9c:	4b16      	ldr	r3, [pc, #88]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d114      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe faf6 	bl	8002398 <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe faf2 	bl	8002398 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e319      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dde:	d111      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dee:	400b      	ands	r3, r1
 8003df0:	4901      	ldr	r1, [pc, #4]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
 8003df6:	e00b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	0ffffcff 	.word	0x0ffffcff
 8003e04:	4baa      	ldr	r3, [pc, #680]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4aa9      	ldr	r2, [pc, #676]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	4ba7      	ldr	r3, [pc, #668]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1c:	49a4      	ldr	r1, [pc, #656]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e2e:	4ba0      	ldr	r3, [pc, #640]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e34:	4a9e      	ldr	r2, [pc, #632]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e3e:	4b9c      	ldr	r3, [pc, #624]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e40:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	4999      	ldr	r1, [pc, #612]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5c:	4b94      	ldr	r3, [pc, #592]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e6a:	4991      	ldr	r1, [pc, #580]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e7e:	4b8c      	ldr	r3, [pc, #560]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e8c:	4988      	ldr	r1, [pc, #544]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea0:	4b83      	ldr	r3, [pc, #524]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eae:	4980      	ldr	r1, [pc, #512]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed0:	4977      	ldr	r1, [pc, #476]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee4:	4b72      	ldr	r3, [pc, #456]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	f023 0203 	bic.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	496f      	ldr	r1, [pc, #444]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f06:	4b6a      	ldr	r3, [pc, #424]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0c:	f023 020c 	bic.w	r2, r3, #12
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	4966      	ldr	r1, [pc, #408]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f28:	4b61      	ldr	r3, [pc, #388]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f36:	495e      	ldr	r1, [pc, #376]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f4a:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f50:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f58:	4955      	ldr	r1, [pc, #340]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f6c:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7a:	494d      	ldr	r1, [pc, #308]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f8e:	4b48      	ldr	r3, [pc, #288]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9c:	4944      	ldr	r1, [pc, #272]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	493c      	ldr	r1, [pc, #240]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fd2:	4b37      	ldr	r3, [pc, #220]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	4933      	ldr	r1, [pc, #204]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004002:	492b      	ldr	r1, [pc, #172]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d011      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004016:	4b26      	ldr	r3, [pc, #152]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004024:	4922      	ldr	r1, [pc, #136]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004030:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004034:	d101      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004036:	2301      	movs	r3, #1
 8004038:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004056:	4b16      	ldr	r3, [pc, #88]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004064:	4912      	ldr	r1, [pc, #72]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004078:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004088:	4909      	ldr	r1, [pc, #36]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d006      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80d9 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040a4:	4b02      	ldr	r3, [pc, #8]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a01      	ldr	r2, [pc, #4]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040ae:	e001      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b6:	f7fe f96f 	bl	8002398 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040be:	f7fe f96b 	bl	8002398 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	@ 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e194      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d021      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d11d      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040f0:	4b64      	ldr	r3, [pc, #400]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040fe:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	019a      	lsls	r2, r3, #6
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	061b      	lsls	r3, r3, #24
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	071b      	lsls	r3, r3, #28
 8004124:	4957      	ldr	r1, [pc, #348]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800414a:	2b00      	cmp	r3, #0
 800414c:	d02e      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004156:	d129      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004158:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004166:	4b47      	ldr	r3, [pc, #284]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800416c:	0f1b      	lsrs	r3, r3, #28
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	019a      	lsls	r2, r3, #6
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	431a      	orrs	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	071b      	lsls	r3, r3, #28
 800418c:	493d      	ldr	r1, [pc, #244]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800419a:	f023 021f 	bic.w	r2, r3, #31
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	3b01      	subs	r3, #1
 80041a4:	4937      	ldr	r1, [pc, #220]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01d      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041b8:	4b32      	ldr	r3, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041be:	0e1b      	lsrs	r3, r3, #24
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041cc:	0f1b      	lsrs	r3, r3, #28
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	019a      	lsls	r2, r3, #6
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	071b      	lsls	r3, r3, #28
 80041ec:	4925      	ldr	r1, [pc, #148]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d011      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	019a      	lsls	r2, r3, #6
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	061b      	lsls	r3, r3, #24
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	071b      	lsls	r3, r3, #28
 800421c:	4919      	ldr	r1, [pc, #100]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004224:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a16      	ldr	r2, [pc, #88]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fe f8b2 	bl	8002398 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004238:	f7fe f8ae 	bl	8002398 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	@ 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e0d7      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424a:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b01      	cmp	r3, #1
 800425a:	f040 80cd 	bne.w	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a08      	ldr	r2, [pc, #32]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426a:	f7fe f895 	bl	8002398 <HAL_GetTick>
 800426e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004272:	f7fe f891 	bl	8002398 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b64      	cmp	r3, #100	@ 0x64
 800427e:	d903      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0ba      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004284:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004288:	4b5e      	ldr	r3, [pc, #376]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004294:	d0ed      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02e      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d12a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042be:	4b51      	ldr	r3, [pc, #324]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d2:	0f1b      	lsrs	r3, r3, #28
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	019a      	lsls	r2, r3, #6
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	071b      	lsls	r3, r3, #28
 80042f2:	4944      	ldr	r1, [pc, #272]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042fa:	4b42      	ldr	r3, [pc, #264]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004300:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	493d      	ldr	r1, [pc, #244]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d022      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004328:	d11d      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800432a:	4b36      	ldr	r3, [pc, #216]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	0e1b      	lsrs	r3, r3, #24
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004338:	4b32      	ldr	r3, [pc, #200]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	0f1b      	lsrs	r3, r3, #28
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	019a      	lsls	r2, r3, #6
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	431a      	orrs	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	071b      	lsls	r3, r3, #28
 800435e:	4929      	ldr	r1, [pc, #164]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d028      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004372:	4b24      	ldr	r3, [pc, #144]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	0e1b      	lsrs	r3, r3, #24
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004380:	4b20      	ldr	r3, [pc, #128]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	019a      	lsls	r2, r3, #6
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	4917      	ldr	r1, [pc, #92]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043ae:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	4911      	ldr	r1, [pc, #68]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fd ffe2 	bl	8002398 <HAL_GetTick>
 80043d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d8:	f7fd ffde 	bl	8002398 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e007      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043f6:	d1ef      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800

08004408 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01c      	b.n	8004454 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	795b      	ldrb	r3, [r3, #5]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fc00 	bl	8001c30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0204 	orr.w	r2, r2, #4
 8004444:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	791b      	ldrb	r3, [r3, #4]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004472:	2302      	movs	r3, #2
 8004474:	e044      	b.n	8004500 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	795b      	ldrb	r3, [r3, #5]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d133      	bne.n	80044ee <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800448c:	f7fd ff84 	bl	8002398 <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004492:	e018      	b.n	80044c6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004494:	f7fd ff80 	bl	8002398 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d911      	bls.n	80044c6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d00a      	beq.n	80044c6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e01c      	b.n	8004500 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d1df      	bne.n	8004494 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	715a      	strb	r2, [r3, #5]
 80044ec:	e004      	b.n	80044f8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2204      	movs	r2, #4
 80044f2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	711a      	strb	r2, [r3, #4]

  return status;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2210      	movs	r2, #16
 800452a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e009      	b.n	8004546 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d004      	beq.n	8004546 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2208      	movs	r2, #8
 8004540:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004542:	2301      	movs	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10b      	bne.n	8004564 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2204      	movs	r2, #4
 8004550:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f837 	bl	80045c6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8004560:	605a      	str	r2, [r3, #4]

    return;
 8004562:	e022      	b.n	80045aa <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01d      	beq.n	80045aa <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0208 	bic.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	795b      	ldrb	r3, [r3, #5]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b04      	cmp	r3, #4
 8004590:	d00b      	beq.n	80045aa <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f803 	bl	80045b0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e09d      	b.n	8004728 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fc:	d009      	beq.n	8004612 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	61da      	str	r2, [r3, #28]
 8004604:	e005      	b.n	8004612 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd fb3b 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004648:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004652:	d902      	bls.n	800465a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e002      	b.n	8004660 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800465a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004668:	d007      	beq.n	800467a <HAL_SPI_Init+0xa0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004672:	d002      	beq.n	800467a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046bc:	ea42 0103 	orr.w	r1, r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	f003 0204 	and.w	r2, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046f6:	ea42 0103 	orr.w	r1, r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004716:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e049      	b.n	80047d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd fb3a 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 faa8 	bl	8004cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e054      	b.n	80048a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a26      	ldr	r2, [pc, #152]	@ (80048b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004822:	d01d      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a21      	ldr	r2, [pc, #132]	@ (80048b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_TIM_Base_Start_IT+0xdc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a1b      	ldr	r2, [pc, #108]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d115      	bne.n	800488c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <HAL_TIM_Base_Start_IT+0xec>)
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d015      	beq.n	800489e <HAL_TIM_Base_Start_IT+0xbe>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d011      	beq.n	800489e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	e008      	b.n	800489e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e000      	b.n	80048a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40010400 	.word	0x40010400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40001800 	.word	0x40001800
 80048cc:	00010007 	.word	0x00010007

080048d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d020      	beq.n	8004934 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0202 	mvn.w	r2, #2
 8004904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9b4 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9a6 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f9b7 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d020      	beq.n	8004980 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0204 	mvn.w	r2, #4
 8004950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f98e 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 800496c:	e005      	b.n	800497a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f980 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f991 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d020      	beq.n	80049cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01b      	beq.n	80049cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0208 	mvn.w	r2, #8
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f968 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f95a 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f96b 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d020      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f942 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f934 	bl	8004c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f945 	bl	8004c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0201 	mvn.w	r2, #1
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd f862 	bl	8001b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb0b 	bl	8005080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00c      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fb03 	bl	8005094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f8ff 	bl	8004cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0220 	mvn.w	r2, #32
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 facb 	bl	800506c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIM_ConfigClockSource+0x1c>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0b4      	b.n	8004c66 <HAL_TIM_ConfigClockSource+0x186>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	4b56      	ldr	r3, [pc, #344]	@ (8004c70 <HAL_TIM_ConfigClockSource+0x190>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b34:	d03e      	beq.n	8004bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3a:	f200 8087 	bhi.w	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b42:	f000 8086 	beq.w	8004c52 <HAL_TIM_ConfigClockSource+0x172>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4a:	d87f      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b70      	cmp	r3, #112	@ 0x70
 8004b4e:	d01a      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0xa6>
 8004b50:	2b70      	cmp	r3, #112	@ 0x70
 8004b52:	d87b      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b60      	cmp	r3, #96	@ 0x60
 8004b56:	d050      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x11a>
 8004b58:	2b60      	cmp	r3, #96	@ 0x60
 8004b5a:	d877      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b50      	cmp	r3, #80	@ 0x50
 8004b5e:	d03c      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0xfa>
 8004b60:	2b50      	cmp	r3, #80	@ 0x50
 8004b62:	d873      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d058      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x13a>
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d86f      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b30      	cmp	r3, #48	@ 0x30
 8004b6e:	d064      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b30      	cmp	r3, #48	@ 0x30
 8004b72:	d86b      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d060      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d867      	bhi.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d05c      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d05a      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x15a>
 8004b84:	e062      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b96:	f000 f9bb 	bl	8004f10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
      break;
 8004bb2:	e04f      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc4:	f000 f9a4 	bl	8004f10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bd6:	609a      	str	r2, [r3, #8]
      break;
 8004bd8:	e03c      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	461a      	mov	r2, r3
 8004be8:	f000 f918 	bl	8004e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2150      	movs	r1, #80	@ 0x50
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f971 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e02c      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c06:	461a      	mov	r2, r3
 8004c08:	f000 f937 	bl	8004e7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2160      	movs	r1, #96	@ 0x60
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f961 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 8004c18:	e01c      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	461a      	mov	r2, r3
 8004c28:	f000 f8f8 	bl	8004e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2140      	movs	r1, #64	@ 0x40
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f951 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 8004c38:	e00c      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f000 f948 	bl	8004eda <TIM_ITRx_SetConfig>
      break;
 8004c4a:	e003      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e000      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	fffeff88 	.word	0xfffeff88

08004c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a46      	ldr	r2, [pc, #280]	@ (8004df0 <TIM_Base_SetConfig+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce2:	d00f      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a43      	ldr	r2, [pc, #268]	@ (8004df4 <TIM_Base_SetConfig+0x130>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a42      	ldr	r2, [pc, #264]	@ (8004df8 <TIM_Base_SetConfig+0x134>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a41      	ldr	r2, [pc, #260]	@ (8004dfc <TIM_Base_SetConfig+0x138>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a40      	ldr	r2, [pc, #256]	@ (8004e00 <TIM_Base_SetConfig+0x13c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d108      	bne.n	8004d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a35      	ldr	r2, [pc, #212]	@ (8004df0 <TIM_Base_SetConfig+0x12c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02b      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d027      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a32      	ldr	r2, [pc, #200]	@ (8004df4 <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d023      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a31      	ldr	r2, [pc, #196]	@ (8004df8 <TIM_Base_SetConfig+0x134>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01f      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a30      	ldr	r2, [pc, #192]	@ (8004dfc <TIM_Base_SetConfig+0x138>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01b      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2f      	ldr	r2, [pc, #188]	@ (8004e00 <TIM_Base_SetConfig+0x13c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d017      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2e      	ldr	r2, [pc, #184]	@ (8004e04 <TIM_Base_SetConfig+0x140>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	@ (8004e08 <TIM_Base_SetConfig+0x144>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00f      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2c      	ldr	r2, [pc, #176]	@ (8004e0c <TIM_Base_SetConfig+0x148>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2b      	ldr	r2, [pc, #172]	@ (8004e10 <TIM_Base_SetConfig+0x14c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	@ (8004e14 <TIM_Base_SetConfig+0x150>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a29      	ldr	r2, [pc, #164]	@ (8004e18 <TIM_Base_SetConfig+0x154>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a10      	ldr	r2, [pc, #64]	@ (8004df0 <TIM_Base_SetConfig+0x12c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_Base_SetConfig+0xf8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <TIM_Base_SetConfig+0x13c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d103      	bne.n	8004dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]
  }
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40001800 	.word	0x40001800
 8004e14:	40001c00 	.word	0x40001c00
 8004e18:	40002000 	.word	0x40002000

08004e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 030a 	bic.w	r3, r3, #10
 8004e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f023 0210 	bic.w	r2, r3, #16
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	031b      	lsls	r3, r3, #12
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f043 0307 	orr.w	r3, r3, #7
 8004efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	021a      	lsls	r2, r3, #8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	609a      	str	r2, [r3, #8]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e06d      	b.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d108      	bne.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d022      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fda:	d01d      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d018      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	@ (800505c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8005060 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a16      	ldr	r2, [pc, #88]	@ (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10c      	bne.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800501e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	4313      	orrs	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40010000 	.word	0x40010000
 8005054:	40010400 	.word	0x40010400
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800

0800506c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e040      	b.n	800513c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc fea4 	bl	8001e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	@ 0x24
 80050d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa8c 	bl	800560c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f825 	bl	8005144 <UART_SetConfig>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e01b      	b.n	800513c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fb0b 	bl	8005750 <UART_CheckIdleState>
 800513a:	4603      	mov	r3, r0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4ba6      	ldr	r3, [pc, #664]	@ (8005408 <UART_SetConfig+0x2c4>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	6979      	ldr	r1, [r7, #20]
 8005178:	430b      	orrs	r3, r1
 800517a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a94      	ldr	r2, [pc, #592]	@ (800540c <UART_SetConfig+0x2c8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d120      	bne.n	8005202 <UART_SetConfig+0xbe>
 80051c0:	4b93      	ldr	r3, [pc, #588]	@ (8005410 <UART_SetConfig+0x2cc>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d816      	bhi.n	80051fc <UART_SetConfig+0xb8>
 80051ce:	a201      	add	r2, pc, #4	@ (adr r2, 80051d4 <UART_SetConfig+0x90>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f1 	.word	0x080051f1
 80051dc:	080051eb 	.word	0x080051eb
 80051e0:	080051f7 	.word	0x080051f7
 80051e4:	2301      	movs	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e150      	b.n	800548c <UART_SetConfig+0x348>
 80051ea:	2302      	movs	r3, #2
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e14d      	b.n	800548c <UART_SetConfig+0x348>
 80051f0:	2304      	movs	r3, #4
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e14a      	b.n	800548c <UART_SetConfig+0x348>
 80051f6:	2308      	movs	r3, #8
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e147      	b.n	800548c <UART_SetConfig+0x348>
 80051fc:	2310      	movs	r3, #16
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e144      	b.n	800548c <UART_SetConfig+0x348>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a83      	ldr	r2, [pc, #524]	@ (8005414 <UART_SetConfig+0x2d0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d132      	bne.n	8005272 <UART_SetConfig+0x12e>
 800520c:	4b80      	ldr	r3, [pc, #512]	@ (8005410 <UART_SetConfig+0x2cc>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d828      	bhi.n	800526c <UART_SetConfig+0x128>
 800521a:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <UART_SetConfig+0xdc>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005255 	.word	0x08005255
 8005224:	0800526d 	.word	0x0800526d
 8005228:	0800526d 	.word	0x0800526d
 800522c:	0800526d 	.word	0x0800526d
 8005230:	08005261 	.word	0x08005261
 8005234:	0800526d 	.word	0x0800526d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800526d 	.word	0x0800526d
 8005240:	0800525b 	.word	0x0800525b
 8005244:	0800526d 	.word	0x0800526d
 8005248:	0800526d 	.word	0x0800526d
 800524c:	0800526d 	.word	0x0800526d
 8005250:	08005267 	.word	0x08005267
 8005254:	2300      	movs	r3, #0
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e118      	b.n	800548c <UART_SetConfig+0x348>
 800525a:	2302      	movs	r3, #2
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e115      	b.n	800548c <UART_SetConfig+0x348>
 8005260:	2304      	movs	r3, #4
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e112      	b.n	800548c <UART_SetConfig+0x348>
 8005266:	2308      	movs	r3, #8
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e10f      	b.n	800548c <UART_SetConfig+0x348>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e10c      	b.n	800548c <UART_SetConfig+0x348>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a68      	ldr	r2, [pc, #416]	@ (8005418 <UART_SetConfig+0x2d4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d120      	bne.n	80052be <UART_SetConfig+0x17a>
 800527c:	4b64      	ldr	r3, [pc, #400]	@ (8005410 <UART_SetConfig+0x2cc>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005286:	2b30      	cmp	r3, #48	@ 0x30
 8005288:	d013      	beq.n	80052b2 <UART_SetConfig+0x16e>
 800528a:	2b30      	cmp	r3, #48	@ 0x30
 800528c:	d814      	bhi.n	80052b8 <UART_SetConfig+0x174>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d009      	beq.n	80052a6 <UART_SetConfig+0x162>
 8005292:	2b20      	cmp	r3, #32
 8005294:	d810      	bhi.n	80052b8 <UART_SetConfig+0x174>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <UART_SetConfig+0x15c>
 800529a:	2b10      	cmp	r3, #16
 800529c:	d006      	beq.n	80052ac <UART_SetConfig+0x168>
 800529e:	e00b      	b.n	80052b8 <UART_SetConfig+0x174>
 80052a0:	2300      	movs	r3, #0
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e0f2      	b.n	800548c <UART_SetConfig+0x348>
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e0ef      	b.n	800548c <UART_SetConfig+0x348>
 80052ac:	2304      	movs	r3, #4
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e0ec      	b.n	800548c <UART_SetConfig+0x348>
 80052b2:	2308      	movs	r3, #8
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e0e9      	b.n	800548c <UART_SetConfig+0x348>
 80052b8:	2310      	movs	r3, #16
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e0e6      	b.n	800548c <UART_SetConfig+0x348>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a56      	ldr	r2, [pc, #344]	@ (800541c <UART_SetConfig+0x2d8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d120      	bne.n	800530a <UART_SetConfig+0x1c6>
 80052c8:	4b51      	ldr	r3, [pc, #324]	@ (8005410 <UART_SetConfig+0x2cc>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d4:	d013      	beq.n	80052fe <UART_SetConfig+0x1ba>
 80052d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d8:	d814      	bhi.n	8005304 <UART_SetConfig+0x1c0>
 80052da:	2b80      	cmp	r3, #128	@ 0x80
 80052dc:	d009      	beq.n	80052f2 <UART_SetConfig+0x1ae>
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	d810      	bhi.n	8005304 <UART_SetConfig+0x1c0>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <UART_SetConfig+0x1a8>
 80052e6:	2b40      	cmp	r3, #64	@ 0x40
 80052e8:	d006      	beq.n	80052f8 <UART_SetConfig+0x1b4>
 80052ea:	e00b      	b.n	8005304 <UART_SetConfig+0x1c0>
 80052ec:	2300      	movs	r3, #0
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e0cc      	b.n	800548c <UART_SetConfig+0x348>
 80052f2:	2302      	movs	r3, #2
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e0c9      	b.n	800548c <UART_SetConfig+0x348>
 80052f8:	2304      	movs	r3, #4
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e0c6      	b.n	800548c <UART_SetConfig+0x348>
 80052fe:	2308      	movs	r3, #8
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e0c3      	b.n	800548c <UART_SetConfig+0x348>
 8005304:	2310      	movs	r3, #16
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e0c0      	b.n	800548c <UART_SetConfig+0x348>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a44      	ldr	r2, [pc, #272]	@ (8005420 <UART_SetConfig+0x2dc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d125      	bne.n	8005360 <UART_SetConfig+0x21c>
 8005314:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <UART_SetConfig+0x2cc>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800531e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005322:	d017      	beq.n	8005354 <UART_SetConfig+0x210>
 8005324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005328:	d817      	bhi.n	800535a <UART_SetConfig+0x216>
 800532a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800532e:	d00b      	beq.n	8005348 <UART_SetConfig+0x204>
 8005330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005334:	d811      	bhi.n	800535a <UART_SetConfig+0x216>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <UART_SetConfig+0x1fe>
 800533a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533e:	d006      	beq.n	800534e <UART_SetConfig+0x20a>
 8005340:	e00b      	b.n	800535a <UART_SetConfig+0x216>
 8005342:	2300      	movs	r3, #0
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e0a1      	b.n	800548c <UART_SetConfig+0x348>
 8005348:	2302      	movs	r3, #2
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	e09e      	b.n	800548c <UART_SetConfig+0x348>
 800534e:	2304      	movs	r3, #4
 8005350:	77fb      	strb	r3, [r7, #31]
 8005352:	e09b      	b.n	800548c <UART_SetConfig+0x348>
 8005354:	2308      	movs	r3, #8
 8005356:	77fb      	strb	r3, [r7, #31]
 8005358:	e098      	b.n	800548c <UART_SetConfig+0x348>
 800535a:	2310      	movs	r3, #16
 800535c:	77fb      	strb	r3, [r7, #31]
 800535e:	e095      	b.n	800548c <UART_SetConfig+0x348>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2f      	ldr	r2, [pc, #188]	@ (8005424 <UART_SetConfig+0x2e0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d125      	bne.n	80053b6 <UART_SetConfig+0x272>
 800536a:	4b29      	ldr	r3, [pc, #164]	@ (8005410 <UART_SetConfig+0x2cc>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005374:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005378:	d017      	beq.n	80053aa <UART_SetConfig+0x266>
 800537a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800537e:	d817      	bhi.n	80053b0 <UART_SetConfig+0x26c>
 8005380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005384:	d00b      	beq.n	800539e <UART_SetConfig+0x25a>
 8005386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538a:	d811      	bhi.n	80053b0 <UART_SetConfig+0x26c>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <UART_SetConfig+0x254>
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005394:	d006      	beq.n	80053a4 <UART_SetConfig+0x260>
 8005396:	e00b      	b.n	80053b0 <UART_SetConfig+0x26c>
 8005398:	2301      	movs	r3, #1
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e076      	b.n	800548c <UART_SetConfig+0x348>
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e073      	b.n	800548c <UART_SetConfig+0x348>
 80053a4:	2304      	movs	r3, #4
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e070      	b.n	800548c <UART_SetConfig+0x348>
 80053aa:	2308      	movs	r3, #8
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e06d      	b.n	800548c <UART_SetConfig+0x348>
 80053b0:	2310      	movs	r3, #16
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e06a      	b.n	800548c <UART_SetConfig+0x348>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <UART_SetConfig+0x2e4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d138      	bne.n	8005432 <UART_SetConfig+0x2ee>
 80053c0:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <UART_SetConfig+0x2cc>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053ce:	d017      	beq.n	8005400 <UART_SetConfig+0x2bc>
 80053d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053d4:	d82a      	bhi.n	800542c <UART_SetConfig+0x2e8>
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053da:	d00b      	beq.n	80053f4 <UART_SetConfig+0x2b0>
 80053dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e0:	d824      	bhi.n	800542c <UART_SetConfig+0x2e8>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <UART_SetConfig+0x2aa>
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ea:	d006      	beq.n	80053fa <UART_SetConfig+0x2b6>
 80053ec:	e01e      	b.n	800542c <UART_SetConfig+0x2e8>
 80053ee:	2300      	movs	r3, #0
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e04b      	b.n	800548c <UART_SetConfig+0x348>
 80053f4:	2302      	movs	r3, #2
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e048      	b.n	800548c <UART_SetConfig+0x348>
 80053fa:	2304      	movs	r3, #4
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e045      	b.n	800548c <UART_SetConfig+0x348>
 8005400:	2308      	movs	r3, #8
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e042      	b.n	800548c <UART_SetConfig+0x348>
 8005406:	bf00      	nop
 8005408:	efff69f3 	.word	0xefff69f3
 800540c:	40011000 	.word	0x40011000
 8005410:	40023800 	.word	0x40023800
 8005414:	40004400 	.word	0x40004400
 8005418:	40004800 	.word	0x40004800
 800541c:	40004c00 	.word	0x40004c00
 8005420:	40005000 	.word	0x40005000
 8005424:	40011400 	.word	0x40011400
 8005428:	40007800 	.word	0x40007800
 800542c:	2310      	movs	r3, #16
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e02c      	b.n	800548c <UART_SetConfig+0x348>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a72      	ldr	r2, [pc, #456]	@ (8005600 <UART_SetConfig+0x4bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d125      	bne.n	8005488 <UART_SetConfig+0x344>
 800543c:	4b71      	ldr	r3, [pc, #452]	@ (8005604 <UART_SetConfig+0x4c0>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005446:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800544a:	d017      	beq.n	800547c <UART_SetConfig+0x338>
 800544c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005450:	d817      	bhi.n	8005482 <UART_SetConfig+0x33e>
 8005452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005456:	d00b      	beq.n	8005470 <UART_SetConfig+0x32c>
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545c:	d811      	bhi.n	8005482 <UART_SetConfig+0x33e>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <UART_SetConfig+0x326>
 8005462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005466:	d006      	beq.n	8005476 <UART_SetConfig+0x332>
 8005468:	e00b      	b.n	8005482 <UART_SetConfig+0x33e>
 800546a:	2300      	movs	r3, #0
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e00d      	b.n	800548c <UART_SetConfig+0x348>
 8005470:	2302      	movs	r3, #2
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e00a      	b.n	800548c <UART_SetConfig+0x348>
 8005476:	2304      	movs	r3, #4
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e007      	b.n	800548c <UART_SetConfig+0x348>
 800547c:	2308      	movs	r3, #8
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e004      	b.n	800548c <UART_SetConfig+0x348>
 8005482:	2310      	movs	r3, #16
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e001      	b.n	800548c <UART_SetConfig+0x348>
 8005488:	2310      	movs	r3, #16
 800548a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005494:	d15b      	bne.n	800554e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005496:	7ffb      	ldrb	r3, [r7, #31]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d828      	bhi.n	80054ee <UART_SetConfig+0x3aa>
 800549c:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <UART_SetConfig+0x360>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054df 	.word	0x080054df
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fe fb54 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 80054cc:	61b8      	str	r0, [r7, #24]
        break;
 80054ce:	e013      	b.n	80054f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fe fb64 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 80054d4:	61b8      	str	r0, [r7, #24]
        break;
 80054d6:	e00f      	b.n	80054f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005608 <UART_SetConfig+0x4c4>)
 80054da:	61bb      	str	r3, [r7, #24]
        break;
 80054dc:	e00c      	b.n	80054f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7fe fa37 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 80054e2:	61b8      	str	r0, [r7, #24]
        break;
 80054e4:	e008      	b.n	80054f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ea:	61bb      	str	r3, [r7, #24]
        break;
 80054ec:	e004      	b.n	80054f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	77bb      	strb	r3, [r7, #30]
        break;
 80054f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d074      	beq.n	80055e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	005a      	lsls	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d916      	bls.n	8005548 <UART_SetConfig+0x404>
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005520:	d212      	bcs.n	8005548 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f023 030f 	bic.w	r3, r3, #15
 800552a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	b29a      	uxth	r2, r3
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	4313      	orrs	r3, r2
 800553c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	89fa      	ldrh	r2, [r7, #14]
 8005544:	60da      	str	r2, [r3, #12]
 8005546:	e04f      	b.n	80055e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	77bb      	strb	r3, [r7, #30]
 800554c:	e04c      	b.n	80055e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554e:	7ffb      	ldrb	r3, [r7, #31]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d828      	bhi.n	80055a6 <UART_SetConfig+0x462>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0x418>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe faf8 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8005584:	61b8      	str	r0, [r7, #24]
        break;
 8005586:	e013      	b.n	80055b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fe fb08 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <UART_SetConfig+0x4c4>)
 8005592:	61bb      	str	r3, [r7, #24]
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe f9db 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800559a:	61b8      	str	r0, [r7, #24]
        break;
 800559c:	e008      	b.n	80055b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a2:	61bb      	str	r3, [r7, #24]
        break;
 80055a4:	e004      	b.n	80055b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	77bb      	strb	r3, [r7, #30]
        break;
 80055ae:	bf00      	nop
    }

    if (pclk != 0U)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	085a      	lsrs	r2, r3, #1
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	441a      	add	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d909      	bls.n	80055e4 <UART_SetConfig+0x4a0>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d6:	d205      	bcs.n	80055e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	e001      	b.n	80055e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40007c00 	.word	0x40007c00
 8005604:	40023800 	.word	0x40023800
 8005608:	00f42400 	.word	0x00f42400

0800560c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570a:	d10a      	bne.n	8005722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	@ 0x30
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fc fe1a 	bl	8002398 <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d12e      	bne.n	80057d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f83b 	bl	80057fe <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d021      	beq.n	80057d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	60fb      	str	r3, [r7, #12]
   return(result);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e6      	bne.n	800578e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e011      	b.n	80057f6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	@ 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580e:	e04f      	b.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d04b      	beq.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7fc fdbe 	bl	8002398 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <UART_WaitOnFlagUntilTimeout+0x30>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e04e      	b.n	80058d0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d037      	beq.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b80      	cmp	r3, #128	@ 0x80
 8005844:	d034      	beq.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d031      	beq.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b08      	cmp	r3, #8
 8005858:	d110      	bne.n	800587c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2208      	movs	r2, #8
 8005860:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f838 	bl	80058d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2208      	movs	r2, #8
 800586c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e029      	b.n	80058d0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800588a:	d111      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005894:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f81e 	bl	80058d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e00f      	b.n	80058d0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d0a0      	beq.n	8005810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b095      	sub	sp, #84	@ 0x54
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005900:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e6      	bne.n	80058e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3308      	adds	r3, #8
 8005918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	61fb      	str	r3, [r7, #28]
   return(result);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594a:	2b01      	cmp	r3, #1
 800594c:	d118      	bne.n	8005980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	60bb      	str	r3, [r7, #8]
   return(result);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 0310 	bic.w	r3, r3, #16
 8005962:	647b      	str	r3, [r7, #68]	@ 0x44
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	613b      	str	r3, [r7, #16]
   return(result);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005994:	bf00      	nop
 8005996:	3754      	adds	r7, #84	@ 0x54
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a0:	b084      	sub	sp, #16
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	f107 001c 	add.w	r0, r7, #28
 80059ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d121      	bne.n	80059fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b21      	ldr	r3, [pc, #132]	@ (8005a50 <USB_CoreInit+0xb0>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d105      	bne.n	80059f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa92 	bl	8005f1c <USB_CoreReset>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]
 80059fc:	e010      	b.n	8005a20 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa86 	bl	8005f1c <USB_CoreReset>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005a20:	7fbb      	ldrb	r3, [r7, #30]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10b      	bne.n	8005a3e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f043 0206 	orr.w	r2, r3, #6
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a4a:	b004      	add	sp, #16
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	ffbdffbf 	.word	0xffbdffbf

08005a54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 0201 	bic.w	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d115      	bne.n	8005ac4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005aa4:	200a      	movs	r0, #10
 8005aa6:	f7fc fc83 	bl	80023b0 <HAL_Delay>
      ms += 10U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	330a      	adds	r3, #10
 8005aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa25 	bl	8005f00 <USB_GetMode>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d01e      	beq.n	8005afa <USB_SetCurrentMode+0x84>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ac0:	d9f0      	bls.n	8005aa4 <USB_SetCurrentMode+0x2e>
 8005ac2:	e01a      	b.n	8005afa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d115      	bne.n	8005af6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ad6:	200a      	movs	r0, #10
 8005ad8:	f7fc fc6a 	bl	80023b0 <HAL_Delay>
      ms += 10U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	330a      	adds	r3, #10
 8005ae0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa0c 	bl	8005f00 <USB_GetMode>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <USB_SetCurrentMode+0x84>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005af2:	d9f0      	bls.n	8005ad6 <USB_SetCurrentMode+0x60>
 8005af4:	e001      	b.n	8005afa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e005      	b.n	8005b06 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2bc8      	cmp	r3, #200	@ 0xc8
 8005afe:	d101      	bne.n	8005b04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b10:	b084      	sub	sp, #16
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e009      	b.n	8005b44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	3340      	adds	r3, #64	@ 0x40
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3301      	adds	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b0e      	cmp	r3, #14
 8005b48:	d9f2      	bls.n	8005b30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11c      	bne.n	8005b8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e005      	b.n	8005b98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ba4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10d      	bne.n	8005bc8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f968 	bl	8005e8c <USB_SetDevSpeed>
 8005bbc:	e008      	b.n	8005bd0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f963 	bl	8005e8c <USB_SetDevSpeed>
 8005bc6:	e003      	b.n	8005bd0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bc8:	2103      	movs	r1, #3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f95e 	bl	8005e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bd0:	2110      	movs	r1, #16
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8fa 	bl	8005dcc <USB_FlushTxFifo>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f924 	bl	8005e30 <USB_FlushRxFifo>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	461a      	mov	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e043      	b.n	8005ca4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c32:	d118      	bne.n	8005c66 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c46:	461a      	mov	r2, r3
 8005c48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e013      	b.n	8005c78 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e008      	b.n	8005c78 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c72:	461a      	mov	r2, r3
 8005c74:	2300      	movs	r3, #0
 8005c76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	461a      	mov	r2, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c96:	461a      	mov	r2, r3
 8005c98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ca8:	461a      	mov	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d3b5      	bcc.n	8005c1c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e043      	b.n	8005d3e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ccc:	d118      	bne.n	8005d00 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	e013      	b.n	8005d12 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e008      	b.n	8005d12 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d42:	461a      	mov	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d3b5      	bcc.n	8005cb6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f043 0210 	orr.w	r2, r3, #16
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc4 <USB_DevInit+0x2b4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f043 0208 	orr.w	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005da0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <USB_DevInit+0x2b8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc0:	b004      	add	sp, #16
 8005dc2:	4770      	bx	lr
 8005dc4:	803c3800 	.word	0x803c3800
 8005dc8:	40000004 	.word	0x40000004

08005dcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de6:	d901      	bls.n	8005dec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e01b      	b.n	8005e24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	daf2      	bge.n	8005dda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	019b      	lsls	r3, r3, #6
 8005dfc:	f043 0220 	orr.w	r2, r3, #32
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e10:	d901      	bls.n	8005e16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e006      	b.n	8005e24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d0f0      	beq.n	8005e04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e48:	d901      	bls.n	8005e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e018      	b.n	8005e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	daf2      	bge.n	8005e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e6c:	d901      	bls.n	8005e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e006      	b.n	8005e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d0f0      	beq.n	8005e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ed8:	f023 0303 	bic.w	r3, r3, #3
 8005edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f34:	d901      	bls.n	8005f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e01b      	b.n	8005f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	daf2      	bge.n	8005f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f5e:	d901      	bls.n	8005f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d0f0      	beq.n	8005f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f7e:	b480      	push	{r7}
 8005f80:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005f82:	bf00      	nop
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f92:	f3ef 8305 	mrs	r3, IPSR
 8005f96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa2:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005faa:	f3ef 8311 	mrs	r3, BASEPRI
 8005fae:	603b      	str	r3, [r7, #0]
  return(result);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <osKernelInitialize+0x3a>
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff0 <osKernelInitialize+0x64>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d103      	bne.n	8005fc6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005fbe:	f06f 0305 	mvn.w	r3, #5
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e00c      	b.n	8005fe0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff0 <osKernelInitialize+0x64>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fce:	4b08      	ldr	r3, [pc, #32]	@ (8005ff0 <osKernelInitialize+0x64>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e002      	b.n	8005fe0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295
 8005fde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	200007f4 	.word	0x200007f4

08005ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ffa:	f3ef 8305 	mrs	r3, IPSR
 8005ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006000:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006006:	f3ef 8310 	mrs	r3, PRIMASK
 800600a:	607b      	str	r3, [r7, #4]
  return(result);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d105      	bne.n	800601e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006012:	f3ef 8311 	mrs	r3, BASEPRI
 8006016:	603b      	str	r3, [r7, #0]
  return(result);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <osKernelStart+0x3a>
 800601e:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <osKernelStart+0x68>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d103      	bne.n	800602e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006026:	f06f 0305 	mvn.w	r3, #5
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e010      	b.n	8006050 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800602e:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <osKernelStart+0x68>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d109      	bne.n	800604a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006036:	f7ff ffa2 	bl	8005f7e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800603a:	4b08      	ldr	r3, [pc, #32]	@ (800605c <osKernelStart+0x68>)
 800603c:	2202      	movs	r2, #2
 800603e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006040:	f001 fa54 	bl	80074ec <vTaskStartScheduler>
      stat = osOK;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e002      	b.n	8006050 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
 800604e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200007f4 	.word	0x200007f4

08006060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b090      	sub	sp, #64	@ 0x40
 8006064:	af04      	add	r7, sp, #16
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006070:	f3ef 8305 	mrs	r3, IPSR
 8006074:	61fb      	str	r3, [r7, #28]
  return(result);
 8006076:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 808f 	bne.w	800619c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607e:	f3ef 8310 	mrs	r3, PRIMASK
 8006082:	61bb      	str	r3, [r7, #24]
  return(result);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800608a:	f3ef 8311 	mrs	r3, BASEPRI
 800608e:	617b      	str	r3, [r7, #20]
  return(result);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <osThreadNew+0x3e>
 8006096:	4b44      	ldr	r3, [pc, #272]	@ (80061a8 <osThreadNew+0x148>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d07e      	beq.n	800619c <osThreadNew+0x13c>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d07b      	beq.n	800619c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80060a8:	2318      	movs	r3, #24
 80060aa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d045      	beq.n	8006148 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <osThreadNew+0x6a>
        name = attr->name;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <osThreadNew+0x90>
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	2b38      	cmp	r3, #56	@ 0x38
 80060e2:	d805      	bhi.n	80060f0 <osThreadNew+0x90>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <osThreadNew+0x94>
        return (NULL);
 80060f0:	2300      	movs	r3, #0
 80060f2:	e054      	b.n	800619e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <osThreadNew+0xca>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2ba7      	cmp	r3, #167	@ 0xa7
 8006112:	d90a      	bls.n	800612a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006118:	2b00      	cmp	r3, #0
 800611a:	d006      	beq.n	800612a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <osThreadNew+0xca>
        mem = 1;
 8006124:	2301      	movs	r3, #1
 8006126:	623b      	str	r3, [r7, #32]
 8006128:	e010      	b.n	800614c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10c      	bne.n	800614c <osThreadNew+0xec>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d108      	bne.n	800614c <osThreadNew+0xec>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d104      	bne.n	800614c <osThreadNew+0xec>
          mem = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	e001      	b.n	800614c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d110      	bne.n	8006174 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800615a:	9202      	str	r2, [sp, #8]
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 ffc1 	bl	80070f0 <xTaskCreateStatic>
 800616e:	4603      	mov	r3, r0
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	e013      	b.n	800619c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d110      	bne.n	800619c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617c:	b29a      	uxth	r2, r3
 800617e:	f107 0310 	add.w	r3, r7, #16
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f001 f815 	bl	80071bc <xTaskCreate>
 8006192:	4603      	mov	r3, r0
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <osThreadNew+0x13c>
          hTask = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800619c:	693b      	ldr	r3, [r7, #16]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3730      	adds	r7, #48	@ 0x30
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200007f4 	.word	0x200007f4

080061ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b4:	f3ef 8305 	mrs	r3, IPSR
 80061b8:	613b      	str	r3, [r7, #16]
  return(result);
 80061ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061cc:	f3ef 8311 	mrs	r3, BASEPRI
 80061d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <osDelay+0x3c>
 80061d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006204 <osDelay+0x58>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d103      	bne.n	80061e8 <osDelay+0x3c>
    stat = osErrorISR;
 80061e0:	f06f 0305 	mvn.w	r3, #5
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e007      	b.n	80061f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 f942 	bl	800747c <vTaskDelay>
    }
  }

  return (stat);
 80061f8:	697b      	ldr	r3, [r7, #20]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200007f4 	.word	0x200007f4

08006208 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a07      	ldr	r2, [pc, #28]	@ (8006234 <vApplicationGetIdleTaskMemory+0x2c>)
 8006218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4a06      	ldr	r2, [pc, #24]	@ (8006238 <vApplicationGetIdleTaskMemory+0x30>)
 800621e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2280      	movs	r2, #128	@ 0x80
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200007f8 	.word	0x200007f8
 8006238:	200008a0 	.word	0x200008a0

0800623c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a07      	ldr	r2, [pc, #28]	@ (8006268 <vApplicationGetTimerTaskMemory+0x2c>)
 800624c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4a06      	ldr	r2, [pc, #24]	@ (800626c <vApplicationGetTimerTaskMemory+0x30>)
 8006252:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800625a:	601a      	str	r2, [r3, #0]
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20000aa0 	.word	0x20000aa0
 800626c:	20000b48 	.word	0x20000b48

08006270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f103 0208 	add.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f04f 32ff 	mov.w	r2, #4294967295
 8006288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f103 0208 	add.w	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f103 0208 	add.w	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d103      	bne.n	8006332 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e00c      	b.n	800634c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3308      	adds	r3, #8
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e002      	b.n	8006340 <vListInsert+0x2e>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d2f6      	bcs.n	800633a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6892      	ldr	r2, [r2, #8]
 800639a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6852      	ldr	r2, [r2, #4]
 80063a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d103      	bne.n	80063b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	1e5a      	subs	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10d      	bne.n	8006408 <xQueueGenericReset+0x30>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	b672      	cpsid	i
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	b662      	cpsie	i
 8006400:	60bb      	str	r3, [r7, #8]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006408:	f002 fd60 	bl	8008ecc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	68f9      	ldr	r1, [r7, #12]
 8006416:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006438:	3b01      	subs	r3, #1
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	441a      	add	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	22ff      	movs	r2, #255	@ 0xff
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	22ff      	movs	r2, #255	@ 0xff
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d114      	bne.n	8006488 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01a      	beq.n	800649c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3310      	adds	r3, #16
 800646a:	4618      	mov	r0, r3
 800646c:	f001 faea 	bl	8007a44 <xTaskRemoveFromEventList>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006476:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <xQueueGenericReset+0xd4>)
 8006478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	e009      	b.n	800649c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3310      	adds	r3, #16
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff feef 	bl	8006270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3324      	adds	r3, #36	@ 0x24
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff feea 	bl	8006270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800649c:	f002 fd4c 	bl	8008f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064a0:	2301      	movs	r3, #1
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	@ 0x38
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10d      	bne.n	80064e0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	b672      	cpsid	i
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	b662      	cpsie	i
 80064d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10d      	bne.n	8006502 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ea:	b672      	cpsid	i
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	b662      	cpsie	i
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <xQueueGenericCreateStatic+0x5e>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <xQueueGenericCreateStatic+0x62>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <xQueueGenericCreateStatic+0x64>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10d      	bne.n	8006534 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651c:	b672      	cpsid	i
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	b662      	cpsie	i
 800652c:	623b      	str	r3, [r7, #32]
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <xQueueGenericCreateStatic+0x90>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <xQueueGenericCreateStatic+0x94>
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <xQueueGenericCreateStatic+0x96>
 8006544:	2300      	movs	r3, #0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10d      	bne.n	8006566 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	b672      	cpsid	i
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	b662      	cpsie	i
 800655e:	61fb      	str	r3, [r7, #28]
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006566:	2350      	movs	r3, #80	@ 0x50
 8006568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b50      	cmp	r3, #80	@ 0x50
 800656e:	d00d      	beq.n	800658c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	b672      	cpsid	i
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	b662      	cpsie	i
 8006584:	61bb      	str	r3, [r7, #24]
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800658c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f805 	bl	80065be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3730      	adds	r7, #48	@ 0x30
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b084      	sub	sp, #16
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e002      	b.n	80065e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065ec:	2101      	movs	r1, #1
 80065ee:	69b8      	ldr	r0, [r7, #24]
 80065f0:	f7ff fef2 	bl	80063d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	78fa      	ldrb	r2, [r7, #3]
 80065f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08e      	sub	sp, #56	@ 0x38
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006612:	2300      	movs	r3, #0
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <xQueueGenericSend+0x38>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006624:	b672      	cpsid	i
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	b662      	cpsie	i
 8006634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <xQueueGenericSend+0x46>
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <xQueueGenericSend+0x4a>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <xQueueGenericSend+0x4c>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <xQueueGenericSend+0x6c>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	b672      	cpsid	i
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	b662      	cpsie	i
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d103      	bne.n	800667e <xQueueGenericSend+0x7a>
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <xQueueGenericSend+0x7e>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueGenericSend+0x80>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10d      	bne.n	80066a4 <xQueueGenericSend+0xa0>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	b672      	cpsid	i
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	b662      	cpsie	i
 800669c:	623b      	str	r3, [r7, #32]
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	e7fd      	b.n	80066a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066a4:	f001 fb9c 	bl	8007de0 <xTaskGetSchedulerState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d102      	bne.n	80066b4 <xQueueGenericSend+0xb0>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <xQueueGenericSend+0xb4>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <xQueueGenericSend+0xb6>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10d      	bne.n	80066da <xQueueGenericSend+0xd6>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	b672      	cpsid	i
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	b662      	cpsie	i
 80066d2:	61fb      	str	r3, [r7, #28]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066da:	f002 fbf7 	bl	8008ecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <xQueueGenericSend+0xec>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d129      	bne.n	8006744 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f6:	f000 fb8d 	bl	8006e14 <prvCopyDataToQueue>
 80066fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	d010      	beq.n	8006726 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f001 f99b 	bl	8007a44 <xTaskRemoveFromEventList>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006714:	4b3f      	ldr	r3, [pc, #252]	@ (8006814 <xQueueGenericSend+0x210>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	e00a      	b.n	800673c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800672c:	4b39      	ldr	r3, [pc, #228]	@ (8006814 <xQueueGenericSend+0x210>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800673c:	f002 fbfc 	bl	8008f38 <vPortExitCritical>
				return pdPASS;
 8006740:	2301      	movs	r3, #1
 8006742:	e063      	b.n	800680c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800674a:	f002 fbf5 	bl	8008f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800674e:	2300      	movs	r3, #0
 8006750:	e05c      	b.n	800680c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006758:	f107 0314 	add.w	r3, r7, #20
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f9d7 	bl	8007b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006766:	f002 fbe7 	bl	8008f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800676a:	f000 ff33 	bl	80075d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800676e:	f002 fbad 	bl	8008ecc <vPortEnterCritical>
 8006772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <xQueueGenericSend+0x184>
 8006780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800678e:	b25b      	sxtb	r3, r3
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0x19a>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800679e:	f002 fbcb 	bl	8008f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067a2:	1d3a      	adds	r2, r7, #4
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f9c6 	bl	8007b3c <xTaskCheckForTimeOut>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d124      	bne.n	8006800 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067b8:	f000 fc24 	bl	8007004 <prvIsQueueFull>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d018      	beq.n	80067f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	3310      	adds	r3, #16
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 f8e4 	bl	8007998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067d2:	f000 fbaf 	bl	8006f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067d6:	f000 ff0b 	bl	80075f0 <xTaskResumeAll>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f af7c 	bne.w	80066da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80067e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <xQueueGenericSend+0x210>)
 80067e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	e772      	b.n	80066da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067f6:	f000 fb9d 	bl	8006f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067fa:	f000 fef9 	bl	80075f0 <xTaskResumeAll>
 80067fe:	e76c      	b.n	80066da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006802:	f000 fb97 	bl	8006f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006806:	f000 fef3 	bl	80075f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800680a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800680c:	4618      	mov	r0, r3
 800680e:	3738      	adds	r7, #56	@ 0x38
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	@ 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	b672      	cpsid	i
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	b662      	cpsie	i
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <xQueueGenericSendFromISR+0x42>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <xQueueGenericSendFromISR+0x46>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <xQueueGenericSendFromISR+0x48>
 800685e:	2300      	movs	r3, #0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10d      	bne.n	8006880 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	b672      	cpsid	i
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	b662      	cpsie	i
 8006878:	623b      	str	r3, [r7, #32]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d103      	bne.n	800688e <xQueueGenericSendFromISR+0x76>
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <xQueueGenericSendFromISR+0x7a>
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <xQueueGenericSendFromISR+0x7c>
 8006892:	2300      	movs	r3, #0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10d      	bne.n	80068b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	b672      	cpsid	i
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	b662      	cpsie	i
 80068ac:	61fb      	str	r3, [r7, #28]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b4:	f002 fbf2 	bl	800909c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068b8:	f3ef 8211 	mrs	r2, BASEPRI
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	b672      	cpsid	i
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	b662      	cpsie	i
 80068d0:	61ba      	str	r2, [r7, #24]
 80068d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d302      	bcc.n	80068ea <xQueueGenericSendFromISR+0xd2>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d12c      	bne.n	8006944 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068fa:	f000 fa8b 	bl	8006e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	d112      	bne.n	800692e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	d016      	beq.n	800693e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	3324      	adds	r3, #36	@ 0x24
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f895 	bl	8007a44 <xTaskRemoveFromEventList>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00e      	beq.n	800693e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e007      	b.n	800693e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800692e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006932:	3301      	adds	r3, #1
 8006934:	b2db      	uxtb	r3, r3
 8006936:	b25a      	sxtb	r2, r3
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800693e:	2301      	movs	r3, #1
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006942:	e001      	b.n	8006948 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006944:	2300      	movs	r3, #0
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
 8006948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006952:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006956:	4618      	mov	r0, r3
 8006958:	3738      	adds	r7, #56	@ 0x38
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	@ 0x30
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800696c:	2300      	movs	r3, #0
 800696e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10d      	bne.n	8006996 <xQueueReceive+0x36>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	b672      	cpsid	i
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	b662      	cpsie	i
 800698e:	623b      	str	r3, [r7, #32]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <xQueueReceive+0x44>
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <xQueueReceive+0x48>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <xQueueReceive+0x4a>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10d      	bne.n	80069ca <xQueueReceive+0x6a>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	b672      	cpsid	i
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	b662      	cpsie	i
 80069c2:	61fb      	str	r3, [r7, #28]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ca:	f001 fa09 	bl	8007de0 <xTaskGetSchedulerState>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <xQueueReceive+0x7a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <xQueueReceive+0x7e>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueReceive+0x80>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <xQueueReceive+0xa0>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	b672      	cpsid	i
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	b662      	cpsie	i
 80069f8:	61bb      	str	r3, [r7, #24]
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a00:	f002 fa64 	bl	8008ecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01f      	beq.n	8006a50 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a14:	f000 fa68 	bl	8006ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	1e5a      	subs	r2, r3, #1
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00f      	beq.n	8006a48 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	3310      	adds	r3, #16
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 f809 	bl	8007a44 <xTaskRemoveFromEventList>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a38:	4b3c      	ldr	r3, [pc, #240]	@ (8006b2c <xQueueReceive+0x1cc>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a48:	f002 fa76 	bl	8008f38 <vPortExitCritical>
				return pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e069      	b.n	8006b24 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a56:	f002 fa6f 	bl	8008f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e062      	b.n	8006b24 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 f851 	bl	8007b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a72:	f002 fa61 	bl	8008f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a76:	f000 fdad 	bl	80075d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a7a:	f002 fa27 	bl	8008ecc <vPortEnterCritical>
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d103      	bne.n	8006a94 <xQueueReceive+0x134>
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d103      	bne.n	8006aaa <xQueueReceive+0x14a>
 8006aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aaa:	f002 fa45 	bl	8008f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aae:	1d3a      	adds	r2, r7, #4
 8006ab0:	f107 0310 	add.w	r3, r7, #16
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f840 	bl	8007b3c <xTaskCheckForTimeOut>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d123      	bne.n	8006b0a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac4:	f000 fa88 	bl	8006fd8 <prvIsQueueEmpty>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d017      	beq.n	8006afe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	3324      	adds	r3, #36	@ 0x24
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 ff5e 	bl	8007998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ade:	f000 fa29 	bl	8006f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ae2:	f000 fd85 	bl	80075f0 <xTaskResumeAll>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d189      	bne.n	8006a00 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006aec:	4b0f      	ldr	r3, [pc, #60]	@ (8006b2c <xQueueReceive+0x1cc>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	e780      	b.n	8006a00 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b00:	f000 fa18 	bl	8006f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b04:	f000 fd74 	bl	80075f0 <xTaskResumeAll>
 8006b08:	e77a      	b.n	8006a00 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b0c:	f000 fa12 	bl	8006f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b10:	f000 fd6e 	bl	80075f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b16:	f000 fa5f 	bl	8006fd8 <prvIsQueueEmpty>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f43f af6f 	beq.w	8006a00 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3730      	adds	r7, #48	@ 0x30
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	e000ed04 	.word	0xe000ed04

08006b30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08e      	sub	sp, #56	@ 0x38
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	623b      	str	r3, [r7, #32]
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b74:	b672      	cpsid	i
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	b662      	cpsie	i
 8006b84:	61fb      	str	r3, [r7, #28]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b8c:	f001 f928 	bl	8007de0 <xTaskGetSchedulerState>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <xQueueSemaphoreTake+0x6c>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xQueueSemaphoreTake+0x70>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <xQueueSemaphoreTake+0x72>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10d      	bne.n	8006bc2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	b672      	cpsid	i
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	b662      	cpsie	i
 8006bba:	61bb      	str	r3, [r7, #24]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bc2:	f002 f983 	bl	8008ecc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d024      	beq.n	8006c1c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	1e5a      	subs	r2, r3, #1
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006be2:	f001 fa7f 	bl	80080e4 <pvTaskIncrementMutexHeldCount>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00f      	beq.n	8006c14 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	3310      	adds	r3, #16
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 ff23 	bl	8007a44 <xTaskRemoveFromEventList>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c04:	4b55      	ldr	r3, [pc, #340]	@ (8006d5c <xQueueSemaphoreTake+0x22c>)
 8006c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c14:	f002 f990 	bl	8008f38 <vPortExitCritical>
				return pdPASS;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e09a      	b.n	8006d52 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d114      	bne.n	8006c4c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00d      	beq.n	8006c44 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	b672      	cpsid	i
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	b662      	cpsie	i
 8006c3c:	617b      	str	r3, [r7, #20]
}
 8006c3e:	bf00      	nop
 8006c40:	bf00      	nop
 8006c42:	e7fd      	b.n	8006c40 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c44:	f002 f978 	bl	8008f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e082      	b.n	8006d52 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c52:	f107 030c 	add.w	r3, r7, #12
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ff5a 	bl	8007b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c60:	f002 f96a 	bl	8008f38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c64:	f000 fcb6 	bl	80075d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c68:	f002 f930 	bl	8008ecc <vPortEnterCritical>
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d103      	bne.n	8006c82 <xQueueSemaphoreTake+0x152>
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d103      	bne.n	8006c98 <xQueueSemaphoreTake+0x168>
 8006c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c98:	f002 f94e 	bl	8008f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	f107 030c 	add.w	r3, r7, #12
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 ff49 	bl	8007b3c <xTaskCheckForTimeOut>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d132      	bne.n	8006d16 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cb2:	f000 f991 	bl	8006fd8 <prvIsQueueEmpty>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d026      	beq.n	8006d0a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006cc4:	f002 f902 	bl	8008ecc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 f8a5 	bl	8007e1c <xTaskPriorityInherit>
 8006cd2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006cd4:	f002 f930 	bl	8008f38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cda:	3324      	adds	r3, #36	@ 0x24
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fe59 	bl	8007998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ce6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ce8:	f000 f924 	bl	8006f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cec:	f000 fc80 	bl	80075f0 <xTaskResumeAll>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f47f af65 	bne.w	8006bc2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006cf8:	4b18      	ldr	r3, [pc, #96]	@ (8006d5c <xQueueSemaphoreTake+0x22c>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	e75b      	b.n	8006bc2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d0c:	f000 f912 	bl	8006f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d10:	f000 fc6e 	bl	80075f0 <xTaskResumeAll>
 8006d14:	e755      	b.n	8006bc2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d18:	f000 f90c 	bl	8006f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d1c:	f000 fc68 	bl	80075f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d22:	f000 f959 	bl	8006fd8 <prvIsQueueEmpty>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f43f af4a 	beq.w	8006bc2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00d      	beq.n	8006d50 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006d34:	f002 f8ca 	bl	8008ecc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d3a:	f000 f853 	bl	8006de4 <prvGetDisinheritPriorityAfterTimeout>
 8006d3e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 f944 	bl	8007fd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d4c:	f002 f8f4 	bl	8008f38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3738      	adds	r7, #56	@ 0x38
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	b672      	cpsid	i
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	b662      	cpsie	i
 8006d82:	60bb      	str	r3, [r7, #8]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006d8a:	f002 f89f 	bl	8008ecc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006d94:	f002 f8d0 	bl	8008f38 <vPortExitCritical>

	return uxReturn;
 8006d98:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006da2:	b480      	push	{r7}
 8006da4:	b087      	sub	sp, #28
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db8:	b672      	cpsid	i
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	b662      	cpsie	i
 8006dc8:	60fb      	str	r3, [r7, #12]
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006dd6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006dd8:	4618      	mov	r0, r3
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e001      	b.n	8006e06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e06:	68fb      	ldr	r3, [r7, #12]
	}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10d      	bne.n	8006e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d14d      	bne.n	8006ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 f854 	bl	8007eec <xTaskPriorityDisinherit>
 8006e44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	609a      	str	r2, [r3, #8]
 8006e4c:	e043      	b.n	8006ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d119      	bne.n	8006e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6858      	ldr	r0, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	f002 ff31 	bl	8009cc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	441a      	add	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d32b      	bcc.n	8006ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]
 8006e86:	e026      	b.n	8006ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68d8      	ldr	r0, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e90:	461a      	mov	r2, r3
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	f002 ff17 	bl	8009cc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d207      	bcs.n	8006ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	425b      	negs	r3, r3
 8006ebe:	441a      	add	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d105      	bne.n	8006ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006ede:	697b      	ldr	r3, [r7, #20]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d018      	beq.n	8006f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d303      	bcc.n	8006f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68d9      	ldr	r1, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f24:	461a      	mov	r2, r3
 8006f26:	6838      	ldr	r0, [r7, #0]
 8006f28:	f002 fecd 	bl	8009cc6 <memcpy>
	}
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f3c:	f001 ffc6 	bl	8008ecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f48:	e011      	b.n	8006f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d012      	beq.n	8006f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3324      	adds	r3, #36	@ 0x24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fd74 	bl	8007a44 <xTaskRemoveFromEventList>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f62:	f000 fe53 	bl	8007c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dce9      	bgt.n	8006f4a <prvUnlockQueue+0x16>
 8006f76:	e000      	b.n	8006f7a <prvUnlockQueue+0x46>
					break;
 8006f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	22ff      	movs	r2, #255	@ 0xff
 8006f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f82:	f001 ffd9 	bl	8008f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f86:	f001 ffa1 	bl	8008ecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f92:	e011      	b.n	8006fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d012      	beq.n	8006fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3310      	adds	r3, #16
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fd4f 	bl	8007a44 <xTaskRemoveFromEventList>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fac:	f000 fe2e 	bl	8007c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dce9      	bgt.n	8006f94 <prvUnlockQueue+0x60>
 8006fc0:	e000      	b.n	8006fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	22ff      	movs	r2, #255	@ 0xff
 8006fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006fcc:	f001 ffb4 	bl	8008f38 <vPortExitCritical>
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fe0:	f001 ff74 	bl	8008ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e001      	b.n	8006ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ff6:	f001 ff9f 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800700c:	f001 ff5e 	bl	8008ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007018:	429a      	cmp	r2, r3
 800701a:	d102      	bne.n	8007022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e001      	b.n	8007026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007026:	f001 ff87 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 800702a:	68fb      	ldr	r3, [r7, #12]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	e014      	b.n	800706e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007044:	4a0f      	ldr	r2, [pc, #60]	@ (8007084 <vQueueAddToRegistry+0x50>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007050:	490c      	ldr	r1, [pc, #48]	@ (8007084 <vQueueAddToRegistry+0x50>)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800705a:	4a0a      	ldr	r2, [pc, #40]	@ (8007084 <vQueueAddToRegistry+0x50>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4413      	add	r3, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007066:	e006      	b.n	8007076 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b07      	cmp	r3, #7
 8007072:	d9e7      	bls.n	8007044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000f48 	.word	0x20000f48

08007088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007098:	f001 ff18 	bl	8008ecc <vPortEnterCritical>
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070a2:	b25b      	sxtb	r3, r3
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d103      	bne.n	80070b2 <vQueueWaitForMessageRestricted+0x2a>
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d103      	bne.n	80070c8 <vQueueWaitForMessageRestricted+0x40>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070c8:	f001 ff36 	bl	8008f38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3324      	adds	r3, #36	@ 0x24
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fc83 	bl	80079e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070e2:	6978      	ldr	r0, [r7, #20]
 80070e4:	f7ff ff26 	bl	8006f34 <prvUnlockQueue>
	}
 80070e8:	bf00      	nop
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08e      	sub	sp, #56	@ 0x38
 80070f4:	af04      	add	r7, sp, #16
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10d      	bne.n	8007120 <xTaskCreateStatic+0x30>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	b672      	cpsid	i
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	b662      	cpsie	i
 8007118:	623b      	str	r3, [r7, #32]
}
 800711a:	bf00      	nop
 800711c:	bf00      	nop
 800711e:	e7fd      	b.n	800711c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <xTaskCreateStatic+0x52>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	b672      	cpsid	i
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	b662      	cpsie	i
 800713a:	61fb      	str	r3, [r7, #28]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007142:	23a8      	movs	r3, #168	@ 0xa8
 8007144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2ba8      	cmp	r3, #168	@ 0xa8
 800714a:	d00d      	beq.n	8007168 <xTaskCreateStatic+0x78>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	b672      	cpsid	i
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	b662      	cpsie	i
 8007160:	61bb      	str	r3, [r7, #24]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007168:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01e      	beq.n	80071ae <xTaskCreateStatic+0xbe>
 8007170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01b      	beq.n	80071ae <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	2202      	movs	r2, #2
 8007184:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007188:	2300      	movs	r3, #0
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	9302      	str	r3, [sp, #8]
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f851 	bl	8007248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071a8:	f000 f8f8 	bl	800739c <prvAddNewTaskToReadyList>
 80071ac:	e001      	b.n	80071b2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071b2:	697b      	ldr	r3, [r7, #20]
	}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3728      	adds	r7, #40	@ 0x28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	@ 0x30
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 ffa9 	bl	8009128 <pvPortMalloc>
 80071d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071de:	20a8      	movs	r0, #168	@ 0xa8
 80071e0:	f001 ffa2 	bl	8009128 <pvPortMalloc>
 80071e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80071f2:	e005      	b.n	8007200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071f4:	6978      	ldr	r0, [r7, #20]
 80071f6:	f002 f865 	bl	80092c4 <vPortFree>
 80071fa:	e001      	b.n	8007200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d017      	beq.n	8007236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	2300      	movs	r3, #0
 8007212:	9303      	str	r3, [sp, #12]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	9302      	str	r3, [sp, #8]
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f80f 	bl	8007248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800722a:	69f8      	ldr	r0, [r7, #28]
 800722c:	f000 f8b6 	bl	800739c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007230:	2301      	movs	r3, #1
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	e002      	b.n	800723c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800723c:	69bb      	ldr	r3, [r7, #24]
	}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	461a      	mov	r2, r3
 8007260:	21a5      	movs	r1, #165	@ 0xa5
 8007262:	f002 fc4b 	bl	8009afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007270:	440b      	add	r3, r1
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00d      	beq.n	80072a6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	b672      	cpsid	i
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	b662      	cpsie	i
 800729e:	617b      	str	r3, [r7, #20]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01f      	beq.n	80072ec <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	e012      	b.n	80072d8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	7819      	ldrb	r1, [r3, #0]
 80072ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	3334      	adds	r3, #52	@ 0x34
 80072c2:	460a      	mov	r2, r1
 80072c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d006      	beq.n	80072e0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	3301      	adds	r3, #1
 80072d6:	61fb      	str	r3, [r7, #28]
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d9e9      	bls.n	80072b2 <prvInitialiseNewTask+0x6a>
 80072de:	e000      	b.n	80072e2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80072e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072ea:	e003      	b.n	80072f4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	2b37      	cmp	r3, #55	@ 0x37
 80072f8:	d901      	bls.n	80072fe <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072fa:	2337      	movs	r3, #55	@ 0x37
 80072fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007302:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007308:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	2200      	movs	r2, #0
 800730e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	3304      	adds	r3, #4
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe ffcb 	bl	80062b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	3318      	adds	r3, #24
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe ffc6 	bl	80062b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007328:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007338:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	2200      	movs	r2, #0
 800733e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007344:	2200      	movs	r2, #0
 8007346:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	3354      	adds	r3, #84	@ 0x54
 800734e:	224c      	movs	r2, #76	@ 0x4c
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f002 fbd2 	bl	8009afc <memset>
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	4a0d      	ldr	r2, [pc, #52]	@ (8007390 <prvInitialiseNewTask+0x148>)
 800735c:	659a      	str	r2, [r3, #88]	@ 0x58
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	4a0c      	ldr	r2, [pc, #48]	@ (8007394 <prvInitialiseNewTask+0x14c>)
 8007362:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	4a0c      	ldr	r2, [pc, #48]	@ (8007398 <prvInitialiseNewTask+0x150>)
 8007368:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	68f9      	ldr	r1, [r7, #12]
 800736e:	69b8      	ldr	r0, [r7, #24]
 8007370:	f001 fc9e 	bl	8008cb0 <pxPortInitialiseStack>
 8007374:	4602      	mov	r2, r0
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800737a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007386:	bf00      	nop
 8007388:	3720      	adds	r7, #32
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20019c74 	.word	0x20019c74
 8007394:	20019cdc 	.word	0x20019cdc
 8007398:	20019d44 	.word	0x20019d44

0800739c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073a4:	f001 fd92 	bl	8008ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007460 <prvAddNewTaskToReadyList+0xc4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007460 <prvAddNewTaskToReadyList+0xc4>)
 80073b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007464 <prvAddNewTaskToReadyList+0xc8>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007464 <prvAddNewTaskToReadyList+0xc8>)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073c0:	4b27      	ldr	r3, [pc, #156]	@ (8007460 <prvAddNewTaskToReadyList+0xc4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d110      	bne.n	80073ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073c8:	f000 fc44 	bl	8007c54 <prvInitialiseTaskLists>
 80073cc:	e00d      	b.n	80073ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ce:	4b26      	ldr	r3, [pc, #152]	@ (8007468 <prvAddNewTaskToReadyList+0xcc>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073d6:	4b23      	ldr	r3, [pc, #140]	@ (8007464 <prvAddNewTaskToReadyList+0xc8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d802      	bhi.n	80073ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007464 <prvAddNewTaskToReadyList+0xc8>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073ea:	4b20      	ldr	r3, [pc, #128]	@ (800746c <prvAddNewTaskToReadyList+0xd0>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	4a1e      	ldr	r2, [pc, #120]	@ (800746c <prvAddNewTaskToReadyList+0xd0>)
 80073f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073f4:	4b1d      	ldr	r3, [pc, #116]	@ (800746c <prvAddNewTaskToReadyList+0xd0>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007400:	4b1b      	ldr	r3, [pc, #108]	@ (8007470 <prvAddNewTaskToReadyList+0xd4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d903      	bls.n	8007410 <prvAddNewTaskToReadyList+0x74>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	4a18      	ldr	r2, [pc, #96]	@ (8007470 <prvAddNewTaskToReadyList+0xd4>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4a15      	ldr	r2, [pc, #84]	@ (8007474 <prvAddNewTaskToReadyList+0xd8>)
 800741e:	441a      	add	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7fe ff4f 	bl	80062ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800742c:	f001 fd84 	bl	8008f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007430:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <prvAddNewTaskToReadyList+0xcc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007438:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <prvAddNewTaskToReadyList+0xc8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	429a      	cmp	r2, r3
 8007444:	d207      	bcs.n	8007456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007446:	4b0c      	ldr	r3, [pc, #48]	@ (8007478 <prvAddNewTaskToReadyList+0xdc>)
 8007448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	2000145c 	.word	0x2000145c
 8007464:	20000f88 	.word	0x20000f88
 8007468:	20001468 	.word	0x20001468
 800746c:	20001478 	.word	0x20001478
 8007470:	20001464 	.word	0x20001464
 8007474:	20000f8c 	.word	0x20000f8c
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01a      	beq.n	80074c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800748e:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <vTaskDelay+0x68>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <vTaskDelay+0x36>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	b672      	cpsid	i
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	b662      	cpsie	i
 80074aa:	60bb      	str	r3, [r7, #8]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80074b2:	f000 f88f 	bl	80075d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f83d 	bl	8008538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074be:	f000 f897 	bl	80075f0 <xTaskResumeAll>
 80074c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d107      	bne.n	80074da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80074ca:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <vTaskDelay+0x6c>)
 80074cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20001484 	.word	0x20001484
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	@ 0x28
 80074f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074fa:	463a      	mov	r2, r7
 80074fc:	1d39      	adds	r1, r7, #4
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fe80 	bl	8006208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	9202      	str	r2, [sp, #8]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	460a      	mov	r2, r1
 800751a:	4926      	ldr	r1, [pc, #152]	@ (80075b4 <vTaskStartScheduler+0xc8>)
 800751c:	4826      	ldr	r0, [pc, #152]	@ (80075b8 <vTaskStartScheduler+0xcc>)
 800751e:	f7ff fde7 	bl	80070f0 <xTaskCreateStatic>
 8007522:	4603      	mov	r3, r0
 8007524:	4a25      	ldr	r2, [pc, #148]	@ (80075bc <vTaskStartScheduler+0xd0>)
 8007526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007528:	4b24      	ldr	r3, [pc, #144]	@ (80075bc <vTaskStartScheduler+0xd0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007530:	2301      	movs	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	e001      	b.n	800753a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007540:	f001 f84e 	bl	80085e0 <xTimerCreateTimerTask>
 8007544:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d11d      	bne.n	8007588 <vTaskStartScheduler+0x9c>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007550:	b672      	cpsid	i
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	b662      	cpsie	i
 8007560:	613b      	str	r3, [r7, #16]
}
 8007562:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007564:	4b16      	ldr	r3, [pc, #88]	@ (80075c0 <vTaskStartScheduler+0xd4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3354      	adds	r3, #84	@ 0x54
 800756a:	4a16      	ldr	r2, [pc, #88]	@ (80075c4 <vTaskStartScheduler+0xd8>)
 800756c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800756e:	4b16      	ldr	r3, [pc, #88]	@ (80075c8 <vTaskStartScheduler+0xdc>)
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007576:	4b15      	ldr	r3, [pc, #84]	@ (80075cc <vTaskStartScheduler+0xe0>)
 8007578:	2201      	movs	r2, #1
 800757a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800757c:	4b14      	ldr	r3, [pc, #80]	@ (80075d0 <vTaskStartScheduler+0xe4>)
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007582:	f001 fc25 	bl	8008dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007586:	e011      	b.n	80075ac <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d10d      	bne.n	80075ac <vTaskStartScheduler+0xc0>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	b672      	cpsid	i
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	b662      	cpsie	i
 80075a4:	60fb      	str	r3, [r7, #12]
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <vTaskStartScheduler+0xbc>
}
 80075ac:	bf00      	nop
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	0800abe0 	.word	0x0800abe0
 80075b8:	08007c25 	.word	0x08007c25
 80075bc:	20001480 	.word	0x20001480
 80075c0:	20000f88 	.word	0x20000f88
 80075c4:	2000001c 	.word	0x2000001c
 80075c8:	2000147c 	.word	0x2000147c
 80075cc:	20001468 	.word	0x20001468
 80075d0:	20001460 	.word	0x20001460

080075d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075d8:	4b04      	ldr	r3, [pc, #16]	@ (80075ec <vTaskSuspendAll+0x18>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	4a03      	ldr	r2, [pc, #12]	@ (80075ec <vTaskSuspendAll+0x18>)
 80075e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80075e2:	bf00      	nop
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20001484 	.word	0x20001484

080075f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075fe:	4b43      	ldr	r3, [pc, #268]	@ (800770c <xTaskResumeAll+0x11c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10d      	bne.n	8007622 <xTaskResumeAll+0x32>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	b672      	cpsid	i
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	b662      	cpsie	i
 800761a:	603b      	str	r3, [r7, #0]
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007622:	f001 fc53 	bl	8008ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007626:	4b39      	ldr	r3, [pc, #228]	@ (800770c <xTaskResumeAll+0x11c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3b01      	subs	r3, #1
 800762c:	4a37      	ldr	r2, [pc, #220]	@ (800770c <xTaskResumeAll+0x11c>)
 800762e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007630:	4b36      	ldr	r3, [pc, #216]	@ (800770c <xTaskResumeAll+0x11c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d162      	bne.n	80076fe <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007638:	4b35      	ldr	r3, [pc, #212]	@ (8007710 <xTaskResumeAll+0x120>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d05e      	beq.n	80076fe <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007640:	e02f      	b.n	80076a2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007642:	4b34      	ldr	r3, [pc, #208]	@ (8007714 <xTaskResumeAll+0x124>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3318      	adds	r3, #24
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fe98 	bl	8006384 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3304      	adds	r3, #4
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe fe93 	bl	8006384 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007662:	4b2d      	ldr	r3, [pc, #180]	@ (8007718 <xTaskResumeAll+0x128>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <xTaskResumeAll+0x82>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	4a2a      	ldr	r2, [pc, #168]	@ (8007718 <xTaskResumeAll+0x128>)
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a27      	ldr	r2, [pc, #156]	@ (800771c <xTaskResumeAll+0x12c>)
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7fe fe1e 	bl	80062ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007692:	4b23      	ldr	r3, [pc, #140]	@ (8007720 <xTaskResumeAll+0x130>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	429a      	cmp	r2, r3
 800769a:	d302      	bcc.n	80076a2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800769c:	4b21      	ldr	r3, [pc, #132]	@ (8007724 <xTaskResumeAll+0x134>)
 800769e:	2201      	movs	r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007714 <xTaskResumeAll+0x124>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1cb      	bne.n	8007642 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076b0:	f000 fb76 	bl	8007da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007728 <xTaskResumeAll+0x138>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d010      	beq.n	80076e2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076c0:	f000 f846 	bl	8007750 <xTaskIncrementTick>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80076ca:	4b16      	ldr	r3, [pc, #88]	@ (8007724 <xTaskResumeAll+0x134>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f1      	bne.n	80076c0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80076dc:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <xTaskResumeAll+0x138>)
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076e2:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <xTaskResumeAll+0x134>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076ee:	4b0f      	ldr	r3, [pc, #60]	@ (800772c <xTaskResumeAll+0x13c>)
 80076f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076fe:	f001 fc1b 	bl	8008f38 <vPortExitCritical>

	return xAlreadyYielded;
 8007702:	68bb      	ldr	r3, [r7, #8]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20001484 	.word	0x20001484
 8007710:	2000145c 	.word	0x2000145c
 8007714:	2000141c 	.word	0x2000141c
 8007718:	20001464 	.word	0x20001464
 800771c:	20000f8c 	.word	0x20000f8c
 8007720:	20000f88 	.word	0x20000f88
 8007724:	20001470 	.word	0x20001470
 8007728:	2000146c 	.word	0x2000146c
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007736:	4b05      	ldr	r3, [pc, #20]	@ (800774c <xTaskGetTickCount+0x1c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800773c:	687b      	ldr	r3, [r7, #4]
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20001460 	.word	0x20001460

08007750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800775a:	4b50      	ldr	r3, [pc, #320]	@ (800789c <xTaskIncrementTick+0x14c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 808c 	bne.w	800787c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007764:	4b4e      	ldr	r3, [pc, #312]	@ (80078a0 <xTaskIncrementTick+0x150>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800776c:	4a4c      	ldr	r2, [pc, #304]	@ (80078a0 <xTaskIncrementTick+0x150>)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d123      	bne.n	80077c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007778:	4b4a      	ldr	r3, [pc, #296]	@ (80078a4 <xTaskIncrementTick+0x154>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00d      	beq.n	800779e <xTaskIncrementTick+0x4e>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	b672      	cpsid	i
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	b662      	cpsie	i
 8007796:	603b      	str	r3, [r7, #0]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <xTaskIncrementTick+0x4a>
 800779e:	4b41      	ldr	r3, [pc, #260]	@ (80078a4 <xTaskIncrementTick+0x154>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	4b40      	ldr	r3, [pc, #256]	@ (80078a8 <xTaskIncrementTick+0x158>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a3e      	ldr	r2, [pc, #248]	@ (80078a4 <xTaskIncrementTick+0x154>)
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	4a3e      	ldr	r2, [pc, #248]	@ (80078a8 <xTaskIncrementTick+0x158>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	4b3e      	ldr	r3, [pc, #248]	@ (80078ac <xTaskIncrementTick+0x15c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	4a3c      	ldr	r2, [pc, #240]	@ (80078ac <xTaskIncrementTick+0x15c>)
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	f000 faf0 	bl	8007da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077c0:	4b3b      	ldr	r3, [pc, #236]	@ (80078b0 <xTaskIncrementTick+0x160>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d349      	bcc.n	800785e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077ca:	4b36      	ldr	r3, [pc, #216]	@ (80078a4 <xTaskIncrementTick+0x154>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d4:	4b36      	ldr	r3, [pc, #216]	@ (80078b0 <xTaskIncrementTick+0x160>)
 80077d6:	f04f 32ff 	mov.w	r2, #4294967295
 80077da:	601a      	str	r2, [r3, #0]
					break;
 80077dc:	e03f      	b.n	800785e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077de:	4b31      	ldr	r3, [pc, #196]	@ (80078a4 <xTaskIncrementTick+0x154>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d203      	bcs.n	80077fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077f6:	4a2e      	ldr	r2, [pc, #184]	@ (80078b0 <xTaskIncrementTick+0x160>)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077fc:	e02f      	b.n	800785e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fdbe 	bl	8006384 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	3318      	adds	r3, #24
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe fdb5 	bl	8006384 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781e:	4b25      	ldr	r3, [pc, #148]	@ (80078b4 <xTaskIncrementTick+0x164>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d903      	bls.n	800782e <xTaskIncrementTick+0xde>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a22      	ldr	r2, [pc, #136]	@ (80078b4 <xTaskIncrementTick+0x164>)
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a1f      	ldr	r2, [pc, #124]	@ (80078b8 <xTaskIncrementTick+0x168>)
 800783c:	441a      	add	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	3304      	adds	r3, #4
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f7fe fd40 	bl	80062ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784e:	4b1b      	ldr	r3, [pc, #108]	@ (80078bc <xTaskIncrementTick+0x16c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	429a      	cmp	r2, r3
 8007856:	d3b8      	bcc.n	80077ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007858:	2301      	movs	r3, #1
 800785a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800785c:	e7b5      	b.n	80077ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800785e:	4b17      	ldr	r3, [pc, #92]	@ (80078bc <xTaskIncrementTick+0x16c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007864:	4914      	ldr	r1, [pc, #80]	@ (80078b8 <xTaskIncrementTick+0x168>)
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d907      	bls.n	8007886 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e004      	b.n	8007886 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800787c:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <xTaskIncrementTick+0x170>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a0f      	ldr	r2, [pc, #60]	@ (80078c0 <xTaskIncrementTick+0x170>)
 8007884:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007886:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <xTaskIncrementTick+0x174>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800788e:	2301      	movs	r3, #1
 8007890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007892:	697b      	ldr	r3, [r7, #20]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20001484 	.word	0x20001484
 80078a0:	20001460 	.word	0x20001460
 80078a4:	20001414 	.word	0x20001414
 80078a8:	20001418 	.word	0x20001418
 80078ac:	20001474 	.word	0x20001474
 80078b0:	2000147c 	.word	0x2000147c
 80078b4:	20001464 	.word	0x20001464
 80078b8:	20000f8c 	.word	0x20000f8c
 80078bc:	20000f88 	.word	0x20000f88
 80078c0:	2000146c 	.word	0x2000146c
 80078c4:	20001470 	.word	0x20001470

080078c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007980 <vTaskSwitchContext+0xb8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007984 <vTaskSwitchContext+0xbc>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078dc:	e049      	b.n	8007972 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80078de:	4b29      	ldr	r3, [pc, #164]	@ (8007984 <vTaskSwitchContext+0xbc>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e4:	4b28      	ldr	r3, [pc, #160]	@ (8007988 <vTaskSwitchContext+0xc0>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e013      	b.n	8007914 <vTaskSwitchContext+0x4c>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10d      	bne.n	800790e <vTaskSwitchContext+0x46>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	b672      	cpsid	i
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	b662      	cpsie	i
 8007906:	607b      	str	r3, [r7, #4]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <vTaskSwitchContext+0x42>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b01      	subs	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	491d      	ldr	r1, [pc, #116]	@ (800798c <vTaskSwitchContext+0xc4>)
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0e1      	beq.n	80078ec <vTaskSwitchContext+0x24>
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4a16      	ldr	r2, [pc, #88]	@ (800798c <vTaskSwitchContext+0xc4>)
 8007934:	4413      	add	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	3308      	adds	r3, #8
 800794a:	429a      	cmp	r2, r3
 800794c:	d104      	bne.n	8007958 <vTaskSwitchContext+0x90>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	4a0c      	ldr	r2, [pc, #48]	@ (8007990 <vTaskSwitchContext+0xc8>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4a09      	ldr	r2, [pc, #36]	@ (8007988 <vTaskSwitchContext+0xc0>)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007968:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <vTaskSwitchContext+0xc8>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3354      	adds	r3, #84	@ 0x54
 800796e:	4a09      	ldr	r2, [pc, #36]	@ (8007994 <vTaskSwitchContext+0xcc>)
 8007970:	6013      	str	r3, [r2, #0]
}
 8007972:	bf00      	nop
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20001484 	.word	0x20001484
 8007984:	20001470 	.word	0x20001470
 8007988:	20001464 	.word	0x20001464
 800798c:	20000f8c 	.word	0x20000f8c
 8007990:	20000f88 	.word	0x20000f88
 8007994:	2000001c 	.word	0x2000001c

08007998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10d      	bne.n	80079c4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	b672      	cpsid	i
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	b662      	cpsie	i
 80079bc:	60fb      	str	r3, [r7, #12]
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	e7fd      	b.n	80079c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c4:	4b07      	ldr	r3, [pc, #28]	@ (80079e4 <vTaskPlaceOnEventList+0x4c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3318      	adds	r3, #24
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fe fca0 	bl	8006312 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079d2:	2101      	movs	r1, #1
 80079d4:	6838      	ldr	r0, [r7, #0]
 80079d6:	f000 fdaf 	bl	8008538 <prvAddCurrentTaskToDelayedList>
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000f88 	.word	0x20000f88

080079e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	617b      	str	r3, [r7, #20]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a16:	4b0a      	ldr	r3, [pc, #40]	@ (8007a40 <vTaskPlaceOnEventListRestricted+0x58>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3318      	adds	r3, #24
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7fe fc53 	bl	80062ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	68b8      	ldr	r0, [r7, #8]
 8007a34:	f000 fd80 	bl	8008538 <prvAddCurrentTaskToDelayedList>
	}
 8007a38:	bf00      	nop
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000f88 	.word	0x20000f88

08007a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10d      	bne.n	8007a76 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	b672      	cpsid	i
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	b662      	cpsie	i
 8007a6e:	60fb      	str	r3, [r7, #12]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	3318      	adds	r3, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fc82 	bl	8006384 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a80:	4b1d      	ldr	r3, [pc, #116]	@ (8007af8 <xTaskRemoveFromEventList+0xb4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11d      	bne.n	8007ac4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fc79 	bl	8006384 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a96:	4b19      	ldr	r3, [pc, #100]	@ (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d903      	bls.n	8007aa6 <xTaskRemoveFromEventList+0x62>
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa2:	4a16      	ldr	r2, [pc, #88]	@ (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4a13      	ldr	r2, [pc, #76]	@ (8007b00 <xTaskRemoveFromEventList+0xbc>)
 8007ab4:	441a      	add	r2, r3
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7fe fc04 	bl	80062ca <vListInsertEnd>
 8007ac2:	e005      	b.n	8007ad0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	3318      	adds	r3, #24
 8007ac8:	4619      	mov	r1, r3
 8007aca:	480e      	ldr	r0, [pc, #56]	@ (8007b04 <xTaskRemoveFromEventList+0xc0>)
 8007acc:	f7fe fbfd 	bl	80062ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <xTaskRemoveFromEventList+0xc4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d905      	bls.n	8007aea <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <xTaskRemoveFromEventList+0xc8>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e001      	b.n	8007aee <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20001484 	.word	0x20001484
 8007afc:	20001464 	.word	0x20001464
 8007b00:	20000f8c 	.word	0x20000f8c
 8007b04:	2000141c 	.word	0x2000141c
 8007b08:	20000f88 	.word	0x20000f88
 8007b0c:	20001470 	.word	0x20001470

08007b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b18:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <vTaskInternalSetTimeOutState+0x24>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b20:	4b05      	ldr	r3, [pc, #20]	@ (8007b38 <vTaskInternalSetTimeOutState+0x28>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20001474 	.word	0x20001474
 8007b38:	20001460 	.word	0x20001460

08007b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10d      	bne.n	8007b68 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b50:	b672      	cpsid	i
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	b662      	cpsie	i
 8007b60:	613b      	str	r3, [r7, #16]
}
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	b672      	cpsid	i
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	b662      	cpsie	i
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	e7fd      	b.n	8007b86 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007b8a:	f001 f99f 	bl	8008ecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c04 <xTaskCheckForTimeOut+0xc8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d102      	bne.n	8007bae <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e023      	b.n	8007bf6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <xTaskCheckForTimeOut+0xcc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d007      	beq.n	8007bca <xTaskCheckForTimeOut+0x8e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e015      	b.n	8007bf6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d20b      	bcs.n	8007bec <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff ff95 	bl	8007b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	e004      	b.n	8007bf6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bf6:	f001 f99f 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20001460 	.word	0x20001460
 8007c08:	20001474 	.word	0x20001474

08007c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c10:	4b03      	ldr	r3, [pc, #12]	@ (8007c20 <vTaskMissedYield+0x14>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
}
 8007c16:	bf00      	nop
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20001470 	.word	0x20001470

08007c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c2c:	f000 f852 	bl	8007cd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <prvIdleTask+0x28>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d9f9      	bls.n	8007c2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <prvIdleTask+0x2c>)
 8007c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c48:	e7f0      	b.n	8007c2c <prvIdleTask+0x8>
 8007c4a:	bf00      	nop
 8007c4c:	20000f8c 	.word	0x20000f8c
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	e00c      	b.n	8007c7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4a12      	ldr	r2, [pc, #72]	@ (8007cb4 <prvInitialiseTaskLists+0x60>)
 8007c6c:	4413      	add	r3, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fafe 	bl	8006270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3301      	adds	r3, #1
 8007c78:	607b      	str	r3, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b37      	cmp	r3, #55	@ 0x37
 8007c7e:	d9ef      	bls.n	8007c60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c80:	480d      	ldr	r0, [pc, #52]	@ (8007cb8 <prvInitialiseTaskLists+0x64>)
 8007c82:	f7fe faf5 	bl	8006270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c86:	480d      	ldr	r0, [pc, #52]	@ (8007cbc <prvInitialiseTaskLists+0x68>)
 8007c88:	f7fe faf2 	bl	8006270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c8c:	480c      	ldr	r0, [pc, #48]	@ (8007cc0 <prvInitialiseTaskLists+0x6c>)
 8007c8e:	f7fe faef 	bl	8006270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c92:	480c      	ldr	r0, [pc, #48]	@ (8007cc4 <prvInitialiseTaskLists+0x70>)
 8007c94:	f7fe faec 	bl	8006270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c98:	480b      	ldr	r0, [pc, #44]	@ (8007cc8 <prvInitialiseTaskLists+0x74>)
 8007c9a:	f7fe fae9 	bl	8006270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007ccc <prvInitialiseTaskLists+0x78>)
 8007ca0:	4a05      	ldr	r2, [pc, #20]	@ (8007cb8 <prvInitialiseTaskLists+0x64>)
 8007ca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <prvInitialiseTaskLists+0x7c>)
 8007ca6:	4a05      	ldr	r2, [pc, #20]	@ (8007cbc <prvInitialiseTaskLists+0x68>)
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000f8c 	.word	0x20000f8c
 8007cb8:	200013ec 	.word	0x200013ec
 8007cbc:	20001400 	.word	0x20001400
 8007cc0:	2000141c 	.word	0x2000141c
 8007cc4:	20001430 	.word	0x20001430
 8007cc8:	20001448 	.word	0x20001448
 8007ccc:	20001414 	.word	0x20001414
 8007cd0:	20001418 	.word	0x20001418

08007cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cda:	e019      	b.n	8007d10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cdc:	f001 f8f6 	bl	8008ecc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce0:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <prvCheckTasksWaitingTermination+0x50>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fb49 	bl	8006384 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <prvCheckTasksWaitingTermination+0x54>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d28 <prvCheckTasksWaitingTermination+0x54>)
 8007cfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <prvCheckTasksWaitingTermination+0x58>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a0a      	ldr	r2, [pc, #40]	@ (8007d2c <prvCheckTasksWaitingTermination+0x58>)
 8007d04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d06:	f001 f917 	bl	8008f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f810 	bl	8007d30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <prvCheckTasksWaitingTermination+0x58>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e1      	bne.n	8007cdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20001430 	.word	0x20001430
 8007d28:	2000145c 	.word	0x2000145c
 8007d2c:	20001444 	.word	0x20001444

08007d30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3354      	adds	r3, #84	@ 0x54
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 ff09 	bl	8009b54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 fab7 	bl	80092c4 <vPortFree>
				vPortFree( pxTCB );
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fab4 	bl	80092c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d5c:	e01b      	b.n	8007d96 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d103      	bne.n	8007d70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 faab 	bl	80092c4 <vPortFree>
	}
 8007d6e:	e012      	b.n	8007d96 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d00d      	beq.n	8007d96 <prvDeleteTCB+0x66>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7e:	b672      	cpsid	i
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	b662      	cpsie	i
 8007d8e:	60fb      	str	r3, [r7, #12]
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <prvDeleteTCB+0x62>
	}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007da6:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd8 <prvResetNextTaskUnblockTime+0x38>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d104      	bne.n	8007dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007db0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ddc <prvResetNextTaskUnblockTime+0x3c>)
 8007db2:	f04f 32ff 	mov.w	r2, #4294967295
 8007db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007db8:	e008      	b.n	8007dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dba:	4b07      	ldr	r3, [pc, #28]	@ (8007dd8 <prvResetNextTaskUnblockTime+0x38>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4a04      	ldr	r2, [pc, #16]	@ (8007ddc <prvResetNextTaskUnblockTime+0x3c>)
 8007dca:	6013      	str	r3, [r2, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20001414 	.word	0x20001414
 8007ddc:	2000147c 	.word	0x2000147c

08007de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007de6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <xTaskGetSchedulerState+0x34>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dee:	2301      	movs	r3, #1
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	e008      	b.n	8007e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df4:	4b08      	ldr	r3, [pc, #32]	@ (8007e18 <xTaskGetSchedulerState+0x38>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	607b      	str	r3, [r7, #4]
 8007e00:	e001      	b.n	8007e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e02:	2300      	movs	r3, #0
 8007e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e06:	687b      	ldr	r3, [r7, #4]
	}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	20001468 	.word	0x20001468
 8007e18:	20001484 	.word	0x20001484

08007e1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d051      	beq.n	8007ed6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e36:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee0 <xTaskPriorityInherit+0xc4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d241      	bcs.n	8007ec4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db06      	blt.n	8007e56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e48:	4b25      	ldr	r3, [pc, #148]	@ (8007ee0 <xTaskPriorityInherit+0xc4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6959      	ldr	r1, [r3, #20]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee4 <xTaskPriorityInherit+0xc8>)
 8007e68:	4413      	add	r3, r2
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	d122      	bne.n	8007eb4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fa86 	bl	8006384 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e78:	4b19      	ldr	r3, [pc, #100]	@ (8007ee0 <xTaskPriorityInherit+0xc4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e86:	4b18      	ldr	r3, [pc, #96]	@ (8007ee8 <xTaskPriorityInherit+0xcc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d903      	bls.n	8007e96 <xTaskPriorityInherit+0x7a>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e92:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <xTaskPriorityInherit+0xcc>)
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4a10      	ldr	r2, [pc, #64]	@ (8007ee4 <xTaskPriorityInherit+0xc8>)
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f7fe fa0c 	bl	80062ca <vListInsertEnd>
 8007eb2:	e004      	b.n	8007ebe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee0 <xTaskPriorityInherit+0xc4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e008      	b.n	8007ed6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ec8:	4b05      	ldr	r3, [pc, #20]	@ (8007ee0 <xTaskPriorityInherit+0xc4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d201      	bcs.n	8007ed6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000f88 	.word	0x20000f88
 8007ee4:	20000f8c 	.word	0x20000f8c
 8007ee8:	20001464 	.word	0x20001464

08007eec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d05c      	beq.n	8007fbc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f02:	4b31      	ldr	r3, [pc, #196]	@ (8007fc8 <xTaskPriorityDisinherit+0xdc>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d00d      	beq.n	8007f28 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10d      	bne.n	8007f4c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	b672      	cpsid	i
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	b662      	cpsie	i
 8007f44:	60bb      	str	r3, [r7, #8]
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	e7fd      	b.n	8007f48 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	1e5a      	subs	r2, r3, #1
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d02c      	beq.n	8007fbc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d128      	bne.n	8007fbc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fa08 	bl	8006384 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fcc <xTaskPriorityDisinherit+0xe0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d903      	bls.n	8007f9c <xTaskPriorityDisinherit+0xb0>
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4a0c      	ldr	r2, [pc, #48]	@ (8007fcc <xTaskPriorityDisinherit+0xe0>)
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4a09      	ldr	r2, [pc, #36]	@ (8007fd0 <xTaskPriorityDisinherit+0xe4>)
 8007faa:	441a      	add	r2, r3
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7fe f989 	bl	80062ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fbc:	697b      	ldr	r3, [r7, #20]
	}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000f88 	.word	0x20000f88
 8007fcc:	20001464 	.word	0x20001464
 8007fd0:	20000f8c 	.word	0x20000f8c

08007fd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d070      	beq.n	80080ce <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10d      	bne.n	8008010 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	b672      	cpsid	i
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	b662      	cpsie	i
 8008008:	60fb      	str	r3, [r7, #12]
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	e7fd      	b.n	800800c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d902      	bls.n	8008020 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	e002      	b.n	8008026 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008024:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	429a      	cmp	r2, r3
 800802e:	d04e      	beq.n	80080ce <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	429a      	cmp	r2, r3
 8008038:	d149      	bne.n	80080ce <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800803a:	4b27      	ldr	r3, [pc, #156]	@ (80080d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	429a      	cmp	r2, r3
 8008042:	d10d      	bne.n	8008060 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008048:	b672      	cpsid	i
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	b662      	cpsie	i
 8008058:	60bb      	str	r3, [r7, #8]
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	db04      	blt.n	800807e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	6959      	ldr	r1, [r3, #20]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4a13      	ldr	r2, [pc, #76]	@ (80080dc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800808e:	4413      	add	r3, r2
 8008090:	4299      	cmp	r1, r3
 8008092:	d11c      	bne.n	80080ce <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	3304      	adds	r3, #4
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe f973 	bl	8006384 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	4b0f      	ldr	r3, [pc, #60]	@ (80080e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d903      	bls.n	80080b2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ae:	4a0c      	ldr	r2, [pc, #48]	@ (80080e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4a07      	ldr	r2, [pc, #28]	@ (80080dc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80080c0:	441a      	add	r2, r3
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4619      	mov	r1, r3
 80080c8:	4610      	mov	r0, r2
 80080ca:	f7fe f8fe 	bl	80062ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080ce:	bf00      	nop
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000f88 	.word	0x20000f88
 80080dc:	20000f8c 	.word	0x20000f8c
 80080e0:	20001464 	.word	0x20001464

080080e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080e8:	4b07      	ldr	r3, [pc, #28]	@ (8008108 <pvTaskIncrementMutexHeldCount+0x24>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080f0:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <pvTaskIncrementMutexHeldCount+0x24>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080f6:	3201      	adds	r2, #1
 80080f8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80080fa:	4b03      	ldr	r3, [pc, #12]	@ (8008108 <pvTaskIncrementMutexHeldCount+0x24>)
 80080fc:	681b      	ldr	r3, [r3, #0]
	}
 80080fe:	4618      	mov	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	20000f88 	.word	0x20000f88

0800810c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800811a:	f000 fed7 	bl	8008ecc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800811e:	4b29      	ldr	r3, [pc, #164]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d01c      	beq.n	8008166 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800812c:	4b25      	ldr	r3, [pc, #148]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	43d2      	mvns	r2, r2
 8008138:	400a      	ands	r2, r1
 800813a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800813e:	4b21      	ldr	r3, [pc, #132]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800814e:	2101      	movs	r1, #1
 8008150:	6838      	ldr	r0, [r7, #0]
 8008152:	f000 f9f1 	bl	8008538 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008156:	4b1c      	ldr	r3, [pc, #112]	@ (80081c8 <xTaskNotifyWait+0xbc>)
 8008158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008166:	f000 fee7 	bl	8008f38 <vPortExitCritical>

		taskENTER_CRITICAL();
 800816a:	f000 feaf 	bl	8008ecc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008174:	4b13      	ldr	r3, [pc, #76]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008180:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d002      	beq.n	8008194 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e00a      	b.n	80081aa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008194:	4b0b      	ldr	r3, [pc, #44]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	43d2      	mvns	r2, r2
 80081a0:	400a      	ands	r2, r1
 80081a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081aa:	4b06      	ldr	r3, [pc, #24]	@ (80081c4 <xTaskNotifyWait+0xb8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80081b4:	f000 fec0 	bl	8008f38 <vPortExitCritical>

		return xReturn;
 80081b8:	697b      	ldr	r3, [r7, #20]
	}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000f88 	.word	0x20000f88
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	@ 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <xTaskGenericNotify+0x36>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	b672      	cpsid	i
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	b662      	cpsie	i
 80081fa:	61bb      	str	r3, [r7, #24]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008206:	f000 fe61 	bl	8008ecc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008220:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	2202      	movs	r2, #2
 8008226:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	2b04      	cmp	r3, #4
 800822e:	d82e      	bhi.n	800828e <xTaskGenericNotify+0xc2>
 8008230:	a201      	add	r2, pc, #4	@ (adr r2, 8008238 <xTaskGenericNotify+0x6c>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	080082b7 	.word	0x080082b7
 800823c:	0800824d 	.word	0x0800824d
 8008240:	0800825f 	.word	0x0800825f
 8008244:	0800826f 	.word	0x0800826f
 8008248:	08008279 	.word	0x08008279
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	431a      	orrs	r2, r3
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800825c:	e02e      	b.n	80082bc <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800826c:	e026      	b.n	80082bc <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008276:	e021      	b.n	80082bc <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008278:	7ffb      	ldrb	r3, [r7, #31]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d004      	beq.n	8008288 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008286:	e019      	b.n	80082bc <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8008288:	2300      	movs	r3, #0
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800828c:	e016      	b.n	80082bc <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d00f      	beq.n	80082ba <xTaskGenericNotify+0xee>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	b672      	cpsid	i
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	b662      	cpsie	i
 80082ae:	617b      	str	r3, [r7, #20]
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	e7fd      	b.n	80082b2 <xTaskGenericNotify+0xe6>
					break;
 80082b6:	bf00      	nop
 80082b8:	e000      	b.n	80082bc <xTaskGenericNotify+0xf0>

					break;
 80082ba:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80082bc:	7ffb      	ldrb	r3, [r7, #31]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d13d      	bne.n	800833e <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe f85c 	bl	8006384 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d0:	4b1e      	ldr	r3, [pc, #120]	@ (800834c <xTaskGenericNotify+0x180>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d903      	bls.n	80082e0 <xTaskGenericNotify+0x114>
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	4a1b      	ldr	r2, [pc, #108]	@ (800834c <xTaskGenericNotify+0x180>)
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4a18      	ldr	r2, [pc, #96]	@ (8008350 <xTaskGenericNotify+0x184>)
 80082ee:	441a      	add	r2, r3
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fd ffe7 	bl	80062ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <xTaskGenericNotify+0x154>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008308:	b672      	cpsid	i
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	b662      	cpsie	i
 8008318:	613b      	str	r3, [r7, #16]
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008324:	4b0b      	ldr	r3, [pc, #44]	@ (8008354 <xTaskGenericNotify+0x188>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832a:	429a      	cmp	r2, r3
 800832c:	d907      	bls.n	800833e <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800832e:	4b0a      	ldr	r3, [pc, #40]	@ (8008358 <xTaskGenericNotify+0x18c>)
 8008330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800833e:	f000 fdfb 	bl	8008f38 <vPortExitCritical>

		return xReturn;
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008344:	4618      	mov	r0, r3
 8008346:	3728      	adds	r7, #40	@ 0x28
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20001464 	.word	0x20001464
 8008350:	20000f8c 	.word	0x20000f8c
 8008354:	20000f88 	.word	0x20000f88
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08e      	sub	sp, #56	@ 0x38
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800836c:	2301      	movs	r3, #1
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10d      	bne.n	8008392 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008392:	f000 fe83 	bl	800909c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800839a:	f3ef 8211 	mrs	r2, BASEPRI
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	b672      	cpsid	i
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	b662      	cpsie	i
 80083b2:	623a      	str	r2, [r7, #32]
 80083b4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80083b6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d004      	beq.n	80083ca <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80083d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d82e      	bhi.n	8008440 <xTaskGenericNotifyFromISR+0xe4>
 80083e2:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <xTaskGenericNotifyFromISR+0x8c>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	08008469 	.word	0x08008469
 80083ec:	080083fd 	.word	0x080083fd
 80083f0:	0800840f 	.word	0x0800840f
 80083f4:	0800841f 	.word	0x0800841f
 80083f8:	08008429 	.word	0x08008429
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	431a      	orrs	r2, r3
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800840c:	e02f      	b.n	800846e <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800840e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008410:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800841c:	e027      	b.n	800846e <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008426:	e022      	b.n	800846e <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008428:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800842c:	2b02      	cmp	r3, #2
 800842e:	d004      	beq.n	800843a <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008438:	e019      	b.n	800846e <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 800843a:	2300      	movs	r3, #0
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800843e:	e016      	b.n	800846e <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844a:	d00f      	beq.n	800846c <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008450:	b672      	cpsid	i
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	b662      	cpsie	i
 8008460:	61bb      	str	r3, [r7, #24]
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <xTaskGenericNotifyFromISR+0x108>
					break;
 8008468:	bf00      	nop
 800846a:	e000      	b.n	800846e <xTaskGenericNotifyFromISR+0x112>
					break;
 800846c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800846e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008472:	2b01      	cmp	r3, #1
 8008474:	d149      	bne.n	800850a <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	b672      	cpsid	i
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	b662      	cpsie	i
 8008492:	617b      	str	r3, [r7, #20]
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	e7fd      	b.n	8008496 <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800849a:	4b21      	ldr	r3, [pc, #132]	@ (8008520 <xTaskGenericNotifyFromISR+0x1c4>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d11d      	bne.n	80084de <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	3304      	adds	r3, #4
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fd ff6c 	bl	8006384 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008524 <xTaskGenericNotifyFromISR+0x1c8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d903      	bls.n	80084c0 <xTaskGenericNotifyFromISR+0x164>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	4a19      	ldr	r2, [pc, #100]	@ (8008524 <xTaskGenericNotifyFromISR+0x1c8>)
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4a16      	ldr	r2, [pc, #88]	@ (8008528 <xTaskGenericNotifyFromISR+0x1cc>)
 80084ce:	441a      	add	r2, r3
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7fd fef7 	bl	80062ca <vListInsertEnd>
 80084dc:	e005      	b.n	80084ea <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	3318      	adds	r3, #24
 80084e2:	4619      	mov	r1, r3
 80084e4:	4811      	ldr	r0, [pc, #68]	@ (800852c <xTaskGenericNotifyFromISR+0x1d0>)
 80084e6:	f7fd fef0 	bl	80062ca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ee:	4b10      	ldr	r3, [pc, #64]	@ (8008530 <xTaskGenericNotifyFromISR+0x1d4>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d908      	bls.n	800850a <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80084f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80084fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008500:	2201      	movs	r2, #1
 8008502:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008504:	4b0b      	ldr	r3, [pc, #44]	@ (8008534 <xTaskGenericNotifyFromISR+0x1d8>)
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f383 8811 	msr	BASEPRI, r3
}
 8008514:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8008518:	4618      	mov	r0, r3
 800851a:	3738      	adds	r7, #56	@ 0x38
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20001484 	.word	0x20001484
 8008524:	20001464 	.word	0x20001464
 8008528:	20000f8c 	.word	0x20000f8c
 800852c:	2000141c 	.word	0x2000141c
 8008530:	20000f88 	.word	0x20000f88
 8008534:	20001470 	.word	0x20001470

08008538 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008542:	4b21      	ldr	r3, [pc, #132]	@ (80085c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008548:	4b20      	ldr	r3, [pc, #128]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fd ff18 	bl	8006384 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d10a      	bne.n	8008572 <prvAddCurrentTaskToDelayedList+0x3a>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008562:	4b1a      	ldr	r3, [pc, #104]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4819      	ldr	r0, [pc, #100]	@ (80085d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800856c:	f7fd fead 	bl	80062ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008570:	e026      	b.n	80085c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800857a:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	429a      	cmp	r2, r3
 8008588:	d209      	bcs.n	800859e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3304      	adds	r3, #4
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f7fd febb 	bl	8006312 <vListInsert>
}
 800859c:	e010      	b.n	80085c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859e:	4b0e      	ldr	r3, [pc, #56]	@ (80085d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f7fd feb1 	bl	8006312 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085b0:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d202      	bcs.n	80085c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085ba:	4a08      	ldr	r2, [pc, #32]	@ (80085dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20001460 	.word	0x20001460
 80085cc:	20000f88 	.word	0x20000f88
 80085d0:	20001448 	.word	0x20001448
 80085d4:	20001418 	.word	0x20001418
 80085d8:	20001414 	.word	0x20001414
 80085dc:	2000147c 	.word	0x2000147c

080085e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08a      	sub	sp, #40	@ 0x28
 80085e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80085ea:	f000 fb21 	bl	8008c30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80085ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008668 <xTimerCreateTimerTask+0x88>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d021      	beq.n	800863a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085fe:	1d3a      	adds	r2, r7, #4
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	f107 030c 	add.w	r3, r7, #12
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fe17 	bl	800623c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	2302      	movs	r3, #2
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	460a      	mov	r2, r1
 8008620:	4912      	ldr	r1, [pc, #72]	@ (800866c <xTimerCreateTimerTask+0x8c>)
 8008622:	4813      	ldr	r0, [pc, #76]	@ (8008670 <xTimerCreateTimerTask+0x90>)
 8008624:	f7fe fd64 	bl	80070f0 <xTaskCreateStatic>
 8008628:	4603      	mov	r3, r0
 800862a:	4a12      	ldr	r2, [pc, #72]	@ (8008674 <xTimerCreateTimerTask+0x94>)
 800862c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800862e:	4b11      	ldr	r3, [pc, #68]	@ (8008674 <xTimerCreateTimerTask+0x94>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008636:	2301      	movs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10d      	bne.n	800865c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	b672      	cpsid	i
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	b662      	cpsie	i
 8008654:	613b      	str	r3, [r7, #16]
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800865c:	697b      	ldr	r3, [r7, #20]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	200014b8 	.word	0x200014b8
 800866c:	0800abe8 	.word	0x0800abe8
 8008670:	080087b9 	.word	0x080087b9
 8008674:	200014bc 	.word	0x200014bc

08008678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	@ 0x28
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10d      	bne.n	80086ac <xTimerGenericCommand+0x34>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008694:	b672      	cpsid	i
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	b662      	cpsie	i
 80086a4:	623b      	str	r3, [r7, #32]
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086ac:	4b19      	ldr	r3, [pc, #100]	@ (8008714 <xTimerGenericCommand+0x9c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d02a      	beq.n	800870a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	dc18      	bgt.n	80086f8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086c6:	f7ff fb8b 	bl	8007de0 <xTaskGetSchedulerState>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d109      	bne.n	80086e4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086d0:	4b10      	ldr	r3, [pc, #64]	@ (8008714 <xTimerGenericCommand+0x9c>)
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	f107 0110 	add.w	r1, r7, #16
 80086d8:	2300      	movs	r3, #0
 80086da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086dc:	f7fd ff92 	bl	8006604 <xQueueGenericSend>
 80086e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80086e2:	e012      	b.n	800870a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <xTimerGenericCommand+0x9c>)
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	f107 0110 	add.w	r1, r7, #16
 80086ec:	2300      	movs	r3, #0
 80086ee:	2200      	movs	r2, #0
 80086f0:	f7fd ff88 	bl	8006604 <xQueueGenericSend>
 80086f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80086f6:	e008      	b.n	800870a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086f8:	4b06      	ldr	r3, [pc, #24]	@ (8008714 <xTimerGenericCommand+0x9c>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	f107 0110 	add.w	r1, r7, #16
 8008700:	2300      	movs	r3, #0
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	f7fe f888 	bl	8006818 <xQueueGenericSendFromISR>
 8008708:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800870c:	4618      	mov	r0, r3
 800870e:	3728      	adds	r7, #40	@ 0x28
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200014b8 	.word	0x200014b8

08008718 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008722:	4b24      	ldr	r3, [pc, #144]	@ (80087b4 <prvProcessExpiredTimer+0x9c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	3304      	adds	r3, #4
 8008730:	4618      	mov	r0, r3
 8008732:	f7fd fe27 	bl	8006384 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d025      	beq.n	8008790 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	699a      	ldr	r2, [r3, #24]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	18d1      	adds	r1, r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	6978      	ldr	r0, [r7, #20]
 8008752:	f000 f8d7 	bl	8008904 <prvInsertTimerInActiveList>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d022      	beq.n	80087a2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800875c:	2300      	movs	r3, #0
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2300      	movs	r3, #0
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	2100      	movs	r1, #0
 8008766:	6978      	ldr	r0, [r7, #20]
 8008768:	f7ff ff86 	bl	8008678 <xTimerGenericCommand>
 800876c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d116      	bne.n	80087a2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	b672      	cpsid	i
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	b662      	cpsie	i
 8008788:	60fb      	str	r3, [r7, #12]
}
 800878a:	bf00      	nop
 800878c:	bf00      	nop
 800878e:	e7fd      	b.n	800878c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	6978      	ldr	r0, [r7, #20]
 80087a8:	4798      	blx	r3
}
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200014b0 	.word	0x200014b0

080087b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f859 	bl	800887c <prvGetNextExpireTime>
 80087ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4619      	mov	r1, r3
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f805 	bl	80087e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087d6:	f000 f8d7 	bl	8008988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087da:	bf00      	nop
 80087dc:	e7f0      	b.n	80087c0 <prvTimerTask+0x8>
	...

080087e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087ea:	f7fe fef3 	bl	80075d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087ee:	f107 0308 	add.w	r3, r7, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f866 	bl	80088c4 <prvSampleTimeNow>
 80087f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d130      	bne.n	8008862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <prvProcessTimerOrBlockTask+0x3c>
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	429a      	cmp	r2, r3
 800880c:	d806      	bhi.n	800881c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800880e:	f7fe feef 	bl	80075f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ff7f 	bl	8008718 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800881a:	e024      	b.n	8008866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008822:	4b13      	ldr	r3, [pc, #76]	@ (8008870 <prvProcessTimerOrBlockTask+0x90>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <prvProcessTimerOrBlockTask+0x50>
 800882c:	2301      	movs	r3, #1
 800882e:	e000      	b.n	8008832 <prvProcessTimerOrBlockTask+0x52>
 8008830:	2300      	movs	r3, #0
 8008832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008834:	4b0f      	ldr	r3, [pc, #60]	@ (8008874 <prvProcessTimerOrBlockTask+0x94>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe fc21 	bl	8007088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008846:	f7fe fed3 	bl	80075f0 <xTaskResumeAll>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008850:	4b09      	ldr	r3, [pc, #36]	@ (8008878 <prvProcessTimerOrBlockTask+0x98>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
}
 8008860:	e001      	b.n	8008866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008862:	f7fe fec5 	bl	80075f0 <xTaskResumeAll>
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200014b4 	.word	0x200014b4
 8008874:	200014b8 	.word	0x200014b8
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008884:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <prvGetNextExpireTime+0x44>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <prvGetNextExpireTime+0x16>
 800888e:	2201      	movs	r2, #1
 8008890:	e000      	b.n	8008894 <prvGetNextExpireTime+0x18>
 8008892:	2200      	movs	r2, #0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088a0:	4b07      	ldr	r3, [pc, #28]	@ (80088c0 <prvGetNextExpireTime+0x44>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	e001      	b.n	80088b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088b0:	68fb      	ldr	r3, [r7, #12]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	200014b0 	.word	0x200014b0

080088c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088cc:	f7fe ff30 	bl	8007730 <xTaskGetTickCount>
 80088d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008900 <prvSampleTimeNow+0x3c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d205      	bcs.n	80088e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088dc:	f000 f940 	bl	8008b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e002      	b.n	80088ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088ee:	4a04      	ldr	r2, [pc, #16]	@ (8008900 <prvSampleTimeNow+0x3c>)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088f4:	68fb      	ldr	r3, [r7, #12]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	200014c0 	.word	0x200014c0

08008904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	429a      	cmp	r2, r3
 8008928:	d812      	bhi.n	8008950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	429a      	cmp	r2, r3
 8008936:	d302      	bcc.n	800893e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008938:	2301      	movs	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e01b      	b.n	8008976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800893e:	4b10      	ldr	r3, [pc, #64]	@ (8008980 <prvInsertTimerInActiveList+0x7c>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3304      	adds	r3, #4
 8008946:	4619      	mov	r1, r3
 8008948:	4610      	mov	r0, r2
 800894a:	f7fd fce2 	bl	8006312 <vListInsert>
 800894e:	e012      	b.n	8008976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d206      	bcs.n	8008966 <prvInsertTimerInActiveList+0x62>
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e007      	b.n	8008976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008966:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <prvInsertTimerInActiveList+0x80>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fd fcce 	bl	8006312 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008976:	697b      	ldr	r3, [r7, #20]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	200014b4 	.word	0x200014b4
 8008984:	200014b0 	.word	0x200014b0

08008988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08e      	sub	sp, #56	@ 0x38
 800898c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800898e:	e0d4      	b.n	8008b3a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	da1b      	bge.n	80089ce <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	3304      	adds	r3, #4
 800899a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10d      	bne.n	80089be <prvProcessReceivedCommands+0x36>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	b672      	cpsid	i
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	b662      	cpsie	i
 80089b6:	61fb      	str	r3, [r7, #28]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c4:	6850      	ldr	r0, [r2, #4]
 80089c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c8:	6892      	ldr	r2, [r2, #8]
 80089ca:	4611      	mov	r1, r2
 80089cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f2c0 80b2 	blt.w	8008b3a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e4:	3304      	adds	r3, #4
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd fccc 	bl	8006384 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089ec:	463b      	mov	r3, r7
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ff68 	bl	80088c4 <prvSampleTimeNow>
 80089f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b09      	cmp	r3, #9
 80089fa:	f200 809b 	bhi.w	8008b34 <prvProcessReceivedCommands+0x1ac>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <prvProcessReceivedCommands+0x7c>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a2d 	.word	0x08008a2d
 8008a10:	08008aa7 	.word	0x08008aa7
 8008a14:	08008abb 	.word	0x08008abb
 8008a18:	08008b0b 	.word	0x08008b0b
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a2d 	.word	0x08008a2d
 8008a24:	08008aa7 	.word	0x08008aa7
 8008a28:	08008abb 	.word	0x08008abb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	18d1      	adds	r1, r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a4c:	f7ff ff5a 	bl	8008904 <prvInsertTimerInActiveList>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d070      	beq.n	8008b38 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d065      	beq.n	8008b38 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	441a      	add	r2, r3
 8008a74:	2300      	movs	r3, #0
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a7e:	f7ff fdfb 	bl	8008678 <xTimerGenericCommand>
 8008a82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d156      	bne.n	8008b38 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	b672      	cpsid	i
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	b662      	cpsie	i
 8008a9e:	61bb      	str	r3, [r7, #24]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ab8:	e03f      	b.n	8008b3a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ac0:	f043 0301 	orr.w	r3, r3, #1
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10d      	bne.n	8008af6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	b672      	cpsid	i
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	b662      	cpsie	i
 8008aee:	617b      	str	r3, [r7, #20]
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	699a      	ldr	r2, [r3, #24]
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	18d1      	adds	r1, r2, r3
 8008afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b04:	f7ff fefe 	bl	8008904 <prvInsertTimerInActiveList>
					break;
 8008b08:	e017      	b.n	8008b3a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d103      	bne.n	8008b20 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b1a:	f000 fbd3 	bl	80092c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b1e:	e00c      	b.n	8008b3a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b32:	e002      	b.n	8008b3a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <prvProcessReceivedCommands+0x1b2>
					break;
 8008b38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b3a:	4b08      	ldr	r3, [pc, #32]	@ (8008b5c <prvProcessReceivedCommands+0x1d4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	1d39      	adds	r1, r7, #4
 8008b40:	2200      	movs	r2, #0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fd ff0c 	bl	8006960 <xQueueReceive>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f47f af20 	bne.w	8008990 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	3730      	adds	r7, #48	@ 0x30
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	200014b8 	.word	0x200014b8

08008b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b66:	e04b      	b.n	8008c00 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b68:	4b2f      	ldr	r3, [pc, #188]	@ (8008c28 <prvSwitchTimerLists+0xc8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b72:	4b2d      	ldr	r3, [pc, #180]	@ (8008c28 <prvSwitchTimerLists+0xc8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fd fbff 	bl	8006384 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d031      	beq.n	8008c00 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d90e      	bls.n	8008bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bba:	4b1b      	ldr	r3, [pc, #108]	@ (8008c28 <prvSwitchTimerLists+0xc8>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	f7fd fba4 	bl	8006312 <vListInsert>
 8008bca:	e019      	b.n	8008c00 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fd4e 	bl	8008678 <xTimerGenericCommand>
 8008bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	b672      	cpsid	i
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	b662      	cpsie	i
 8008bf8:	603b      	str	r3, [r7, #0]
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c00:	4b09      	ldr	r3, [pc, #36]	@ (8008c28 <prvSwitchTimerLists+0xc8>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1ae      	bne.n	8008b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c0a:	4b07      	ldr	r3, [pc, #28]	@ (8008c28 <prvSwitchTimerLists+0xc8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c10:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <prvSwitchTimerLists+0xcc>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a04      	ldr	r2, [pc, #16]	@ (8008c28 <prvSwitchTimerLists+0xc8>)
 8008c16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c18:	4a04      	ldr	r2, [pc, #16]	@ (8008c2c <prvSwitchTimerLists+0xcc>)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	6013      	str	r3, [r2, #0]
}
 8008c1e:	bf00      	nop
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	200014b0 	.word	0x200014b0
 8008c2c:	200014b4 	.word	0x200014b4

08008c30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c36:	f000 f949 	bl	8008ecc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c3a:	4b15      	ldr	r3, [pc, #84]	@ (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d120      	bne.n	8008c84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c42:	4814      	ldr	r0, [pc, #80]	@ (8008c94 <prvCheckForValidListAndQueue+0x64>)
 8008c44:	f7fd fb14 	bl	8006270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c48:	4813      	ldr	r0, [pc, #76]	@ (8008c98 <prvCheckForValidListAndQueue+0x68>)
 8008c4a:	f7fd fb11 	bl	8006270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	@ (8008c9c <prvCheckForValidListAndQueue+0x6c>)
 8008c50:	4a10      	ldr	r2, [pc, #64]	@ (8008c94 <prvCheckForValidListAndQueue+0x64>)
 8008c52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <prvCheckForValidListAndQueue+0x70>)
 8008c56:	4a10      	ldr	r2, [pc, #64]	@ (8008c98 <prvCheckForValidListAndQueue+0x68>)
 8008c58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	4b11      	ldr	r3, [pc, #68]	@ (8008ca4 <prvCheckForValidListAndQueue+0x74>)
 8008c60:	4a11      	ldr	r2, [pc, #68]	@ (8008ca8 <prvCheckForValidListAndQueue+0x78>)
 8008c62:	2110      	movs	r1, #16
 8008c64:	200a      	movs	r0, #10
 8008c66:	f7fd fc23 	bl	80064b0 <xQueueGenericCreateStatic>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4a08      	ldr	r2, [pc, #32]	@ (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c78:	4b05      	ldr	r3, [pc, #20]	@ (8008c90 <prvCheckForValidListAndQueue+0x60>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	490b      	ldr	r1, [pc, #44]	@ (8008cac <prvCheckForValidListAndQueue+0x7c>)
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe f9d8 	bl	8007034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c84:	f000 f958 	bl	8008f38 <vPortExitCritical>
}
 8008c88:	bf00      	nop
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200014b8 	.word	0x200014b8
 8008c94:	20001488 	.word	0x20001488
 8008c98:	2000149c 	.word	0x2000149c
 8008c9c:	200014b0 	.word	0x200014b0
 8008ca0:	200014b4 	.word	0x200014b4
 8008ca4:	20001564 	.word	0x20001564
 8008ca8:	200014c4 	.word	0x200014c4
 8008cac:	0800abf0 	.word	0x0800abf0

08008cb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3b04      	subs	r3, #4
 8008cc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f023 0201 	bic.w	r2, r3, #1
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8008d14 <pxPortInitialiseStack+0x64>)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3b14      	subs	r3, #20
 8008cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3b04      	subs	r3, #4
 8008cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f06f 0202 	mvn.w	r2, #2
 8008cfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3b20      	subs	r3, #32
 8008d04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d06:	68fb      	ldr	r3, [r7, #12]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	08008d19 	.word	0x08008d19

08008d18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d22:	4b15      	ldr	r3, [pc, #84]	@ (8008d78 <prvTaskExitError+0x60>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d00d      	beq.n	8008d48 <prvTaskExitError+0x30>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d30:	b672      	cpsid	i
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	b662      	cpsie	i
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	bf00      	nop
 8008d46:	e7fd      	b.n	8008d44 <prvTaskExitError+0x2c>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	b672      	cpsid	i
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	b662      	cpsie	i
 8008d5c:	60bb      	str	r3, [r7, #8]
}
 8008d5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d60:	bf00      	nop
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0fc      	beq.n	8008d62 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	2000000c 	.word	0x2000000c
 8008d7c:	00000000 	.word	0x00000000

08008d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d80:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <pxCurrentTCBConst2>)
 8008d82:	6819      	ldr	r1, [r3, #0]
 8008d84:	6808      	ldr	r0, [r1, #0]
 8008d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8a:	f380 8809 	msr	PSP, r0
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	f380 8811 	msr	BASEPRI, r0
 8008d9a:	4770      	bx	lr
 8008d9c:	f3af 8000 	nop.w

08008da0 <pxCurrentTCBConst2>:
 8008da0:	20000f88 	.word	0x20000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop

08008da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008da8:	4808      	ldr	r0, [pc, #32]	@ (8008dcc <prvPortStartFirstTask+0x24>)
 8008daa:	6800      	ldr	r0, [r0, #0]
 8008dac:	6800      	ldr	r0, [r0, #0]
 8008dae:	f380 8808 	msr	MSP, r0
 8008db2:	f04f 0000 	mov.w	r0, #0
 8008db6:	f380 8814 	msr	CONTROL, r0
 8008dba:	b662      	cpsie	i
 8008dbc:	b661      	cpsie	f
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	df00      	svc	0
 8008dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dca:	bf00      	nop
 8008dcc:	e000ed08 	.word	0xe000ed08

08008dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dd6:	4b37      	ldr	r3, [pc, #220]	@ (8008eb4 <xPortStartScheduler+0xe4>)
 8008dd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	22ff      	movs	r2, #255	@ 0xff
 8008de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb8 <xPortStartScheduler+0xe8>)
 8008dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e00:	2207      	movs	r2, #7
 8008e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e04:	e009      	b.n	8008e1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e06:	4b2d      	ldr	r3, [pc, #180]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e22:	2b80      	cmp	r3, #128	@ 0x80
 8008e24:	d0ef      	beq.n	8008e06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e26:	4b25      	ldr	r3, [pc, #148]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1c3 0307 	rsb	r3, r3, #7
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d00d      	beq.n	8008e4e <xPortStartScheduler+0x7e>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e36:	b672      	cpsid	i
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	b662      	cpsie	i
 8008e46:	60bb      	str	r3, [r7, #8]
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	e7fd      	b.n	8008e4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	4a19      	ldr	r2, [pc, #100]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e58:	4b18      	ldr	r3, [pc, #96]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e60:	4a16      	ldr	r2, [pc, #88]	@ (8008ebc <xPortStartScheduler+0xec>)
 8008e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e6c:	4b14      	ldr	r3, [pc, #80]	@ (8008ec0 <xPortStartScheduler+0xf0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a13      	ldr	r2, [pc, #76]	@ (8008ec0 <xPortStartScheduler+0xf0>)
 8008e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e78:	4b11      	ldr	r3, [pc, #68]	@ (8008ec0 <xPortStartScheduler+0xf0>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a10      	ldr	r2, [pc, #64]	@ (8008ec0 <xPortStartScheduler+0xf0>)
 8008e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e84:	f000 f8dc 	bl	8009040 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec4 <xPortStartScheduler+0xf4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e8e:	f000 f8fb 	bl	8009088 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e92:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec8 <xPortStartScheduler+0xf8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a0c      	ldr	r2, [pc, #48]	@ (8008ec8 <xPortStartScheduler+0xf8>)
 8008e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e9e:	f7ff ff83 	bl	8008da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ea2:	f7fe fd11 	bl	80078c8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ea6:	f7ff ff37 	bl	8008d18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	e000e400 	.word	0xe000e400
 8008eb8:	200015b4 	.word	0x200015b4
 8008ebc:	200015b8 	.word	0x200015b8
 8008ec0:	e000ed20 	.word	0xe000ed20
 8008ec4:	2000000c 	.word	0x2000000c
 8008ec8:	e000ef34 	.word	0xe000ef34

08008ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	b672      	cpsid	i
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	b662      	cpsie	i
 8008ee6:	607b      	str	r3, [r7, #4]
}
 8008ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008eea:	4b11      	ldr	r3, [pc, #68]	@ (8008f30 <vPortEnterCritical+0x64>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8008f30 <vPortEnterCritical+0x64>)
 8008ef2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f30 <vPortEnterCritical+0x64>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d112      	bne.n	8008f22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008efc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <vPortEnterCritical+0x68>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <vPortEnterCritical+0x56>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	b672      	cpsid	i
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	b662      	cpsie	i
 8008f1a:	603b      	str	r3, [r7, #0]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <vPortEnterCritical+0x52>
	}
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	2000000c 	.word	0x2000000c
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f3e:	4b13      	ldr	r3, [pc, #76]	@ (8008f8c <vPortExitCritical+0x54>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10d      	bne.n	8008f62 <vPortExitCritical+0x2a>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4a:	b672      	cpsid	i
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	b662      	cpsie	i
 8008f5a:	607b      	str	r3, [r7, #4]
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	e7fd      	b.n	8008f5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008f62:	4b0a      	ldr	r3, [pc, #40]	@ (8008f8c <vPortExitCritical+0x54>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	4a08      	ldr	r2, [pc, #32]	@ (8008f8c <vPortExitCritical+0x54>)
 8008f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f6c:	4b07      	ldr	r3, [pc, #28]	@ (8008f8c <vPortExitCritical+0x54>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d105      	bne.n	8008f80 <vPortExitCritical+0x48>
 8008f74:	2300      	movs	r3, #0
 8008f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	f383 8811 	msr	BASEPRI, r3
}
 8008f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	2000000c 	.word	0x2000000c

08008f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f90:	f3ef 8009 	mrs	r0, PSP
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	4b15      	ldr	r3, [pc, #84]	@ (8008ff0 <pxCurrentTCBConst>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	f01e 0f10 	tst.w	lr, #16
 8008fa0:	bf08      	it	eq
 8008fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	6010      	str	r0, [r2, #0]
 8008fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fb4:	b672      	cpsid	i
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	b662      	cpsie	i
 8008fc4:	f7fe fc80 	bl	80078c8 <vTaskSwitchContext>
 8008fc8:	f04f 0000 	mov.w	r0, #0
 8008fcc:	f380 8811 	msr	BASEPRI, r0
 8008fd0:	bc09      	pop	{r0, r3}
 8008fd2:	6819      	ldr	r1, [r3, #0]
 8008fd4:	6808      	ldr	r0, [r1, #0]
 8008fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fda:	f01e 0f10 	tst.w	lr, #16
 8008fde:	bf08      	it	eq
 8008fe0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fe4:	f380 8809 	msr	PSP, r0
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop

08008ff0 <pxCurrentTCBConst>:
 8008ff0:	20000f88 	.word	0x20000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop

08008ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	b672      	cpsid	i
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	b662      	cpsie	i
 8009012:	607b      	str	r3, [r7, #4]
}
 8009014:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009016:	f7fe fb9b 	bl	8007750 <xTaskIncrementTick>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009020:	4b06      	ldr	r3, [pc, #24]	@ (800903c <SysTick_Handler+0x44>)
 8009022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	2300      	movs	r3, #0
 800902a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f383 8811 	msr	BASEPRI, r3
}
 8009032:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <vPortSetupTimerInterrupt+0x34>)
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800904a:	4b0b      	ldr	r3, [pc, #44]	@ (8009078 <vPortSetupTimerInterrupt+0x38>)
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009050:	4b0a      	ldr	r3, [pc, #40]	@ (800907c <vPortSetupTimerInterrupt+0x3c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a0a      	ldr	r2, [pc, #40]	@ (8009080 <vPortSetupTimerInterrupt+0x40>)
 8009056:	fba2 2303 	umull	r2, r3, r2, r3
 800905a:	099b      	lsrs	r3, r3, #6
 800905c:	4a09      	ldr	r2, [pc, #36]	@ (8009084 <vPortSetupTimerInterrupt+0x44>)
 800905e:	3b01      	subs	r3, #1
 8009060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009062:	4b04      	ldr	r3, [pc, #16]	@ (8009074 <vPortSetupTimerInterrupt+0x34>)
 8009064:	2207      	movs	r2, #7
 8009066:	601a      	str	r2, [r3, #0]
}
 8009068:	bf00      	nop
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	e000e010 	.word	0xe000e010
 8009078:	e000e018 	.word	0xe000e018
 800907c:	20000000 	.word	0x20000000
 8009080:	10624dd3 	.word	0x10624dd3
 8009084:	e000e014 	.word	0xe000e014

08009088 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009088:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009098 <vPortEnableVFP+0x10>
 800908c:	6801      	ldr	r1, [r0, #0]
 800908e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009092:	6001      	str	r1, [r0, #0]
 8009094:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009096:	bf00      	nop
 8009098:	e000ed88 	.word	0xe000ed88

0800909c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090a2:	f3ef 8305 	mrs	r3, IPSR
 80090a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2b0f      	cmp	r3, #15
 80090ac:	d917      	bls.n	80090de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009118 <vPortValidateInterruptPriority+0x7c>)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090b8:	4b18      	ldr	r3, [pc, #96]	@ (800911c <vPortValidateInterruptPriority+0x80>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	7afa      	ldrb	r2, [r7, #11]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d20d      	bcs.n	80090de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	b672      	cpsid	i
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	b662      	cpsie	i
 80090d6:	607b      	str	r3, [r7, #4]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090de:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <vPortValidateInterruptPriority+0x84>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009124 <vPortValidateInterruptPriority+0x88>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d90d      	bls.n	800910a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	b672      	cpsid	i
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	b662      	cpsie	i
 8009102:	603b      	str	r3, [r7, #0]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <vPortValidateInterruptPriority+0x6a>
	}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	e000e3f0 	.word	0xe000e3f0
 800911c:	200015b4 	.word	0x200015b4
 8009120:	e000ed0c 	.word	0xe000ed0c
 8009124:	200015b8 	.word	0x200015b8

08009128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	@ 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009134:	f7fe fa4e 	bl	80075d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009138:	4b5d      	ldr	r3, [pc, #372]	@ (80092b0 <pvPortMalloc+0x188>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009140:	f000 f920 	bl	8009384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009144:	4b5b      	ldr	r3, [pc, #364]	@ (80092b4 <pvPortMalloc+0x18c>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8094 	bne.w	800927a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d020      	beq.n	800919a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009158:	2208      	movs	r2, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b00      	cmp	r3, #0
 8009168:	d017      	beq.n	800919a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f023 0307 	bic.w	r3, r3, #7
 8009170:	3308      	adds	r3, #8
 8009172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00d      	beq.n	800919a <pvPortMalloc+0x72>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	b672      	cpsid	i
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	b662      	cpsie	i
 8009192:	617b      	str	r3, [r7, #20]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d06c      	beq.n	800927a <pvPortMalloc+0x152>
 80091a0:	4b45      	ldr	r3, [pc, #276]	@ (80092b8 <pvPortMalloc+0x190>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d867      	bhi.n	800927a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091aa:	4b44      	ldr	r3, [pc, #272]	@ (80092bc <pvPortMalloc+0x194>)
 80091ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091ae:	4b43      	ldr	r3, [pc, #268]	@ (80092bc <pvPortMalloc+0x194>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091b4:	e004      	b.n	80091c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d903      	bls.n	80091d2 <pvPortMalloc+0xaa>
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1f1      	bne.n	80091b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091d2:	4b37      	ldr	r3, [pc, #220]	@ (80092b0 <pvPortMalloc+0x188>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d8:	429a      	cmp	r2, r3
 80091da:	d04e      	beq.n	800927a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2208      	movs	r2, #8
 80091e2:	4413      	add	r3, r2
 80091e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	1ad2      	subs	r2, r2, r3
 80091f6:	2308      	movs	r3, #8
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d922      	bls.n	8009244 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4413      	add	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00d      	beq.n	800922c <pvPortMalloc+0x104>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	b672      	cpsid	i
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	b662      	cpsie	i
 8009224:	613b      	str	r3, [r7, #16]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800923e:	69b8      	ldr	r0, [r7, #24]
 8009240:	f000 f904 	bl	800944c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009244:	4b1c      	ldr	r3, [pc, #112]	@ (80092b8 <pvPortMalloc+0x190>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	4a1a      	ldr	r2, [pc, #104]	@ (80092b8 <pvPortMalloc+0x190>)
 8009250:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009252:	4b19      	ldr	r3, [pc, #100]	@ (80092b8 <pvPortMalloc+0x190>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	4b1a      	ldr	r3, [pc, #104]	@ (80092c0 <pvPortMalloc+0x198>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d203      	bcs.n	8009266 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800925e:	4b16      	ldr	r3, [pc, #88]	@ (80092b8 <pvPortMalloc+0x190>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a17      	ldr	r2, [pc, #92]	@ (80092c0 <pvPortMalloc+0x198>)
 8009264:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	4b12      	ldr	r3, [pc, #72]	@ (80092b4 <pvPortMalloc+0x18c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	431a      	orrs	r2, r3
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009276:	2200      	movs	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800927a:	f7fe f9b9 	bl	80075f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00d      	beq.n	80092a4 <pvPortMalloc+0x17c>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	b672      	cpsid	i
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	b662      	cpsie	i
 800929c:	60fb      	str	r3, [r7, #12]
}
 800929e:	bf00      	nop
 80092a0:	bf00      	nop
 80092a2:	e7fd      	b.n	80092a0 <pvPortMalloc+0x178>
	return pvReturn;
 80092a4:	69fb      	ldr	r3, [r7, #28]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3728      	adds	r7, #40	@ 0x28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20019c64 	.word	0x20019c64
 80092b4:	20019c70 	.word	0x20019c70
 80092b8:	20019c68 	.word	0x20019c68
 80092bc:	20019c5c 	.word	0x20019c5c
 80092c0:	20019c6c 	.word	0x20019c6c

080092c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04e      	beq.n	8009374 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092d6:	2308      	movs	r3, #8
 80092d8:	425b      	negs	r3, r3
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4413      	add	r3, r2
 80092de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	4b24      	ldr	r3, [pc, #144]	@ (800937c <vPortFree+0xb8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4013      	ands	r3, r2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10d      	bne.n	800930e <vPortFree+0x4a>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f6:	b672      	cpsid	i
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	b662      	cpsie	i
 8009306:	60fb      	str	r3, [r7, #12]
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	e7fd      	b.n	800930a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00d      	beq.n	8009332 <vPortFree+0x6e>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	60bb      	str	r3, [r7, #8]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	4b11      	ldr	r3, [pc, #68]	@ (800937c <vPortFree+0xb8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4013      	ands	r3, r2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d019      	beq.n	8009374 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d115      	bne.n	8009374 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	4b0b      	ldr	r3, [pc, #44]	@ (800937c <vPortFree+0xb8>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009358:	f7fe f93c 	bl	80075d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	4b07      	ldr	r3, [pc, #28]	@ (8009380 <vPortFree+0xbc>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4413      	add	r3, r2
 8009366:	4a06      	ldr	r2, [pc, #24]	@ (8009380 <vPortFree+0xbc>)
 8009368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800936a:	6938      	ldr	r0, [r7, #16]
 800936c:	f000 f86e 	bl	800944c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009370:	f7fe f93e 	bl	80075f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009374:	bf00      	nop
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20019c70 	.word	0x20019c70
 8009380:	20019c68 	.word	0x20019c68

08009384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800938a:	4b29      	ldr	r3, [pc, #164]	@ (8009430 <prvHeapInit+0xac>)
 800938c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800938e:	4b29      	ldr	r3, [pc, #164]	@ (8009434 <prvHeapInit+0xb0>)
 8009390:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0307 	and.w	r3, r3, #7
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00c      	beq.n	80093b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3307      	adds	r3, #7
 80093a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	4a20      	ldr	r2, [pc, #128]	@ (8009434 <prvHeapInit+0xb0>)
 80093b2:	4413      	add	r3, r2
 80093b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009438 <prvHeapInit+0xb4>)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009438 <prvHeapInit+0xb4>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	4413      	add	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093ce:	2208      	movs	r2, #8
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f023 0307 	bic.w	r3, r3, #7
 80093dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4a16      	ldr	r2, [pc, #88]	@ (800943c <prvHeapInit+0xb8>)
 80093e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093e4:	4b15      	ldr	r3, [pc, #84]	@ (800943c <prvHeapInit+0xb8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2200      	movs	r2, #0
 80093ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ec:	4b13      	ldr	r3, [pc, #76]	@ (800943c <prvHeapInit+0xb8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	1ad2      	subs	r2, r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009402:	4b0e      	ldr	r3, [pc, #56]	@ (800943c <prvHeapInit+0xb8>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	4a0c      	ldr	r2, [pc, #48]	@ (8009440 <prvHeapInit+0xbc>)
 8009410:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4a0b      	ldr	r2, [pc, #44]	@ (8009444 <prvHeapInit+0xc0>)
 8009418:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800941a:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <prvHeapInit+0xc4>)
 800941c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009420:	601a      	str	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	000186a0 	.word	0x000186a0
 8009434:	200015bc 	.word	0x200015bc
 8009438:	20019c5c 	.word	0x20019c5c
 800943c:	20019c64 	.word	0x20019c64
 8009440:	20019c6c 	.word	0x20019c6c
 8009444:	20019c68 	.word	0x20019c68
 8009448:	20019c70 	.word	0x20019c70

0800944c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009454:	4b28      	ldr	r3, [pc, #160]	@ (80094f8 <prvInsertBlockIntoFreeList+0xac>)
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e002      	b.n	8009460 <prvInsertBlockIntoFreeList+0x14>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d8f7      	bhi.n	800945a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	4413      	add	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	429a      	cmp	r2, r3
 800947a:	d108      	bne.n	800948e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	441a      	add	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	441a      	add	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d118      	bne.n	80094d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b15      	ldr	r3, [pc, #84]	@ (80094fc <prvInsertBlockIntoFreeList+0xb0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d00d      	beq.n	80094ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	441a      	add	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	e008      	b.n	80094dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094ca:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <prvInsertBlockIntoFreeList+0xb0>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e003      	b.n	80094dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d002      	beq.n	80094ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20019c5c 	.word	0x20019c5c
 80094fc:	20019c64 	.word	0x20019c64

08009500 <__sflush_r>:
 8009500:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	0716      	lsls	r6, r2, #28
 800950a:	4605      	mov	r5, r0
 800950c:	460c      	mov	r4, r1
 800950e:	d454      	bmi.n	80095ba <__sflush_r+0xba>
 8009510:	684b      	ldr	r3, [r1, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	dc02      	bgt.n	800951c <__sflush_r+0x1c>
 8009516:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009518:	2b00      	cmp	r3, #0
 800951a:	dd48      	ble.n	80095ae <__sflush_r+0xae>
 800951c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800951e:	2e00      	cmp	r6, #0
 8009520:	d045      	beq.n	80095ae <__sflush_r+0xae>
 8009522:	2300      	movs	r3, #0
 8009524:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009528:	682f      	ldr	r7, [r5, #0]
 800952a:	6a21      	ldr	r1, [r4, #32]
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	d030      	beq.n	8009592 <__sflush_r+0x92>
 8009530:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	0759      	lsls	r1, r3, #29
 8009536:	d505      	bpl.n	8009544 <__sflush_r+0x44>
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800953e:	b10b      	cbz	r3, 8009544 <__sflush_r+0x44>
 8009540:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009542:	1ad2      	subs	r2, r2, r3
 8009544:	2300      	movs	r3, #0
 8009546:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009548:	6a21      	ldr	r1, [r4, #32]
 800954a:	4628      	mov	r0, r5
 800954c:	47b0      	blx	r6
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	d106      	bne.n	8009562 <__sflush_r+0x62>
 8009554:	6829      	ldr	r1, [r5, #0]
 8009556:	291d      	cmp	r1, #29
 8009558:	d82b      	bhi.n	80095b2 <__sflush_r+0xb2>
 800955a:	4a2a      	ldr	r2, [pc, #168]	@ (8009604 <__sflush_r+0x104>)
 800955c:	410a      	asrs	r2, r1
 800955e:	07d6      	lsls	r6, r2, #31
 8009560:	d427      	bmi.n	80095b2 <__sflush_r+0xb2>
 8009562:	2200      	movs	r2, #0
 8009564:	6062      	str	r2, [r4, #4]
 8009566:	04d9      	lsls	r1, r3, #19
 8009568:	6922      	ldr	r2, [r4, #16]
 800956a:	6022      	str	r2, [r4, #0]
 800956c:	d504      	bpl.n	8009578 <__sflush_r+0x78>
 800956e:	1c42      	adds	r2, r0, #1
 8009570:	d101      	bne.n	8009576 <__sflush_r+0x76>
 8009572:	682b      	ldr	r3, [r5, #0]
 8009574:	b903      	cbnz	r3, 8009578 <__sflush_r+0x78>
 8009576:	6560      	str	r0, [r4, #84]	@ 0x54
 8009578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800957a:	602f      	str	r7, [r5, #0]
 800957c:	b1b9      	cbz	r1, 80095ae <__sflush_r+0xae>
 800957e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009582:	4299      	cmp	r1, r3
 8009584:	d002      	beq.n	800958c <__sflush_r+0x8c>
 8009586:	4628      	mov	r0, r5
 8009588:	f000 fbac 	bl	8009ce4 <_free_r>
 800958c:	2300      	movs	r3, #0
 800958e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009590:	e00d      	b.n	80095ae <__sflush_r+0xae>
 8009592:	2301      	movs	r3, #1
 8009594:	4628      	mov	r0, r5
 8009596:	47b0      	blx	r6
 8009598:	4602      	mov	r2, r0
 800959a:	1c50      	adds	r0, r2, #1
 800959c:	d1c9      	bne.n	8009532 <__sflush_r+0x32>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0c6      	beq.n	8009532 <__sflush_r+0x32>
 80095a4:	2b1d      	cmp	r3, #29
 80095a6:	d001      	beq.n	80095ac <__sflush_r+0xac>
 80095a8:	2b16      	cmp	r3, #22
 80095aa:	d11e      	bne.n	80095ea <__sflush_r+0xea>
 80095ac:	602f      	str	r7, [r5, #0]
 80095ae:	2000      	movs	r0, #0
 80095b0:	e022      	b.n	80095f8 <__sflush_r+0xf8>
 80095b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b6:	b21b      	sxth	r3, r3
 80095b8:	e01b      	b.n	80095f2 <__sflush_r+0xf2>
 80095ba:	690f      	ldr	r7, [r1, #16]
 80095bc:	2f00      	cmp	r7, #0
 80095be:	d0f6      	beq.n	80095ae <__sflush_r+0xae>
 80095c0:	0793      	lsls	r3, r2, #30
 80095c2:	680e      	ldr	r6, [r1, #0]
 80095c4:	bf08      	it	eq
 80095c6:	694b      	ldreq	r3, [r1, #20]
 80095c8:	600f      	str	r7, [r1, #0]
 80095ca:	bf18      	it	ne
 80095cc:	2300      	movne	r3, #0
 80095ce:	eba6 0807 	sub.w	r8, r6, r7
 80095d2:	608b      	str	r3, [r1, #8]
 80095d4:	f1b8 0f00 	cmp.w	r8, #0
 80095d8:	dde9      	ble.n	80095ae <__sflush_r+0xae>
 80095da:	6a21      	ldr	r1, [r4, #32]
 80095dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095de:	4643      	mov	r3, r8
 80095e0:	463a      	mov	r2, r7
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b0      	blx	r6
 80095e6:	2800      	cmp	r0, #0
 80095e8:	dc08      	bgt.n	80095fc <__sflush_r+0xfc>
 80095ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	4407      	add	r7, r0
 80095fe:	eba8 0800 	sub.w	r8, r8, r0
 8009602:	e7e7      	b.n	80095d4 <__sflush_r+0xd4>
 8009604:	dfbffffe 	.word	0xdfbffffe

08009608 <_fflush_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	4605      	mov	r5, r0
 800960e:	460c      	mov	r4, r1
 8009610:	b913      	cbnz	r3, 8009618 <_fflush_r+0x10>
 8009612:	2500      	movs	r5, #0
 8009614:	4628      	mov	r0, r5
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	b118      	cbz	r0, 8009622 <_fflush_r+0x1a>
 800961a:	6a03      	ldr	r3, [r0, #32]
 800961c:	b90b      	cbnz	r3, 8009622 <_fflush_r+0x1a>
 800961e:	f000 f8bb 	bl	8009798 <__sinit>
 8009622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f3      	beq.n	8009612 <_fflush_r+0xa>
 800962a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800962c:	07d0      	lsls	r0, r2, #31
 800962e:	d404      	bmi.n	800963a <_fflush_r+0x32>
 8009630:	0599      	lsls	r1, r3, #22
 8009632:	d402      	bmi.n	800963a <_fflush_r+0x32>
 8009634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009636:	f000 fb44 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 800963a:	4628      	mov	r0, r5
 800963c:	4621      	mov	r1, r4
 800963e:	f7ff ff5f 	bl	8009500 <__sflush_r>
 8009642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009644:	07da      	lsls	r2, r3, #31
 8009646:	4605      	mov	r5, r0
 8009648:	d4e4      	bmi.n	8009614 <_fflush_r+0xc>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	059b      	lsls	r3, r3, #22
 800964e:	d4e1      	bmi.n	8009614 <_fflush_r+0xc>
 8009650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009652:	f000 fb37 	bl	8009cc4 <__retarget_lock_release_recursive>
 8009656:	e7dd      	b.n	8009614 <_fflush_r+0xc>

08009658 <fflush>:
 8009658:	4601      	mov	r1, r0
 800965a:	b920      	cbnz	r0, 8009666 <fflush+0xe>
 800965c:	4a04      	ldr	r2, [pc, #16]	@ (8009670 <fflush+0x18>)
 800965e:	4905      	ldr	r1, [pc, #20]	@ (8009674 <fflush+0x1c>)
 8009660:	4805      	ldr	r0, [pc, #20]	@ (8009678 <fflush+0x20>)
 8009662:	f000 b8b1 	b.w	80097c8 <_fwalk_sglue>
 8009666:	4b05      	ldr	r3, [pc, #20]	@ (800967c <fflush+0x24>)
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f7ff bfcd 	b.w	8009608 <_fflush_r>
 800966e:	bf00      	nop
 8009670:	20000010 	.word	0x20000010
 8009674:	08009609 	.word	0x08009609
 8009678:	20000020 	.word	0x20000020
 800967c:	2000001c 	.word	0x2000001c

08009680 <std>:
 8009680:	2300      	movs	r3, #0
 8009682:	b510      	push	{r4, lr}
 8009684:	4604      	mov	r4, r0
 8009686:	e9c0 3300 	strd	r3, r3, [r0]
 800968a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800968e:	6083      	str	r3, [r0, #8]
 8009690:	8181      	strh	r1, [r0, #12]
 8009692:	6643      	str	r3, [r0, #100]	@ 0x64
 8009694:	81c2      	strh	r2, [r0, #14]
 8009696:	6183      	str	r3, [r0, #24]
 8009698:	4619      	mov	r1, r3
 800969a:	2208      	movs	r2, #8
 800969c:	305c      	adds	r0, #92	@ 0x5c
 800969e:	f000 fa2d 	bl	8009afc <memset>
 80096a2:	4b0d      	ldr	r3, [pc, #52]	@ (80096d8 <std+0x58>)
 80096a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80096a6:	4b0d      	ldr	r3, [pc, #52]	@ (80096dc <std+0x5c>)
 80096a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80096aa:	4b0d      	ldr	r3, [pc, #52]	@ (80096e0 <std+0x60>)
 80096ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80096ae:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <std+0x64>)
 80096b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80096b2:	4b0d      	ldr	r3, [pc, #52]	@ (80096e8 <std+0x68>)
 80096b4:	6224      	str	r4, [r4, #32]
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d006      	beq.n	80096c8 <std+0x48>
 80096ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80096be:	4294      	cmp	r4, r2
 80096c0:	d002      	beq.n	80096c8 <std+0x48>
 80096c2:	33d0      	adds	r3, #208	@ 0xd0
 80096c4:	429c      	cmp	r4, r3
 80096c6:	d105      	bne.n	80096d4 <std+0x54>
 80096c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d0:	f000 baf6 	b.w	8009cc0 <__retarget_lock_init_recursive>
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop
 80096d8:	0800994d 	.word	0x0800994d
 80096dc:	0800996f 	.word	0x0800996f
 80096e0:	080099a7 	.word	0x080099a7
 80096e4:	080099cb 	.word	0x080099cb
 80096e8:	20019c74 	.word	0x20019c74

080096ec <stdio_exit_handler>:
 80096ec:	4a02      	ldr	r2, [pc, #8]	@ (80096f8 <stdio_exit_handler+0xc>)
 80096ee:	4903      	ldr	r1, [pc, #12]	@ (80096fc <stdio_exit_handler+0x10>)
 80096f0:	4803      	ldr	r0, [pc, #12]	@ (8009700 <stdio_exit_handler+0x14>)
 80096f2:	f000 b869 	b.w	80097c8 <_fwalk_sglue>
 80096f6:	bf00      	nop
 80096f8:	20000010 	.word	0x20000010
 80096fc:	08009609 	.word	0x08009609
 8009700:	20000020 	.word	0x20000020

08009704 <cleanup_stdio>:
 8009704:	6841      	ldr	r1, [r0, #4]
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <cleanup_stdio+0x34>)
 8009708:	4299      	cmp	r1, r3
 800970a:	b510      	push	{r4, lr}
 800970c:	4604      	mov	r4, r0
 800970e:	d001      	beq.n	8009714 <cleanup_stdio+0x10>
 8009710:	f7ff ff7a 	bl	8009608 <_fflush_r>
 8009714:	68a1      	ldr	r1, [r4, #8]
 8009716:	4b09      	ldr	r3, [pc, #36]	@ (800973c <cleanup_stdio+0x38>)
 8009718:	4299      	cmp	r1, r3
 800971a:	d002      	beq.n	8009722 <cleanup_stdio+0x1e>
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff ff73 	bl	8009608 <_fflush_r>
 8009722:	68e1      	ldr	r1, [r4, #12]
 8009724:	4b06      	ldr	r3, [pc, #24]	@ (8009740 <cleanup_stdio+0x3c>)
 8009726:	4299      	cmp	r1, r3
 8009728:	d004      	beq.n	8009734 <cleanup_stdio+0x30>
 800972a:	4620      	mov	r0, r4
 800972c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009730:	f7ff bf6a 	b.w	8009608 <_fflush_r>
 8009734:	bd10      	pop	{r4, pc}
 8009736:	bf00      	nop
 8009738:	20019c74 	.word	0x20019c74
 800973c:	20019cdc 	.word	0x20019cdc
 8009740:	20019d44 	.word	0x20019d44

08009744 <global_stdio_init.part.0>:
 8009744:	b510      	push	{r4, lr}
 8009746:	4b0b      	ldr	r3, [pc, #44]	@ (8009774 <global_stdio_init.part.0+0x30>)
 8009748:	4c0b      	ldr	r4, [pc, #44]	@ (8009778 <global_stdio_init.part.0+0x34>)
 800974a:	4a0c      	ldr	r2, [pc, #48]	@ (800977c <global_stdio_init.part.0+0x38>)
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	4620      	mov	r0, r4
 8009750:	2200      	movs	r2, #0
 8009752:	2104      	movs	r1, #4
 8009754:	f7ff ff94 	bl	8009680 <std>
 8009758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800975c:	2201      	movs	r2, #1
 800975e:	2109      	movs	r1, #9
 8009760:	f7ff ff8e 	bl	8009680 <std>
 8009764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009768:	2202      	movs	r2, #2
 800976a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800976e:	2112      	movs	r1, #18
 8009770:	f7ff bf86 	b.w	8009680 <std>
 8009774:	20019dac 	.word	0x20019dac
 8009778:	20019c74 	.word	0x20019c74
 800977c:	080096ed 	.word	0x080096ed

08009780 <__sfp_lock_acquire>:
 8009780:	4801      	ldr	r0, [pc, #4]	@ (8009788 <__sfp_lock_acquire+0x8>)
 8009782:	f000 ba9e 	b.w	8009cc2 <__retarget_lock_acquire_recursive>
 8009786:	bf00      	nop
 8009788:	20019db5 	.word	0x20019db5

0800978c <__sfp_lock_release>:
 800978c:	4801      	ldr	r0, [pc, #4]	@ (8009794 <__sfp_lock_release+0x8>)
 800978e:	f000 ba99 	b.w	8009cc4 <__retarget_lock_release_recursive>
 8009792:	bf00      	nop
 8009794:	20019db5 	.word	0x20019db5

08009798 <__sinit>:
 8009798:	b510      	push	{r4, lr}
 800979a:	4604      	mov	r4, r0
 800979c:	f7ff fff0 	bl	8009780 <__sfp_lock_acquire>
 80097a0:	6a23      	ldr	r3, [r4, #32]
 80097a2:	b11b      	cbz	r3, 80097ac <__sinit+0x14>
 80097a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a8:	f7ff bff0 	b.w	800978c <__sfp_lock_release>
 80097ac:	4b04      	ldr	r3, [pc, #16]	@ (80097c0 <__sinit+0x28>)
 80097ae:	6223      	str	r3, [r4, #32]
 80097b0:	4b04      	ldr	r3, [pc, #16]	@ (80097c4 <__sinit+0x2c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1f5      	bne.n	80097a4 <__sinit+0xc>
 80097b8:	f7ff ffc4 	bl	8009744 <global_stdio_init.part.0>
 80097bc:	e7f2      	b.n	80097a4 <__sinit+0xc>
 80097be:	bf00      	nop
 80097c0:	08009705 	.word	0x08009705
 80097c4:	20019dac 	.word	0x20019dac

080097c8 <_fwalk_sglue>:
 80097c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097cc:	4607      	mov	r7, r0
 80097ce:	4688      	mov	r8, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	2600      	movs	r6, #0
 80097d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097d8:	f1b9 0901 	subs.w	r9, r9, #1
 80097dc:	d505      	bpl.n	80097ea <_fwalk_sglue+0x22>
 80097de:	6824      	ldr	r4, [r4, #0]
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	d1f7      	bne.n	80097d4 <_fwalk_sglue+0xc>
 80097e4:	4630      	mov	r0, r6
 80097e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d907      	bls.n	8009800 <_fwalk_sglue+0x38>
 80097f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097f4:	3301      	adds	r3, #1
 80097f6:	d003      	beq.n	8009800 <_fwalk_sglue+0x38>
 80097f8:	4629      	mov	r1, r5
 80097fa:	4638      	mov	r0, r7
 80097fc:	47c0      	blx	r8
 80097fe:	4306      	orrs	r6, r0
 8009800:	3568      	adds	r5, #104	@ 0x68
 8009802:	e7e9      	b.n	80097d8 <_fwalk_sglue+0x10>

08009804 <iprintf>:
 8009804:	b40f      	push	{r0, r1, r2, r3}
 8009806:	b507      	push	{r0, r1, r2, lr}
 8009808:	4906      	ldr	r1, [pc, #24]	@ (8009824 <iprintf+0x20>)
 800980a:	ab04      	add	r3, sp, #16
 800980c:	6808      	ldr	r0, [r1, #0]
 800980e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009812:	6881      	ldr	r1, [r0, #8]
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	f000 fcdf 	bl	800a1d8 <_vfiprintf_r>
 800981a:	b003      	add	sp, #12
 800981c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009820:	b004      	add	sp, #16
 8009822:	4770      	bx	lr
 8009824:	2000001c 	.word	0x2000001c

08009828 <_puts_r>:
 8009828:	6a03      	ldr	r3, [r0, #32]
 800982a:	b570      	push	{r4, r5, r6, lr}
 800982c:	6884      	ldr	r4, [r0, #8]
 800982e:	4605      	mov	r5, r0
 8009830:	460e      	mov	r6, r1
 8009832:	b90b      	cbnz	r3, 8009838 <_puts_r+0x10>
 8009834:	f7ff ffb0 	bl	8009798 <__sinit>
 8009838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800983a:	07db      	lsls	r3, r3, #31
 800983c:	d405      	bmi.n	800984a <_puts_r+0x22>
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	0598      	lsls	r0, r3, #22
 8009842:	d402      	bmi.n	800984a <_puts_r+0x22>
 8009844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009846:	f000 fa3c 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	0719      	lsls	r1, r3, #28
 800984e:	d502      	bpl.n	8009856 <_puts_r+0x2e>
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d135      	bne.n	80098c2 <_puts_r+0x9a>
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f000 f8f9 	bl	8009a50 <__swsetup_r>
 800985e:	b380      	cbz	r0, 80098c2 <_puts_r+0x9a>
 8009860:	f04f 35ff 	mov.w	r5, #4294967295
 8009864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009866:	07da      	lsls	r2, r3, #31
 8009868:	d405      	bmi.n	8009876 <_puts_r+0x4e>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	059b      	lsls	r3, r3, #22
 800986e:	d402      	bmi.n	8009876 <_puts_r+0x4e>
 8009870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009872:	f000 fa27 	bl	8009cc4 <__retarget_lock_release_recursive>
 8009876:	4628      	mov	r0, r5
 8009878:	bd70      	pop	{r4, r5, r6, pc}
 800987a:	2b00      	cmp	r3, #0
 800987c:	da04      	bge.n	8009888 <_puts_r+0x60>
 800987e:	69a2      	ldr	r2, [r4, #24]
 8009880:	429a      	cmp	r2, r3
 8009882:	dc17      	bgt.n	80098b4 <_puts_r+0x8c>
 8009884:	290a      	cmp	r1, #10
 8009886:	d015      	beq.n	80098b4 <_puts_r+0x8c>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	6022      	str	r2, [r4, #0]
 800988e:	7019      	strb	r1, [r3, #0]
 8009890:	68a3      	ldr	r3, [r4, #8]
 8009892:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009896:	3b01      	subs	r3, #1
 8009898:	60a3      	str	r3, [r4, #8]
 800989a:	2900      	cmp	r1, #0
 800989c:	d1ed      	bne.n	800987a <_puts_r+0x52>
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da11      	bge.n	80098c6 <_puts_r+0x9e>
 80098a2:	4622      	mov	r2, r4
 80098a4:	210a      	movs	r1, #10
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f893 	bl	80099d2 <__swbuf_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d0d7      	beq.n	8009860 <_puts_r+0x38>
 80098b0:	250a      	movs	r5, #10
 80098b2:	e7d7      	b.n	8009864 <_puts_r+0x3c>
 80098b4:	4622      	mov	r2, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f88b 	bl	80099d2 <__swbuf_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d1e7      	bne.n	8009890 <_puts_r+0x68>
 80098c0:	e7ce      	b.n	8009860 <_puts_r+0x38>
 80098c2:	3e01      	subs	r6, #1
 80098c4:	e7e4      	b.n	8009890 <_puts_r+0x68>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	220a      	movs	r2, #10
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	e7ee      	b.n	80098b0 <_puts_r+0x88>
	...

080098d4 <puts>:
 80098d4:	4b02      	ldr	r3, [pc, #8]	@ (80098e0 <puts+0xc>)
 80098d6:	4601      	mov	r1, r0
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	f7ff bfa5 	b.w	8009828 <_puts_r>
 80098de:	bf00      	nop
 80098e0:	2000001c 	.word	0x2000001c

080098e4 <sniprintf>:
 80098e4:	b40c      	push	{r2, r3}
 80098e6:	b530      	push	{r4, r5, lr}
 80098e8:	4b17      	ldr	r3, [pc, #92]	@ (8009948 <sniprintf+0x64>)
 80098ea:	1e0c      	subs	r4, r1, #0
 80098ec:	681d      	ldr	r5, [r3, #0]
 80098ee:	b09d      	sub	sp, #116	@ 0x74
 80098f0:	da08      	bge.n	8009904 <sniprintf+0x20>
 80098f2:	238b      	movs	r3, #139	@ 0x8b
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	b01d      	add	sp, #116	@ 0x74
 80098fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009900:	b002      	add	sp, #8
 8009902:	4770      	bx	lr
 8009904:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009908:	f8ad 3014 	strh.w	r3, [sp, #20]
 800990c:	bf14      	ite	ne
 800990e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009912:	4623      	moveq	r3, r4
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	9307      	str	r3, [sp, #28]
 8009918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800991c:	9002      	str	r0, [sp, #8]
 800991e:	9006      	str	r0, [sp, #24]
 8009920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009924:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009926:	ab21      	add	r3, sp, #132	@ 0x84
 8009928:	a902      	add	r1, sp, #8
 800992a:	4628      	mov	r0, r5
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	f000 fb2d 	bl	8009f8c <_svfiprintf_r>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	bfbc      	itt	lt
 8009936:	238b      	movlt	r3, #139	@ 0x8b
 8009938:	602b      	strlt	r3, [r5, #0]
 800993a:	2c00      	cmp	r4, #0
 800993c:	d0dd      	beq.n	80098fa <sniprintf+0x16>
 800993e:	9b02      	ldr	r3, [sp, #8]
 8009940:	2200      	movs	r2, #0
 8009942:	701a      	strb	r2, [r3, #0]
 8009944:	e7d9      	b.n	80098fa <sniprintf+0x16>
 8009946:	bf00      	nop
 8009948:	2000001c 	.word	0x2000001c

0800994c <__sread>:
 800994c:	b510      	push	{r4, lr}
 800994e:	460c      	mov	r4, r1
 8009950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009954:	f000 f966 	bl	8009c24 <_read_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	bfab      	itete	ge
 800995c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800995e:	89a3      	ldrhlt	r3, [r4, #12]
 8009960:	181b      	addge	r3, r3, r0
 8009962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009966:	bfac      	ite	ge
 8009968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800996a:	81a3      	strhlt	r3, [r4, #12]
 800996c:	bd10      	pop	{r4, pc}

0800996e <__swrite>:
 800996e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	461f      	mov	r7, r3
 8009974:	898b      	ldrh	r3, [r1, #12]
 8009976:	05db      	lsls	r3, r3, #23
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	4616      	mov	r6, r2
 800997e:	d505      	bpl.n	800998c <__swrite+0x1e>
 8009980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009984:	2302      	movs	r3, #2
 8009986:	2200      	movs	r2, #0
 8009988:	f000 f93a 	bl	8009c00 <_lseek_r>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	4632      	mov	r2, r6
 800999a:	463b      	mov	r3, r7
 800999c:	4628      	mov	r0, r5
 800999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	f000 b951 	b.w	8009c48 <_write_r>

080099a6 <__sseek>:
 80099a6:	b510      	push	{r4, lr}
 80099a8:	460c      	mov	r4, r1
 80099aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ae:	f000 f927 	bl	8009c00 <_lseek_r>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	bf15      	itete	ne
 80099b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099c2:	81a3      	strheq	r3, [r4, #12]
 80099c4:	bf18      	it	ne
 80099c6:	81a3      	strhne	r3, [r4, #12]
 80099c8:	bd10      	pop	{r4, pc}

080099ca <__sclose>:
 80099ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ce:	f000 b8b1 	b.w	8009b34 <_close_r>

080099d2 <__swbuf_r>:
 80099d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d4:	460e      	mov	r6, r1
 80099d6:	4614      	mov	r4, r2
 80099d8:	4605      	mov	r5, r0
 80099da:	b118      	cbz	r0, 80099e4 <__swbuf_r+0x12>
 80099dc:	6a03      	ldr	r3, [r0, #32]
 80099de:	b90b      	cbnz	r3, 80099e4 <__swbuf_r+0x12>
 80099e0:	f7ff feda 	bl	8009798 <__sinit>
 80099e4:	69a3      	ldr	r3, [r4, #24]
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	071a      	lsls	r2, r3, #28
 80099ec:	d501      	bpl.n	80099f2 <__swbuf_r+0x20>
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	b943      	cbnz	r3, 8009a04 <__swbuf_r+0x32>
 80099f2:	4621      	mov	r1, r4
 80099f4:	4628      	mov	r0, r5
 80099f6:	f000 f82b 	bl	8009a50 <__swsetup_r>
 80099fa:	b118      	cbz	r0, 8009a04 <__swbuf_r+0x32>
 80099fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009a00:	4638      	mov	r0, r7
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	6922      	ldr	r2, [r4, #16]
 8009a08:	1a98      	subs	r0, r3, r2
 8009a0a:	6963      	ldr	r3, [r4, #20]
 8009a0c:	b2f6      	uxtb	r6, r6
 8009a0e:	4283      	cmp	r3, r0
 8009a10:	4637      	mov	r7, r6
 8009a12:	dc05      	bgt.n	8009a20 <__swbuf_r+0x4e>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7ff fdf6 	bl	8009608 <_fflush_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1ed      	bne.n	80099fc <__swbuf_r+0x2a>
 8009a20:	68a3      	ldr	r3, [r4, #8]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	6022      	str	r2, [r4, #0]
 8009a2c:	701e      	strb	r6, [r3, #0]
 8009a2e:	6962      	ldr	r2, [r4, #20]
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d004      	beq.n	8009a40 <__swbuf_r+0x6e>
 8009a36:	89a3      	ldrh	r3, [r4, #12]
 8009a38:	07db      	lsls	r3, r3, #31
 8009a3a:	d5e1      	bpl.n	8009a00 <__swbuf_r+0x2e>
 8009a3c:	2e0a      	cmp	r6, #10
 8009a3e:	d1df      	bne.n	8009a00 <__swbuf_r+0x2e>
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f7ff fde0 	bl	8009608 <_fflush_r>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d0d9      	beq.n	8009a00 <__swbuf_r+0x2e>
 8009a4c:	e7d6      	b.n	80099fc <__swbuf_r+0x2a>
	...

08009a50 <__swsetup_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4b29      	ldr	r3, [pc, #164]	@ (8009af8 <__swsetup_r+0xa8>)
 8009a54:	4605      	mov	r5, r0
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	460c      	mov	r4, r1
 8009a5a:	b118      	cbz	r0, 8009a64 <__swsetup_r+0x14>
 8009a5c:	6a03      	ldr	r3, [r0, #32]
 8009a5e:	b90b      	cbnz	r3, 8009a64 <__swsetup_r+0x14>
 8009a60:	f7ff fe9a 	bl	8009798 <__sinit>
 8009a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a68:	0719      	lsls	r1, r3, #28
 8009a6a:	d422      	bmi.n	8009ab2 <__swsetup_r+0x62>
 8009a6c:	06da      	lsls	r2, r3, #27
 8009a6e:	d407      	bmi.n	8009a80 <__swsetup_r+0x30>
 8009a70:	2209      	movs	r2, #9
 8009a72:	602a      	str	r2, [r5, #0]
 8009a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7e:	e033      	b.n	8009ae8 <__swsetup_r+0x98>
 8009a80:	0758      	lsls	r0, r3, #29
 8009a82:	d512      	bpl.n	8009aaa <__swsetup_r+0x5a>
 8009a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a86:	b141      	cbz	r1, 8009a9a <__swsetup_r+0x4a>
 8009a88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	d002      	beq.n	8009a96 <__swsetup_r+0x46>
 8009a90:	4628      	mov	r0, r5
 8009a92:	f000 f927 	bl	8009ce4 <_free_r>
 8009a96:	2300      	movs	r3, #0
 8009a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6063      	str	r3, [r4, #4]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f043 0308 	orr.w	r3, r3, #8
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	b94b      	cbnz	r3, 8009aca <__swsetup_r+0x7a>
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ac0:	d003      	beq.n	8009aca <__swsetup_r+0x7a>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f000 fe53 	bl	800a770 <__smakebuf_r>
 8009aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ace:	f013 0201 	ands.w	r2, r3, #1
 8009ad2:	d00a      	beq.n	8009aea <__swsetup_r+0x9a>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	60a2      	str	r2, [r4, #8]
 8009ad8:	6962      	ldr	r2, [r4, #20]
 8009ada:	4252      	negs	r2, r2
 8009adc:	61a2      	str	r2, [r4, #24]
 8009ade:	6922      	ldr	r2, [r4, #16]
 8009ae0:	b942      	cbnz	r2, 8009af4 <__swsetup_r+0xa4>
 8009ae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ae6:	d1c5      	bne.n	8009a74 <__swsetup_r+0x24>
 8009ae8:	bd38      	pop	{r3, r4, r5, pc}
 8009aea:	0799      	lsls	r1, r3, #30
 8009aec:	bf58      	it	pl
 8009aee:	6962      	ldrpl	r2, [r4, #20]
 8009af0:	60a2      	str	r2, [r4, #8]
 8009af2:	e7f4      	b.n	8009ade <__swsetup_r+0x8e>
 8009af4:	2000      	movs	r0, #0
 8009af6:	e7f7      	b.n	8009ae8 <__swsetup_r+0x98>
 8009af8:	2000001c 	.word	0x2000001c

08009afc <memset>:
 8009afc:	4402      	add	r2, r0
 8009afe:	4603      	mov	r3, r0
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d100      	bne.n	8009b06 <memset+0xa>
 8009b04:	4770      	bx	lr
 8009b06:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0a:	e7f9      	b.n	8009b00 <memset+0x4>

08009b0c <strncpy>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	3901      	subs	r1, #1
 8009b10:	4603      	mov	r3, r0
 8009b12:	b132      	cbz	r2, 8009b22 <strncpy+0x16>
 8009b14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b18:	f803 4b01 	strb.w	r4, [r3], #1
 8009b1c:	3a01      	subs	r2, #1
 8009b1e:	2c00      	cmp	r4, #0
 8009b20:	d1f7      	bne.n	8009b12 <strncpy+0x6>
 8009b22:	441a      	add	r2, r3
 8009b24:	2100      	movs	r1, #0
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d100      	bne.n	8009b2c <strncpy+0x20>
 8009b2a:	bd10      	pop	{r4, pc}
 8009b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b30:	e7f9      	b.n	8009b26 <strncpy+0x1a>
	...

08009b34 <_close_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d06      	ldr	r5, [pc, #24]	@ (8009b50 <_close_r+0x1c>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f8 fb63 	bl	800220a <_close>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_close_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_close_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20019db0 	.word	0x20019db0

08009b54 <_reclaim_reent>:
 8009b54:	4b29      	ldr	r3, [pc, #164]	@ (8009bfc <_reclaim_reent+0xa8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4283      	cmp	r3, r0
 8009b5a:	b570      	push	{r4, r5, r6, lr}
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	d04b      	beq.n	8009bf8 <_reclaim_reent+0xa4>
 8009b60:	69c3      	ldr	r3, [r0, #28]
 8009b62:	b1ab      	cbz	r3, 8009b90 <_reclaim_reent+0x3c>
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	b16b      	cbz	r3, 8009b84 <_reclaim_reent+0x30>
 8009b68:	2500      	movs	r5, #0
 8009b6a:	69e3      	ldr	r3, [r4, #28]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	5959      	ldr	r1, [r3, r5]
 8009b70:	2900      	cmp	r1, #0
 8009b72:	d13b      	bne.n	8009bec <_reclaim_reent+0x98>
 8009b74:	3504      	adds	r5, #4
 8009b76:	2d80      	cmp	r5, #128	@ 0x80
 8009b78:	d1f7      	bne.n	8009b6a <_reclaim_reent+0x16>
 8009b7a:	69e3      	ldr	r3, [r4, #28]
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	68d9      	ldr	r1, [r3, #12]
 8009b80:	f000 f8b0 	bl	8009ce4 <_free_r>
 8009b84:	69e3      	ldr	r3, [r4, #28]
 8009b86:	6819      	ldr	r1, [r3, #0]
 8009b88:	b111      	cbz	r1, 8009b90 <_reclaim_reent+0x3c>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f8aa 	bl	8009ce4 <_free_r>
 8009b90:	6961      	ldr	r1, [r4, #20]
 8009b92:	b111      	cbz	r1, 8009b9a <_reclaim_reent+0x46>
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 f8a5 	bl	8009ce4 <_free_r>
 8009b9a:	69e1      	ldr	r1, [r4, #28]
 8009b9c:	b111      	cbz	r1, 8009ba4 <_reclaim_reent+0x50>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 f8a0 	bl	8009ce4 <_free_r>
 8009ba4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ba6:	b111      	cbz	r1, 8009bae <_reclaim_reent+0x5a>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f89b 	bl	8009ce4 <_free_r>
 8009bae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bb0:	b111      	cbz	r1, 8009bb8 <_reclaim_reent+0x64>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 f896 	bl	8009ce4 <_free_r>
 8009bb8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009bba:	b111      	cbz	r1, 8009bc2 <_reclaim_reent+0x6e>
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 f891 	bl	8009ce4 <_free_r>
 8009bc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009bc4:	b111      	cbz	r1, 8009bcc <_reclaim_reent+0x78>
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 f88c 	bl	8009ce4 <_free_r>
 8009bcc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009bce:	b111      	cbz	r1, 8009bd6 <_reclaim_reent+0x82>
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 f887 	bl	8009ce4 <_free_r>
 8009bd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009bd8:	b111      	cbz	r1, 8009be0 <_reclaim_reent+0x8c>
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f882 	bl	8009ce4 <_free_r>
 8009be0:	6a23      	ldr	r3, [r4, #32]
 8009be2:	b14b      	cbz	r3, 8009bf8 <_reclaim_reent+0xa4>
 8009be4:	4620      	mov	r0, r4
 8009be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bea:	4718      	bx	r3
 8009bec:	680e      	ldr	r6, [r1, #0]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f878 	bl	8009ce4 <_free_r>
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	e7bb      	b.n	8009b70 <_reclaim_reent+0x1c>
 8009bf8:	bd70      	pop	{r4, r5, r6, pc}
 8009bfa:	bf00      	nop
 8009bfc:	2000001c 	.word	0x2000001c

08009c00 <_lseek_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	@ (8009c20 <_lseek_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f8 fb22 	bl	8002258 <_lseek>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_lseek_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_lseek_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20019db0 	.word	0x20019db0

08009c24 <_read_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	@ (8009c44 <_read_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f8 fab0 	bl	8002198 <_read>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_read_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_read_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20019db0 	.word	0x20019db0

08009c48 <_write_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	@ (8009c68 <_write_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f8 fabb 	bl	80021d2 <_write>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_write_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_write_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	20019db0 	.word	0x20019db0

08009c6c <__errno>:
 8009c6c:	4b01      	ldr	r3, [pc, #4]	@ (8009c74 <__errno+0x8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	2000001c 	.word	0x2000001c

08009c78 <__libc_init_array>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8009cb0 <__libc_init_array+0x38>)
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cb4 <__libc_init_array+0x3c>)
 8009c7e:	1b64      	subs	r4, r4, r5
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	2600      	movs	r6, #0
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	d109      	bne.n	8009c9c <__libc_init_array+0x24>
 8009c88:	4d0b      	ldr	r5, [pc, #44]	@ (8009cb8 <__libc_init_array+0x40>)
 8009c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8009cbc <__libc_init_array+0x44>)
 8009c8c:	f000 fe2e 	bl	800a8ec <_init>
 8009c90:	1b64      	subs	r4, r4, r5
 8009c92:	10a4      	asrs	r4, r4, #2
 8009c94:	2600      	movs	r6, #0
 8009c96:	42a6      	cmp	r6, r4
 8009c98:	d105      	bne.n	8009ca6 <__libc_init_array+0x2e>
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca0:	4798      	blx	r3
 8009ca2:	3601      	adds	r6, #1
 8009ca4:	e7ee      	b.n	8009c84 <__libc_init_array+0xc>
 8009ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009caa:	4798      	blx	r3
 8009cac:	3601      	adds	r6, #1
 8009cae:	e7f2      	b.n	8009c96 <__libc_init_array+0x1e>
 8009cb0:	0800b830 	.word	0x0800b830
 8009cb4:	0800b830 	.word	0x0800b830
 8009cb8:	0800b830 	.word	0x0800b830
 8009cbc:	0800b834 	.word	0x0800b834

08009cc0 <__retarget_lock_init_recursive>:
 8009cc0:	4770      	bx	lr

08009cc2 <__retarget_lock_acquire_recursive>:
 8009cc2:	4770      	bx	lr

08009cc4 <__retarget_lock_release_recursive>:
 8009cc4:	4770      	bx	lr

08009cc6 <memcpy>:
 8009cc6:	440a      	add	r2, r1
 8009cc8:	4291      	cmp	r1, r2
 8009cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cce:	d100      	bne.n	8009cd2 <memcpy+0xc>
 8009cd0:	4770      	bx	lr
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cdc:	4291      	cmp	r1, r2
 8009cde:	d1f9      	bne.n	8009cd4 <memcpy+0xe>
 8009ce0:	bd10      	pop	{r4, pc}
	...

08009ce4 <_free_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d041      	beq.n	8009d70 <_free_r+0x8c>
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f0c      	subs	r4, r1, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfb8      	it	lt
 8009cf6:	18e4      	addlt	r4, r4, r3
 8009cf8:	f000 f8e0 	bl	8009ebc <__malloc_lock>
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <_free_r+0x90>)
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	b933      	cbnz	r3, 8009d10 <_free_r+0x2c>
 8009d02:	6063      	str	r3, [r4, #4]
 8009d04:	6014      	str	r4, [r2, #0]
 8009d06:	4628      	mov	r0, r5
 8009d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0c:	f000 b8dc 	b.w	8009ec8 <__malloc_unlock>
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d908      	bls.n	8009d26 <_free_r+0x42>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	1821      	adds	r1, r4, r0
 8009d18:	428b      	cmp	r3, r1
 8009d1a:	bf01      	itttt	eq
 8009d1c:	6819      	ldreq	r1, [r3, #0]
 8009d1e:	685b      	ldreq	r3, [r3, #4]
 8009d20:	1809      	addeq	r1, r1, r0
 8009d22:	6021      	streq	r1, [r4, #0]
 8009d24:	e7ed      	b.n	8009d02 <_free_r+0x1e>
 8009d26:	461a      	mov	r2, r3
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	b10b      	cbz	r3, 8009d30 <_free_r+0x4c>
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d9fa      	bls.n	8009d26 <_free_r+0x42>
 8009d30:	6811      	ldr	r1, [r2, #0]
 8009d32:	1850      	adds	r0, r2, r1
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d10b      	bne.n	8009d50 <_free_r+0x6c>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	4401      	add	r1, r0
 8009d3c:	1850      	adds	r0, r2, r1
 8009d3e:	4283      	cmp	r3, r0
 8009d40:	6011      	str	r1, [r2, #0]
 8009d42:	d1e0      	bne.n	8009d06 <_free_r+0x22>
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	6053      	str	r3, [r2, #4]
 8009d4a:	4408      	add	r0, r1
 8009d4c:	6010      	str	r0, [r2, #0]
 8009d4e:	e7da      	b.n	8009d06 <_free_r+0x22>
 8009d50:	d902      	bls.n	8009d58 <_free_r+0x74>
 8009d52:	230c      	movs	r3, #12
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	e7d6      	b.n	8009d06 <_free_r+0x22>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	1821      	adds	r1, r4, r0
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf04      	itt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	bf04      	itt	eq
 8009d68:	1809      	addeq	r1, r1, r0
 8009d6a:	6021      	streq	r1, [r4, #0]
 8009d6c:	6054      	str	r4, [r2, #4]
 8009d6e:	e7ca      	b.n	8009d06 <_free_r+0x22>
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	bf00      	nop
 8009d74:	20019dbc 	.word	0x20019dbc

08009d78 <sbrk_aligned>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009db8 <sbrk_aligned+0x40>)
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	6831      	ldr	r1, [r6, #0]
 8009d80:	4605      	mov	r5, r0
 8009d82:	b911      	cbnz	r1, 8009d8a <sbrk_aligned+0x12>
 8009d84:	f000 fd6c 	bl	800a860 <_sbrk_r>
 8009d88:	6030      	str	r0, [r6, #0]
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 fd67 	bl	800a860 <_sbrk_r>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d103      	bne.n	8009d9e <sbrk_aligned+0x26>
 8009d96:	f04f 34ff 	mov.w	r4, #4294967295
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	bd70      	pop	{r4, r5, r6, pc}
 8009d9e:	1cc4      	adds	r4, r0, #3
 8009da0:	f024 0403 	bic.w	r4, r4, #3
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d0f8      	beq.n	8009d9a <sbrk_aligned+0x22>
 8009da8:	1a21      	subs	r1, r4, r0
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 fd58 	bl	800a860 <_sbrk_r>
 8009db0:	3001      	adds	r0, #1
 8009db2:	d1f2      	bne.n	8009d9a <sbrk_aligned+0x22>
 8009db4:	e7ef      	b.n	8009d96 <sbrk_aligned+0x1e>
 8009db6:	bf00      	nop
 8009db8:	20019db8 	.word	0x20019db8

08009dbc <_malloc_r>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	1ccd      	adds	r5, r1, #3
 8009dc2:	f025 0503 	bic.w	r5, r5, #3
 8009dc6:	3508      	adds	r5, #8
 8009dc8:	2d0c      	cmp	r5, #12
 8009dca:	bf38      	it	cc
 8009dcc:	250c      	movcc	r5, #12
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	db01      	blt.n	8009dd8 <_malloc_r+0x1c>
 8009dd4:	42a9      	cmp	r1, r5
 8009dd6:	d904      	bls.n	8009de2 <_malloc_r+0x26>
 8009dd8:	230c      	movs	r3, #12
 8009dda:	6033      	str	r3, [r6, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009eb8 <_malloc_r+0xfc>
 8009de6:	f000 f869 	bl	8009ebc <__malloc_lock>
 8009dea:	f8d8 3000 	ldr.w	r3, [r8]
 8009dee:	461c      	mov	r4, r3
 8009df0:	bb44      	cbnz	r4, 8009e44 <_malloc_r+0x88>
 8009df2:	4629      	mov	r1, r5
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff ffbf 	bl	8009d78 <sbrk_aligned>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	d158      	bne.n	8009eb2 <_malloc_r+0xf6>
 8009e00:	f8d8 4000 	ldr.w	r4, [r8]
 8009e04:	4627      	mov	r7, r4
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d143      	bne.n	8009e92 <_malloc_r+0xd6>
 8009e0a:	2c00      	cmp	r4, #0
 8009e0c:	d04b      	beq.n	8009ea6 <_malloc_r+0xea>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	4639      	mov	r1, r7
 8009e12:	4630      	mov	r0, r6
 8009e14:	eb04 0903 	add.w	r9, r4, r3
 8009e18:	f000 fd22 	bl	800a860 <_sbrk_r>
 8009e1c:	4581      	cmp	r9, r0
 8009e1e:	d142      	bne.n	8009ea6 <_malloc_r+0xea>
 8009e20:	6821      	ldr	r1, [r4, #0]
 8009e22:	1a6d      	subs	r5, r5, r1
 8009e24:	4629      	mov	r1, r5
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ffa6 	bl	8009d78 <sbrk_aligned>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d03a      	beq.n	8009ea6 <_malloc_r+0xea>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	442b      	add	r3, r5
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	f8d8 3000 	ldr.w	r3, [r8]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	bb62      	cbnz	r2, 8009e98 <_malloc_r+0xdc>
 8009e3e:	f8c8 7000 	str.w	r7, [r8]
 8009e42:	e00f      	b.n	8009e64 <_malloc_r+0xa8>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	1b52      	subs	r2, r2, r5
 8009e48:	d420      	bmi.n	8009e8c <_malloc_r+0xd0>
 8009e4a:	2a0b      	cmp	r2, #11
 8009e4c:	d917      	bls.n	8009e7e <_malloc_r+0xc2>
 8009e4e:	1961      	adds	r1, r4, r5
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	6025      	str	r5, [r4, #0]
 8009e54:	bf18      	it	ne
 8009e56:	6059      	strne	r1, [r3, #4]
 8009e58:	6863      	ldr	r3, [r4, #4]
 8009e5a:	bf08      	it	eq
 8009e5c:	f8c8 1000 	streq.w	r1, [r8]
 8009e60:	5162      	str	r2, [r4, r5]
 8009e62:	604b      	str	r3, [r1, #4]
 8009e64:	4630      	mov	r0, r6
 8009e66:	f000 f82f 	bl	8009ec8 <__malloc_unlock>
 8009e6a:	f104 000b 	add.w	r0, r4, #11
 8009e6e:	1d23      	adds	r3, r4, #4
 8009e70:	f020 0007 	bic.w	r0, r0, #7
 8009e74:	1ac2      	subs	r2, r0, r3
 8009e76:	bf1c      	itt	ne
 8009e78:	1a1b      	subne	r3, r3, r0
 8009e7a:	50a3      	strne	r3, [r4, r2]
 8009e7c:	e7af      	b.n	8009dde <_malloc_r+0x22>
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	bf0c      	ite	eq
 8009e84:	f8c8 2000 	streq.w	r2, [r8]
 8009e88:	605a      	strne	r2, [r3, #4]
 8009e8a:	e7eb      	b.n	8009e64 <_malloc_r+0xa8>
 8009e8c:	4623      	mov	r3, r4
 8009e8e:	6864      	ldr	r4, [r4, #4]
 8009e90:	e7ae      	b.n	8009df0 <_malloc_r+0x34>
 8009e92:	463c      	mov	r4, r7
 8009e94:	687f      	ldr	r7, [r7, #4]
 8009e96:	e7b6      	b.n	8009e06 <_malloc_r+0x4a>
 8009e98:	461a      	mov	r2, r3
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	d1fb      	bne.n	8009e98 <_malloc_r+0xdc>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	6053      	str	r3, [r2, #4]
 8009ea4:	e7de      	b.n	8009e64 <_malloc_r+0xa8>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 f80c 	bl	8009ec8 <__malloc_unlock>
 8009eb0:	e794      	b.n	8009ddc <_malloc_r+0x20>
 8009eb2:	6005      	str	r5, [r0, #0]
 8009eb4:	e7d6      	b.n	8009e64 <_malloc_r+0xa8>
 8009eb6:	bf00      	nop
 8009eb8:	20019dbc 	.word	0x20019dbc

08009ebc <__malloc_lock>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	@ (8009ec4 <__malloc_lock+0x8>)
 8009ebe:	f7ff bf00 	b.w	8009cc2 <__retarget_lock_acquire_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	20019db4 	.word	0x20019db4

08009ec8 <__malloc_unlock>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__malloc_unlock+0x8>)
 8009eca:	f7ff befb 	b.w	8009cc4 <__retarget_lock_release_recursive>
 8009ece:	bf00      	nop
 8009ed0:	20019db4 	.word	0x20019db4

08009ed4 <__ssputs_r>:
 8009ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	688e      	ldr	r6, [r1, #8]
 8009eda:	461f      	mov	r7, r3
 8009edc:	42be      	cmp	r6, r7
 8009ede:	680b      	ldr	r3, [r1, #0]
 8009ee0:	4682      	mov	sl, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	4690      	mov	r8, r2
 8009ee6:	d82d      	bhi.n	8009f44 <__ssputs_r+0x70>
 8009ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009eec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ef0:	d026      	beq.n	8009f40 <__ssputs_r+0x6c>
 8009ef2:	6965      	ldr	r5, [r4, #20]
 8009ef4:	6909      	ldr	r1, [r1, #16]
 8009ef6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009efa:	eba3 0901 	sub.w	r9, r3, r1
 8009efe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f02:	1c7b      	adds	r3, r7, #1
 8009f04:	444b      	add	r3, r9
 8009f06:	106d      	asrs	r5, r5, #1
 8009f08:	429d      	cmp	r5, r3
 8009f0a:	bf38      	it	cc
 8009f0c:	461d      	movcc	r5, r3
 8009f0e:	0553      	lsls	r3, r2, #21
 8009f10:	d527      	bpl.n	8009f62 <__ssputs_r+0x8e>
 8009f12:	4629      	mov	r1, r5
 8009f14:	f7ff ff52 	bl	8009dbc <_malloc_r>
 8009f18:	4606      	mov	r6, r0
 8009f1a:	b360      	cbz	r0, 8009f76 <__ssputs_r+0xa2>
 8009f1c:	6921      	ldr	r1, [r4, #16]
 8009f1e:	464a      	mov	r2, r9
 8009f20:	f7ff fed1 	bl	8009cc6 <memcpy>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	6126      	str	r6, [r4, #16]
 8009f32:	6165      	str	r5, [r4, #20]
 8009f34:	444e      	add	r6, r9
 8009f36:	eba5 0509 	sub.w	r5, r5, r9
 8009f3a:	6026      	str	r6, [r4, #0]
 8009f3c:	60a5      	str	r5, [r4, #8]
 8009f3e:	463e      	mov	r6, r7
 8009f40:	42be      	cmp	r6, r7
 8009f42:	d900      	bls.n	8009f46 <__ssputs_r+0x72>
 8009f44:	463e      	mov	r6, r7
 8009f46:	6820      	ldr	r0, [r4, #0]
 8009f48:	4632      	mov	r2, r6
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	f000 fc4c 	bl	800a7e8 <memmove>
 8009f50:	68a3      	ldr	r3, [r4, #8]
 8009f52:	1b9b      	subs	r3, r3, r6
 8009f54:	60a3      	str	r3, [r4, #8]
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	4433      	add	r3, r6
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f62:	462a      	mov	r2, r5
 8009f64:	f000 fc8c 	bl	800a880 <_realloc_r>
 8009f68:	4606      	mov	r6, r0
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d1e0      	bne.n	8009f30 <__ssputs_r+0x5c>
 8009f6e:	6921      	ldr	r1, [r4, #16]
 8009f70:	4650      	mov	r0, sl
 8009f72:	f7ff feb7 	bl	8009ce4 <_free_r>
 8009f76:	230c      	movs	r3, #12
 8009f78:	f8ca 3000 	str.w	r3, [sl]
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	e7e9      	b.n	8009f5e <__ssputs_r+0x8a>
	...

08009f8c <_svfiprintf_r>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	4698      	mov	r8, r3
 8009f92:	898b      	ldrh	r3, [r1, #12]
 8009f94:	061b      	lsls	r3, r3, #24
 8009f96:	b09d      	sub	sp, #116	@ 0x74
 8009f98:	4607      	mov	r7, r0
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	d510      	bpl.n	8009fc2 <_svfiprintf_r+0x36>
 8009fa0:	690b      	ldr	r3, [r1, #16]
 8009fa2:	b973      	cbnz	r3, 8009fc2 <_svfiprintf_r+0x36>
 8009fa4:	2140      	movs	r1, #64	@ 0x40
 8009fa6:	f7ff ff09 	bl	8009dbc <_malloc_r>
 8009faa:	6028      	str	r0, [r5, #0]
 8009fac:	6128      	str	r0, [r5, #16]
 8009fae:	b930      	cbnz	r0, 8009fbe <_svfiprintf_r+0x32>
 8009fb0:	230c      	movs	r3, #12
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	b01d      	add	sp, #116	@ 0x74
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	2340      	movs	r3, #64	@ 0x40
 8009fc0:	616b      	str	r3, [r5, #20]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fc6:	2320      	movs	r3, #32
 8009fc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fd0:	2330      	movs	r3, #48	@ 0x30
 8009fd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a170 <_svfiprintf_r+0x1e4>
 8009fd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fda:	f04f 0901 	mov.w	r9, #1
 8009fde:	4623      	mov	r3, r4
 8009fe0:	469a      	mov	sl, r3
 8009fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe6:	b10a      	cbz	r2, 8009fec <_svfiprintf_r+0x60>
 8009fe8:	2a25      	cmp	r2, #37	@ 0x25
 8009fea:	d1f9      	bne.n	8009fe0 <_svfiprintf_r+0x54>
 8009fec:	ebba 0b04 	subs.w	fp, sl, r4
 8009ff0:	d00b      	beq.n	800a00a <_svfiprintf_r+0x7e>
 8009ff2:	465b      	mov	r3, fp
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f7ff ff6b 	bl	8009ed4 <__ssputs_r>
 8009ffe:	3001      	adds	r0, #1
 800a000:	f000 80a7 	beq.w	800a152 <_svfiprintf_r+0x1c6>
 800a004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a006:	445a      	add	r2, fp
 800a008:	9209      	str	r2, [sp, #36]	@ 0x24
 800a00a:	f89a 3000 	ldrb.w	r3, [sl]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 809f 	beq.w	800a152 <_svfiprintf_r+0x1c6>
 800a014:	2300      	movs	r3, #0
 800a016:	f04f 32ff 	mov.w	r2, #4294967295
 800a01a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a01e:	f10a 0a01 	add.w	sl, sl, #1
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a02a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a02c:	4654      	mov	r4, sl
 800a02e:	2205      	movs	r2, #5
 800a030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a034:	484e      	ldr	r0, [pc, #312]	@ (800a170 <_svfiprintf_r+0x1e4>)
 800a036:	f7f6 f8eb 	bl	8000210 <memchr>
 800a03a:	9a04      	ldr	r2, [sp, #16]
 800a03c:	b9d8      	cbnz	r0, 800a076 <_svfiprintf_r+0xea>
 800a03e:	06d0      	lsls	r0, r2, #27
 800a040:	bf44      	itt	mi
 800a042:	2320      	movmi	r3, #32
 800a044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a048:	0711      	lsls	r1, r2, #28
 800a04a:	bf44      	itt	mi
 800a04c:	232b      	movmi	r3, #43	@ 0x2b
 800a04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a052:	f89a 3000 	ldrb.w	r3, [sl]
 800a056:	2b2a      	cmp	r3, #42	@ 0x2a
 800a058:	d015      	beq.n	800a086 <_svfiprintf_r+0xfa>
 800a05a:	9a07      	ldr	r2, [sp, #28]
 800a05c:	4654      	mov	r4, sl
 800a05e:	2000      	movs	r0, #0
 800a060:	f04f 0c0a 	mov.w	ip, #10
 800a064:	4621      	mov	r1, r4
 800a066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a06a:	3b30      	subs	r3, #48	@ 0x30
 800a06c:	2b09      	cmp	r3, #9
 800a06e:	d94b      	bls.n	800a108 <_svfiprintf_r+0x17c>
 800a070:	b1b0      	cbz	r0, 800a0a0 <_svfiprintf_r+0x114>
 800a072:	9207      	str	r2, [sp, #28]
 800a074:	e014      	b.n	800a0a0 <_svfiprintf_r+0x114>
 800a076:	eba0 0308 	sub.w	r3, r0, r8
 800a07a:	fa09 f303 	lsl.w	r3, r9, r3
 800a07e:	4313      	orrs	r3, r2
 800a080:	9304      	str	r3, [sp, #16]
 800a082:	46a2      	mov	sl, r4
 800a084:	e7d2      	b.n	800a02c <_svfiprintf_r+0xa0>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	1d19      	adds	r1, r3, #4
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	9103      	str	r1, [sp, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfbb      	ittet	lt
 800a092:	425b      	neglt	r3, r3
 800a094:	f042 0202 	orrlt.w	r2, r2, #2
 800a098:	9307      	strge	r3, [sp, #28]
 800a09a:	9307      	strlt	r3, [sp, #28]
 800a09c:	bfb8      	it	lt
 800a09e:	9204      	strlt	r2, [sp, #16]
 800a0a0:	7823      	ldrb	r3, [r4, #0]
 800a0a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0a4:	d10a      	bne.n	800a0bc <_svfiprintf_r+0x130>
 800a0a6:	7863      	ldrb	r3, [r4, #1]
 800a0a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0aa:	d132      	bne.n	800a112 <_svfiprintf_r+0x186>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	1d1a      	adds	r2, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9203      	str	r2, [sp, #12]
 800a0b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0b8:	3402      	adds	r4, #2
 800a0ba:	9305      	str	r3, [sp, #20]
 800a0bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a180 <_svfiprintf_r+0x1f4>
 800a0c0:	7821      	ldrb	r1, [r4, #0]
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	f7f6 f8a3 	bl	8000210 <memchr>
 800a0ca:	b138      	cbz	r0, 800a0dc <_svfiprintf_r+0x150>
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	eba0 000a 	sub.w	r0, r0, sl
 800a0d2:	2240      	movs	r2, #64	@ 0x40
 800a0d4:	4082      	lsls	r2, r0
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	3401      	adds	r4, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e0:	4824      	ldr	r0, [pc, #144]	@ (800a174 <_svfiprintf_r+0x1e8>)
 800a0e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0e6:	2206      	movs	r2, #6
 800a0e8:	f7f6 f892 	bl	8000210 <memchr>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d036      	beq.n	800a15e <_svfiprintf_r+0x1d2>
 800a0f0:	4b21      	ldr	r3, [pc, #132]	@ (800a178 <_svfiprintf_r+0x1ec>)
 800a0f2:	bb1b      	cbnz	r3, 800a13c <_svfiprintf_r+0x1b0>
 800a0f4:	9b03      	ldr	r3, [sp, #12]
 800a0f6:	3307      	adds	r3, #7
 800a0f8:	f023 0307 	bic.w	r3, r3, #7
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	9303      	str	r3, [sp, #12]
 800a100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a102:	4433      	add	r3, r6
 800a104:	9309      	str	r3, [sp, #36]	@ 0x24
 800a106:	e76a      	b.n	8009fde <_svfiprintf_r+0x52>
 800a108:	fb0c 3202 	mla	r2, ip, r2, r3
 800a10c:	460c      	mov	r4, r1
 800a10e:	2001      	movs	r0, #1
 800a110:	e7a8      	b.n	800a064 <_svfiprintf_r+0xd8>
 800a112:	2300      	movs	r3, #0
 800a114:	3401      	adds	r4, #1
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	4619      	mov	r1, r3
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	4620      	mov	r0, r4
 800a120:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a124:	3a30      	subs	r2, #48	@ 0x30
 800a126:	2a09      	cmp	r2, #9
 800a128:	d903      	bls.n	800a132 <_svfiprintf_r+0x1a6>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0c6      	beq.n	800a0bc <_svfiprintf_r+0x130>
 800a12e:	9105      	str	r1, [sp, #20]
 800a130:	e7c4      	b.n	800a0bc <_svfiprintf_r+0x130>
 800a132:	fb0c 2101 	mla	r1, ip, r1, r2
 800a136:	4604      	mov	r4, r0
 800a138:	2301      	movs	r3, #1
 800a13a:	e7f0      	b.n	800a11e <_svfiprintf_r+0x192>
 800a13c:	ab03      	add	r3, sp, #12
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	462a      	mov	r2, r5
 800a142:	4b0e      	ldr	r3, [pc, #56]	@ (800a17c <_svfiprintf_r+0x1f0>)
 800a144:	a904      	add	r1, sp, #16
 800a146:	4638      	mov	r0, r7
 800a148:	f3af 8000 	nop.w
 800a14c:	1c42      	adds	r2, r0, #1
 800a14e:	4606      	mov	r6, r0
 800a150:	d1d6      	bne.n	800a100 <_svfiprintf_r+0x174>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	065b      	lsls	r3, r3, #25
 800a156:	f53f af2d 	bmi.w	8009fb4 <_svfiprintf_r+0x28>
 800a15a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a15c:	e72c      	b.n	8009fb8 <_svfiprintf_r+0x2c>
 800a15e:	ab03      	add	r3, sp, #12
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	462a      	mov	r2, r5
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <_svfiprintf_r+0x1f0>)
 800a166:	a904      	add	r1, sp, #16
 800a168:	4638      	mov	r0, r7
 800a16a:	f000 f9bb 	bl	800a4e4 <_printf_i>
 800a16e:	e7ed      	b.n	800a14c <_svfiprintf_r+0x1c0>
 800a170:	0800b7f4 	.word	0x0800b7f4
 800a174:	0800b7fe 	.word	0x0800b7fe
 800a178:	00000000 	.word	0x00000000
 800a17c:	08009ed5 	.word	0x08009ed5
 800a180:	0800b7fa 	.word	0x0800b7fa

0800a184 <__sfputc_r>:
 800a184:	6893      	ldr	r3, [r2, #8]
 800a186:	3b01      	subs	r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	b410      	push	{r4}
 800a18c:	6093      	str	r3, [r2, #8]
 800a18e:	da08      	bge.n	800a1a2 <__sfputc_r+0x1e>
 800a190:	6994      	ldr	r4, [r2, #24]
 800a192:	42a3      	cmp	r3, r4
 800a194:	db01      	blt.n	800a19a <__sfputc_r+0x16>
 800a196:	290a      	cmp	r1, #10
 800a198:	d103      	bne.n	800a1a2 <__sfputc_r+0x1e>
 800a19a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a19e:	f7ff bc18 	b.w	80099d2 <__swbuf_r>
 800a1a2:	6813      	ldr	r3, [r2, #0]
 800a1a4:	1c58      	adds	r0, r3, #1
 800a1a6:	6010      	str	r0, [r2, #0]
 800a1a8:	7019      	strb	r1, [r3, #0]
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <__sfputs_r>:
 800a1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	460f      	mov	r7, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	18d5      	adds	r5, r2, r3
 800a1bc:	42ac      	cmp	r4, r5
 800a1be:	d101      	bne.n	800a1c4 <__sfputs_r+0x12>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	e007      	b.n	800a1d4 <__sfputs_r+0x22>
 800a1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c8:	463a      	mov	r2, r7
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f7ff ffda 	bl	800a184 <__sfputc_r>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d1f3      	bne.n	800a1bc <__sfputs_r+0xa>
 800a1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1d8 <_vfiprintf_r>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	460d      	mov	r5, r1
 800a1de:	b09d      	sub	sp, #116	@ 0x74
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	4698      	mov	r8, r3
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	b118      	cbz	r0, 800a1f0 <_vfiprintf_r+0x18>
 800a1e8:	6a03      	ldr	r3, [r0, #32]
 800a1ea:	b90b      	cbnz	r3, 800a1f0 <_vfiprintf_r+0x18>
 800a1ec:	f7ff fad4 	bl	8009798 <__sinit>
 800a1f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1f2:	07d9      	lsls	r1, r3, #31
 800a1f4:	d405      	bmi.n	800a202 <_vfiprintf_r+0x2a>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	059a      	lsls	r2, r3, #22
 800a1fa:	d402      	bmi.n	800a202 <_vfiprintf_r+0x2a>
 800a1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1fe:	f7ff fd60 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 800a202:	89ab      	ldrh	r3, [r5, #12]
 800a204:	071b      	lsls	r3, r3, #28
 800a206:	d501      	bpl.n	800a20c <_vfiprintf_r+0x34>
 800a208:	692b      	ldr	r3, [r5, #16]
 800a20a:	b99b      	cbnz	r3, 800a234 <_vfiprintf_r+0x5c>
 800a20c:	4629      	mov	r1, r5
 800a20e:	4630      	mov	r0, r6
 800a210:	f7ff fc1e 	bl	8009a50 <__swsetup_r>
 800a214:	b170      	cbz	r0, 800a234 <_vfiprintf_r+0x5c>
 800a216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a218:	07dc      	lsls	r4, r3, #31
 800a21a:	d504      	bpl.n	800a226 <_vfiprintf_r+0x4e>
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	b01d      	add	sp, #116	@ 0x74
 800a222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	0598      	lsls	r0, r3, #22
 800a22a:	d4f7      	bmi.n	800a21c <_vfiprintf_r+0x44>
 800a22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a22e:	f7ff fd49 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a232:	e7f3      	b.n	800a21c <_vfiprintf_r+0x44>
 800a234:	2300      	movs	r3, #0
 800a236:	9309      	str	r3, [sp, #36]	@ 0x24
 800a238:	2320      	movs	r3, #32
 800a23a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a242:	2330      	movs	r3, #48	@ 0x30
 800a244:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3f4 <_vfiprintf_r+0x21c>
 800a248:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a24c:	f04f 0901 	mov.w	r9, #1
 800a250:	4623      	mov	r3, r4
 800a252:	469a      	mov	sl, r3
 800a254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a258:	b10a      	cbz	r2, 800a25e <_vfiprintf_r+0x86>
 800a25a:	2a25      	cmp	r2, #37	@ 0x25
 800a25c:	d1f9      	bne.n	800a252 <_vfiprintf_r+0x7a>
 800a25e:	ebba 0b04 	subs.w	fp, sl, r4
 800a262:	d00b      	beq.n	800a27c <_vfiprintf_r+0xa4>
 800a264:	465b      	mov	r3, fp
 800a266:	4622      	mov	r2, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff ffa1 	bl	800a1b2 <__sfputs_r>
 800a270:	3001      	adds	r0, #1
 800a272:	f000 80a7 	beq.w	800a3c4 <_vfiprintf_r+0x1ec>
 800a276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a278:	445a      	add	r2, fp
 800a27a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b00      	cmp	r3, #0
 800a282:	f000 809f 	beq.w	800a3c4 <_vfiprintf_r+0x1ec>
 800a286:	2300      	movs	r3, #0
 800a288:	f04f 32ff 	mov.w	r2, #4294967295
 800a28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a290:	f10a 0a01 	add.w	sl, sl, #1
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a29c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a29e:	4654      	mov	r4, sl
 800a2a0:	2205      	movs	r2, #5
 800a2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a6:	4853      	ldr	r0, [pc, #332]	@ (800a3f4 <_vfiprintf_r+0x21c>)
 800a2a8:	f7f5 ffb2 	bl	8000210 <memchr>
 800a2ac:	9a04      	ldr	r2, [sp, #16]
 800a2ae:	b9d8      	cbnz	r0, 800a2e8 <_vfiprintf_r+0x110>
 800a2b0:	06d1      	lsls	r1, r2, #27
 800a2b2:	bf44      	itt	mi
 800a2b4:	2320      	movmi	r3, #32
 800a2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ba:	0713      	lsls	r3, r2, #28
 800a2bc:	bf44      	itt	mi
 800a2be:	232b      	movmi	r3, #43	@ 0x2b
 800a2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ca:	d015      	beq.n	800a2f8 <_vfiprintf_r+0x120>
 800a2cc:	9a07      	ldr	r2, [sp, #28]
 800a2ce:	4654      	mov	r4, sl
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	f04f 0c0a 	mov.w	ip, #10
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2dc:	3b30      	subs	r3, #48	@ 0x30
 800a2de:	2b09      	cmp	r3, #9
 800a2e0:	d94b      	bls.n	800a37a <_vfiprintf_r+0x1a2>
 800a2e2:	b1b0      	cbz	r0, 800a312 <_vfiprintf_r+0x13a>
 800a2e4:	9207      	str	r2, [sp, #28]
 800a2e6:	e014      	b.n	800a312 <_vfiprintf_r+0x13a>
 800a2e8:	eba0 0308 	sub.w	r3, r0, r8
 800a2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	46a2      	mov	sl, r4
 800a2f6:	e7d2      	b.n	800a29e <_vfiprintf_r+0xc6>
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	1d19      	adds	r1, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	9103      	str	r1, [sp, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	bfbb      	ittet	lt
 800a304:	425b      	neglt	r3, r3
 800a306:	f042 0202 	orrlt.w	r2, r2, #2
 800a30a:	9307      	strge	r3, [sp, #28]
 800a30c:	9307      	strlt	r3, [sp, #28]
 800a30e:	bfb8      	it	lt
 800a310:	9204      	strlt	r2, [sp, #16]
 800a312:	7823      	ldrb	r3, [r4, #0]
 800a314:	2b2e      	cmp	r3, #46	@ 0x2e
 800a316:	d10a      	bne.n	800a32e <_vfiprintf_r+0x156>
 800a318:	7863      	ldrb	r3, [r4, #1]
 800a31a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a31c:	d132      	bne.n	800a384 <_vfiprintf_r+0x1ac>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	9203      	str	r2, [sp, #12]
 800a326:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a32a:	3402      	adds	r4, #2
 800a32c:	9305      	str	r3, [sp, #20]
 800a32e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a404 <_vfiprintf_r+0x22c>
 800a332:	7821      	ldrb	r1, [r4, #0]
 800a334:	2203      	movs	r2, #3
 800a336:	4650      	mov	r0, sl
 800a338:	f7f5 ff6a 	bl	8000210 <memchr>
 800a33c:	b138      	cbz	r0, 800a34e <_vfiprintf_r+0x176>
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	eba0 000a 	sub.w	r0, r0, sl
 800a344:	2240      	movs	r2, #64	@ 0x40
 800a346:	4082      	lsls	r2, r0
 800a348:	4313      	orrs	r3, r2
 800a34a:	3401      	adds	r4, #1
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a352:	4829      	ldr	r0, [pc, #164]	@ (800a3f8 <_vfiprintf_r+0x220>)
 800a354:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a358:	2206      	movs	r2, #6
 800a35a:	f7f5 ff59 	bl	8000210 <memchr>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d03f      	beq.n	800a3e2 <_vfiprintf_r+0x20a>
 800a362:	4b26      	ldr	r3, [pc, #152]	@ (800a3fc <_vfiprintf_r+0x224>)
 800a364:	bb1b      	cbnz	r3, 800a3ae <_vfiprintf_r+0x1d6>
 800a366:	9b03      	ldr	r3, [sp, #12]
 800a368:	3307      	adds	r3, #7
 800a36a:	f023 0307 	bic.w	r3, r3, #7
 800a36e:	3308      	adds	r3, #8
 800a370:	9303      	str	r3, [sp, #12]
 800a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a374:	443b      	add	r3, r7
 800a376:	9309      	str	r3, [sp, #36]	@ 0x24
 800a378:	e76a      	b.n	800a250 <_vfiprintf_r+0x78>
 800a37a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a37e:	460c      	mov	r4, r1
 800a380:	2001      	movs	r0, #1
 800a382:	e7a8      	b.n	800a2d6 <_vfiprintf_r+0xfe>
 800a384:	2300      	movs	r3, #0
 800a386:	3401      	adds	r4, #1
 800a388:	9305      	str	r3, [sp, #20]
 800a38a:	4619      	mov	r1, r3
 800a38c:	f04f 0c0a 	mov.w	ip, #10
 800a390:	4620      	mov	r0, r4
 800a392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a396:	3a30      	subs	r2, #48	@ 0x30
 800a398:	2a09      	cmp	r2, #9
 800a39a:	d903      	bls.n	800a3a4 <_vfiprintf_r+0x1cc>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d0c6      	beq.n	800a32e <_vfiprintf_r+0x156>
 800a3a0:	9105      	str	r1, [sp, #20]
 800a3a2:	e7c4      	b.n	800a32e <_vfiprintf_r+0x156>
 800a3a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e7f0      	b.n	800a390 <_vfiprintf_r+0x1b8>
 800a3ae:	ab03      	add	r3, sp, #12
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	4b12      	ldr	r3, [pc, #72]	@ (800a400 <_vfiprintf_r+0x228>)
 800a3b6:	a904      	add	r1, sp, #16
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f3af 8000 	nop.w
 800a3be:	4607      	mov	r7, r0
 800a3c0:	1c78      	adds	r0, r7, #1
 800a3c2:	d1d6      	bne.n	800a372 <_vfiprintf_r+0x19a>
 800a3c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c6:	07d9      	lsls	r1, r3, #31
 800a3c8:	d405      	bmi.n	800a3d6 <_vfiprintf_r+0x1fe>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	059a      	lsls	r2, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_vfiprintf_r+0x1fe>
 800a3d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3d2:	f7ff fc77 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	065b      	lsls	r3, r3, #25
 800a3da:	f53f af1f 	bmi.w	800a21c <_vfiprintf_r+0x44>
 800a3de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3e0:	e71e      	b.n	800a220 <_vfiprintf_r+0x48>
 800a3e2:	ab03      	add	r3, sp, #12
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	462a      	mov	r2, r5
 800a3e8:	4b05      	ldr	r3, [pc, #20]	@ (800a400 <_vfiprintf_r+0x228>)
 800a3ea:	a904      	add	r1, sp, #16
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f000 f879 	bl	800a4e4 <_printf_i>
 800a3f2:	e7e4      	b.n	800a3be <_vfiprintf_r+0x1e6>
 800a3f4:	0800b7f4 	.word	0x0800b7f4
 800a3f8:	0800b7fe 	.word	0x0800b7fe
 800a3fc:	00000000 	.word	0x00000000
 800a400:	0800a1b3 	.word	0x0800a1b3
 800a404:	0800b7fa 	.word	0x0800b7fa

0800a408 <_printf_common>:
 800a408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a40c:	4616      	mov	r6, r2
 800a40e:	4698      	mov	r8, r3
 800a410:	688a      	ldr	r2, [r1, #8]
 800a412:	690b      	ldr	r3, [r1, #16]
 800a414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a418:	4293      	cmp	r3, r2
 800a41a:	bfb8      	it	lt
 800a41c:	4613      	movlt	r3, r2
 800a41e:	6033      	str	r3, [r6, #0]
 800a420:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a424:	4607      	mov	r7, r0
 800a426:	460c      	mov	r4, r1
 800a428:	b10a      	cbz	r2, 800a42e <_printf_common+0x26>
 800a42a:	3301      	adds	r3, #1
 800a42c:	6033      	str	r3, [r6, #0]
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	0699      	lsls	r1, r3, #26
 800a432:	bf42      	ittt	mi
 800a434:	6833      	ldrmi	r3, [r6, #0]
 800a436:	3302      	addmi	r3, #2
 800a438:	6033      	strmi	r3, [r6, #0]
 800a43a:	6825      	ldr	r5, [r4, #0]
 800a43c:	f015 0506 	ands.w	r5, r5, #6
 800a440:	d106      	bne.n	800a450 <_printf_common+0x48>
 800a442:	f104 0a19 	add.w	sl, r4, #25
 800a446:	68e3      	ldr	r3, [r4, #12]
 800a448:	6832      	ldr	r2, [r6, #0]
 800a44a:	1a9b      	subs	r3, r3, r2
 800a44c:	42ab      	cmp	r3, r5
 800a44e:	dc26      	bgt.n	800a49e <_printf_common+0x96>
 800a450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a454:	6822      	ldr	r2, [r4, #0]
 800a456:	3b00      	subs	r3, #0
 800a458:	bf18      	it	ne
 800a45a:	2301      	movne	r3, #1
 800a45c:	0692      	lsls	r2, r2, #26
 800a45e:	d42b      	bmi.n	800a4b8 <_printf_common+0xb0>
 800a460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a464:	4641      	mov	r1, r8
 800a466:	4638      	mov	r0, r7
 800a468:	47c8      	blx	r9
 800a46a:	3001      	adds	r0, #1
 800a46c:	d01e      	beq.n	800a4ac <_printf_common+0xa4>
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	6922      	ldr	r2, [r4, #16]
 800a472:	f003 0306 	and.w	r3, r3, #6
 800a476:	2b04      	cmp	r3, #4
 800a478:	bf02      	ittt	eq
 800a47a:	68e5      	ldreq	r5, [r4, #12]
 800a47c:	6833      	ldreq	r3, [r6, #0]
 800a47e:	1aed      	subeq	r5, r5, r3
 800a480:	68a3      	ldr	r3, [r4, #8]
 800a482:	bf0c      	ite	eq
 800a484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a488:	2500      	movne	r5, #0
 800a48a:	4293      	cmp	r3, r2
 800a48c:	bfc4      	itt	gt
 800a48e:	1a9b      	subgt	r3, r3, r2
 800a490:	18ed      	addgt	r5, r5, r3
 800a492:	2600      	movs	r6, #0
 800a494:	341a      	adds	r4, #26
 800a496:	42b5      	cmp	r5, r6
 800a498:	d11a      	bne.n	800a4d0 <_printf_common+0xc8>
 800a49a:	2000      	movs	r0, #0
 800a49c:	e008      	b.n	800a4b0 <_printf_common+0xa8>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4652      	mov	r2, sl
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	47c8      	blx	r9
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d103      	bne.n	800a4b4 <_printf_common+0xac>
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	e7c6      	b.n	800a446 <_printf_common+0x3e>
 800a4b8:	18e1      	adds	r1, r4, r3
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	2030      	movs	r0, #48	@ 0x30
 800a4be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4c2:	4422      	add	r2, r4
 800a4c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	e7c7      	b.n	800a460 <_printf_common+0x58>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	4641      	mov	r1, r8
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	47c8      	blx	r9
 800a4da:	3001      	adds	r0, #1
 800a4dc:	d0e6      	beq.n	800a4ac <_printf_common+0xa4>
 800a4de:	3601      	adds	r6, #1
 800a4e0:	e7d9      	b.n	800a496 <_printf_common+0x8e>
	...

0800a4e4 <_printf_i>:
 800a4e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	7e0f      	ldrb	r7, [r1, #24]
 800a4ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4ec:	2f78      	cmp	r7, #120	@ 0x78
 800a4ee:	4691      	mov	r9, r2
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	469a      	mov	sl, r3
 800a4f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4fa:	d807      	bhi.n	800a50c <_printf_i+0x28>
 800a4fc:	2f62      	cmp	r7, #98	@ 0x62
 800a4fe:	d80a      	bhi.n	800a516 <_printf_i+0x32>
 800a500:	2f00      	cmp	r7, #0
 800a502:	f000 80d2 	beq.w	800a6aa <_printf_i+0x1c6>
 800a506:	2f58      	cmp	r7, #88	@ 0x58
 800a508:	f000 80b9 	beq.w	800a67e <_printf_i+0x19a>
 800a50c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a514:	e03a      	b.n	800a58c <_printf_i+0xa8>
 800a516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a51a:	2b15      	cmp	r3, #21
 800a51c:	d8f6      	bhi.n	800a50c <_printf_i+0x28>
 800a51e:	a101      	add	r1, pc, #4	@ (adr r1, 800a524 <_printf_i+0x40>)
 800a520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a524:	0800a57d 	.word	0x0800a57d
 800a528:	0800a591 	.word	0x0800a591
 800a52c:	0800a50d 	.word	0x0800a50d
 800a530:	0800a50d 	.word	0x0800a50d
 800a534:	0800a50d 	.word	0x0800a50d
 800a538:	0800a50d 	.word	0x0800a50d
 800a53c:	0800a591 	.word	0x0800a591
 800a540:	0800a50d 	.word	0x0800a50d
 800a544:	0800a50d 	.word	0x0800a50d
 800a548:	0800a50d 	.word	0x0800a50d
 800a54c:	0800a50d 	.word	0x0800a50d
 800a550:	0800a691 	.word	0x0800a691
 800a554:	0800a5bb 	.word	0x0800a5bb
 800a558:	0800a64b 	.word	0x0800a64b
 800a55c:	0800a50d 	.word	0x0800a50d
 800a560:	0800a50d 	.word	0x0800a50d
 800a564:	0800a6b3 	.word	0x0800a6b3
 800a568:	0800a50d 	.word	0x0800a50d
 800a56c:	0800a5bb 	.word	0x0800a5bb
 800a570:	0800a50d 	.word	0x0800a50d
 800a574:	0800a50d 	.word	0x0800a50d
 800a578:	0800a653 	.word	0x0800a653
 800a57c:	6833      	ldr	r3, [r6, #0]
 800a57e:	1d1a      	adds	r2, r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6032      	str	r2, [r6, #0]
 800a584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a58c:	2301      	movs	r3, #1
 800a58e:	e09d      	b.n	800a6cc <_printf_i+0x1e8>
 800a590:	6833      	ldr	r3, [r6, #0]
 800a592:	6820      	ldr	r0, [r4, #0]
 800a594:	1d19      	adds	r1, r3, #4
 800a596:	6031      	str	r1, [r6, #0]
 800a598:	0606      	lsls	r6, r0, #24
 800a59a:	d501      	bpl.n	800a5a0 <_printf_i+0xbc>
 800a59c:	681d      	ldr	r5, [r3, #0]
 800a59e:	e003      	b.n	800a5a8 <_printf_i+0xc4>
 800a5a0:	0645      	lsls	r5, r0, #25
 800a5a2:	d5fb      	bpl.n	800a59c <_printf_i+0xb8>
 800a5a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	da03      	bge.n	800a5b4 <_printf_i+0xd0>
 800a5ac:	232d      	movs	r3, #45	@ 0x2d
 800a5ae:	426d      	negs	r5, r5
 800a5b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5b4:	4859      	ldr	r0, [pc, #356]	@ (800a71c <_printf_i+0x238>)
 800a5b6:	230a      	movs	r3, #10
 800a5b8:	e011      	b.n	800a5de <_printf_i+0xfa>
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	6833      	ldr	r3, [r6, #0]
 800a5be:	0608      	lsls	r0, r1, #24
 800a5c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5c4:	d402      	bmi.n	800a5cc <_printf_i+0xe8>
 800a5c6:	0649      	lsls	r1, r1, #25
 800a5c8:	bf48      	it	mi
 800a5ca:	b2ad      	uxthmi	r5, r5
 800a5cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5ce:	4853      	ldr	r0, [pc, #332]	@ (800a71c <_printf_i+0x238>)
 800a5d0:	6033      	str	r3, [r6, #0]
 800a5d2:	bf14      	ite	ne
 800a5d4:	230a      	movne	r3, #10
 800a5d6:	2308      	moveq	r3, #8
 800a5d8:	2100      	movs	r1, #0
 800a5da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5de:	6866      	ldr	r6, [r4, #4]
 800a5e0:	60a6      	str	r6, [r4, #8]
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	bfa2      	ittt	ge
 800a5e6:	6821      	ldrge	r1, [r4, #0]
 800a5e8:	f021 0104 	bicge.w	r1, r1, #4
 800a5ec:	6021      	strge	r1, [r4, #0]
 800a5ee:	b90d      	cbnz	r5, 800a5f4 <_printf_i+0x110>
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	d04b      	beq.n	800a68c <_printf_i+0x1a8>
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5fa:	fb03 5711 	mls	r7, r3, r1, r5
 800a5fe:	5dc7      	ldrb	r7, [r0, r7]
 800a600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a604:	462f      	mov	r7, r5
 800a606:	42bb      	cmp	r3, r7
 800a608:	460d      	mov	r5, r1
 800a60a:	d9f4      	bls.n	800a5f6 <_printf_i+0x112>
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d10b      	bne.n	800a628 <_printf_i+0x144>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	07df      	lsls	r7, r3, #31
 800a614:	d508      	bpl.n	800a628 <_printf_i+0x144>
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	6861      	ldr	r1, [r4, #4]
 800a61a:	4299      	cmp	r1, r3
 800a61c:	bfde      	ittt	le
 800a61e:	2330      	movle	r3, #48	@ 0x30
 800a620:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a624:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a628:	1b92      	subs	r2, r2, r6
 800a62a:	6122      	str	r2, [r4, #16]
 800a62c:	f8cd a000 	str.w	sl, [sp]
 800a630:	464b      	mov	r3, r9
 800a632:	aa03      	add	r2, sp, #12
 800a634:	4621      	mov	r1, r4
 800a636:	4640      	mov	r0, r8
 800a638:	f7ff fee6 	bl	800a408 <_printf_common>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d14a      	bne.n	800a6d6 <_printf_i+0x1f2>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	b004      	add	sp, #16
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	f043 0320 	orr.w	r3, r3, #32
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	4833      	ldr	r0, [pc, #204]	@ (800a720 <_printf_i+0x23c>)
 800a654:	2778      	movs	r7, #120	@ 0x78
 800a656:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	6831      	ldr	r1, [r6, #0]
 800a65e:	061f      	lsls	r7, r3, #24
 800a660:	f851 5b04 	ldr.w	r5, [r1], #4
 800a664:	d402      	bmi.n	800a66c <_printf_i+0x188>
 800a666:	065f      	lsls	r7, r3, #25
 800a668:	bf48      	it	mi
 800a66a:	b2ad      	uxthmi	r5, r5
 800a66c:	6031      	str	r1, [r6, #0]
 800a66e:	07d9      	lsls	r1, r3, #31
 800a670:	bf44      	itt	mi
 800a672:	f043 0320 	orrmi.w	r3, r3, #32
 800a676:	6023      	strmi	r3, [r4, #0]
 800a678:	b11d      	cbz	r5, 800a682 <_printf_i+0x19e>
 800a67a:	2310      	movs	r3, #16
 800a67c:	e7ac      	b.n	800a5d8 <_printf_i+0xf4>
 800a67e:	4827      	ldr	r0, [pc, #156]	@ (800a71c <_printf_i+0x238>)
 800a680:	e7e9      	b.n	800a656 <_printf_i+0x172>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	f023 0320 	bic.w	r3, r3, #32
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	e7f6      	b.n	800a67a <_printf_i+0x196>
 800a68c:	4616      	mov	r6, r2
 800a68e:	e7bd      	b.n	800a60c <_printf_i+0x128>
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	6825      	ldr	r5, [r4, #0]
 800a694:	6961      	ldr	r1, [r4, #20]
 800a696:	1d18      	adds	r0, r3, #4
 800a698:	6030      	str	r0, [r6, #0]
 800a69a:	062e      	lsls	r6, r5, #24
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	d501      	bpl.n	800a6a4 <_printf_i+0x1c0>
 800a6a0:	6019      	str	r1, [r3, #0]
 800a6a2:	e002      	b.n	800a6aa <_printf_i+0x1c6>
 800a6a4:	0668      	lsls	r0, r5, #25
 800a6a6:	d5fb      	bpl.n	800a6a0 <_printf_i+0x1bc>
 800a6a8:	8019      	strh	r1, [r3, #0]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6123      	str	r3, [r4, #16]
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	e7bc      	b.n	800a62c <_printf_i+0x148>
 800a6b2:	6833      	ldr	r3, [r6, #0]
 800a6b4:	1d1a      	adds	r2, r3, #4
 800a6b6:	6032      	str	r2, [r6, #0]
 800a6b8:	681e      	ldr	r6, [r3, #0]
 800a6ba:	6862      	ldr	r2, [r4, #4]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7f5 fda6 	bl	8000210 <memchr>
 800a6c4:	b108      	cbz	r0, 800a6ca <_printf_i+0x1e6>
 800a6c6:	1b80      	subs	r0, r0, r6
 800a6c8:	6060      	str	r0, [r4, #4]
 800a6ca:	6863      	ldr	r3, [r4, #4]
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6d4:	e7aa      	b.n	800a62c <_printf_i+0x148>
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	4632      	mov	r2, r6
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4640      	mov	r0, r8
 800a6de:	47d0      	blx	sl
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d0ad      	beq.n	800a640 <_printf_i+0x15c>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	079b      	lsls	r3, r3, #30
 800a6e8:	d413      	bmi.n	800a712 <_printf_i+0x22e>
 800a6ea:	68e0      	ldr	r0, [r4, #12]
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	bfb8      	it	lt
 800a6f2:	4618      	movlt	r0, r3
 800a6f4:	e7a6      	b.n	800a644 <_printf_i+0x160>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	47d0      	blx	sl
 800a700:	3001      	adds	r0, #1
 800a702:	d09d      	beq.n	800a640 <_printf_i+0x15c>
 800a704:	3501      	adds	r5, #1
 800a706:	68e3      	ldr	r3, [r4, #12]
 800a708:	9903      	ldr	r1, [sp, #12]
 800a70a:	1a5b      	subs	r3, r3, r1
 800a70c:	42ab      	cmp	r3, r5
 800a70e:	dcf2      	bgt.n	800a6f6 <_printf_i+0x212>
 800a710:	e7eb      	b.n	800a6ea <_printf_i+0x206>
 800a712:	2500      	movs	r5, #0
 800a714:	f104 0619 	add.w	r6, r4, #25
 800a718:	e7f5      	b.n	800a706 <_printf_i+0x222>
 800a71a:	bf00      	nop
 800a71c:	0800b805 	.word	0x0800b805
 800a720:	0800b816 	.word	0x0800b816

0800a724 <__swhatbuf_r>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	460c      	mov	r4, r1
 800a728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72c:	2900      	cmp	r1, #0
 800a72e:	b096      	sub	sp, #88	@ 0x58
 800a730:	4615      	mov	r5, r2
 800a732:	461e      	mov	r6, r3
 800a734:	da0d      	bge.n	800a752 <__swhatbuf_r+0x2e>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a73c:	f04f 0100 	mov.w	r1, #0
 800a740:	bf14      	ite	ne
 800a742:	2340      	movne	r3, #64	@ 0x40
 800a744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a748:	2000      	movs	r0, #0
 800a74a:	6031      	str	r1, [r6, #0]
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	b016      	add	sp, #88	@ 0x58
 800a750:	bd70      	pop	{r4, r5, r6, pc}
 800a752:	466a      	mov	r2, sp
 800a754:	f000 f862 	bl	800a81c <_fstat_r>
 800a758:	2800      	cmp	r0, #0
 800a75a:	dbec      	blt.n	800a736 <__swhatbuf_r+0x12>
 800a75c:	9901      	ldr	r1, [sp, #4]
 800a75e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a766:	4259      	negs	r1, r3
 800a768:	4159      	adcs	r1, r3
 800a76a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a76e:	e7eb      	b.n	800a748 <__swhatbuf_r+0x24>

0800a770 <__smakebuf_r>:
 800a770:	898b      	ldrh	r3, [r1, #12]
 800a772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a774:	079d      	lsls	r5, r3, #30
 800a776:	4606      	mov	r6, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	d507      	bpl.n	800a78c <__smakebuf_r+0x1c>
 800a77c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	2301      	movs	r3, #1
 800a786:	6163      	str	r3, [r4, #20]
 800a788:	b003      	add	sp, #12
 800a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a78c:	ab01      	add	r3, sp, #4
 800a78e:	466a      	mov	r2, sp
 800a790:	f7ff ffc8 	bl	800a724 <__swhatbuf_r>
 800a794:	9f00      	ldr	r7, [sp, #0]
 800a796:	4605      	mov	r5, r0
 800a798:	4639      	mov	r1, r7
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff fb0e 	bl	8009dbc <_malloc_r>
 800a7a0:	b948      	cbnz	r0, 800a7b6 <__smakebuf_r+0x46>
 800a7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a6:	059a      	lsls	r2, r3, #22
 800a7a8:	d4ee      	bmi.n	800a788 <__smakebuf_r+0x18>
 800a7aa:	f023 0303 	bic.w	r3, r3, #3
 800a7ae:	f043 0302 	orr.w	r3, r3, #2
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	e7e2      	b.n	800a77c <__smakebuf_r+0xc>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	6020      	str	r0, [r4, #0]
 800a7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7c6:	b15b      	cbz	r3, 800a7e0 <__smakebuf_r+0x70>
 800a7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f000 f837 	bl	800a840 <_isatty_r>
 800a7d2:	b128      	cbz	r0, 800a7e0 <__smakebuf_r+0x70>
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	f043 0301 	orr.w	r3, r3, #1
 800a7de:	81a3      	strh	r3, [r4, #12]
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	431d      	orrs	r5, r3
 800a7e4:	81a5      	strh	r5, [r4, #12]
 800a7e6:	e7cf      	b.n	800a788 <__smakebuf_r+0x18>

0800a7e8 <memmove>:
 800a7e8:	4288      	cmp	r0, r1
 800a7ea:	b510      	push	{r4, lr}
 800a7ec:	eb01 0402 	add.w	r4, r1, r2
 800a7f0:	d902      	bls.n	800a7f8 <memmove+0x10>
 800a7f2:	4284      	cmp	r4, r0
 800a7f4:	4623      	mov	r3, r4
 800a7f6:	d807      	bhi.n	800a808 <memmove+0x20>
 800a7f8:	1e43      	subs	r3, r0, #1
 800a7fa:	42a1      	cmp	r1, r4
 800a7fc:	d008      	beq.n	800a810 <memmove+0x28>
 800a7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a802:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a806:	e7f8      	b.n	800a7fa <memmove+0x12>
 800a808:	4402      	add	r2, r0
 800a80a:	4601      	mov	r1, r0
 800a80c:	428a      	cmp	r2, r1
 800a80e:	d100      	bne.n	800a812 <memmove+0x2a>
 800a810:	bd10      	pop	{r4, pc}
 800a812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a81a:	e7f7      	b.n	800a80c <memmove+0x24>

0800a81c <_fstat_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	@ (800a83c <_fstat_r+0x20>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f7f7 fcfa 	bl	8002222 <_fstat>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d102      	bne.n	800a838 <_fstat_r+0x1c>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	b103      	cbz	r3, 800a838 <_fstat_r+0x1c>
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	20019db0 	.word	0x20019db0

0800a840 <_isatty_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d06      	ldr	r5, [pc, #24]	@ (800a85c <_isatty_r+0x1c>)
 800a844:	2300      	movs	r3, #0
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	602b      	str	r3, [r5, #0]
 800a84c:	f7f7 fcf9 	bl	8002242 <_isatty>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_isatty_r+0x1a>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_isatty_r+0x1a>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	20019db0 	.word	0x20019db0

0800a860 <_sbrk_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d06      	ldr	r5, [pc, #24]	@ (800a87c <_sbrk_r+0x1c>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	f7f7 fd02 	bl	8002274 <_sbrk>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_sbrk_r+0x1a>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_sbrk_r+0x1a>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20019db0 	.word	0x20019db0

0800a880 <_realloc_r>:
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	4680      	mov	r8, r0
 800a886:	4615      	mov	r5, r2
 800a888:	460c      	mov	r4, r1
 800a88a:	b921      	cbnz	r1, 800a896 <_realloc_r+0x16>
 800a88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	4611      	mov	r1, r2
 800a892:	f7ff ba93 	b.w	8009dbc <_malloc_r>
 800a896:	b92a      	cbnz	r2, 800a8a4 <_realloc_r+0x24>
 800a898:	f7ff fa24 	bl	8009ce4 <_free_r>
 800a89c:	2400      	movs	r4, #0
 800a89e:	4620      	mov	r0, r4
 800a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a4:	f000 f81a 	bl	800a8dc <_malloc_usable_size_r>
 800a8a8:	4285      	cmp	r5, r0
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	d802      	bhi.n	800a8b4 <_realloc_r+0x34>
 800a8ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8b2:	d8f4      	bhi.n	800a89e <_realloc_r+0x1e>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	f7ff fa80 	bl	8009dbc <_malloc_r>
 800a8bc:	4607      	mov	r7, r0
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0ec      	beq.n	800a89c <_realloc_r+0x1c>
 800a8c2:	42b5      	cmp	r5, r6
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	bf28      	it	cs
 800a8ca:	4632      	movcs	r2, r6
 800a8cc:	f7ff f9fb 	bl	8009cc6 <memcpy>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	f7ff fa06 	bl	8009ce4 <_free_r>
 800a8d8:	463c      	mov	r4, r7
 800a8da:	e7e0      	b.n	800a89e <_realloc_r+0x1e>

0800a8dc <_malloc_usable_size_r>:
 800a8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e0:	1f18      	subs	r0, r3, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfbc      	itt	lt
 800a8e6:	580b      	ldrlt	r3, [r1, r0]
 800a8e8:	18c0      	addlt	r0, r0, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr


city_dispatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cde0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  0800cfb0  0800cfb0  0000dfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e730  0800e730  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e730  0800e730  0000f730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e738  0800e738  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e738  0800e738  0000f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e73c  0800e73c  0000f73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e740  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019da8  200001dc  0800e91c  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019f84  0800e91c  00010f84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d32  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cc8  00000000  00000000  00032f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00037c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001467  00000000  00000000  00039668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd55  00000000  00000000  0003aacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238b7  00000000  00000000  00066824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001002f9  00000000  00000000  0008a0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a3d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fe4  00000000  00000000  0018a418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001923fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf98 	.word	0x0800cf98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800cf98 	.word	0x0800cf98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <getTasksStatus>:
 *      Author: eyalk
 */
#include "data.h"


void getTasksStatus(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09e      	sub	sp, #120	@ 0x78
 8000edc:	af02      	add	r7, sp, #8
    uint32_t ulNotificationValue;
    bool printedStatus = false;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    char logBuffer[MAX_MSG_LENGTH];

    for (;;) {
        if (!btnFlag) {
 8000ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8001160 <getTasksStatus+0x288>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00a      	beq.n	8000f08 <getTasksStatus+0x30>
            printedStatus = false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8000ef8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	2100      	movs	r1, #0
 8000f02:	2000      	movs	r0, #0
 8000f04:	f007 fe7e 	bl	8008c04 <xTaskNotifyWait>
        }
        if (!printedStatus) {
 8000f08:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0e6      	beq.n	8000ee4 <getTasksStatus+0xc>
            taskENTER_CRITICAL();
 8000f16:	f008 fdd7 	bl	8009ac8 <vPortEnterCritical>
            vTaskSuspend(vTasksManagerTask);
 8000f1a:	4b92      	ldr	r3, [pc, #584]	@ (8001164 <getTasksStatus+0x28c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f006 ff26 	bl	8007d70 <vTaskSuspend>
            vTaskSuspend(vLoggerTask);
 8000f24:	4b90      	ldr	r3, [pc, #576]	@ (8001168 <getTasksStatus+0x290>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 ff21 	bl	8007d70 <vTaskSuspend>


            snprintf(logBuffer, MAX_MSG_LENGTH, "\n\n************** Tasks Status Report **************\r\n");
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4a8e      	ldr	r2, [pc, #568]	@ (800116c <getTasksStatus+0x294>)
 8000f32:	2164      	movs	r1, #100	@ 0x64
 8000f34:	4618      	mov	r0, r3
 8000f36:	f009 ff2d 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fed9 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current Running tasks: %d\r\n", (int)current_running_tasks);
 8000f42:	4b8b      	ldr	r3, [pc, #556]	@ (8001170 <getTasksStatus+0x298>)
 8000f44:	f993 3000 	ldrsb.w	r3, [r3]
 8000f48:	1d38      	adds	r0, r7, #4
 8000f4a:	4a8a      	ldr	r2, [pc, #552]	@ (8001174 <getTasksStatus+0x29c>)
 8000f4c:	2164      	movs	r1, #100	@ 0x64
 8000f4e:	f009 ff21 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fecd 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "              Total Ran Tasks: %d\r\n", (int)total_tasks_ran);
 8000f5a:	4b87      	ldr	r3, [pc, #540]	@ (8001178 <getTasksStatus+0x2a0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1d38      	adds	r0, r7, #4
 8000f60:	4a86      	ldr	r2, [pc, #536]	@ (800117c <getTasksStatus+0x2a4>)
 8000f62:	2164      	movs	r1, #100	@ 0x64
 8000f64:	f009 ff16 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fec2 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "     Total tasks running time: %.3f seconds\r\n", total_tasks_time);
 8000f70:	4b83      	ldr	r3, [pc, #524]	@ (8001180 <getTasksStatus+0x2a8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fb07 	bl	8000588 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	1d38      	adds	r0, r7, #4
 8000f80:	e9cd 2300 	strd	r2, r3, [sp]
 8000f84:	4a7f      	ldr	r2, [pc, #508]	@ (8001184 <getTasksStatus+0x2ac>)
 8000f86:	2164      	movs	r1, #100	@ 0x64
 8000f88:	f009 ff04 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 feb0 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "     Average task running time: %.3f seconds\r\n", average_task_time);
 8000f94:	4b7c      	ldr	r3, [pc, #496]	@ (8001188 <getTasksStatus+0x2b0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff faf5 	bl	8000588 <__aeabi_f2d>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	1d38      	adds	r0, r7, #4
 8000fa4:	e9cd 2300 	strd	r2, r3, [sp]
 8000fa8:	4a78      	ldr	r2, [pc, #480]	@ (800118c <getTasksStatus+0x2b4>)
 8000faa:	2164      	movs	r1, #100	@ 0x64
 8000fac:	f009 fef2 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fe9e 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n********* Ambulances Tasks Status Report *********\r\n");
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4a75      	ldr	r2, [pc, #468]	@ (8001190 <getTasksStatus+0x2b8>)
 8000fbc:	2164      	movs	r1, #100	@ 0x64
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f009 fee8 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fe94 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total ambulance tasks: %d\r\n", (int)AMBULANCE_TASKS);
 8000fcc:	1d38      	adds	r0, r7, #4
 8000fce:	2308      	movs	r3, #8
 8000fd0:	4a70      	ldr	r2, [pc, #448]	@ (8001194 <getTasksStatus+0x2bc>)
 8000fd2:	2164      	movs	r1, #100	@ 0x64
 8000fd4:	f009 fede 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fe8a 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(AMBULANCE_TASKS - available_amb_tasks));
 8000fe0:	4b6d      	ldr	r3, [pc, #436]	@ (8001198 <getTasksStatus+0x2c0>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f1c3 0308 	rsb	r3, r3, #8
 8000fe8:	1d38      	adds	r0, r7, #4
 8000fea:	4a6c      	ldr	r2, [pc, #432]	@ (800119c <getTasksStatus+0x2c4>)
 8000fec:	2164      	movs	r1, #100	@ 0x64
 8000fee:	f009 fed1 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fe7d 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n", (int)available_amb_tasks);
 8000ffa:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <getTasksStatus+0x2c0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	1d38      	adds	r0, r7, #4
 8001000:	4a67      	ldr	r2, [pc, #412]	@ (80011a0 <getTasksStatus+0x2c8>)
 8001002:	2164      	movs	r1, #100	@ 0x64
 8001004:	f009 fec6 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe72 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n*********** Police Tasks Status Report ***********\r\n");
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4a64      	ldr	r2, [pc, #400]	@ (80011a4 <getTasksStatus+0x2cc>)
 8001014:	2164      	movs	r1, #100	@ 0x64
 8001016:	4618      	mov	r0, r3
 8001018:	f009 febc 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fe68 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total police tasks: %d\r\n", (int)POLICE_TASKS);
 8001024:	1d38      	adds	r0, r7, #4
 8001026:	2305      	movs	r3, #5
 8001028:	4a5f      	ldr	r2, [pc, #380]	@ (80011a8 <getTasksStatus+0x2d0>)
 800102a:	2164      	movs	r1, #100	@ 0x64
 800102c:	f009 feb2 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fe5e 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(POLICE_TASKS - available_police_tasks));
 8001038:	4b5c      	ldr	r3, [pc, #368]	@ (80011ac <getTasksStatus+0x2d4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f1c3 0305 	rsb	r3, r3, #5
 8001040:	1d38      	adds	r0, r7, #4
 8001042:	4a56      	ldr	r2, [pc, #344]	@ (800119c <getTasksStatus+0x2c4>)
 8001044:	2164      	movs	r1, #100	@ 0x64
 8001046:	f009 fea5 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fe51 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n", (int)available_police_tasks);
 8001052:	4b56      	ldr	r3, [pc, #344]	@ (80011ac <getTasksStatus+0x2d4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	1d38      	adds	r0, r7, #4
 8001058:	4a51      	ldr	r2, [pc, #324]	@ (80011a0 <getTasksStatus+0x2c8>)
 800105a:	2164      	movs	r1, #100	@ 0x64
 800105c:	f009 fe9a 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fe46 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n********** Fire Dep Tasks Status Report **********\r\n");
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4a51      	ldr	r2, [pc, #324]	@ (80011b0 <getTasksStatus+0x2d8>)
 800106c:	2164      	movs	r1, #100	@ 0x64
 800106e:	4618      	mov	r0, r3
 8001070:	f009 fe90 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fe3c 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total fire dep tasks: %d\r\n", (int)FIRE_TASKS);
 800107c:	1d38      	adds	r0, r7, #4
 800107e:	2305      	movs	r3, #5
 8001080:	4a4c      	ldr	r2, [pc, #304]	@ (80011b4 <getTasksStatus+0x2dc>)
 8001082:	2164      	movs	r1, #100	@ 0x64
 8001084:	f009 fe86 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fe32 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(FIRE_TASKS - available_fire_tasks));
 8001090:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <getTasksStatus+0x2e0>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f1c3 0305 	rsb	r3, r3, #5
 8001098:	1d38      	adds	r0, r7, #4
 800109a:	4a40      	ldr	r2, [pc, #256]	@ (800119c <getTasksStatus+0x2c4>)
 800109c:	2164      	movs	r1, #100	@ 0x64
 800109e:	f009 fe79 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fe25 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n", (int)available_fire_tasks);
 80010aa:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <getTasksStatus+0x2e0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	1d38      	adds	r0, r7, #4
 80010b0:	4a3b      	ldr	r2, [pc, #236]	@ (80011a0 <getTasksStatus+0x2c8>)
 80010b2:	2164      	movs	r1, #100	@ 0x64
 80010b4:	f009 fe6e 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fe1a 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "\n*********** Corona Tasks Status Report ************\r\n");
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4a3e      	ldr	r2, [pc, #248]	@ (80011bc <getTasksStatus+0x2e4>)
 80010c4:	2164      	movs	r1, #100	@ 0x64
 80010c6:	4618      	mov	r0, r3
 80010c8:	f009 fe64 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fe10 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Total corona tasks: %d\r\n", (int)CORONA_TASKS);
 80010d4:	1d38      	adds	r0, r7, #4
 80010d6:	2305      	movs	r3, #5
 80010d8:	4a39      	ldr	r2, [pc, #228]	@ (80011c0 <getTasksStatus+0x2e8>)
 80010da:	2164      	movs	r1, #100	@ 0x64
 80010dc:	f009 fe5a 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fe06 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current occupied tasks: %d\r\n", (int)(CORONA_TASKS - available_corona_tasks));
 80010e8:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <getTasksStatus+0x2ec>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f1c3 0305 	rsb	r3, r3, #5
 80010f0:	1d38      	adds	r0, r7, #4
 80010f2:	4a2a      	ldr	r2, [pc, #168]	@ (800119c <getTasksStatus+0x2c4>)
 80010f4:	2164      	movs	r1, #100	@ 0x64
 80010f6:	f009 fe4d 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fdf9 	bl	8001cf4 <SendDataMessage>

            snprintf(logBuffer, MAX_MSG_LENGTH, "           Current available tasks: %d\r\n\n\n", (int)available_corona_tasks);
 8001102:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <getTasksStatus+0x2ec>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	1d38      	adds	r0, r7, #4
 8001108:	4a2f      	ldr	r2, [pc, #188]	@ (80011c8 <getTasksStatus+0x2f0>)
 800110a:	2164      	movs	r1, #100	@ 0x64
 800110c:	f009 fe42 	bl	800ad94 <sniprintf>
            SendDataMessage(logBuffer);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fdee 	bl	8001cf4 <SendDataMessage>
            xTaskNotify(vBtnDataTask, 0x00, eNoAction);
 8001118:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <getTasksStatus+0x2f4>)
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	2300      	movs	r3, #0
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	f007 fdcf 	bl	8008cc4 <xTaskGenericNotify>
            //vTaskSuspend(vBtnDataTask);
            taskEXIT_CRITICAL();
 8001126:	f008 fd05 	bl	8009b34 <vPortExitCritical>
            printedStatus = !printedStatus;
 800112a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf14      	ite	ne
 8001132:	2301      	movne	r3, #1
 8001134:	2300      	moveq	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001142:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 800114e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f007 fd53 	bl	8008c04 <xTaskNotifyWait>
        if (!btnFlag) {
 800115e:	e6c1      	b.n	8000ee4 <getTasksStatus+0xc>
 8001160:	2000095c 	.word	0x2000095c
 8001164:	20000904 	.word	0x20000904
 8001168:	2000090c 	.word	0x2000090c
 800116c:	0800cfb0 	.word	0x0800cfb0
 8001170:	20000954 	.word	0x20000954
 8001174:	0800cfe8 	.word	0x0800cfe8
 8001178:	2000094c 	.word	0x2000094c
 800117c:	0800d010 	.word	0x0800d010
 8001180:	20000948 	.word	0x20000948
 8001184:	0800d034 	.word	0x0800d034
 8001188:	20000950 	.word	0x20000950
 800118c:	0800d064 	.word	0x0800d064
 8001190:	0800d094 	.word	0x0800d094
 8001194:	0800d0cc 	.word	0x0800d0cc
 8001198:	20000000 	.word	0x20000000
 800119c:	0800d0f4 	.word	0x0800d0f4
 80011a0:	0800d11c 	.word	0x0800d11c
 80011a4:	0800d148 	.word	0x0800d148
 80011a8:	0800d180 	.word	0x0800d180
 80011ac:	20000001 	.word	0x20000001
 80011b0:	0800d1a4 	.word	0x0800d1a4
 80011b4:	0800d1dc 	.word	0x0800d1dc
 80011b8:	20000002 	.word	0x20000002
 80011bc:	0800d204 	.word	0x0800d204
 80011c0:	0800d23c 	.word	0x0800d23c
 80011c4:	20000003 	.word	0x20000003
 80011c8:	0800d260 	.word	0x0800d260
 80011cc:	20000910 	.word	0x20000910

080011d0 <vDispatcherCode>:
 * This function implements the dispatcher task, which waits for notifications
 * to process and route incoming dispatcher packets to the appropriate department queues.
 *
 * @param pvParameters Parameters passed to the task (expected to be `1`).
 */
void vDispatcherCode(void *pvParameters) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a0      	sub	sp, #128	@ 0x80
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	configASSERT(((uint32_t) pvParameters) == 1);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d00d      	beq.n	80011fa <vDispatcherCode+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80011de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e2:	b672      	cpsid	i
 80011e4:	f383 8811 	msr	BASEPRI, r3
 80011e8:	f3bf 8f6f 	isb	sy
 80011ec:	f3bf 8f4f 	dsb	sy
 80011f0:	b662      	cpsie	i
 80011f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	e7fd      	b.n	80011f6 <vDispatcherCode+0x26>
	uint32_t ulNotificationValue;
	for(;;) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2180      	movs	r1, #128	@ 0x80
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <vDispatcherCode+0x68>)
 8001200:	f002 fb8c 	bl	800391c <HAL_GPIO_WritePin>

		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001204:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f007 fcf8 	bl	8008c04 <xTaskNotifyWait>

		DispatcherPacket new_packet;
		if( xQueueReceive(qDispatcher, &new_packet, portMAX_DELAY) == pdPASS) {
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <vDispatcherCode+0x6c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f107 010c 	add.w	r1, r7, #12
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	4618      	mov	r0, r3
 8001222:	f005 ffdf 	bl	80071e4 <xQueueReceive>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d1e6      	bne.n	80011fa <vDispatcherCode+0x2a>
			packetRouting(&new_packet);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f805 	bl	8001240 <packetRouting>
	for(;;) {
 8001236:	e7e0      	b.n	80011fa <vDispatcherCode+0x2a>
 8001238:	40020400 	.word	0x40020400
 800123c:	20000894 	.word	0x20000894

08001240 <packetRouting>:
 * This function sends the given dispatcher packet to the queue corresponding
 * to its department.
 *
 * @param new_packet Pointer to the DispatcherPacket to be routed.
 */
void packetRouting(DispatcherPacket* new_packet) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	switch(new_packet->department) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d82f      	bhi.n	80012b0 <packetRouting+0x70>
 8001250:	a201      	add	r2, pc, #4	@ (adr r2, 8001258 <packetRouting+0x18>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001269 	.word	0x08001269
 800125c:	0800127b 	.word	0x0800127b
 8001260:	0800128d 	.word	0x0800128d
 8001264:	0800129f 	.word	0x0800129f
		case AMBULANCE:
			xQueueSend(qAmbulance, new_packet, portMAX_DELAY);
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <packetRouting+0x78>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	f04f 32ff 	mov.w	r2, #4294967295
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f005 fe08 	bl	8006e88 <xQueueGenericSend>
			break;
 8001278:	e01a      	b.n	80012b0 <packetRouting+0x70>
		case POLICE:
			xQueueSend(qPolice, new_packet, portMAX_DELAY);
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <packetRouting+0x7c>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	f005 fdff 	bl	8006e88 <xQueueGenericSend>
			break;
 800128a:	e011      	b.n	80012b0 <packetRouting+0x70>
		case FIRE:
			xQueueSend(qFire, new_packet, portMAX_DELAY);
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <packetRouting+0x80>)
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	f04f 32ff 	mov.w	r2, #4294967295
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f005 fdf6 	bl	8006e88 <xQueueGenericSend>
			break;
 800129c:	e008      	b.n	80012b0 <packetRouting+0x70>
		case CORONA:
			xQueueSend(qCorona, new_packet, portMAX_DELAY);
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <packetRouting+0x84>)
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	f005 fded 	bl	8006e88 <xQueueGenericSend>
			break;
 80012ae:	bf00      	nop
	}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000884 	.word	0x20000884
 80012bc:	20000888 	.word	0x20000888
 80012c0:	2000088c 	.word	0x2000088c
 80012c4:	20000890 	.word	0x20000890

080012c8 <generateDispatcherMSG>:
 * This function generates a dispatcher message based on a random department and message.
 * It also sets the time required to handle the task in ticks.
 *
 * @param hDispPacket Pointer to the DispatcherPacket to be filled with generated data.
 */
void generateDispatcherMSG(DispatcherPacket* hDispPacket) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	DepartmentsEnum dep;
	uint8_t msgIdx = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]
	uint16_t range = LONGEST_TASK_DURATION_IN_TICKS - SHORTEST_TASK_DURATION_IN_TICKS + 1;
 80012d4:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80012d8:	81bb      	strh	r3, [r7, #12]

	// Generate Department
	uint32_t random_number = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	4866      	ldr	r0, [pc, #408]	@ (8001480 <generateDispatcherMSG+0x1b8>)
 80012e6:	f003 fdeb 	bl	8004ec0 <HAL_RNG_GenerateRandomNumber>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <generateDispatcherMSG+0x38>
	        dep = (random_number % 4);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	73fb      	strb	r3, [r7, #15]
	        hDispPacket->department = dep;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	701a      	strb	r2, [r3, #0]
	}

	// Pick a message and set counter
	switch(dep) {
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b03      	cmp	r3, #3
 8001304:	f200 80a0 	bhi.w	8001448 <generateDispatcherMSG+0x180>
 8001308:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <generateDispatcherMSG+0x48>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	08001365 	.word	0x08001365
 8001318:	080013b5 	.word	0x080013b5
 800131c:	08001405 	.word	0x08001405
		case AMBULANCE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4619      	mov	r1, r3
 8001326:	4856      	ldr	r0, [pc, #344]	@ (8001480 <generateDispatcherMSG+0x1b8>)
 8001328:	f003 fdca 	bl	8004ec0 <HAL_RNG_GenerateRandomNumber>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d104      	bne.n	800133c <generateDispatcherMSG+0x74>
				msgIdx = (uint8_t)(random_number % AMB_STRINGS_LEN);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vAMBstrings[msgIdx], MAX_MSG_LENGTH - 1);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1c58      	adds	r0, r3, #1
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2264      	movs	r2, #100	@ 0x64
 8001344:	fb02 f303 	mul.w	r3, r2, r3
 8001348:	4a4e      	ldr	r2, [pc, #312]	@ (8001484 <generateDispatcherMSG+0x1bc>)
 800134a:	4413      	add	r3, r2
 800134c:	2263      	movs	r2, #99	@ 0x63
 800134e:	4619      	mov	r1, r3
 8001350:	f009 fe34 	bl	800afbc <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_amb_tasks;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a4a      	ldr	r2, [pc, #296]	@ (8001488 <generateDispatcherMSG+0x1c0>)
 8001360:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001362:	e072      	b.n	800144a <generateDispatcherMSG+0x182>


		case POLICE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	4845      	ldr	r0, [pc, #276]	@ (8001480 <generateDispatcherMSG+0x1b8>)
 800136c:	f003 fda8 	bl	8004ec0 <HAL_RNG_GenerateRandomNumber>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10a      	bne.n	800138c <generateDispatcherMSG+0xc4>
				msgIdx = (uint8_t)(random_number % POLICE_STRINGS_LEN);
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	4b44      	ldr	r3, [pc, #272]	@ (800148c <generateDispatcherMSG+0x1c4>)
 800137a:	fba3 2301 	umull	r2, r3, r3, r1
 800137e:	089a      	lsrs	r2, r3, #2
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	1aca      	subs	r2, r1, r3
 8001388:	4613      	mov	r3, r2
 800138a:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vPOLstrings[msgIdx], MAX_MSG_LENGTH - 1);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1c58      	adds	r0, r3, #1
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	2264      	movs	r2, #100	@ 0x64
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	4a3d      	ldr	r2, [pc, #244]	@ (8001490 <generateDispatcherMSG+0x1c8>)
 800139a:	4413      	add	r3, r2
 800139c:	2263      	movs	r2, #99	@ 0x63
 800139e:	4619      	mov	r1, r3
 80013a0:	f009 fe0c 	bl	800afbc <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_police_tasks;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a39      	ldr	r2, [pc, #228]	@ (8001494 <generateDispatcherMSG+0x1cc>)
 80013b0:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 80013b2:	e04a      	b.n	800144a <generateDispatcherMSG+0x182>


		case FIRE:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4619      	mov	r1, r3
 80013ba:	4831      	ldr	r0, [pc, #196]	@ (8001480 <generateDispatcherMSG+0x1b8>)
 80013bc:	f003 fd80 	bl	8004ec0 <HAL_RNG_GenerateRandomNumber>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10a      	bne.n	80013dc <generateDispatcherMSG+0x114>
				msgIdx = (uint8_t)(random_number % FIRE_STRINGS_LEN);
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <generateDispatcherMSG+0x1d0>)
 80013ca:	fba3 2301 	umull	r2, r3, r3, r1
 80013ce:	085a      	lsrs	r2, r3, #1
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	1aca      	subs	r2, r1, r3
 80013d8:	4613      	mov	r3, r2
 80013da:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vFIREstrings[msgIdx], MAX_MSG_LENGTH - 1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	1c58      	adds	r0, r3, #1
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2264      	movs	r2, #100	@ 0x64
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	4a2c      	ldr	r2, [pc, #176]	@ (800149c <generateDispatcherMSG+0x1d4>)
 80013ea:	4413      	add	r3, r2
 80013ec:	2263      	movs	r2, #99	@ 0x63
 80013ee:	4619      	mov	r1, r3
 80013f0:	f009 fde4 	bl	800afbc <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_fire_tasks;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a28      	ldr	r2, [pc, #160]	@ (80014a0 <generateDispatcherMSG+0x1d8>)
 8001400:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001402:	e022      	b.n	800144a <generateDispatcherMSG+0x182>


		case CORONA:
			if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4619      	mov	r1, r3
 800140a:	481d      	ldr	r0, [pc, #116]	@ (8001480 <generateDispatcherMSG+0x1b8>)
 800140c:	f003 fd58 	bl	8004ec0 <HAL_RNG_GenerateRandomNumber>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <generateDispatcherMSG+0x158>
				msgIdx = (uint8_t)(random_number % CORONA_STRINGS_LEN);
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	73bb      	strb	r3, [r7, #14]
			}
			strncpy(hDispPacket->message, vCORstrings[msgIdx], MAX_MSG_LENGTH - 1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1c58      	adds	r0, r3, #1
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	2264      	movs	r2, #100	@ 0x64
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <generateDispatcherMSG+0x1dc>)
 800142e:	4413      	add	r3, r2
 8001430:	2263      	movs	r2, #99	@ 0x63
 8001432:	4619      	mov	r1, r3
 8001434:	f009 fdc2 	bl	800afbc <strncpy>
			hDispPacket->message[MAX_MSG_LENGTH - 1] = '\0';
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
			hDispPacket->available_tasks_counter = &available_corona_tasks;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <generateDispatcherMSG+0x1e0>)
 8001444:	669a      	str	r2, [r3, #104]	@ 0x68
			break;
 8001446:	e000      	b.n	800144a <generateDispatcherMSG+0x182>


		default:
			break;
 8001448:	bf00      	nop
	}

	// Pick handling time
	if (HAL_RNG_GenerateRandomNumber(&hrng, &random_number) == HAL_OK) {
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4619      	mov	r1, r3
 8001450:	480b      	ldr	r0, [pc, #44]	@ (8001480 <generateDispatcherMSG+0x1b8>)
 8001452:	f003 fd35 	bl	8004ec0 <HAL_RNG_GenerateRandomNumber>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <generateDispatcherMSG+0x1b0>
		hDispPacket->timeToHandleInTicks = (uint16_t)(random_number % range) +
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	89ba      	ldrh	r2, [r7, #12]
 8001460:	fbb3 f1f2 	udiv	r1, r3, r2
 8001464:	fb01 f202 	mul.w	r2, r1, r2
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
													SHORTEST_TASK_DURATION_IN_TICKS;
	}
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200002c0 	.word	0x200002c0
 8001484:	0800d7f0 	.word	0x0800d7f0
 8001488:	20000000 	.word	0x20000000
 800148c:	cccccccd 	.word	0xcccccccd
 8001490:	0800db10 	.word	0x0800db10
 8001494:	20000001 	.word	0x20000001
 8001498:	38e38e39 	.word	0x38e38e39
 800149c:	0800dd04 	.word	0x0800dd04
 80014a0:	20000002 	.word	0x20000002
 80014a4:	0800e088 	.word	0x0800e088
 80014a8:	20000003 	.word	0x20000003

080014ac <error_handling>:
 *      Author: eyalk
 */

#include "error_handling.h"

void error_handling(char* err_msg) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if (err_msg != NULL) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01b      	beq.n	80014f2 <error_handling+0x46>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <error_handling+0x8c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f04f 31ff 	mov.w	r1, #4294967295
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 ff76 	bl	80073b4 <xQueueSemaphoreTake>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d12b      	bne.n	8001526 <error_handling+0x7a>
			printf("%s\r\n", err_msg);
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	481a      	ldr	r0, [pc, #104]	@ (800153c <error_handling+0x90>)
 80014d2:	f009 fbef 	bl	800acb4 <iprintf>
			fflush(stdout);
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <error_handling+0x94>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f009 fb13 	bl	800ab08 <fflush>
			xSemaphoreGive(printfMutex);
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <error_handling+0x8c>)
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	f005 fccc 	bl	8006e88 <xQueueGenericSend>
 80014f0:	e019      	b.n	8001526 <error_handling+0x7a>
		}
	} else {
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <error_handling+0x8c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f04f 31ff 	mov.w	r1, #4294967295
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 ff5a 	bl	80073b4 <xQueueSemaphoreTake>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10f      	bne.n	8001526 <error_handling+0x7a>
			printf("Unknown error");
 8001506:	480f      	ldr	r0, [pc, #60]	@ (8001544 <error_handling+0x98>)
 8001508:	f009 fbd4 	bl	800acb4 <iprintf>
			fflush(stdout);
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <error_handling+0x94>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f009 faf8 	bl	800ab08 <fflush>
			xSemaphoreGive(printfMutex);
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <error_handling+0x8c>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	f005 fcb1 	bl	8006e88 <xQueueGenericSend>
		}
	}
	printf("Program Terminated. \r\n");
 8001526:	4808      	ldr	r0, [pc, #32]	@ (8001548 <error_handling+0x9c>)
 8001528:	f009 fc2c 	bl	800ad84 <puts>
	Error_Handler();
 800152c:	f001 fb9e 	bl	8002c6c <Error_Handler>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000944 	.word	0x20000944
 800153c:	0800d28c 	.word	0x0800d28c
 8001540:	20000020 	.word	0x20000020
 8001544:	0800d294 	.word	0x0800d294
 8001548:	0800d2a4 	.word	0x0800d2a4

0800154c <initTasks>:
 * @brief Initialize and start the various system tasks.
 */

char logBuffer[MAX_MSG_LENGTH];

void initTasks(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
	/* AMBULANCE TASK INIT */
	if(initAmbTasks() == -1) {
 8001552:	f000 f983 	bl	800185c <initAmbTasks>
 8001556:	4603      	mov	r3, r0
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d102      	bne.n	8001564 <initTasks+0x18>
		error_handling("Ambulance tasks creation error!\r\n");
 800155e:	4834      	ldr	r0, [pc, #208]	@ (8001630 <initTasks+0xe4>)
 8001560:	f7ff ffa4 	bl	80014ac <error_handling>
	}

	/* POLICE TASK INIT */
	if(initPolTasks() == -1) {
 8001564:	f000 f9fa 	bl	800195c <initPolTasks>
 8001568:	4603      	mov	r3, r0
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d102      	bne.n	8001576 <initTasks+0x2a>
		error_handling("Police tasks creation error!\r\n");
 8001570:	4830      	ldr	r0, [pc, #192]	@ (8001634 <initTasks+0xe8>)
 8001572:	f7ff ff9b 	bl	80014ac <error_handling>
	}

	/* FIRE DEP TASK INIT */
	if(initFireTasks() == -1) {
 8001576:	f000 fa71 	bl	8001a5c <initFireTasks>
 800157a:	4603      	mov	r3, r0
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d102      	bne.n	8001588 <initTasks+0x3c>
		error_handling("Fire Dep tasks creation error!\r\n");
 8001582:	482d      	ldr	r0, [pc, #180]	@ (8001638 <initTasks+0xec>)
 8001584:	f7ff ff92 	bl	80014ac <error_handling>
	}

	/* CORONA TASK INIT */
	if(initCoronaTasks() == -1) {
 8001588:	f000 fae8 	bl	8001b5c <initCoronaTasks>
 800158c:	4603      	mov	r3, r0
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d102      	bne.n	800159a <initTasks+0x4e>
		error_handling("Corona tasks creation error!\r\n");
 8001594:	4829      	ldr	r0, [pc, #164]	@ (800163c <initTasks+0xf0>)
 8001596:	f7ff ff89 	bl	80014ac <error_handling>
	}

	vTaskDelay(100);
 800159a:	2064      	movs	r0, #100	@ 0x64
 800159c:	f006 fbb0 	bl	8007d00 <vTaskDelay>

	BaseType_t status = xTaskCreate((TaskFunction_t)vDispatcherCode,
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <initTasks+0xf4>)
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	232b      	movs	r3, #43	@ 0x2b
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015ae:	4925      	ldr	r1, [pc, #148]	@ (8001644 <initTasks+0xf8>)
 80015b0:	4825      	ldr	r0, [pc, #148]	@ (8001648 <initTasks+0xfc>)
 80015b2:	f006 fa45 	bl	8007a40 <xTaskCreate>
 80015b6:	6078      	str	r0, [r7, #4]
							"Dispatcher_Task",
							TASKS_MEMORY_SIZE,
							(void*)1,
							DISPATCHER_TASK_PRIORITY,
							&vDispatcherTask);
	if(status != pdTRUE) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d002      	beq.n	80015c4 <initTasks+0x78>
		error_handling("Dispatcher task creation error!\r\n");
 80015be:	4823      	ldr	r0, [pc, #140]	@ (800164c <initTasks+0x100>)
 80015c0:	f7ff ff74 	bl	80014ac <error_handling>
	}

	status = xTaskCreate((TaskFunction_t)tasksManagerTask,
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <initTasks+0x104>)
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2329      	movs	r3, #41	@ 0x29
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015d2:	4920      	ldr	r1, [pc, #128]	@ (8001654 <initTasks+0x108>)
 80015d4:	4820      	ldr	r0, [pc, #128]	@ (8001658 <initTasks+0x10c>)
 80015d6:	f006 fa33 	bl	8007a40 <xTaskCreate>
 80015da:	6078      	str	r0, [r7, #4]
						"tasks_manager",
						TASKS_MEMORY_SIZE,
						(void*)1,
						MANAGER_TASK_PRIORITY,
						&vTasksManagerTask);
	if(status != pdTRUE) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <initTasks+0x9c>
		error_handling("Task Manager task creation error!\r\n");
 80015e2:	481e      	ldr	r0, [pc, #120]	@ (800165c <initTasks+0x110>)
 80015e4:	f7ff ff62 	bl	80014ac <error_handling>
	}
	status = xTaskCreate((TaskFunction_t)getTasksStatus,
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <initTasks+0x114>)
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	232c      	movs	r3, #44	@ 0x2c
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015f6:	491b      	ldr	r1, [pc, #108]	@ (8001664 <initTasks+0x118>)
 80015f8:	481b      	ldr	r0, [pc, #108]	@ (8001668 <initTasks+0x11c>)
 80015fa:	f006 fa21 	bl	8007a40 <xTaskCreate>
 80015fe:	6078      	str	r0, [r7, #4]
						"get_data_task",
						TASKS_MEMORY_SIZE,
						(void*)1,
						GET_DATA_TASK_PRIORITY,
						&vGetDataTask);
	if(status != pdTRUE) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d002      	beq.n	800160c <initTasks+0xc0>
		error_handling("Get Data task creation error!\r\n");
 8001606:	4819      	ldr	r0, [pc, #100]	@ (800166c <initTasks+0x120>)
 8001608:	f7ff ff50 	bl	80014ac <error_handling>
	}


	if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800160c:	4818      	ldr	r0, [pc, #96]	@ (8001670 <initTasks+0x124>)
 800160e:	f003 fd6d 	bl	80050ec <HAL_TIM_Base_Start_IT>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <initTasks+0xd2>
		error_handling("Failed to start timer2!\r\n");
 8001618:	4816      	ldr	r0, [pc, #88]	@ (8001674 <initTasks+0x128>)
 800161a:	f7ff ff47 	bl	80014ac <error_handling>
	}

	for(;;) {
		uint32_t ulNotificationValue;
		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 800161e:	463a      	mov	r2, r7
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	2100      	movs	r1, #0
 8001626:	2000      	movs	r0, #0
 8001628:	f007 faec 	bl	8008c04 <xTaskNotifyWait>
	for(;;) {
 800162c:	bf00      	nop
 800162e:	e7f6      	b.n	800161e <initTasks+0xd2>
 8001630:	0800d2bc 	.word	0x0800d2bc
 8001634:	0800d2e0 	.word	0x0800d2e0
 8001638:	0800d300 	.word	0x0800d300
 800163c:	0800d324 	.word	0x0800d324
 8001640:	200008fc 	.word	0x200008fc
 8001644:	0800d344 	.word	0x0800d344
 8001648:	080011d1 	.word	0x080011d1
 800164c:	0800d354 	.word	0x0800d354
 8001650:	20000904 	.word	0x20000904
 8001654:	0800d378 	.word	0x0800d378
 8001658:	08001db1 	.word	0x08001db1
 800165c:	0800d388 	.word	0x0800d388
 8001660:	20000908 	.word	0x20000908
 8001664:	0800d3ac 	.word	0x0800d3ac
 8001668:	08000ed9 	.word	0x08000ed9
 800166c:	0800d3bc 	.word	0x0800d3bc
 8001670:	200002d0 	.word	0x200002d0
 8001674:	0800d3dc 	.word	0x0800d3dc

08001678 <initQueues>:
}

/**
 * @brief Initialize all required queues.
 */
void initQueues(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	qAmbulance = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 800167c:	2200      	movs	r2, #0
 800167e:	216c      	movs	r1, #108	@ 0x6c
 8001680:	200a      	movs	r0, #10
 8001682:	f005 fb68 	bl	8006d56 <xQueueGenericCreate>
 8001686:	4603      	mov	r3, r0
 8001688:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <initQueues+0xdc>)
 800168a:	6013      	str	r3, [r2, #0]
	if(qAmbulance == NULL) {
 800168c:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <initQueues+0xdc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <initQueues+0x22>
		error_handling("Ambulance queue creation failed!\r\n");
 8001694:	4830      	ldr	r0, [pc, #192]	@ (8001758 <initQueues+0xe0>)
 8001696:	f7ff ff09 	bl	80014ac <error_handling>
	}
	qPolice = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 800169a:	2200      	movs	r2, #0
 800169c:	216c      	movs	r1, #108	@ 0x6c
 800169e:	200a      	movs	r0, #10
 80016a0:	f005 fb59 	bl	8006d56 <xQueueGenericCreate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <initQueues+0xe4>)
 80016a8:	6013      	str	r3, [r2, #0]
	if(qPolice == NULL) {
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <initQueues+0xe4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <initQueues+0x40>
		error_handling("Police queue creation failed!\r\n");
 80016b2:	482b      	ldr	r0, [pc, #172]	@ (8001760 <initQueues+0xe8>)
 80016b4:	f7ff fefa 	bl	80014ac <error_handling>
	}
	qFire = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80016b8:	2200      	movs	r2, #0
 80016ba:	216c      	movs	r1, #108	@ 0x6c
 80016bc:	200a      	movs	r0, #10
 80016be:	f005 fb4a 	bl	8006d56 <xQueueGenericCreate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <initQueues+0xec>)
 80016c6:	6013      	str	r3, [r2, #0]
	if(qFire == NULL) {
 80016c8:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <initQueues+0xec>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <initQueues+0x5e>
		error_handling("Fire Dep queue creation failed!\r\n");
 80016d0:	4825      	ldr	r0, [pc, #148]	@ (8001768 <initQueues+0xf0>)
 80016d2:	f7ff feeb 	bl	80014ac <error_handling>
	}
	qCorona = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80016d6:	2200      	movs	r2, #0
 80016d8:	216c      	movs	r1, #108	@ 0x6c
 80016da:	200a      	movs	r0, #10
 80016dc:	f005 fb3b 	bl	8006d56 <xQueueGenericCreate>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a22      	ldr	r2, [pc, #136]	@ (800176c <initQueues+0xf4>)
 80016e4:	6013      	str	r3, [r2, #0]
	if(qCorona == NULL) {
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <initQueues+0xf4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <initQueues+0x7c>
		error_handling("Corona queue creation failed!\r\n");
 80016ee:	4820      	ldr	r0, [pc, #128]	@ (8001770 <initQueues+0xf8>)
 80016f0:	f7ff fedc 	bl	80014ac <error_handling>
	}
	qDispatcher = xQueueCreate(TASKS_QUEUE_SIZE, sizeof(DispatcherPacket));
 80016f4:	2200      	movs	r2, #0
 80016f6:	216c      	movs	r1, #108	@ 0x6c
 80016f8:	200a      	movs	r0, #10
 80016fa:	f005 fb2c 	bl	8006d56 <xQueueGenericCreate>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <initQueues+0xfc>)
 8001702:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <initQueues+0xfc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <initQueues+0x9a>
		error_handling("Dispatcher queue creation failed!\r\n");
 800170c:	481a      	ldr	r0, [pc, #104]	@ (8001778 <initQueues+0x100>)
 800170e:	f7ff fecd 	bl	80014ac <error_handling>
	}
	qLogger = xQueueCreate(LOGGER_QUEUE_SIZE, sizeof(char[MAX_MSG_LENGTH]));
 8001712:	2200      	movs	r2, #0
 8001714:	2164      	movs	r1, #100	@ 0x64
 8001716:	2019      	movs	r0, #25
 8001718:	f005 fb1d 	bl	8006d56 <xQueueGenericCreate>
 800171c:	4603      	mov	r3, r0
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <initQueues+0x104>)
 8001720:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <initQueues+0xfc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <initQueues+0xb8>
		error_handling("Logger queue creation failed!\r\n");
 800172a:	4815      	ldr	r0, [pc, #84]	@ (8001780 <initQueues+0x108>)
 800172c:	f7ff febe 	bl	80014ac <error_handling>
	}
	qBtnData = xQueueCreate(LOGGER_QUEUE_SIZE, sizeof(char[MAX_MSG_LENGTH]));
 8001730:	2200      	movs	r2, #0
 8001732:	2164      	movs	r1, #100	@ 0x64
 8001734:	2019      	movs	r0, #25
 8001736:	f005 fb0e 	bl	8006d56 <xQueueGenericCreate>
 800173a:	4603      	mov	r3, r0
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <initQueues+0x10c>)
 800173e:	6013      	str	r3, [r2, #0]
	if(qDispatcher == NULL) {
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <initQueues+0xfc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <initQueues+0xd6>
		error_handling("Logger queue creation failed!\r\n");
 8001748:	480d      	ldr	r0, [pc, #52]	@ (8001780 <initQueues+0x108>)
 800174a:	f7ff feaf 	bl	80014ac <error_handling>
	}
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000884 	.word	0x20000884
 8001758:	0800d3f8 	.word	0x0800d3f8
 800175c:	20000888 	.word	0x20000888
 8001760:	0800d41c 	.word	0x0800d41c
 8001764:	2000088c 	.word	0x2000088c
 8001768:	0800d43c 	.word	0x0800d43c
 800176c:	20000890 	.word	0x20000890
 8001770:	0800d460 	.word	0x0800d460
 8001774:	20000894 	.word	0x20000894
 8001778:	0800d480 	.word	0x0800d480
 800177c:	20000898 	.word	0x20000898
 8001780:	0800d4a4 	.word	0x0800d4a4
 8001784:	2000089c 	.word	0x2000089c

08001788 <initSemaphores>:


/**
 * @brief Initialize all required semaphores.
 */
void initSemaphores(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	printfMutex = xSemaphoreCreateMutex();
 800178c:	2001      	movs	r0, #1
 800178e:	f005 fb62 	bl	8006e56 <xQueueCreateMutex>
 8001792:	4603      	mov	r3, r0
 8001794:	4a25      	ldr	r2, [pc, #148]	@ (800182c <initSemaphores+0xa4>)
 8001796:	6013      	str	r3, [r2, #0]
	if(printfMutex == NULL) {
 8001798:	4b24      	ldr	r3, [pc, #144]	@ (800182c <initSemaphores+0xa4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <initSemaphores+0x1e>
		error_handling("Print mutex creation failed!\r\n");
 80017a0:	4823      	ldr	r0, [pc, #140]	@ (8001830 <initSemaphores+0xa8>)
 80017a2:	f7ff fe83 	bl	80014ac <error_handling>
	}
	xTasksDataMutex = xSemaphoreCreateMutex();
 80017a6:	2001      	movs	r0, #1
 80017a8:	f005 fb55 	bl	8006e56 <xQueueCreateMutex>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <initSemaphores+0xac>)
 80017b0:	6013      	str	r3, [r2, #0]
	if(xTasksDataMutex == NULL) {
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <initSemaphores+0xac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <initSemaphores+0x38>
		error_handling("Tasks data mutex creation failed!\r\n");
 80017ba:	481f      	ldr	r0, [pc, #124]	@ (8001838 <initSemaphores+0xb0>)
 80017bc:	f7ff fe76 	bl	80014ac <error_handling>
	}
	AmbTasksStatusMutex = xSemaphoreCreateMutex();
 80017c0:	2001      	movs	r0, #1
 80017c2:	f005 fb48 	bl	8006e56 <xQueueCreateMutex>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <initSemaphores+0xb4>)
 80017ca:	6013      	str	r3, [r2, #0]
	if(AmbTasksStatusMutex == NULL) {
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <initSemaphores+0xb4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <initSemaphores+0x52>
		error_handling("Ambulance tasks mutex creation failed!\r\n");
 80017d4:	481a      	ldr	r0, [pc, #104]	@ (8001840 <initSemaphores+0xb8>)
 80017d6:	f7ff fe69 	bl	80014ac <error_handling>
	}
	PolTasksStatusMutex = xSemaphoreCreateMutex();
 80017da:	2001      	movs	r0, #1
 80017dc:	f005 fb3b 	bl	8006e56 <xQueueCreateMutex>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a18      	ldr	r2, [pc, #96]	@ (8001844 <initSemaphores+0xbc>)
 80017e4:	6013      	str	r3, [r2, #0]
	if(PolTasksStatusMutex == NULL) {
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <initSemaphores+0xbc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <initSemaphores+0x6c>
		error_handling("Police tasks mutex creation failed!\r\n");
 80017ee:	4816      	ldr	r0, [pc, #88]	@ (8001848 <initSemaphores+0xc0>)
 80017f0:	f7ff fe5c 	bl	80014ac <error_handling>
	}
	FireTasksStatusMutex = xSemaphoreCreateMutex();
 80017f4:	2001      	movs	r0, #1
 80017f6:	f005 fb2e 	bl	8006e56 <xQueueCreateMutex>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a13      	ldr	r2, [pc, #76]	@ (800184c <initSemaphores+0xc4>)
 80017fe:	6013      	str	r3, [r2, #0]
	if(FireTasksStatusMutex == NULL) {
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <initSemaphores+0xc4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <initSemaphores+0x86>
		error_handling("Fire Dep tasks mutex creation failed!\r\n");
 8001808:	4811      	ldr	r0, [pc, #68]	@ (8001850 <initSemaphores+0xc8>)
 800180a:	f7ff fe4f 	bl	80014ac <error_handling>
	}
	CorTasksStatusMutex = xSemaphoreCreateMutex();
 800180e:	2001      	movs	r0, #1
 8001810:	f005 fb21 	bl	8006e56 <xQueueCreateMutex>
 8001814:	4603      	mov	r3, r0
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <initSemaphores+0xcc>)
 8001818:	6013      	str	r3, [r2, #0]
	if(CorTasksStatusMutex == NULL) {
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <initSemaphores+0xcc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <initSemaphores+0xa0>
		error_handling("Corona tasks mutex creation failed!\r\n");
 8001822:	480d      	ldr	r0, [pc, #52]	@ (8001858 <initSemaphores+0xd0>)
 8001824:	f7ff fe42 	bl	80014ac <error_handling>
	}
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000944 	.word	0x20000944
 8001830:	0800d4c4 	.word	0x0800d4c4
 8001834:	20000958 	.word	0x20000958
 8001838:	0800d4e4 	.word	0x0800d4e4
 800183c:	2000091c 	.word	0x2000091c
 8001840:	0800d508 	.word	0x0800d508
 8001844:	20000928 	.word	0x20000928
 8001848:	0800d534 	.word	0x0800d534
 800184c:	20000934 	.word	0x20000934
 8001850:	0800d55c 	.word	0x0800d55c
 8001854:	20000940 	.word	0x20000940
 8001858:	0800d584 	.word	0x0800d584

0800185c <initAmbTasks>:
/**
 * @brief Initialize and start Ambulance tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initAmbTasks(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af02      	add	r7, sp, #8
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	e046      	b.n	80018f6 <initAmbTasks+0x9a>
		taskInit_t* ambulance_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001868:	2014      	movs	r0, #20
 800186a:	f008 fa5d 	bl	8009d28 <pvPortMalloc>
 800186e:	61b8      	str	r0, [r7, #24]
		configASSERT(ambulance_taskInit != NULL);
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <initAmbTasks+0x36>
	__asm volatile
 8001876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800187a:	b672      	cpsid	i
 800187c:	f383 8811 	msr	BASEPRI, r3
 8001880:	f3bf 8f6f 	isb	sy
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	b662      	cpsie	i
 800188a:	613b      	str	r3, [r7, #16]
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	e7fd      	b.n	800188e <initAmbTasks+0x32>

		ambulance_taskInit->department = AMBULANCE;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
		ambulance_taskInit->taskIdentifier = i;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	705a      	strb	r2, [r3, #1]
		ambulance_taskInit->pQhandler = &qAmbulance;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	4a25      	ldr	r2, [pc, #148]	@ (8001938 <initAmbTasks+0xdc>)
 80018a4:	605a      	str	r2, [r3, #4]
		ambulance_taskInit->pSemHandler = &AmbTasksStatusMutex;
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4a24      	ldr	r2, [pc, #144]	@ (800193c <initAmbTasks+0xe0>)
 80018aa:	609a      	str	r2, [r3, #8]
		ambulance_taskInit->bTaskStatusArr = bAmbTasksStatus;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	4a24      	ldr	r2, [pc, #144]	@ (8001940 <initAmbTasks+0xe4>)
 80018b0:	60da      	str	r2, [r3, #12]
		ambulance_taskInit->numOfTasks = AMBULANCE_TASKS;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2208      	movs	r2, #8
 80018b6:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Ambulance_%d", i+1);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4638      	mov	r0, r7
 80018be:	4a21      	ldr	r2, [pc, #132]	@ (8001944 <initAmbTasks+0xe8>)
 80018c0:	2110      	movs	r1, #16
 80018c2:	f009 fa67 	bl	800ad94 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <initAmbTasks+0xec>)
 80018cc:	4413      	add	r3, r2
 80018ce:	4639      	mov	r1, r7
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	232a      	movs	r3, #42	@ 0x2a
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018dc:	481b      	ldr	r0, [pc, #108]	@ (800194c <initAmbTasks+0xf0>)
 80018de:	f006 f8af 	bl	8007a40 <xTaskCreate>
 80018e2:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*)ambulance_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vAmbulanceTasks[i]);
	 	if(status != pdTRUE) {
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d002      	beq.n	80018f0 <initAmbTasks+0x94>
	 		return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e01f      	b.n	8001930 <initAmbTasks+0xd4>
	for(int i=0; i<AMBULANCE_TASKS; i++) {
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b07      	cmp	r3, #7
 80018fa:	ddb5      	ble.n	8001868 <initAmbTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <initAmbTasks+0xf4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	4618      	mov	r0, r3
 8001906:	f005 fd55 	bl	80073b4 <xQueueSemaphoreTake>
 800190a:	4603      	mov	r3, r0
 800190c:	2b01      	cmp	r3, #1
 800190e:	d10e      	bne.n	800192e <initAmbTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH,"Started Ambulance Threads! \r\n");
 8001910:	4a10      	ldr	r2, [pc, #64]	@ (8001954 <initAmbTasks+0xf8>)
 8001912:	2164      	movs	r1, #100	@ 0x64
 8001914:	4810      	ldr	r0, [pc, #64]	@ (8001958 <initAmbTasks+0xfc>)
 8001916:	f009 fa3d 	bl	800ad94 <sniprintf>
		SendLogMessage(logBuffer);
 800191a:	480f      	ldr	r0, [pc, #60]	@ (8001958 <initAmbTasks+0xfc>)
 800191c:	f000 f9ce 	bl	8001cbc <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <initAmbTasks+0xf4>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	f005 faad 	bl	8006e88 <xQueueGenericSend>
	}
	return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000884 	.word	0x20000884
 800193c:	2000091c 	.word	0x2000091c
 8001940:	20000914 	.word	0x20000914
 8001944:	0800d5ac 	.word	0x0800d5ac
 8001948:	200008a0 	.word	0x200008a0
 800194c:	08001ff1 	.word	0x08001ff1
 8001950:	20000944 	.word	0x20000944
 8001954:	0800d5bc 	.word	0x0800d5bc
 8001958:	200001f8 	.word	0x200001f8

0800195c <initPolTasks>:
/**
 * @brief Initialize and start Police tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initPolTasks(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af02      	add	r7, sp, #8
	for(int i=0; i<POLICE_TASKS; i++) {
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e046      	b.n	80019f6 <initPolTasks+0x9a>
		taskInit_t* police_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001968:	2014      	movs	r0, #20
 800196a:	f008 f9dd 	bl	8009d28 <pvPortMalloc>
 800196e:	61b8      	str	r0, [r7, #24]
		configASSERT(police_taskInit != NULL);
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <initPolTasks+0x36>
	__asm volatile
 8001976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800197a:	b672      	cpsid	i
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	f3bf 8f4f 	dsb	sy
 8001988:	b662      	cpsie	i
 800198a:	613b      	str	r3, [r7, #16]
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <initPolTasks+0x32>

		police_taskInit->department = POLICE;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
		police_taskInit->taskIdentifier = i;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	705a      	strb	r2, [r3, #1]
		police_taskInit->pQhandler = &qPolice;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <initPolTasks+0xdc>)
 80019a4:	605a      	str	r2, [r3, #4]
		police_taskInit->pSemHandler = &PolTasksStatusMutex;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <initPolTasks+0xe0>)
 80019aa:	609a      	str	r2, [r3, #8]
		police_taskInit->bTaskStatusArr = bPolTasksStatus;
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <initPolTasks+0xe4>)
 80019b0:	60da      	str	r2, [r3, #12]
		police_taskInit->numOfTasks = POLICE_TASKS;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2205      	movs	r2, #5
 80019b6:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Police_%d", i+1);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4638      	mov	r0, r7
 80019be:	4a21      	ldr	r2, [pc, #132]	@ (8001a44 <initPolTasks+0xe8>)
 80019c0:	2110      	movs	r1, #16
 80019c2:	f009 f9e7 	bl	800ad94 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <initPolTasks+0xec>)
 80019cc:	4413      	add	r3, r2
 80019ce:	4639      	mov	r1, r7
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	232a      	movs	r3, #42	@ 0x2a
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019dc:	481b      	ldr	r0, [pc, #108]	@ (8001a4c <initPolTasks+0xf0>)
 80019de:	f006 f82f 	bl	8007a40 <xTaskCreate>
 80019e2:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) police_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vPoliceTasks[i]);
	 	if(status != pdTRUE) {
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d002      	beq.n	80019f0 <initPolTasks+0x94>
	 		return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e01f      	b.n	8001a30 <initPolTasks+0xd4>
	for(int i=0; i<POLICE_TASKS; i++) {
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	ddb5      	ble.n	8001968 <initPolTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80019fc:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <initPolTasks+0xf4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 fcd5 	bl	80073b4 <xQueueSemaphoreTake>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10e      	bne.n	8001a2e <initPolTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH, "Started Police Threads! \r\n");
 8001a10:	4a10      	ldr	r2, [pc, #64]	@ (8001a54 <initPolTasks+0xf8>)
 8001a12:	2164      	movs	r1, #100	@ 0x64
 8001a14:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <initPolTasks+0xfc>)
 8001a16:	f009 f9bd 	bl	800ad94 <sniprintf>
		SendLogMessage(logBuffer);
 8001a1a:	480f      	ldr	r0, [pc, #60]	@ (8001a58 <initPolTasks+0xfc>)
 8001a1c:	f000 f94e 	bl	8001cbc <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <initPolTasks+0xf4>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	f005 fa2d 	bl	8006e88 <xQueueGenericSend>
	}
	return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000888 	.word	0x20000888
 8001a3c:	20000928 	.word	0x20000928
 8001a40:	20000920 	.word	0x20000920
 8001a44:	0800d5dc 	.word	0x0800d5dc
 8001a48:	200008c0 	.word	0x200008c0
 8001a4c:	08001ff1 	.word	0x08001ff1
 8001a50:	20000944 	.word	0x20000944
 8001a54:	0800d5e8 	.word	0x0800d5e8
 8001a58:	200001f8 	.word	0x200001f8

08001a5c <initFireTasks>:
/**
 * @brief Initialize and start Fire Dep tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initFireTasks(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af02      	add	r7, sp, #8
	for(int i=0; i<FIRE_TASKS; i++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e046      	b.n	8001af6 <initFireTasks+0x9a>
		taskInit_t* fire_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001a68:	2014      	movs	r0, #20
 8001a6a:	f008 f95d 	bl	8009d28 <pvPortMalloc>
 8001a6e:	61b8      	str	r0, [r7, #24]
		configASSERT(fire_taskInit != NULL);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <initFireTasks+0x36>
	__asm volatile
 8001a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a7a:	b672      	cpsid	i
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	b662      	cpsie	i
 8001a8a:	613b      	str	r3, [r7, #16]
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	e7fd      	b.n	8001a8e <initFireTasks+0x32>

		fire_taskInit->department = FIRE;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2202      	movs	r2, #2
 8001a96:	701a      	strb	r2, [r3, #0]
		fire_taskInit->taskIdentifier = i;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	705a      	strb	r2, [r3, #1]
		fire_taskInit->pQhandler = &qFire;
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	4a25      	ldr	r2, [pc, #148]	@ (8001b38 <initFireTasks+0xdc>)
 8001aa4:	605a      	str	r2, [r3, #4]
		fire_taskInit->pSemHandler = &FireTasksStatusMutex;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4a24      	ldr	r2, [pc, #144]	@ (8001b3c <initFireTasks+0xe0>)
 8001aaa:	609a      	str	r2, [r3, #8]
		fire_taskInit->bTaskStatusArr = bFireTasksStatus;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4a24      	ldr	r2, [pc, #144]	@ (8001b40 <initFireTasks+0xe4>)
 8001ab0:	60da      	str	r2, [r3, #12]
		fire_taskInit->numOfTasks = FIRE_TASKS;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	741a      	strb	r2, [r3, #16]
		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Fire_%d", i+1);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4638      	mov	r0, r7
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <initFireTasks+0xe8>)
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	f009 f967 	bl	800ad94 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <initFireTasks+0xec>)
 8001acc:	4413      	add	r3, r2
 8001ace:	4639      	mov	r1, r7
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	232a      	movs	r3, #42	@ 0x2a
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001adc:	481b      	ldr	r0, [pc, #108]	@ (8001b4c <initFireTasks+0xf0>)
 8001ade:	f005 ffaf 	bl	8007a40 <xTaskCreate>
 8001ae2:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) fire_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vFireTasks[i]);
	 	if(status != pdTRUE) {
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d002      	beq.n	8001af0 <initFireTasks+0x94>
	 		return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e01f      	b.n	8001b30 <initFireTasks+0xd4>
	for(int i=0; i<FIRE_TASKS; i++) {
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	ddb5      	ble.n	8001a68 <initFireTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <initFireTasks+0xf4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 fc55 	bl	80073b4 <xQueueSemaphoreTake>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d10e      	bne.n	8001b2e <initFireTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH,"Started Fire Dep Threads! \r\n");
 8001b10:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <initFireTasks+0xf8>)
 8001b12:	2164      	movs	r1, #100	@ 0x64
 8001b14:	4810      	ldr	r0, [pc, #64]	@ (8001b58 <initFireTasks+0xfc>)
 8001b16:	f009 f93d 	bl	800ad94 <sniprintf>
		SendLogMessage(logBuffer);
 8001b1a:	480f      	ldr	r0, [pc, #60]	@ (8001b58 <initFireTasks+0xfc>)
 8001b1c:	f000 f8ce 	bl	8001cbc <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <initFireTasks+0xf4>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f005 f9ad 	bl	8006e88 <xQueueGenericSend>
	}
	return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000088c 	.word	0x2000088c
 8001b3c:	20000934 	.word	0x20000934
 8001b40:	2000092c 	.word	0x2000092c
 8001b44:	0800d604 	.word	0x0800d604
 8001b48:	200008d4 	.word	0x200008d4
 8001b4c:	08001ff1 	.word	0x08001ff1
 8001b50:	20000944 	.word	0x20000944
 8001b54:	0800d60c 	.word	0x0800d60c
 8001b58:	200001f8 	.word	0x200001f8

08001b5c <initCoronaTasks>:
/**
 * @brief Initialize and start Corona tasks.
 *
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t initCoronaTasks(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af02      	add	r7, sp, #8
	for(int i=0; i<CORONA_TASKS; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e046      	b.n	8001bf6 <initCoronaTasks+0x9a>
		taskInit_t* corona_taskInit = (taskInit_t*)pvPortMalloc(sizeof(taskInit_t));
 8001b68:	2014      	movs	r0, #20
 8001b6a:	f008 f8dd 	bl	8009d28 <pvPortMalloc>
 8001b6e:	61b8      	str	r0, [r7, #24]
		configASSERT(corona_taskInit != NULL);
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <initCoronaTasks+0x36>
	__asm volatile
 8001b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b7a:	b672      	cpsid	i
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	b662      	cpsie	i
 8001b8a:	613b      	str	r3, [r7, #16]
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <initCoronaTasks+0x32>

		corona_taskInit->department = CORONA;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2203      	movs	r2, #3
 8001b96:	701a      	strb	r2, [r3, #0]
		corona_taskInit->taskIdentifier = i;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	705a      	strb	r2, [r3, #1]
		corona_taskInit->pQhandler = &qCorona;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <initCoronaTasks+0xdc>)
 8001ba4:	605a      	str	r2, [r3, #4]
		corona_taskInit->pSemHandler = &CorTasksStatusMutex;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	@ (8001c3c <initCoronaTasks+0xe0>)
 8001baa:	609a      	str	r2, [r3, #8]
		corona_taskInit->bTaskStatusArr = bCorTasksStatus;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	4a24      	ldr	r2, [pc, #144]	@ (8001c40 <initCoronaTasks+0xe4>)
 8001bb0:	60da      	str	r2, [r3, #12]
		corona_taskInit->numOfTasks = CORONA_TASKS;
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	741a      	strb	r2, [r3, #16]

		BaseType_t status;
		char taskName[configMAX_TASK_NAME_LEN];
		snprintf(taskName, configMAX_TASK_NAME_LEN, "Corona_%d", i+1);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	4a21      	ldr	r2, [pc, #132]	@ (8001c44 <initCoronaTasks+0xe8>)
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	f009 f8e7 	bl	800ad94 <sniprintf>
	 	status = xTaskCreate((TaskFunction_t)vHandleCall,
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <initCoronaTasks+0xec>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	4639      	mov	r1, r7
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	232a      	movs	r3, #42	@ 0x2a
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bdc:	481b      	ldr	r0, [pc, #108]	@ (8001c4c <initCoronaTasks+0xf0>)
 8001bde:	f005 ff2f 	bl	8007a40 <xTaskCreate>
 8001be2:	6178      	str	r0, [r7, #20]
	 							taskName,
								TASKS_MEMORY_SIZE,
								(void*) corona_taskInit,
								HANDLE_TASKS_PRIORITY,
								&vCoronaTasks[i]);
	 	if(status != pdTRUE) {
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d002      	beq.n	8001bf0 <initCoronaTasks+0x94>
	 		return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e01f      	b.n	8001c30 <initCoronaTasks+0xd4>
	for(int i=0; i<CORONA_TASKS; i++) {
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	ddb5      	ble.n	8001b68 <initCoronaTasks+0xc>
	 	}
	}
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <initCoronaTasks+0xf4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fbd5 	bl	80073b4 <xQueueSemaphoreTake>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10e      	bne.n	8001c2e <initCoronaTasks+0xd2>
		snprintf(logBuffer, MAX_MSG_LENGTH,"Started Corona Threads! \r\n");
 8001c10:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <initCoronaTasks+0xf8>)
 8001c12:	2164      	movs	r1, #100	@ 0x64
 8001c14:	4810      	ldr	r0, [pc, #64]	@ (8001c58 <initCoronaTasks+0xfc>)
 8001c16:	f009 f8bd 	bl	800ad94 <sniprintf>
		SendLogMessage(logBuffer);
 8001c1a:	480f      	ldr	r0, [pc, #60]	@ (8001c58 <initCoronaTasks+0xfc>)
 8001c1c:	f000 f84e 	bl	8001cbc <SendLogMessage>
		xSemaphoreGive(printfMutex);
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <initCoronaTasks+0xf4>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f005 f92d 	bl	8006e88 <xQueueGenericSend>
	}
	return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000890 	.word	0x20000890
 8001c3c:	20000940 	.word	0x20000940
 8001c40:	20000938 	.word	0x20000938
 8001c44:	0800d62c 	.word	0x0800d62c
 8001c48:	200008e8 	.word	0x200008e8
 8001c4c:	08001ff1 	.word	0x08001ff1
 8001c50:	20000944 	.word	0x20000944
 8001c54:	0800d638 	.word	0x0800d638
 8001c58:	200001f8 	.word	0x200001f8

08001c5c <Logger_Print>:
 *      Author: eyalk
 */

#include "logger.h"

void Logger_Print(void *pvParameters) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b09c      	sub	sp, #112	@ 0x70
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    char msg[MAX_MSG_LENGTH];

    for (;;) {
        if (xQueueReceive(qLogger, &msg, portMAX_DELAY) == pdPASS) {
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <Logger_Print+0x58>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f107 010c 	add.w	r1, r7, #12
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 fab7 	bl	80071e4 <xQueueReceive>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d1f3      	bne.n	8001c64 <Logger_Print+0x8>
        	taskENTER_CRITICAL();
 8001c7c:	f007 ff24 	bl	8009ac8 <vPortEnterCritical>
            if(HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200) != HAL_OK) {
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fb13 	bl	80002b0 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	f107 010c 	add.w	r1, r7, #12
 8001c92:	23c8      	movs	r3, #200	@ 0xc8
 8001c94:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <Logger_Print+0x5c>)
 8001c96:	f003 fedb 	bl	8005a50 <HAL_UART_Transmit>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <Logger_Print+0x4a>
            	vTaskDelay(20);
 8001ca0:	2014      	movs	r0, #20
 8001ca2:	f006 f82d 	bl	8007d00 <vTaskDelay>
            }
            taskEXIT_CRITICAL();
 8001ca6:	f007 ff45 	bl	8009b34 <vPortExitCritical>
            vTaskDelay(pdMS_TO_TICKS(20));
 8001caa:	2014      	movs	r0, #20
 8001cac:	f006 f828 	bl	8007d00 <vTaskDelay>
        if (xQueueReceive(qLogger, &msg, portMAX_DELAY) == pdPASS) {
 8001cb0:	e7d8      	b.n	8001c64 <Logger_Print+0x8>
 8001cb2:	bf00      	nop
 8001cb4:	20000898 	.word	0x20000898
 8001cb8:	2000031c 	.word	0x2000031c

08001cbc <SendLogMessage>:
        }
    }
}


void SendLogMessage(const char *message) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09c      	sub	sp, #112	@ 0x70
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    char logMessage[MAX_MSG_LENGTH];

    // Ensure the message fits into the logMessage buffer
    strncpy(logMessage, message, MAX_MSG_LENGTH - 1);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2263      	movs	r2, #99	@ 0x63
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f009 f975 	bl	800afbc <strncpy>
    logMessage[MAX_MSG_LENGTH - 1] = '\0';  // Null-terminate to avoid overflow
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    if (xQueueSend(qLogger, logMessage, 100) != pdPASS) {
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <SendLogMessage+0x34>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f107 010c 	add.w	r1, r7, #12
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2264      	movs	r2, #100	@ 0x64
 8001ce4:	f005 f8d0 	bl	8006e88 <xQueueGenericSend>
        // Failed to send to queue
    }
}
 8001ce8:	bf00      	nop
 8001cea:	3770      	adds	r7, #112	@ 0x70
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000898 	.word	0x20000898

08001cf4 <SendDataMessage>:

void SendDataMessage(const char *message) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b09c      	sub	sp, #112	@ 0x70
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    char dataMessage[MAX_MSG_LENGTH];

    // Ensure the message fits into the logMessage buffer
    strncpy(dataMessage, message, MAX_MSG_LENGTH - 1);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2263      	movs	r2, #99	@ 0x63
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f009 f959 	bl	800afbc <strncpy>
    dataMessage[MAX_MSG_LENGTH - 1] = '\0';  // Null-terminate to avoid overflow
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    if (xQueueSend(qBtnData, dataMessage, 100) != pdPASS) {
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <SendDataMessage+0x34>)
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	f107 010c 	add.w	r1, r7, #12
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2264      	movs	r2, #100	@ 0x64
 8001d1c:	f005 f8b4 	bl	8006e88 <xQueueGenericSend>
        // Failed to send to queue
    }
}
 8001d20:	bf00      	nop
 8001d22:	3770      	adds	r7, #112	@ 0x70
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000089c 	.word	0x2000089c

08001d2c <Data_Print>:

void Data_Print(void *pvParameters) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b09e      	sub	sp, #120	@ 0x78
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    char msg[MAX_MSG_LENGTH];
    uint32_t ulNotificationValue;
    for (;;) {
    	UBaseType_t qItems = uxQueueMessagesWaiting(qBtnData);
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <Data_Print+0x7c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fc53 	bl	80075e4 <uxQueueMessagesWaiting>
 8001d3e:	6778      	str	r0, [r7, #116]	@ 0x74
    	if((uint32_t)qItems == 0) {
 8001d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <Data_Print+0x2c>
    		xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, portMAX_DELAY);
 8001d46:	f107 020c 	add.w	r2, r7, #12
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2000      	movs	r0, #0
 8001d52:	f006 ff57 	bl	8008c04 <xTaskNotifyWait>
 8001d56:	e7ed      	b.n	8001d34 <Data_Print+0x8>
    	} else {
    		if (xQueueReceive(qBtnData, &msg, portMAX_DELAY) == pdPASS) {
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <Data_Print+0x7c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f107 0110 	add.w	r1, r7, #16
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	4618      	mov	r0, r3
 8001d66:	f005 fa3d 	bl	80071e4 <xQueueReceive>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d1e1      	bne.n	8001d34 <Data_Print+0x8>
    			taskENTER_CRITICAL();
 8001d70:	f007 feaa 	bl	8009ac8 <vPortEnterCritical>
    			if(HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 200) != HAL_OK) {
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fa99 	bl	80002b0 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f107 0110 	add.w	r1, r7, #16
 8001d86:	23c8      	movs	r3, #200	@ 0xc8
 8001d88:	4808      	ldr	r0, [pc, #32]	@ (8001dac <Data_Print+0x80>)
 8001d8a:	f003 fe61 	bl	8005a50 <HAL_UART_Transmit>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <Data_Print+0x6e>
    				vTaskDelay(20);
 8001d94:	2014      	movs	r0, #20
 8001d96:	f005 ffb3 	bl	8007d00 <vTaskDelay>
    			}
    			taskEXIT_CRITICAL();
 8001d9a:	f007 fecb 	bl	8009b34 <vPortExitCritical>
    			vTaskDelay(pdMS_TO_TICKS(20));
 8001d9e:	2014      	movs	r0, #20
 8001da0:	f005 ffae 	bl	8007d00 <vTaskDelay>
    for (;;) {
 8001da4:	e7c6      	b.n	8001d34 <Data_Print+0x8>
 8001da6:	bf00      	nop
 8001da8:	2000089c 	.word	0x2000089c
 8001dac:	2000031c 	.word	0x2000031c

08001db0 <tasksManagerTask>:
 * This function continuously checks for available tasks in the queues for
 * Ambulance, Police, Fire Department, and Corona services. If there are
 * available tasks and the current running tasks are below the maximum allowed,
 * it assigns tasks to the appropriate handlers.
 */
void tasksManagerTask(void) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
	uint32_t ulNotificationValue;
	int8_t newTaskIndex;
	for(;;) {
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001db6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa0 <tasksManagerTask+0x1f0>)
 8001db8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbc:	2b13      	cmp	r3, #19
 8001dbe:	dd06      	ble.n	8001dce <tasksManagerTask+0x1e>
			xTaskNotifyWait(0x00, 0x00, &ulNotificationValue, TASK_MANAGER_TICKS_TO_WAIT);
 8001dc0:	463a      	mov	r2, r7
 8001dc2:	2328      	movs	r3, #40	@ 0x28
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f006 ff1c 	bl	8008c04 <xTaskNotifyWait>
 8001dcc:	e7f3      	b.n	8001db6 <tasksManagerTask+0x6>
		} else {
			// Check if there are Ambulance tasks to perform
			if(uxQueueMessagesWaiting( qAmbulance ) > 0) {
 8001dce:	4b75      	ldr	r3, [pc, #468]	@ (8001fa4 <tasksManagerTask+0x1f4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 fc06 	bl	80075e4 <uxQueueMessagesWaiting>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02f      	beq.n	8001e3e <tasksManagerTask+0x8e>
				newTaskIndex = getAvailableAmbulanceTask();
 8001dde:	f000 fa95 	bl	800230c <getAvailableAmbulanceTask>
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dee:	d026      	beq.n	8001e3e <tasksManagerTask+0x8e>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001df0:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 fadb 	bl	80073b4 <xQueueSemaphoreTake>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10e      	bne.n	8001e22 <tasksManagerTask+0x72>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Ambulance handler number %d is now active\r\n", newTaskIndex+1);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a68      	ldr	r2, [pc, #416]	@ (8001fac <tasksManagerTask+0x1fc>)
 8001e0c:	2164      	movs	r1, #100	@ 0x64
 8001e0e:	4868      	ldr	r0, [pc, #416]	@ (8001fb0 <tasksManagerTask+0x200>)
 8001e10:	f008 ffc0 	bl	800ad94 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001e14:	4b64      	ldr	r3, [pc, #400]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f005 f833 	bl	8006e88 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_amb_tasks);
 8001e22:	4864      	ldr	r0, [pc, #400]	@ (8001fb4 <tasksManagerTask+0x204>)
 8001e24:	f000 fa12 	bl	800224c <addCurrentRunningTask>
					xTaskNotify(vAmbulanceTasks[newTaskIndex], 0, eNoAction);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4a62      	ldr	r2, [pc, #392]	@ (8001fb8 <tasksManagerTask+0x208>)
 8001e2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	f006 ff44 	bl	8008cc4 <xTaskGenericNotify>
					continue;
 8001e3c:	e0af      	b.n	8001f9e <tasksManagerTask+0x1ee>
				}
			}
			// Check if there are Police tasks to perform
			if(uxQueueMessagesWaiting( qPolice ) > 0) {
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fbc <tasksManagerTask+0x20c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 fbce 	bl	80075e4 <uxQueueMessagesWaiting>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d02f      	beq.n	8001eae <tasksManagerTask+0xfe>
				newTaskIndex = getAvailablePoliceeTask();
 8001e4e:	f000 fa9d 	bl	800238c <getAvailablePoliceeTask>
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d026      	beq.n	8001eae <tasksManagerTask+0xfe>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001e60:	4b51      	ldr	r3, [pc, #324]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f005 faa3 	bl	80073b4 <xQueueSemaphoreTake>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d10e      	bne.n	8001e92 <tasksManagerTask+0xe2>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Police handler number %d is now active\r\n", newTaskIndex+1);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a51      	ldr	r2, [pc, #324]	@ (8001fc0 <tasksManagerTask+0x210>)
 8001e7c:	2164      	movs	r1, #100	@ 0x64
 8001e7e:	484c      	ldr	r0, [pc, #304]	@ (8001fb0 <tasksManagerTask+0x200>)
 8001e80:	f008 ff88 	bl	800ad94 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001e84:	4b48      	ldr	r3, [pc, #288]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f004 fffb 	bl	8006e88 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_police_tasks);
 8001e92:	484c      	ldr	r0, [pc, #304]	@ (8001fc4 <tasksManagerTask+0x214>)
 8001e94:	f000 f9da 	bl	800224c <addCurrentRunningTask>
					xTaskNotify(vPoliceTasks[newTaskIndex], 0, eNoAction);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc8 <tasksManagerTask+0x218>)
 8001e9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	f006 ff0c 	bl	8008cc4 <xTaskGenericNotify>
					continue;
 8001eac:	e077      	b.n	8001f9e <tasksManagerTask+0x1ee>
				}
			}

			// Check if there are Fire Dep tasks to perform
			if(uxQueueMessagesWaiting( qFire ) > 0) {
 8001eae:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <tasksManagerTask+0x21c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 fb96 	bl	80075e4 <uxQueueMessagesWaiting>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d02f      	beq.n	8001f1e <tasksManagerTask+0x16e>
				newTaskIndex = getAvailableFireTask();
 8001ebe:	f000 faa5 	bl	800240c <getAvailableFireTask>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ece:	d026      	beq.n	8001f1e <tasksManagerTask+0x16e>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001ed0:	4b35      	ldr	r3, [pc, #212]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f005 fa6b 	bl	80073b4 <xQueueSemaphoreTake>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10e      	bne.n	8001f02 <tasksManagerTask+0x152>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Fire dep handler number %d is now active\r\n", newTaskIndex+1);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a39      	ldr	r2, [pc, #228]	@ (8001fd0 <tasksManagerTask+0x220>)
 8001eec:	2164      	movs	r1, #100	@ 0x64
 8001eee:	4830      	ldr	r0, [pc, #192]	@ (8001fb0 <tasksManagerTask+0x200>)
 8001ef0:	f008 ff50 	bl	800ad94 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	f004 ffc3 	bl	8006e88 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_fire_tasks);
 8001f02:	4834      	ldr	r0, [pc, #208]	@ (8001fd4 <tasksManagerTask+0x224>)
 8001f04:	f000 f9a2 	bl	800224c <addCurrentRunningTask>
					xTaskNotify(vFireTasks[newTaskIndex], 0, eNoAction);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4a32      	ldr	r2, [pc, #200]	@ (8001fd8 <tasksManagerTask+0x228>)
 8001f0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f12:	2300      	movs	r3, #0
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	f006 fed4 	bl	8008cc4 <xTaskGenericNotify>
					continue;
 8001f1c:	e03f      	b.n	8001f9e <tasksManagerTask+0x1ee>
				}
			}

			// Check if there are Corona tasks to perform
			if(uxQueueMessagesWaiting( qCorona ) > 0) {
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <tasksManagerTask+0x22c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 fb5e 	bl	80075e4 <uxQueueMessagesWaiting>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d02f      	beq.n	8001f8e <tasksManagerTask+0x1de>
				newTaskIndex = getAvailableCoronaTask();
 8001f2e:	f000 faad 	bl	800248c <getAvailableCoronaTask>
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
				if(newTaskIndex != -1) {
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d026      	beq.n	8001f8e <tasksManagerTask+0x1de>
					if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 8001f40:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 fa33 	bl	80073b4 <xQueueSemaphoreTake>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10e      	bne.n	8001f72 <tasksManagerTask+0x1c2>
						snprintf(logInitBuffer, MAX_MSG_LENGTH,"Corona handler number %d is now active\r\n", newTaskIndex+1);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <tasksManagerTask+0x230>)
 8001f5c:	2164      	movs	r1, #100	@ 0x64
 8001f5e:	4814      	ldr	r0, [pc, #80]	@ (8001fb0 <tasksManagerTask+0x200>)
 8001f60:	f008 ff18 	bl	800ad94 <sniprintf>
						xSemaphoreGive(printfMutex);
 8001f64:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <tasksManagerTask+0x1f8>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f004 ff8b 	bl	8006e88 <xQueueGenericSend>
					}
					addCurrentRunningTask(&available_corona_tasks);
 8001f72:	481c      	ldr	r0, [pc, #112]	@ (8001fe4 <tasksManagerTask+0x234>)
 8001f74:	f000 f96a 	bl	800224c <addCurrentRunningTask>
					xTaskNotify(vCoronaTasks[newTaskIndex], 0, eNoAction);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <tasksManagerTask+0x238>)
 8001f7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f82:	2300      	movs	r3, #0
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	f006 fe9c 	bl	8008cc4 <xTaskGenericNotify>
					continue;
 8001f8c:	e007      	b.n	8001f9e <tasksManagerTask+0x1ee>
				}
			}
			portYIELD();
 8001f8e:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <tasksManagerTask+0x23c>)
 8001f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	f3bf 8f6f 	isb	sy
		if(current_running_tasks >= MAX_TOTAL_CONCURRENT_TASKS) {
 8001f9e:	e70a      	b.n	8001db6 <tasksManagerTask+0x6>
 8001fa0:	20000954 	.word	0x20000954
 8001fa4:	20000884 	.word	0x20000884
 8001fa8:	20000944 	.word	0x20000944
 8001fac:	0800d654 	.word	0x0800d654
 8001fb0:	2000025c 	.word	0x2000025c
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	200008a0 	.word	0x200008a0
 8001fbc:	20000888 	.word	0x20000888
 8001fc0:	0800d680 	.word	0x0800d680
 8001fc4:	20000001 	.word	0x20000001
 8001fc8:	200008c0 	.word	0x200008c0
 8001fcc:	2000088c 	.word	0x2000088c
 8001fd0:	0800d6ac 	.word	0x0800d6ac
 8001fd4:	20000002 	.word	0x20000002
 8001fd8:	200008d4 	.word	0x200008d4
 8001fdc:	20000890 	.word	0x20000890
 8001fe0:	0800d6d8 	.word	0x0800d6d8
 8001fe4:	20000003 	.word	0x20000003
 8001fe8:	200008e8 	.word	0x200008e8
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <vHandleCall>:
 * notifications indicating a new task to process, executes the task, and updates
 * the shared data with the results.
 *
 * @param pvParameters Pointer to the task initialization parameters.
 */
void vHandleCall(void* pvParameters) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0be      	sub	sp, #248	@ 0xf8
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifictionValue;
	TickType_t startTick, endTick, totalTicks;
	taskInit_t* pTaskInit = (taskInit_t*)pvParameters;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	DispatcherPacket new_packet = {0};
 8001ffe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002002:	226c      	movs	r2, #108	@ 0x6c
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f008 ffd0 	bl	800afac <memset>
	size_t max_message_length = MAX_MSG_LENGTH - 3;
 800200c:	2361      	movs	r3, #97	@ 0x61
 800200e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	char printMSG[100];
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 8002012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002016:	781b      	ldrb	r3, [r3, #0]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8002018:	2b00      	cmp	r3, #0
 800201a:	d016      	beq.n	800204a <vHandleCall+0x5a>
			,GET_ENUM_DEPARTMENT_STR(pTaskInit->department)
 800201c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00f      	beq.n	8002046 <vHandleCall+0x56>
 8002026:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d008      	beq.n	8002042 <vHandleCall+0x52>
 8002030:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d101      	bne.n	800203e <vHandleCall+0x4e>
 800203a:	4b75      	ldr	r3, [pc, #468]	@ (8002210 <vHandleCall+0x220>)
 800203c:	e006      	b.n	800204c <vHandleCall+0x5c>
 800203e:	4b75      	ldr	r3, [pc, #468]	@ (8002214 <vHandleCall+0x224>)
 8002040:	e004      	b.n	800204c <vHandleCall+0x5c>
 8002042:	4b75      	ldr	r3, [pc, #468]	@ (8002218 <vHandleCall+0x228>)
 8002044:	e002      	b.n	800204c <vHandleCall+0x5c>
 8002046:	4b75      	ldr	r3, [pc, #468]	@ (800221c <vHandleCall+0x22c>)
 8002048:	e000      	b.n	800204c <vHandleCall+0x5c>
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 800204a:	4b75      	ldr	r3, [pc, #468]	@ (8002220 <vHandleCall+0x230>)
			, (pTaskInit->taskIdentifier+1));
 800204c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002050:	7852      	ldrb	r2, [r2, #1]
	snprintf(printMSG, 100, "New %s task created! \r\nTask index is %d \r\n"
 8002052:	3201      	adds	r2, #1
 8002054:	f107 0008 	add.w	r0, r7, #8
 8002058:	9200      	str	r2, [sp, #0]
 800205a:	4a72      	ldr	r2, [pc, #456]	@ (8002224 <vHandleCall+0x234>)
 800205c:	2164      	movs	r1, #100	@ 0x64
 800205e:	f008 fe99 	bl	800ad94 <sniprintf>
	SendLogMessage(printMSG);
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe28 	bl	8001cbc <SendLogMessage>
	if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 800206c:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <vHandleCall+0x238>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	4618      	mov	r0, r3
 8002076:	f005 f99d 	bl	80073b4 <xQueueSemaphoreTake>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d10b      	bne.n	8002098 <vHandleCall+0xa8>
		SendLogMessage(printMSG);
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe19 	bl	8001cbc <SendLogMessage>
		xSemaphoreGive(printfMutex);
 800208a:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <vHandleCall+0x238>)
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	f004 fef8 	bl	8006e88 <xQueueGenericSend>
	}
	for(;;) {
		/* TODO: log a message that this task is created and it's waiting for a job */

		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 8002098:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	2100      	movs	r1, #0
 80020a2:	2000      	movs	r0, #0
 80020a4:	f006 fdae 	bl	8008c04 <xTaskNotifyWait>

		startTick = xTaskGetTickCount();
 80020a8:	f006 f8ac 	bl	8008204 <xTaskGetTickCount>
 80020ac:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

		if(!(xQueueReceive(*(pTaskInit->pQhandler), &new_packet, portMAX_DELAY) == pdTRUE)) {
 80020b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	4618      	mov	r0, r3
 80020c2:	f005 f88f 	bl	80071e4 <xQueueReceive>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 809e 	bne.w	800220a <vHandleCall+0x21a>
			continue;
		}

		// Wait for the job to get done.
		vTaskDelay(new_packet.timeToHandleInTicks);
 80020ce:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f005 fe14 	bl	8007d00 <vTaskDelay>
		if(xSemaphoreTake(printfMutex, portMAX_DELAY) == pdTRUE) {
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <vHandleCall+0x238>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	4618      	mov	r0, r3
 80020e2:	f005 f967 	bl	80073b4 <xQueueSemaphoreTake>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d11d      	bne.n	8002128 <vHandleCall+0x138>
			snprintf(logInitBuffer, MAX_MSG_LENGTH,"Handled task: ");
 80020ec:	4a4f      	ldr	r2, [pc, #316]	@ (800222c <vHandleCall+0x23c>)
 80020ee:	2164      	movs	r1, #100	@ 0x64
 80020f0:	484f      	ldr	r0, [pc, #316]	@ (8002230 <vHandleCall+0x240>)
 80020f2:	f008 fe4f 	bl	800ad94 <sniprintf>
			SendLogMessage(logInitBuffer);
 80020f6:	484e      	ldr	r0, [pc, #312]	@ (8002230 <vHandleCall+0x240>)
 80020f8:	f7ff fde0 	bl	8001cbc <SendLogMessage>
			snprintf(logInitBuffer, MAX_MSG_LENGTH, "%.*s \r\n", (int)max_message_length, new_packet.message);
 80020fc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002100:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002104:	3301      	adds	r3, #1
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <vHandleCall+0x244>)
 800210c:	2164      	movs	r1, #100	@ 0x64
 800210e:	4848      	ldr	r0, [pc, #288]	@ (8002230 <vHandleCall+0x240>)
 8002110:	f008 fe40 	bl	800ad94 <sniprintf>
			SendLogMessage(logInitBuffer);
 8002114:	4846      	ldr	r0, [pc, #280]	@ (8002230 <vHandleCall+0x240>)
 8002116:	f7ff fdd1 	bl	8001cbc <SendLogMessage>
			xSemaphoreGive(printfMutex);
 800211a:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <vHandleCall+0x238>)
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	f004 feb0 	bl	8006e88 <xQueueGenericSend>
		}

		// Update shared app data
		if(xTasksDataMutex != NULL) {
 8002128:	4b43      	ldr	r3, [pc, #268]	@ (8002238 <vHandleCall+0x248>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d040      	beq.n	80021b2 <vHandleCall+0x1c2>
			if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 8002130:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <vHandleCall+0x248>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	4618      	mov	r0, r3
 800213a:	f005 f93b 	bl	80073b4 <xQueueSemaphoreTake>
 800213e:	4603      	mov	r3, r0
 8002140:	2b01      	cmp	r3, #1
 8002142:	d136      	bne.n	80021b2 <vHandleCall+0x1c2>
				total_tasks_ran++;
 8002144:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <vHandleCall+0x24c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a3c      	ldr	r2, [pc, #240]	@ (800223c <vHandleCall+0x24c>)
 800214c:	6013      	str	r3, [r2, #0]
				endTick = xTaskGetTickCount();
 800214e:	f006 f859 	bl	8008204 <xTaskGetTickCount>
 8002152:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				totalTicks = endTick - startTick;
 8002156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800215a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				total_tasks_time += (float)totalTicks / configTICK_RATE_HZ;
 8002164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002170:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002240 <vHandleCall+0x250>
 8002174:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002178:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <vHandleCall+0x254>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	4b30      	ldr	r3, [pc, #192]	@ (8002244 <vHandleCall+0x254>)
 8002184:	edc3 7a00 	vstr	s15, [r3]
				average_task_time = (float)total_tasks_time/total_tasks_ran;
 8002188:	4b2e      	ldr	r3, [pc, #184]	@ (8002244 <vHandleCall+0x254>)
 800218a:	edd3 6a00 	vldr	s13, [r3]
 800218e:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <vHandleCall+0x24c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800219a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219e:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <vHandleCall+0x258>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]
				 * TODO: Calculating the average_task_time in this task is a waste
				 * 		 of resources. Data calculation should be done in its own
				 * 		 lower priority task and only run when printing of data
				 * 		 is required.
				 */
				xSemaphoreGive(xTasksDataMutex);
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <vHandleCall+0x248>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	f004 fe6b 	bl	8006e88 <xQueueGenericSend>
			}
		}
		// Indicate the task is now available for the next incoming packet.
		if(*pTaskInit->pSemHandler != NULL) {
 80021b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f43f af6c 	beq.w	8002098 <vHandleCall+0xa8>
			if(xSemaphoreTake(*(pTaskInit->pSemHandler), portMAX_DELAY) ==  pdTRUE) {
 80021c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	4618      	mov	r0, r3
 80021ce:	f005 f8f1 	bl	80073b4 <xQueueSemaphoreTake>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	f47f af5f 	bne.w	8002098 <vHandleCall+0xa8>
				removeCurrentRunningTask(new_packet.available_tasks_counter);
 80021da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f864 	bl	80022ac <removeCurrentRunningTask>
				pTaskInit->bTaskStatusArr[pTaskInit->taskIdentifier] = false;
 80021e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021ee:	7852      	ldrb	r2, [r2, #1]
 80021f0:	4413      	add	r3, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(*(pTaskInit->pSemHandler));
 80021f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	f004 fe40 	bl	8006e88 <xQueueGenericSend>
 8002208:	e746      	b.n	8002098 <vHandleCall+0xa8>
			continue;
 800220a:	bf00      	nop
		xTaskNotifyWait(0x00, 0x00, &ulNotifictionValue, portMAX_DELAY);
 800220c:	e744      	b.n	8002098 <vHandleCall+0xa8>
 800220e:	bf00      	nop
 8002210:	0800d704 	.word	0x0800d704
 8002214:	0800d70c 	.word	0x0800d70c
 8002218:	0800d718 	.word	0x0800d718
 800221c:	0800d724 	.word	0x0800d724
 8002220:	0800d72c 	.word	0x0800d72c
 8002224:	0800d738 	.word	0x0800d738
 8002228:	20000944 	.word	0x20000944
 800222c:	0800d764 	.word	0x0800d764
 8002230:	2000025c 	.word	0x2000025c
 8002234:	0800d774 	.word	0x0800d774
 8002238:	20000958 	.word	0x20000958
 800223c:	2000094c 	.word	0x2000094c
 8002240:	447a0000 	.word	0x447a0000
 8002244:	20000948 	.word	0x20000948
 8002248:	20000950 	.word	0x20000950

0800224c <addCurrentRunningTask>:
 * @brief Increments the count of currently running tasks.
 *
 * This function safely increments the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void addCurrentRunningTask(uint8_t* avail_dep_tasks) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	if(xTasksDataMutex != NULL) {
 8002254:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <addCurrentRunningTask+0x58>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01f      	beq.n	800229c <addCurrentRunningTask+0x50>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <addCurrentRunningTask+0x58>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	4618      	mov	r0, r3
 8002266:	f005 f8a5 	bl	80073b4 <xQueueSemaphoreTake>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d115      	bne.n	800229c <addCurrentRunningTask+0x50>
			current_running_tasks++;
 8002270:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <addCurrentRunningTask+0x5c>)
 8002272:	f993 3000 	ldrsb.w	r3, [r3]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	b25a      	sxtb	r2, r3
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <addCurrentRunningTask+0x5c>)
 8002280:	701a      	strb	r2, [r3, #0]
			*(avail_dep_tasks)-=1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <addCurrentRunningTask+0x58>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	f004 fdf6 	bl	8006e88 <xQueueGenericSend>
		}
	}
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000958 	.word	0x20000958
 80022a8:	20000954 	.word	0x20000954

080022ac <removeCurrentRunningTask>:
 * @brief Decrements the count of currently running tasks.
 *
 * This function safely decrements the count of currently running tasks
 * using a semaphore to ensure thread safety.
 */
static void removeCurrentRunningTask(uint8_t* avail_dep_tasks) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	if(xTasksDataMutex != NULL) {
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <removeCurrentRunningTask+0x58>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01f      	beq.n	80022fc <removeCurrentRunningTask+0x50>
		if(xSemaphoreTake(xTasksDataMutex, portMAX_DELAY) == pdTRUE) {
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <removeCurrentRunningTask+0x58>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 f875 	bl	80073b4 <xQueueSemaphoreTake>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d115      	bne.n	80022fc <removeCurrentRunningTask+0x50>
			current_running_tasks--;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <removeCurrentRunningTask+0x5c>)
 80022d2:	f993 3000 	ldrsb.w	r3, [r3]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	b25a      	sxtb	r2, r3
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <removeCurrentRunningTask+0x5c>)
 80022e0:	701a      	strb	r2, [r3, #0]
			*(avail_dep_tasks)+=1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(xTasksDataMutex);
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <removeCurrentRunningTask+0x58>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	f004 fdc6 	bl	8006e88 <xQueueGenericSend>
		}
	}
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000958 	.word	0x20000958
 8002308:	20000954 	.word	0x20000954

0800230c <getAvailableAmbulanceTask>:
 * This function iterates through the ambulance task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available ambulance tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableAmbulanceTask(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(AmbTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <getAvailableAmbulanceTask+0x78>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f04f 31ff 	mov.w	r1, #4294967295
 800231a:	4618      	mov	r0, r3
 800231c:	f005 f84a 	bl	80073b4 <xQueueSemaphoreTake>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	d127      	bne.n	8002376 <getAvailableAmbulanceTask+0x6a>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	e01a      	b.n	8002362 <getAvailableAmbulanceTask+0x56>
			if(bAmbTasksStatus[i] == false) {
 800232c:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <getAvailableAmbulanceTask+0x7c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f083 0301 	eor.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00e      	beq.n	800235c <getAvailableAmbulanceTask+0x50>
				bAmbTasksStatus[i] = true;
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <getAvailableAmbulanceTask+0x7c>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(AmbTasksStatusMutex);
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <getAvailableAmbulanceTask+0x78>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	2300      	movs	r3, #0
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	f004 fd99 	bl	8006e88 <xQueueGenericSend>
				return (int8_t)i;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b25b      	sxtb	r3, r3
 800235a:	e00e      	b.n	800237a <getAvailableAmbulanceTask+0x6e>
		for(int i = 0; i < AMBULANCE_TASKS; i++) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b07      	cmp	r3, #7
 8002366:	dde1      	ble.n	800232c <getAvailableAmbulanceTask+0x20>
			}
		}
		xSemaphoreGive(AmbTasksStatusMutex);
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <getAvailableAmbulanceTask+0x78>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	f004 fd89 	bl	8006e88 <xQueueGenericSend>
	}
	return -1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000091c 	.word	0x2000091c
 8002388:	20000914 	.word	0x20000914

0800238c <getAvailablePoliceeTask>:
 * This function iterates through the police task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available police tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailablePoliceeTask(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(PolTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <getAvailablePoliceeTask+0x78>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f04f 31ff 	mov.w	r1, #4294967295
 800239a:	4618      	mov	r0, r3
 800239c:	f005 f80a 	bl	80073b4 <xQueueSemaphoreTake>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d127      	bne.n	80023f6 <getAvailablePoliceeTask+0x6a>
		for(int i = 0; i < POLICE_TASKS; i++) {
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	e01a      	b.n	80023e2 <getAvailablePoliceeTask+0x56>
			if(bPolTasksStatus[i] == false) {
 80023ac:	4a16      	ldr	r2, [pc, #88]	@ (8002408 <getAvailablePoliceeTask+0x7c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f083 0301 	eor.w	r3, r3, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00e      	beq.n	80023dc <getAvailablePoliceeTask+0x50>
				bPolTasksStatus[i] = true;
 80023be:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <getAvailablePoliceeTask+0x7c>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(PolTasksStatusMutex);
 80023c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <getAvailablePoliceeTask+0x78>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	f004 fd59 	bl	8006e88 <xQueueGenericSend>
				return (int8_t)i;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	e00e      	b.n	80023fa <getAvailablePoliceeTask+0x6e>
		for(int i = 0; i < POLICE_TASKS; i++) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	dde1      	ble.n	80023ac <getAvailablePoliceeTask+0x20>
			}
		}
		xSemaphoreGive(PolTasksStatusMutex);
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <getAvailablePoliceeTask+0x78>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	2300      	movs	r3, #0
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	f004 fd49 	bl	8006e88 <xQueueGenericSend>
	}
	return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000928 	.word	0x20000928
 8002408:	20000920 	.word	0x20000920

0800240c <getAvailableFireTask>:
 * This function iterates through the fire department task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available fire department tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableFireTask(void) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(FireTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <getAvailableFireTask+0x78>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f04f 31ff 	mov.w	r1, #4294967295
 800241a:	4618      	mov	r0, r3
 800241c:	f004 ffca 	bl	80073b4 <xQueueSemaphoreTake>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d127      	bne.n	8002476 <getAvailableFireTask+0x6a>
		for(int i = 0; i < FIRE_TASKS; i++) {
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	e01a      	b.n	8002462 <getAvailableFireTask+0x56>
			if(bFireTasksStatus[i] == false) {
 800242c:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <getAvailableFireTask+0x7c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00e      	beq.n	800245c <getAvailableFireTask+0x50>
				bFireTasksStatus[i] = true;
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <getAvailableFireTask+0x7c>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(FireTasksStatusMutex);
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <getAvailableFireTask+0x78>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	f004 fd19 	bl	8006e88 <xQueueGenericSend>
				return (int8_t)i;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	b25b      	sxtb	r3, r3
 800245a:	e00e      	b.n	800247a <getAvailableFireTask+0x6e>
		for(int i = 0; i < FIRE_TASKS; i++) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3301      	adds	r3, #1
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b04      	cmp	r3, #4
 8002466:	dde1      	ble.n	800242c <getAvailableFireTask+0x20>
			}
		}
		xSemaphoreGive(FireTasksStatusMutex);
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <getAvailableFireTask+0x78>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	f004 fd09 	bl	8006e88 <xQueueGenericSend>
	}
	return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000934 	.word	0x20000934
 8002488:	2000092c 	.word	0x2000092c

0800248c <getAvailableCoronaTask>:
 * This function iterates through the corona task statuses to find the first available task.
 * It returns the index of the available task, or -1 if all tasks are busy.
 *
 * @return int8_t The index of the available corona tasks, or -1 if all tasks are busy.
 */
static int8_t getAvailableCoronaTask(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(CorTasksStatusMutex, portMAX_DELAY) == pdTRUE) {
 8002492:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <getAvailableCoronaTask+0x78>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f04f 31ff 	mov.w	r1, #4294967295
 800249a:	4618      	mov	r0, r3
 800249c:	f004 ff8a 	bl	80073b4 <xQueueSemaphoreTake>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d127      	bne.n	80024f6 <getAvailableCoronaTask+0x6a>
		for(int i = 0; i < CORONA_TASKS; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	e01a      	b.n	80024e2 <getAvailableCoronaTask+0x56>
			if(bCorTasksStatus[i] == false) {
 80024ac:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <getAvailableCoronaTask+0x7c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f083 0301 	eor.w	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00e      	beq.n	80024dc <getAvailableCoronaTask+0x50>
				bCorTasksStatus[i] = true;
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <getAvailableCoronaTask+0x7c>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(CorTasksStatusMutex);
 80024c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <getAvailableCoronaTask+0x78>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	f004 fcd9 	bl	8006e88 <xQueueGenericSend>
				return (int8_t)i;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	e00e      	b.n	80024fa <getAvailableCoronaTask+0x6e>
		for(int i = 0; i < CORONA_TASKS; i++) {
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3301      	adds	r3, #1
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	dde1      	ble.n	80024ac <getAvailableCoronaTask+0x20>
			}
		}
		xSemaphoreGive(CorTasksStatusMutex);
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <getAvailableCoronaTask+0x78>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	f004 fcc9 	bl	8006e88 <xQueueGenericSend>
	}
	return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000940 	.word	0x20000940
 8002508:	20000938 	.word	0x20000938

0800250c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002512:	f000 ff0c 	bl	800332e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002516:	f000 f88b 	bl	8002630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251a:	f000 f9b5 	bl	8002888 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800251e:	f000 f955 	bl	80027cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002522:	f000 f983 	bl	800282c <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8002526:	f000 f8ef 	bl	8002708 <MX_RNG_Init>
  MX_TIM2_Init();
 800252a:	f000 f901 	bl	8002730 <MX_TIM2_Init>

  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  initQueues();
 800252e:	f7ff f8a3 	bl	8001678 <initQueues>
  initSemaphores();
 8002532:	f7ff f929 	bl	8001788 <initSemaphores>
  xDebounceTimer = xTimerCreate("DebounceTimer",
 8002536:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <main+0xf4>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	2200      	movs	r2, #0
 800253e:	2132      	movs	r1, #50	@ 0x32
 8002540:	4830      	ldr	r0, [pc, #192]	@ (8002604 <main+0xf8>)
 8002542:	f006 fe15 	bl	8009170 <xTimerCreate>
 8002546:	4603      	mov	r3, r0
 8002548:	4a2f      	ldr	r2, [pc, #188]	@ (8002608 <main+0xfc>)
 800254a:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  	 pdMS_TO_TICKS(50),
								 pdFALSE,
								 (void*)0,
								 DebounceTimerCallback);
  BaseType_t status;
  status = xTaskCreate((TaskFunction_t)initTasks,
 800254c:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <main+0x100>)
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	2338      	movs	r3, #56	@ 0x38
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	2280      	movs	r2, #128	@ 0x80
 8002558:	492d      	ldr	r1, [pc, #180]	@ (8002610 <main+0x104>)
 800255a:	482e      	ldr	r0, [pc, #184]	@ (8002614 <main+0x108>)
 800255c:	f005 fa70 	bl	8007a40 <xTaskCreate>
 8002560:	60f8      	str	r0, [r7, #12]
		  "init_task",
		  configMINIMAL_STACK_SIZE,
		  (void*) 1,
		  configMAX_PRIORITIES,
		  &vInitTaskHandle);
  configASSERT(status ==  pdTRUE);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00d      	beq.n	8002584 <main+0x78>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800256c:	b672      	cpsid	i
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	b662      	cpsie	i
 800257c:	60bb      	str	r3, [r7, #8]
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <main+0x74>

  status = xTaskCreate((TaskFunction_t)Logger_Print,
 8002584:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <main+0x10c>)
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	232d      	movs	r3, #45	@ 0x2d
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002592:	4922      	ldr	r1, [pc, #136]	@ (800261c <main+0x110>)
 8002594:	4822      	ldr	r0, [pc, #136]	@ (8002620 <main+0x114>)
 8002596:	f005 fa53 	bl	8007a40 <xTaskCreate>
 800259a:	60f8      	str	r0, [r7, #12]
		  "Logger",
		  TASKS_MEMORY_SIZE,
		  (void*) 1,
		  LOGGER_TASK_PRIORITY,
		  &vLoggerTask);
  configASSERT(status ==  pdTRUE);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d00d      	beq.n	80025be <main+0xb2>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a6:	b672      	cpsid	i
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	b662      	cpsie	i
 80025b6:	607b      	str	r3, [r7, #4]
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	e7fd      	b.n	80025ba <main+0xae>

  status = xTaskCreate((TaskFunction_t)Data_Print,
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <main+0x118>)
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	232d      	movs	r3, #45	@ 0x2d
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025cc:	4916      	ldr	r1, [pc, #88]	@ (8002628 <main+0x11c>)
 80025ce:	4817      	ldr	r0, [pc, #92]	@ (800262c <main+0x120>)
 80025d0:	f005 fa36 	bl	8007a40 <xTaskCreate>
 80025d4:	60f8      	str	r0, [r7, #12]
		  "Print Data",
		  TASKS_MEMORY_SIZE,
		  (void*) 1,
		  LOGGER_TASK_PRIORITY,
		  &vBtnDataTask);
  configASSERT(status ==  pdTRUE);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d00d      	beq.n	80025f8 <main+0xec>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e0:	b672      	cpsid	i
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	b662      	cpsie	i
 80025f0:	603b      	str	r3, [r7, #0]
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <main+0xe8>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  vTaskStartScheduler();
 80025f8:	f005 fcc8 	bl	8007f8c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <main+0xf0>
 8002600:	08002a65 	.word	0x08002a65
 8002604:	0800d788 	.word	0x0800d788
 8002608:	20000960 	.word	0x20000960
 800260c:	20000900 	.word	0x20000900
 8002610:	0800d798 	.word	0x0800d798
 8002614:	0800154d 	.word	0x0800154d
 8002618:	2000090c 	.word	0x2000090c
 800261c:	0800d7a4 	.word	0x0800d7a4
 8002620:	08001c5d 	.word	0x08001c5d
 8002624:	20000910 	.word	0x20000910
 8002628:	0800d7ac 	.word	0x0800d7ac
 800262c:	08001d2d 	.word	0x08001d2d

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b094      	sub	sp, #80	@ 0x50
 8002634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002636:	f107 0320 	add.w	r3, r7, #32
 800263a:	2230      	movs	r2, #48	@ 0x30
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f008 fcb4 	bl	800afac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <SystemClock_Config+0xd0>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	4a29      	ldr	r2, [pc, #164]	@ (8002700 <SystemClock_Config+0xd0>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002660:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <SystemClock_Config+0xd0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <SystemClock_Config+0xd4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a24      	ldr	r2, [pc, #144]	@ (8002704 <SystemClock_Config+0xd4>)
 8002672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <SystemClock_Config+0xd4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002684:	2301      	movs	r3, #1
 8002686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800268c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800268e:	2302      	movs	r3, #2
 8002690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002698:	2304      	movs	r3, #4
 800269a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800269c:	23d8      	movs	r3, #216	@ 0xd8
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026a0:	2302      	movs	r3, #2
 80026a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80026a4:	2309      	movs	r3, #9
 80026a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a8:	f107 0320 	add.w	r3, r7, #32
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 faf1 	bl	8003c94 <HAL_RCC_OscConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80026b8:	f000 fad8 	bl	8002c6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026bc:	f001 fa9a 	bl	8003bf4 <HAL_PWREx_EnableOverDrive>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80026c6:	f000 fad1 	bl	8002c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ca:	230f      	movs	r3, #15
 80026cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ce:	2302      	movs	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	2107      	movs	r1, #7
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 fd77 	bl	80041dc <HAL_RCC_ClockConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80026f4:	f000 faba 	bl	8002c6c <Error_Handler>
  }
}
 80026f8:	bf00      	nop
 80026fa:	3750      	adds	r7, #80	@ 0x50
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	40007000 	.word	0x40007000

08002708 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <MX_RNG_Init+0x20>)
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <MX_RNG_Init+0x24>)
 8002710:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	@ (8002728 <MX_RNG_Init+0x20>)
 8002714:	f002 fbaa 	bl	8004e6c <HAL_RNG_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800271e:	f000 faa5 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200002c0 	.word	0x200002c0
 800272c:	50060800 	.word	0x50060800

08002730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0310 	add.w	r3, r7, #16
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <MX_TIM2_Init+0x98>)
 8002750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER_SET;
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <MX_TIM2_Init+0x98>)
 8002758:	f240 221b 	movw	r2, #539	@ 0x21b
 800275c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b1a      	ldr	r3, [pc, #104]	@ (80027c8 <MX_TIM2_Init+0x98>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD_SET;
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <MX_TIM2_Init+0x98>)
 8002766:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800276a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <MX_TIM2_Init+0x98>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <MX_TIM2_Init+0x98>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002778:	4813      	ldr	r0, [pc, #76]	@ (80027c8 <MX_TIM2_Init+0x98>)
 800277a:	f002 fc60 	bl	800503e <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002784:	f000 fa72 	bl	8002c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278e:	f107 0310 	add.w	r3, r7, #16
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <MX_TIM2_Init+0x98>)
 8002796:	f002 fe29 	bl	80053ec <HAL_TIM_ConfigClockSource>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80027a0:	f000 fa64 	bl	8002c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <MX_TIM2_Init+0x98>)
 80027b2:	f003 f853 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80027bc:	f000 fa56 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200002d0 	.word	0x200002d0

080027cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027d2:	4a15      	ldr	r2, [pc, #84]	@ (8002828 <MX_USART3_UART_Init+0x5c>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027d6:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 8002804:	2200      	movs	r2, #0
 8002806:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 800280a:	2200      	movs	r2, #0
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_USART3_UART_Init+0x58>)
 8002810:	f003 f8d0 	bl	80059b4 <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800281a:	f000 fa27 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000031c 	.word	0x2000031c
 8002828:	40004800 	.word	0x40004800

0800282c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002832:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800283a:	2206      	movs	r2, #6
 800283c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002840:	2202      	movs	r2, #2
 8002842:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002846:	2200      	movs	r2, #0
 8002848:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800284c:	2202      	movs	r2, #2
 800284e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002852:	2201      	movs	r2, #1
 8002854:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002856:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002858:	2200      	movs	r2, #0
 800285a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800285e:	2200      	movs	r2, #0
 8002860:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002862:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002864:	2201      	movs	r2, #1
 8002866:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002868:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800286a:	2200      	movs	r2, #0
 800286c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	@ (8002884 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002870:	f001 f886 	bl	8003980 <HAL_PCD_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800287a:	f000 f9f7 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200003a4 	.word	0x200003a4

08002888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	@ 0x30
 800288c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b69      	ldr	r3, [pc, #420]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b6:	4b66      	ldr	r3, [pc, #408]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a65      	ldr	r2, [pc, #404]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b63      	ldr	r3, [pc, #396]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b60      	ldr	r3, [pc, #384]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b5d      	ldr	r3, [pc, #372]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a59      	ldr	r2, [pc, #356]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b57      	ldr	r3, [pc, #348]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fe:	4b54      	ldr	r3, [pc, #336]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a53      	ldr	r2, [pc, #332]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b51      	ldr	r3, [pc, #324]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002916:	4b4e      	ldr	r3, [pc, #312]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 800291c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b4b      	ldr	r3, [pc, #300]	@ (8002a50 <MX_GPIO_Init+0x1c8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800292e:	2200      	movs	r2, #0
 8002930:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002934:	4847      	ldr	r0, [pc, #284]	@ (8002a54 <MX_GPIO_Init+0x1cc>)
 8002936:	f000 fff1 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2140      	movs	r1, #64	@ 0x40
 800293e:	4846      	ldr	r0, [pc, #280]	@ (8002a58 <MX_GPIO_Init+0x1d0>)
 8002940:	f000 ffec 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800294a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800294e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002954:	f107 031c 	add.w	r3, r7, #28
 8002958:	4619      	mov	r1, r3
 800295a:	4840      	ldr	r0, [pc, #256]	@ (8002a5c <MX_GPIO_Init+0x1d4>)
 800295c:	f000 fe1a 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002960:	2332      	movs	r3, #50	@ 0x32
 8002962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002970:	230b      	movs	r3, #11
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4838      	ldr	r0, [pc, #224]	@ (8002a5c <MX_GPIO_Init+0x1d4>)
 800297c:	f000 fe0a 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002980:	2386      	movs	r3, #134	@ 0x86
 8002982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002990:	230b      	movs	r3, #11
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4831      	ldr	r0, [pc, #196]	@ (8002a60 <MX_GPIO_Init+0x1d8>)
 800299c:	f000 fdfa 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80029a0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80029a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	2301      	movs	r3, #1
 80029a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	4826      	ldr	r0, [pc, #152]	@ (8002a54 <MX_GPIO_Init+0x1cc>)
 80029ba:	f000 fdeb 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80029be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029d0:	230b      	movs	r3, #11
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	4619      	mov	r1, r3
 80029da:	481e      	ldr	r0, [pc, #120]	@ (8002a54 <MX_GPIO_Init+0x1cc>)
 80029dc:	f000 fdda 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80029e0:	2340      	movs	r3, #64	@ 0x40
 80029e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4818      	ldr	r0, [pc, #96]	@ (8002a58 <MX_GPIO_Init+0x1d0>)
 80029f8:	f000 fdcc 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4812      	ldr	r0, [pc, #72]	@ (8002a58 <MX_GPIO_Init+0x1d0>)
 8002a10:	f000 fdc0 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002a14:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a26:	230b      	movs	r3, #11
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4809      	ldr	r0, [pc, #36]	@ (8002a58 <MX_GPIO_Init+0x1d0>)
 8002a32:	f000 fdaf 	bl	8003594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2105      	movs	r1, #5
 8002a3a:	2028      	movs	r0, #40	@ 0x28
 8002a3c:	f000 fd80 	bl	8003540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a40:	2028      	movs	r0, #40	@ 0x28
 8002a42:	f000 fd99 	bl	8003578 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	@ 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020000 	.word	0x40020000

08002a64 <DebounceTimerCallback>:

/**
 * @brief Timer callback function for debouncing.
 * @param xTimer: Timer handle
 */
void DebounceTimerCallback(TimerHandle_t xTimer) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
    // Check the pin state after debounce period
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a70:	4820      	ldr	r0, [pc, #128]	@ (8002af4 <DebounceTimerCallback+0x90>)
 8002a72:	f000 ff3b 	bl	80038ec <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d136      	bne.n	8002aea <DebounceTimerCallback+0x86>
        // Notify the task if the button is still pressed
    	if(btnFlag) {
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <DebounceTimerCallback+0x94>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <DebounceTimerCallback+0x34>
    		vTaskResume(vTasksManagerTask);
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <DebounceTimerCallback+0x98>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f005 fa1d 	bl	8007ec8 <vTaskResume>
    		vTaskResume(vLoggerTask);
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <DebounceTimerCallback+0x9c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f005 fa18 	bl	8007ec8 <vTaskResume>
    	}
    	btnFlag = !btnFlag;
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <DebounceTimerCallback+0x94>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <DebounceTimerCallback+0x94>)
 8002ab4:	701a      	strb	r2, [r3, #0]
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
    	xTaskNotifyFromISR(vGetDataTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <DebounceTimerCallback+0xa0>)
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f006 f9c3 	bl	8008e54 <xTaskGenericNotifyFromISR>
    	 if (xHigherPriorityTaskWoken == pdTRUE) {
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10a      	bne.n	8002aea <DebounceTimerCallback+0x86>
    		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <DebounceTimerCallback+0x86>
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <DebounceTimerCallback+0xa4>)
 8002adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	f3bf 8f6f 	isb	sy
    	 }
    }
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40020800 	.word	0x40020800
 8002af8:	2000095c 	.word	0x2000095c
 8002afc:	20000904 	.word	0x20000904
 8002b00:	2000090c 	.word	0x2000090c
 8002b04:	20000908 	.word	0x20000908
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1c:	d142      	bne.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x98>
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 8002b1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b22:	4822      	ldr	r0, [pc, #136]	@ (8002bac <HAL_GPIO_EXTI_Callback+0xa0>)
 8002b24:	f000 fee2 	bl	80038ec <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d13a      	bne.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x98>
			if(!btnTimerUsed) {
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d021      	beq.n	8002b80 <HAL_GPIO_EXTI_Callback+0x74>
				btnTimerUsed = !btnTimerUsed;
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002b58:	701a      	strb	r2, [r3, #0]
				if(xTimerStartFromISR(xDebounceTimer, 0)!=pdPASS) {
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b5c:	681c      	ldr	r4, [r3, #0]
 8002b5e:	f005 fb61 	bl	8008224 <xTaskGetTickCountFromISR>
 8002b62:	4602      	mov	r2, r0
 8002b64:	2300      	movs	r3, #0
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2106      	movs	r1, #6
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f006 fb5f 	bl	8009230 <xTimerGenericCommand>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d015      	beq.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x98>
					error_handling("Couldn't start button timer\r\n");
 8002b78:	480f      	ldr	r0, [pc, #60]	@ (8002bb8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002b7a:	f7fe fc97 	bl	80014ac <error_handling>
					error_handling("Couldn't start button timer\r\n");
				}
			}
		}
	}
}
 8002b7e:	e011      	b.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x98>
				if(xTimerResetFromISR(xDebounceTimer, 0)!=pdPASS) {
 8002b80:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002b82:	681c      	ldr	r4, [r3, #0]
 8002b84:	f005 fb4e 	bl	8008224 <xTaskGetTickCountFromISR>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2107      	movs	r1, #7
 8002b92:	4620      	mov	r0, r4
 8002b94:	f006 fb4c 	bl	8009230 <xTimerGenericCommand>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d002      	beq.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x98>
					error_handling("Couldn't start button timer\r\n");
 8002b9e:	4806      	ldr	r0, [pc, #24]	@ (8002bb8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002ba0:	f7fe fc84 	bl	80014ac <error_handling>
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	20000964 	.word	0x20000964
 8002bb4:	20000960 	.word	0x20000960
 8002bb8:	0800d7b8 	.word	0x0800d7b8

08002bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0a2      	sub	sp, #136	@ 0x88
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM2) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d13a      	bne.n	8002c44 <HAL_TIM_PeriodElapsedCallback+0x88>
		DispatcherPacket new_packet;
		generateDispatcherMSG(&new_packet);
 8002bce:	f107 030c 	add.w	r3, r7, #12
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fb78 	bl	80012c8 <generateDispatcherMSG>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	67bb      	str	r3, [r7, #120]	@ 0x78
		UBaseType_t qItems = uxQueueMessagesWaitingFromISR( qDispatcher );
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 fd20 	bl	8007626 <uxQueueMessagesWaitingFromISR>
 8002be6:	67f8      	str	r0, [r7, #124]	@ 0x7c
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(vDispatcherTask);
		if( qItems != TASKS_QUEUE_SIZE) {
 8002be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d012      	beq.n	8002c14 <HAL_TIM_PeriodElapsedCallback+0x58>
			xQueueSendFromISR(qDispatcher, &new_packet, NULL);
 8002bee:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	f107 010c 	add.w	r1, r7, #12
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f004 fa4f 	bl	800709c <xQueueGenericSendFromISR>
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	f006 f921 	bl	8008e54 <xTaskGenericNotifyFromISR>
 8002c12:	e009      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x6c>
			//printf("Added to queue! \r\n");
			//fflush(stdout);
		} else {
			xTaskNotifyFromISR(vDispatcherTask, 0x00, eNoAction, &xHigherPriorityTaskWoken);
 8002c14:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2200      	movs	r2, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	f006 f916 	bl	8008e54 <xTaskGenericNotifyFromISR>
		}
		if(xHigherPriorityTaskWoken == pdTRUE)
 8002c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d10a      	bne.n	8002c44 <HAL_TIM_PeriodElapsedCallback+0x88>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_TIM_PeriodElapsedCallback+0x88>
 8002c34:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_PeriodElapsedCallback+0x96>
    HAL_IncTick();
 8002c4e:	f000 fb7b 	bl	8003348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c52:	bf00      	nop
 8002c54:	3780      	adds	r7, #128	@ 0x80
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000894 	.word	0x20000894
 8002c60:	200008fc 	.word	0x200008fc
 8002c64:	e000ed04 	.word	0xe000ed04
 8002c68:	40001000 	.word	0x40001000

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
}
 8002c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  vTaskEndScheduler();
 8002c74:	f005 f9fe 	bl	8008074 <vTaskEndScheduler>
	  return;
 8002c78:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <HAL_MspInit+0x70>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	4a19      	ldr	r2, [pc, #100]	@ (8002cec <HAL_MspInit+0x70>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8e:	4b17      	ldr	r3, [pc, #92]	@ (8002cec <HAL_MspInit+0x70>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <HAL_MspInit+0x70>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <HAL_MspInit+0x70>)
 8002ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca6:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <HAL_MspInit+0x70>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	f06f 0001 	mvn.w	r0, #1
 8002cba:	f000 fc41 	bl	8003540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(RNG_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1  , 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	2050      	movs	r0, #80	@ 0x50
 8002cc4:	f000 fc3c 	bl	8003540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8002cc8:	2050      	movs	r0, #80	@ 0x50
 8002cca:	f000 fc55 	bl	8003578 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY -1, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2104      	movs	r1, #4
 8002cd2:	201c      	movs	r0, #28
 8002cd4:	f000 fc34 	bl	8003540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cd8:	201c      	movs	r0, #28
 8002cda:	f000 fc4d 	bl	8003578 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cde:	2003      	movs	r0, #3
 8002ce0:	f000 fc23 	bl	800352a <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0a4      	sub	sp, #144	@ 0x90
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	2284      	movs	r2, #132	@ 0x84
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f008 f953 	bl	800afac <memset>
  if(hrng->Instance==RNG)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <HAL_RNG_MspInit+0x70>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d123      	bne.n	8002d58 <HAL_RNG_MspInit+0x68>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d14:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 fcb3 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002d2c:	f7ff ff9e 	bl	8002c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <HAL_RNG_MspInit+0x74>)
 8002d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d34:	4a0b      	ldr	r2, [pc, #44]	@ (8002d64 <HAL_RNG_MspInit+0x74>)
 8002d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d3c:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_RNG_MspInit+0x74>)
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 15, 0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	210f      	movs	r1, #15
 8002d4c:	2050      	movs	r0, #80	@ 0x50
 8002d4e:	f000 fbf7 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8002d52:	2050      	movs	r0, #80	@ 0x50
 8002d54:	f000 fc10 	bl	8003578 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002d58:	bf00      	nop
 8002d5a:	3790      	adds	r7, #144	@ 0x90
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	50060800 	.word	0x50060800
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d78:	d113      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <HAL_TIM_Base_MspInit+0x44>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dac <HAL_TIM_Base_MspInit+0x44>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_TIM_Base_MspInit+0x44>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	210a      	movs	r1, #10
 8002d96:	201c      	movs	r0, #28
 8002d98:	f000 fbd2 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d9c:	201c      	movs	r0, #28
 8002d9e:	f000 fbeb 	bl	8003578 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0aa      	sub	sp, #168	@ 0xa8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	2284      	movs	r2, #132	@ 0x84
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f008 f8eb 	bl	800afac <memset>
  if(huart->Instance==USART3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a22      	ldr	r2, [pc, #136]	@ (8002e64 <HAL_UART_MspInit+0xb4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d13c      	bne.n	8002e5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fc4c 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002dfa:	f7ff ff37 	bl	8002c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0a:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e16:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4a13      	ldr	r2, [pc, #76]	@ (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e22:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e48:	2307      	movs	r3, #7
 8002e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	@ (8002e6c <HAL_UART_MspInit+0xbc>)
 8002e56:	f000 fb9d 	bl	8003594 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e5a:	bf00      	nop
 8002e5c:	37a8      	adds	r7, #168	@ 0xa8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40004800 	.word	0x40004800
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020c00 	.word	0x40020c00

08002e70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0ac      	sub	sp, #176	@ 0xb0
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	2284      	movs	r2, #132	@ 0x84
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f008 f88b 	bl	800afac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e9e:	d159      	bne.n	8002f54 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002ea0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ea4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fbeb 	bl	800468c <HAL_RCCEx_PeriphCLKConfig>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002ebc:	f7ff fed6 	bl	8002c6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4b26      	ldr	r3, [pc, #152]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	4a25      	ldr	r2, [pc, #148]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ecc:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ed8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eec:	2303      	movs	r3, #3
 8002eee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002efc:	4619      	mov	r1, r3
 8002efe:	4818      	ldr	r0, [pc, #96]	@ (8002f60 <HAL_PCD_MspInit+0xf0>)
 8002f00:	f000 fb48 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4810      	ldr	r0, [pc, #64]	@ (8002f60 <HAL_PCD_MspInit+0xf0>)
 8002f20:	f000 fb38 	bl	8003594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f24:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f28:	4a0c      	ldr	r2, [pc, #48]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002f30:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	4a06      	ldr	r2, [pc, #24]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f46:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_PCD_MspInit+0xec>)
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002f54:	bf00      	nop
 8002f56:	37b0      	adds	r7, #176	@ 0xb0
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000

08002f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	@ 0x38
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f74:	4b33      	ldr	r3, [pc, #204]	@ (8003044 <HAL_InitTick+0xe0>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	4a32      	ldr	r2, [pc, #200]	@ (8003044 <HAL_InitTick+0xe0>)
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f80:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <HAL_InitTick+0xe0>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f8c:	f107 0210 	add.w	r2, r7, #16
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 fb46 	bl	8004628 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f001 fb17 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8002faa:	6378      	str	r0, [r7, #52]	@ 0x34
 8002fac:	e004      	b.n	8002fb8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fae:	f001 fb13 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fba:	4a23      	ldr	r2, [pc, #140]	@ (8003048 <HAL_InitTick+0xe4>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fc6:	4b21      	ldr	r3, [pc, #132]	@ (800304c <HAL_InitTick+0xe8>)
 8002fc8:	4a21      	ldr	r2, [pc, #132]	@ (8003050 <HAL_InitTick+0xec>)
 8002fca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <HAL_InitTick+0xe8>)
 8002fce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002fd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <HAL_InitTick+0xe8>)
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	@ (800304c <HAL_InitTick+0xe8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <HAL_InitTick+0xe8>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe6:	4b19      	ldr	r3, [pc, #100]	@ (800304c <HAL_InitTick+0xe8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002fec:	4817      	ldr	r0, [pc, #92]	@ (800304c <HAL_InitTick+0xe8>)
 8002fee:	f002 f826 	bl	800503e <HAL_TIM_Base_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ff8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11b      	bne.n	8003038 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003000:	4812      	ldr	r0, [pc, #72]	@ (800304c <HAL_InitTick+0xe8>)
 8003002:	f002 f873 	bl	80050ec <HAL_TIM_Base_Start_IT>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800300c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003014:	2036      	movs	r0, #54	@ 0x36
 8003016:	f000 faaf 	bl	8003578 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d808      	bhi.n	8003032 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	2036      	movs	r0, #54	@ 0x36
 8003026:	f000 fa8b 	bl	8003540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800302a:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <HAL_InitTick+0xf0>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e002      	b.n	8003038 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003038:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800303c:	4618      	mov	r0, r3
 800303e:	3738      	adds	r7, #56	@ 0x38
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	431bde83 	.word	0x431bde83
 800304c:	20000968 	.word	0x20000968
 8003050:	40001000 	.word	0x40001000
 8003054:	20000008 	.word	0x20000008

08003058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800305c:	bf00      	nop
 800305e:	e7fd      	b.n	800305c <NMI_Handler+0x4>

08003060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <HardFault_Handler+0x4>

08003068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <MemManage_Handler+0x4>

08003070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <BusFault_Handler+0x4>

08003078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <UsageFault_Handler+0x4>

08003080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <TIM2_IRQHandler+0x10>)
 8003096:	f002 f8a1 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200002d0 	.word	0x200002d0

080030a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80030a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030ac:	f000 fc50 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <TIM6_DAC_IRQHandler+0x10>)
 80030ba:	f002 f88f 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000968 	.word	0x20000968

080030c8 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <RNG_IRQHandler+0x10>)
 80030ce:	f001 ff4d 	bl	8004f6c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200002c0 	.word	0x200002c0

080030dc <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 	*((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]

	// Enable TRCENA
	DEMCR |= (1<<24);
 80030e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003124 <ITM_SendChar+0x48>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003124 <ITM_SendChar+0x48>)
 80030ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f0:	6013      	str	r3, [r2, #0]

	//Enable Stimulus Port0
	ITM_TRACE_EN |= (1<<0);
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <ITM_SendChar+0x4c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <ITM_SendChar+0x4c>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit [0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 80030fe:	bf00      	nop
 8003100:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f8      	beq.n	8003100 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port0
	ITM_STIMULUS_PORT0 = ch;
 800310e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	6013      	str	r3, [r2, #0]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000edfc 	.word	0xe000edfc
 8003128:	e0000e00 	.word	0xe0000e00

0800312c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return 1;
 8003130:	2301      	movs	r3, #1
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_kill>:

int _kill(int pid, int sig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003146:	f007 ffed 	bl	800b124 <__errno>
 800314a:	4603      	mov	r3, r0
 800314c:	2216      	movs	r2, #22
 800314e:	601a      	str	r2, [r3, #0]
  return -1;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_exit>:

void _exit (int status)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ffe7 	bl	800313c <_kill>
  while (1) {}    /* Make sure we hang here */
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <_exit+0x12>

08003172 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e00a      	b.n	800319a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003184:	f3af 8000 	nop.w
 8003188:	4601      	mov	r1, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	60ba      	str	r2, [r7, #8]
 8003190:	b2ca      	uxtb	r2, r1
 8003192:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	dbf0      	blt.n	8003184 <_read+0x12>
  }

  return len;
 80031a2:	687b      	ldr	r3, [r7, #4]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e009      	b.n	80031d2 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	60ba      	str	r2, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff88 	bl	80030dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3301      	adds	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	dbf1      	blt.n	80031be <_write+0x12>
  }
  return len;
 80031da:	687b      	ldr	r3, [r7, #4]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_close>:

int _close(int file)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800320c:	605a      	str	r2, [r3, #4]
  return 0;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_isatty>:

int _isatty(int file)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003224:	2301      	movs	r3, #1
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <_sbrk+0x5c>)
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <_sbrk+0x60>)
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003260:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <_sbrk+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <_sbrk+0x64>)
 800326a:	4a12      	ldr	r2, [pc, #72]	@ (80032b4 <_sbrk+0x68>)
 800326c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800327c:	f007 ff52 	bl	800b124 <__errno>
 8003280:	4603      	mov	r3, r0
 8003282:	220c      	movs	r2, #12
 8003284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	e009      	b.n	80032a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800328c:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <_sbrk+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003292:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	4a05      	ldr	r2, [pc, #20]	@ (80032b0 <_sbrk+0x64>)
 800329c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20050000 	.word	0x20050000
 80032ac:	00000400 	.word	0x00000400
 80032b0:	200009b4 	.word	0x200009b4
 80032b4:	20019f88 	.word	0x20019f88

080032b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <SystemInit+0x20>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c2:	4a05      	ldr	r2, [pc, #20]	@ (80032d8 <SystemInit+0x20>)
 80032c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003314 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032e0:	f7ff ffea 	bl	80032b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e4:	480c      	ldr	r0, [pc, #48]	@ (8003318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032e6:	490d      	ldr	r1, [pc, #52]	@ (800331c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ec:	e002      	b.n	80032f4 <LoopCopyDataInit>

080032ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f2:	3304      	adds	r3, #4

080032f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f8:	d3f9      	bcc.n	80032ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003300:	e001      	b.n	8003306 <LoopFillZerobss>

08003302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003304:	3204      	adds	r2, #4

08003306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003308:	d3fb      	bcc.n	8003302 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800330a:	f007 ff11 	bl	800b130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7ff f8fd 	bl	800250c <main>
  bx  lr    
 8003312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003314:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003320:	0800e740 	.word	0x0800e740
  ldr r2, =_sbss
 8003324:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003328:	20019f84 	.word	0x20019f84

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>

0800332e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003332:	2003      	movs	r0, #3
 8003334:	f000 f8f9 	bl	800352a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003338:	200f      	movs	r0, #15
 800333a:	f7ff fe13 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800333e:	f7ff fc9d 	bl	8002c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800334c:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_IncTick+0x20>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_IncTick+0x24>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4413      	add	r3, r2
 8003358:	4a04      	ldr	r2, [pc, #16]	@ (800336c <HAL_IncTick+0x24>)
 800335a:	6013      	str	r3, [r2, #0]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	2000000c 	.word	0x2000000c
 800336c:	200009b8 	.word	0x200009b8

08003370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return uwTick;
 8003374:	4b03      	ldr	r3, [pc, #12]	@ (8003384 <HAL_GetTick+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200009b8 	.word	0x200009b8

08003388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff ffee 	bl	8003370 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d005      	beq.n	80033ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a2:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <HAL_Delay+0x44>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ae:	bf00      	nop
 80033b0:	f7ff ffde 	bl	8003370 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d8f7      	bhi.n	80033b0 <HAL_Delay+0x28>
  {
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2000000c 	.word	0x2000000c

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <__NVIC_SetPriorityGrouping+0x40>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <__NVIC_SetPriorityGrouping+0x40>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00
 8003414:	05fa0000 	.word	0x05fa0000

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	@ (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	@ (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	@ (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	@ 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff4c 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003552:	f7ff ff61 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003556:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	6978      	ldr	r0, [r7, #20]
 800355e:	f7ff ffb1 	bl	80034c4 <NVIC_EncodePriority>
 8003562:	4602      	mov	r2, r0
 8003564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff80 	bl	8003470 <__NVIC_SetPriority>
}
 8003570:	bf00      	nop
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff54 	bl	8003434 <__NVIC_EnableIRQ>
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e175      	b.n	80038a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 8164 	bne.w	800389a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d005      	beq.n	80035ea <HAL_GPIO_Init+0x56>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d130      	bne.n	800364c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003620:	2201      	movs	r2, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 0201 	and.w	r2, r3, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b03      	cmp	r3, #3
 8003656:	d017      	beq.n	8003688 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d123      	bne.n	80036dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80be 	beq.w	800389a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <HAL_GPIO_Init+0x324>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	4a65      	ldr	r2, [pc, #404]	@ (80038b8 <HAL_GPIO_Init+0x324>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003728:	6453      	str	r3, [r2, #68]	@ 0x44
 800372a:	4b63      	ldr	r3, [pc, #396]	@ (80038b8 <HAL_GPIO_Init+0x324>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003736:	4a61      	ldr	r2, [pc, #388]	@ (80038bc <HAL_GPIO_Init+0x328>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a58      	ldr	r2, [pc, #352]	@ (80038c0 <HAL_GPIO_Init+0x32c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d037      	beq.n	80037d2 <HAL_GPIO_Init+0x23e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a57      	ldr	r2, [pc, #348]	@ (80038c4 <HAL_GPIO_Init+0x330>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d031      	beq.n	80037ce <HAL_GPIO_Init+0x23a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a56      	ldr	r2, [pc, #344]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02b      	beq.n	80037ca <HAL_GPIO_Init+0x236>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a55      	ldr	r2, [pc, #340]	@ (80038cc <HAL_GPIO_Init+0x338>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d025      	beq.n	80037c6 <HAL_GPIO_Init+0x232>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a54      	ldr	r2, [pc, #336]	@ (80038d0 <HAL_GPIO_Init+0x33c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01f      	beq.n	80037c2 <HAL_GPIO_Init+0x22e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a53      	ldr	r2, [pc, #332]	@ (80038d4 <HAL_GPIO_Init+0x340>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d019      	beq.n	80037be <HAL_GPIO_Init+0x22a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	@ (80038d8 <HAL_GPIO_Init+0x344>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_Init+0x226>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a51      	ldr	r2, [pc, #324]	@ (80038dc <HAL_GPIO_Init+0x348>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00d      	beq.n	80037b6 <HAL_GPIO_Init+0x222>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a50      	ldr	r2, [pc, #320]	@ (80038e0 <HAL_GPIO_Init+0x34c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_Init+0x21e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4f      	ldr	r2, [pc, #316]	@ (80038e4 <HAL_GPIO_Init+0x350>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_GPIO_Init+0x21a>
 80037aa:	2309      	movs	r3, #9
 80037ac:	e012      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037ae:	230a      	movs	r3, #10
 80037b0:	e010      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037b2:	2308      	movs	r3, #8
 80037b4:	e00e      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037b6:	2307      	movs	r3, #7
 80037b8:	e00c      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037ba:	2306      	movs	r3, #6
 80037bc:	e00a      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037be:	2305      	movs	r3, #5
 80037c0:	e008      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037c2:	2304      	movs	r3, #4
 80037c4:	e006      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037c6:	2303      	movs	r3, #3
 80037c8:	e004      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e002      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_GPIO_Init+0x240>
 80037d2:	2300      	movs	r3, #0
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f002 0203 	and.w	r2, r2, #3
 80037da:	0092      	lsls	r2, r2, #2
 80037dc:	4093      	lsls	r3, r2
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037e4:	4935      	ldr	r1, [pc, #212]	@ (80038bc <HAL_GPIO_Init+0x328>)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3302      	adds	r3, #2
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f2:	4b3d      	ldr	r3, [pc, #244]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003816:	4a34      	ldr	r2, [pc, #208]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800381c:	4b32      	ldr	r3, [pc, #200]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003840:	4a29      	ldr	r2, [pc, #164]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003846:	4b28      	ldr	r3, [pc, #160]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386a:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003870:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <HAL_GPIO_Init+0x354>)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3301      	adds	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	f67f ae86 	bls.w	80035b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40020000 	.word	0x40020000
 80038c4:	40020400 	.word	0x40020400
 80038c8:	40020800 	.word	0x40020800
 80038cc:	40020c00 	.word	0x40020c00
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40021400 	.word	0x40021400
 80038d8:	40021800 	.word	0x40021800
 80038dc:	40021c00 	.word	0x40021c00
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40022400 	.word	0x40022400
 80038e8:	40013c00 	.word	0x40013c00

080038ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e001      	b.n	800390e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
 8003928:	4613      	mov	r3, r2
 800392a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800392c:	787b      	ldrb	r3, [r7, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003938:	e003      	b.n	8003942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	619a      	str	r2, [r3, #24]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003966:	4a05      	ldr	r2, [pc, #20]	@ (800397c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f8cc 	bl	8002b0c <HAL_GPIO_EXTI_Callback>
  }
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40013c00 	.word	0x40013c00

08003980 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e108      	b.n	8003ba4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fa5f 	bl	8002e70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2203      	movs	r2, #3
 80039b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c0:	d102      	bne.n	80039c8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fd51 	bl	8006474 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7c1a      	ldrb	r2, [r3, #16]
 80039da:	f88d 2000 	strb.w	r2, [sp]
 80039de:	3304      	adds	r3, #4
 80039e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e2:	f002 fced 	bl	80063c0 <USB_CoreInit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0d5      	b.n	8003ba4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fd49 	bl	8006496 <USB_SetCurrentMode>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0c6      	b.n	8003ba4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	e04a      	b.n	8003ab2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3315      	adds	r3, #21
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3314      	adds	r3, #20
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	b298      	uxth	r0, r3
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	332e      	adds	r3, #46	@ 0x2e
 8003a58:	4602      	mov	r2, r0
 8003a5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	331c      	adds	r3, #28
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3320      	adds	r3, #32
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3324      	adds	r3, #36	@ 0x24
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	791b      	ldrb	r3, [r3, #4]
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3af      	bcc.n	8003a1c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e044      	b.n	8003b4c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b1a:	7bfa      	ldrb	r2, [r7, #15]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	791b      	ldrb	r3, [r3, #4]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3b5      	bcc.n	8003ac2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7c1a      	ldrb	r2, [r3, #16]
 8003b5e:	f88d 2000 	strb.w	r2, [sp]
 8003b62:	3304      	adds	r3, #4
 8003b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b66:	f002 fce3 	bl	8006530 <USB_DevInit>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e013      	b.n	8003ba4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7b1b      	ldrb	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f80a 	bl	8003bac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f002 fe9e 	bl	80068de <USB_DevDisconnect>

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bda:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	10000003 	.word	0x10000003

08003bf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b23      	ldr	r3, [pc, #140]	@ (8003c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c0a:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c22:	f7ff fba5 	bl	8003370 <HAL_GetTick>
 8003c26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c28:	e009      	b.n	8003c3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c2a:	f7ff fba1 	bl	8003370 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c38:	d901      	bls.n	8003c3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e022      	b.n	8003c84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c3e:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4a:	d1ee      	bne.n	8003c2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c4c:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0f      	ldr	r2, [pc, #60]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c58:	f7ff fb8a 	bl	8003370 <HAL_GetTick>
 8003c5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c5e:	e009      	b.n	8003c74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c60:	f7ff fb86 	bl	8003370 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c6e:	d901      	bls.n	8003c74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e007      	b.n	8003c84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c74:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c80:	d1ee      	bne.n	8003c60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e291      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8087 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb8:	4b96      	ldr	r3, [pc, #600]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d00c      	beq.n	8003cde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc4:	4b93      	ldr	r3, [pc, #588]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d112      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cd0:	4b90      	ldr	r3, [pc, #576]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cde:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d06c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x130>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d168      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e26b      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCC_OscConfig+0x7a>
 8003d00:	4b84      	ldr	r3, [pc, #528]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a83      	ldr	r2, [pc, #524]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	e02e      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x9c>
 8003d16:	4b7f      	ldr	r3, [pc, #508]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7b      	ldr	r2, [pc, #492]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e01d      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0xc0>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b73      	ldr	r3, [pc, #460]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a72      	ldr	r2, [pc, #456]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0xd8>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b6c      	ldr	r3, [pc, #432]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d013      	beq.n	8003d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7ff fafc 	bl	8003370 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7ff faf8 	bl	8003370 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e21f      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0xe8>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7ff fae8 	bl	8003370 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7ff fae4 	bl	8003370 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	@ 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e20b      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	4b57      	ldr	r3, [pc, #348]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x110>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d069      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd2:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dde:	4b4d      	ldr	r3, [pc, #308]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d11c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x190>
 8003dea:	4b4a      	ldr	r3, [pc, #296]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d116      	bne.n	8003e24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e1df      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0e:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	493d      	ldr	r1, [pc, #244]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	e040      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d023      	beq.n	8003e74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2c:	4b39      	ldr	r3, [pc, #228]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a38      	ldr	r2, [pc, #224]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7ff fa9a 	bl	8003370 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e40:	f7ff fa96 	bl	8003370 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e1bd      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b30      	ldr	r3, [pc, #192]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4929      	ldr	r1, [pc, #164]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e018      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e74:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7ff fa76 	bl	8003370 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7ff fa72 	bl	8003370 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e199      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d038      	beq.n	8003f24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d019      	beq.n	8003eee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eba:	4b16      	ldr	r3, [pc, #88]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7ff fa53 	bl	8003370 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ece:	f7ff fa4f 	bl	8003370 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e176      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x23a>
 8003eec:	e01a      	b.n	8003f24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eee:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef2:	4a08      	ldr	r2, [pc, #32]	@ (8003f14 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7ff fa39 	bl	8003370 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f02:	f7ff fa35 	bl	8003370 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d903      	bls.n	8003f18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e15c      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
 8003f14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	4b91      	ldr	r3, [pc, #580]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ee      	bne.n	8003f02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a4 	beq.w	800407a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f32:	4b8b      	ldr	r3, [pc, #556]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3e:	4b88      	ldr	r3, [pc, #544]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	4a87      	ldr	r2, [pc, #540]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4a:	4b85      	ldr	r3, [pc, #532]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f5a:	4b82      	ldr	r3, [pc, #520]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f66:	4b7f      	ldr	r3, [pc, #508]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7ff f9fd 	bl	8003370 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7ff f9f9 	bl	8003370 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	@ 0x64
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e120      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8c:	4b75      	ldr	r3, [pc, #468]	@ (8004164 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x31a>
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fac:	e02d      	b.n	800400a <HAL_RCC_OscConfig+0x376>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x33c>
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a69      	ldr	r2, [pc, #420]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	4b67      	ldr	r3, [pc, #412]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a66      	ldr	r2, [pc, #408]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fce:	e01c      	b.n	800400a <HAL_RCC_OscConfig+0x376>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d10c      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x35e>
 8003fd8:	4b61      	ldr	r3, [pc, #388]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a60      	ldr	r2, [pc, #384]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff0:	e00b      	b.n	800400a <HAL_RCC_OscConfig+0x376>
 8003ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	4b58      	ldr	r3, [pc, #352]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a57      	ldr	r2, [pc, #348]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d015      	beq.n	800403e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004012:	f7ff f9ad 	bl	8003370 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7ff f9a9 	bl	8003370 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0ce      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	4b4b      	ldr	r3, [pc, #300]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ee      	beq.n	800401a <HAL_RCC_OscConfig+0x386>
 800403c:	e014      	b.n	8004068 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7ff f997 	bl	8003370 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7ff f993 	bl	8003370 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	4b40      	ldr	r3, [pc, #256]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ee      	bne.n	8004046 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d105      	bne.n	800407a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4b3c      	ldr	r3, [pc, #240]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	4a3b      	ldr	r2, [pc, #236]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004078:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80a4 	beq.w	80041cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004084:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d06b      	beq.n	8004168 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d149      	bne.n	800412c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a30      	ldr	r2, [pc, #192]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7ff f964 	bl	8003370 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7ff f960 	bl	8003370 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e087      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	4b28      	ldr	r3, [pc, #160]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	3b01      	subs	r3, #1
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	061b      	lsls	r3, r3, #24
 80040ee:	4313      	orrs	r3, r2
 80040f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7ff f934 	bl	8003370 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7ff f930 	bl	8003370 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e057      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x478>
 800412a:	e04f      	b.n	80041cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0b      	ldr	r2, [pc, #44]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7ff f91a 	bl	8003370 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7ff f916 	bl	8003370 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03d      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <HAL_RCC_OscConfig+0x4cc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x4ac>
 800415e:	e035      	b.n	80041cc <HAL_RCC_OscConfig+0x538>
 8004160:	40023800 	.word	0x40023800
 8004164:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x544>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d121      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d11a      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800419e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	3b01      	subs	r3, #1
 80041b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0d0      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b6a      	ldr	r3, [pc, #424]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d910      	bls.n	8004224 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b67      	ldr	r3, [pc, #412]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 020f 	bic.w	r2, r3, #15
 800420a:	4965      	ldr	r1, [pc, #404]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b63      	ldr	r3, [pc, #396]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0b8      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800423c:	4b59      	ldr	r3, [pc, #356]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a58      	ldr	r2, [pc, #352]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004246:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004254:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a52      	ldr	r2, [pc, #328]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800425e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004260:	4b50      	ldr	r3, [pc, #320]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	494d      	ldr	r1, [pc, #308]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d040      	beq.n	8004300 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b47      	ldr	r3, [pc, #284]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d115      	bne.n	80042be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	4b41      	ldr	r3, [pc, #260]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e073      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b3d      	ldr	r3, [pc, #244]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e06b      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042be:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4936      	ldr	r1, [pc, #216]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7ff f84e 	bl	8003370 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7ff f84a 	bl	8003370 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e053      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 020c 	and.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1eb      	bne.n	80042d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	4b27      	ldr	r3, [pc, #156]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d210      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b24      	ldr	r3, [pc, #144]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 020f 	bic.w	r2, r3, #15
 8004316:	4922      	ldr	r1, [pc, #136]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e032      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433c:	4b19      	ldr	r3, [pc, #100]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4916      	ldr	r1, [pc, #88]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800435a:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	490e      	ldr	r1, [pc, #56]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436e:	f000 f821 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004372:	4602      	mov	r2, r0
 8004374:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	490a      	ldr	r1, [pc, #40]	@ (80043a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004380:	5ccb      	ldrb	r3, [r1, r3]
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <HAL_RCC_ClockConfig+0x1d0>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_ClockConfig+0x1d4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fde8 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00
 80043a4:	40023800 	.word	0x40023800
 80043a8:	0800e3a8 	.word	0x0800e3a8
 80043ac:	20000004 	.word	0x20000004
 80043b0:	20000008 	.word	0x20000008

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b094      	sub	sp, #80	@ 0x50
 80043ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c0:	2300      	movs	r3, #0
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	2300      	movs	r3, #0
 80043c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043cc:	4b79      	ldr	r3, [pc, #484]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d00d      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x40>
 80043d8:	2b08      	cmp	r3, #8
 80043da:	f200 80e1 	bhi.w	80045a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x34>
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x3a>
 80043e6:	e0db      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b73      	ldr	r3, [pc, #460]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ec:	e0db      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ee:	4b73      	ldr	r3, [pc, #460]	@ (80045bc <HAL_RCC_GetSysClockFreq+0x208>)
 80043f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043f2:	e0d8      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f4:	4b6f      	ldr	r3, [pc, #444]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043fe:	4b6d      	ldr	r3, [pc, #436]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d063      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b6a      	ldr	r3, [pc, #424]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004414:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30
 800441e:	2300      	movs	r3, #0
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
 8004422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004426:	4622      	mov	r2, r4
 8004428:	462b      	mov	r3, r5
 800442a:	f04f 0000 	mov.w	r0, #0
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	0159      	lsls	r1, r3, #5
 8004434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004438:	0150      	lsls	r0, r2, #5
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4621      	mov	r1, r4
 8004440:	1a51      	subs	r1, r2, r1
 8004442:	6139      	str	r1, [r7, #16]
 8004444:	4629      	mov	r1, r5
 8004446:	eb63 0301 	sbc.w	r3, r3, r1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004458:	4659      	mov	r1, fp
 800445a:	018b      	lsls	r3, r1, #6
 800445c:	4651      	mov	r1, sl
 800445e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004462:	4651      	mov	r1, sl
 8004464:	018a      	lsls	r2, r1, #6
 8004466:	4651      	mov	r1, sl
 8004468:	ebb2 0801 	subs.w	r8, r2, r1
 800446c:	4659      	mov	r1, fp
 800446e:	eb63 0901 	sbc.w	r9, r3, r1
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800447e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004486:	4690      	mov	r8, r2
 8004488:	4699      	mov	r9, r3
 800448a:	4623      	mov	r3, r4
 800448c:	eb18 0303 	adds.w	r3, r8, r3
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	462b      	mov	r3, r5
 8004494:	eb49 0303 	adc.w	r3, r9, r3
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044a6:	4629      	mov	r1, r5
 80044a8:	024b      	lsls	r3, r1, #9
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044b0:	4621      	mov	r1, r4
 80044b2:	024a      	lsls	r2, r1, #9
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ba:	2200      	movs	r2, #0
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044c4:	f7fc fb90 	bl	8000be8 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d0:	e058      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b38      	ldr	r3, [pc, #224]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	4611      	mov	r1, r2
 80044de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	2300      	movs	r3, #0
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	f04f 0000 	mov.w	r0, #0
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	0159      	lsls	r1, r3, #5
 80044fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044fe:	0150      	lsls	r0, r2, #5
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4641      	mov	r1, r8
 8004506:	ebb2 0a01 	subs.w	sl, r2, r1
 800450a:	4649      	mov	r1, r9
 800450c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800451c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004524:	ebb2 040a 	subs.w	r4, r2, sl
 8004528:	eb63 050b 	sbc.w	r5, r3, fp
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	00eb      	lsls	r3, r5, #3
 8004536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453a:	00e2      	lsls	r2, r4, #3
 800453c:	4614      	mov	r4, r2
 800453e:	461d      	mov	r5, r3
 8004540:	4643      	mov	r3, r8
 8004542:	18e3      	adds	r3, r4, r3
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	464b      	mov	r3, r9
 8004548:	eb45 0303 	adc.w	r3, r5, r3
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455a:	4629      	mov	r1, r5
 800455c:	028b      	lsls	r3, r1, #10
 800455e:	4621      	mov	r1, r4
 8004560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004564:	4621      	mov	r1, r4
 8004566:	028a      	lsls	r2, r1, #10
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800456e:	2200      	movs	r2, #0
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	61fa      	str	r2, [r7, #28]
 8004574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004578:	f7fc fb36 	bl	8000be8 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4613      	mov	r3, r2
 8004582:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800459e:	e002      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3750      	adds	r7, #80	@ 0x50
 80045ac:	46bd      	mov	sp, r7
 80045ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	007a1200 	.word	0x007a1200

080045c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c4:	4b03      	ldr	r3, [pc, #12]	@ (80045d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000004 	.word	0x20000004

080045d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045dc:	f7ff fff0 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	@ (80045f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	@ (80045fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	0800e3b8 	.word	0x0800e3b8

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004604:	f7ff ffdc 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0b5b      	lsrs	r3, r3, #13
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	@ (8004624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	0800e3b8 	.word	0x0800e3b8

08004628 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	220f      	movs	r2, #15
 8004636:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004638:	4b12      	ldr	r3, [pc, #72]	@ (8004684 <HAL_RCC_GetClockConfig+0x5c>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0203 	and.w	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004644:	4b0f      	ldr	r3, [pc, #60]	@ (8004684 <HAL_RCC_GetClockConfig+0x5c>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004650:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <HAL_RCC_GetClockConfig+0x5c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800465c:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <HAL_RCC_GetClockConfig+0x5c>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800466a:	4b07      	ldr	r3, [pc, #28]	@ (8004688 <HAL_RCC_GetClockConfig+0x60>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	40023c00 	.word	0x40023c00

0800468c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d012      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046b4:	4b69      	ldr	r3, [pc, #420]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a68      	ldr	r2, [pc, #416]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	4b66      	ldr	r3, [pc, #408]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c8:	4964      	ldr	r1, [pc, #400]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d017      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e6:	4b5d      	ldr	r3, [pc, #372]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	4959      	ldr	r1, [pc, #356]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004704:	d101      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004712:	2301      	movs	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d017      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004722:	4b4e      	ldr	r3, [pc, #312]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004728:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	494a      	ldr	r1, [pc, #296]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004740:	d101      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 808b 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004770:	4b3a      	ldr	r3, [pc, #232]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	4a39      	ldr	r2, [pc, #228]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	@ 0x40
 800477c:	4b37      	ldr	r3, [pc, #220]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004788:	4b35      	ldr	r3, [pc, #212]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a34      	ldr	r2, [pc, #208]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004794:	f7fe fdec 	bl	8003370 <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fe fde8 	bl	8003370 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e357      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ba:	4b28      	ldr	r3, [pc, #160]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d035      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d02e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d8:	4b20      	ldr	r3, [pc, #128]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047fa:	4a18      	ldr	r2, [pc, #96]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004800:	4b16      	ldr	r3, [pc, #88]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d114      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fe fdb0 	bl	8003370 <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fe fdac 	bl	8003370 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e319      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004842:	d111      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004844:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004850:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004852:	400b      	ands	r3, r1
 8004854:	4901      	ldr	r1, [pc, #4]	@ (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	e00b      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
 8004864:	0ffffcff 	.word	0x0ffffcff
 8004868:	4baa      	ldr	r3, [pc, #680]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4aa9      	ldr	r2, [pc, #676]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004872:	6093      	str	r3, [r2, #8]
 8004874:	4ba7      	ldr	r3, [pc, #668]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004876:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	49a4      	ldr	r1, [pc, #656]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004882:	4313      	orrs	r3, r2
 8004884:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004892:	4ba0      	ldr	r3, [pc, #640]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004898:	4a9e      	ldr	r2, [pc, #632]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	4999      	ldr	r1, [pc, #612]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c0:	4b94      	ldr	r3, [pc, #592]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ce:	4991      	ldr	r1, [pc, #580]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048f0:	4988      	ldr	r1, [pc, #544]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004904:	4b83      	ldr	r3, [pc, #524]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004912:	4980      	ldr	r1, [pc, #512]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004926:	4b7b      	ldr	r3, [pc, #492]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004934:	4977      	ldr	r1, [pc, #476]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004948:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	496f      	ldr	r1, [pc, #444]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800496a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004970:	f023 020c 	bic.w	r2, r3, #12
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004978:	4966      	ldr	r1, [pc, #408]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800498c:	4b61      	ldr	r3, [pc, #388]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	495e      	ldr	r1, [pc, #376]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ae:	4b59      	ldr	r3, [pc, #356]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049bc:	4955      	ldr	r1, [pc, #340]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049d0:	4b50      	ldr	r3, [pc, #320]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	494d      	ldr	r1, [pc, #308]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049f2:	4b48      	ldr	r3, [pc, #288]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a00:	4944      	ldr	r1, [pc, #272]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a14:	4b3f      	ldr	r3, [pc, #252]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a22:	493c      	ldr	r1, [pc, #240]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a36:	4b37      	ldr	r3, [pc, #220]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a44:	4933      	ldr	r1, [pc, #204]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a58:	4b2e      	ldr	r3, [pc, #184]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a66:	492b      	ldr	r1, [pc, #172]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a7a:	4b26      	ldr	r3, [pc, #152]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a80:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a88:	4922      	ldr	r1, [pc, #136]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aba:	4b16      	ldr	r3, [pc, #88]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac8:	4912      	ldr	r1, [pc, #72]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004adc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aec:	4909      	ldr	r1, [pc, #36]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d006      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80d9 	beq.w	8004cba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b08:	4b02      	ldr	r3, [pc, #8]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a01      	ldr	r2, [pc, #4]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b12:	e001      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1a:	f7fe fc29 	bl	8003370 <HAL_GetTick>
 8004b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b20:	e008      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b22:	f7fe fc25 	bl	8003370 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	@ 0x64
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e194      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b34:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d021      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11d      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b54:	4b64      	ldr	r3, [pc, #400]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b62:	4b61      	ldr	r3, [pc, #388]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	019a      	lsls	r2, r3, #6
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	071b      	lsls	r3, r3, #28
 8004b88:	4957      	ldr	r1, [pc, #348]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d02e      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bba:	d129      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bca:	4b47      	ldr	r3, [pc, #284]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd0:	0f1b      	lsrs	r3, r3, #28
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	019a      	lsls	r2, r3, #6
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	431a      	orrs	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	071b      	lsls	r3, r3, #28
 8004bf0:	493d      	ldr	r1, [pc, #244]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bfe:	f023 021f 	bic.w	r2, r3, #31
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4937      	ldr	r1, [pc, #220]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01d      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c1c:	4b32      	ldr	r3, [pc, #200]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c22:	0e1b      	lsrs	r3, r3, #24
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c30:	0f1b      	lsrs	r3, r3, #28
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	019a      	lsls	r2, r3, #6
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	431a      	orrs	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	061b      	lsls	r3, r3, #24
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	071b      	lsls	r3, r3, #28
 8004c50:	4925      	ldr	r1, [pc, #148]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d011      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	019a      	lsls	r2, r3, #6
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	071b      	lsls	r3, r3, #28
 8004c80:	4919      	ldr	r1, [pc, #100]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c88:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fe fb6c 	bl	8003370 <HAL_GetTick>
 8004c98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c9c:	f7fe fb68 	bl	8003370 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	@ 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e0d7      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	f040 80cd 	bne.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cc2:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a08      	ldr	r2, [pc, #32]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fe fb4f 	bl	8003370 <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cd6:	f7fe fb4b 	bl	8003370 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b64      	cmp	r3, #100	@ 0x64
 8004ce2:	d903      	bls.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0ba      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ce8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cec:	4b5e      	ldr	r3, [pc, #376]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cf8:	d0ed      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d12a      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d22:	4b51      	ldr	r3, [pc, #324]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d30:	4b4d      	ldr	r3, [pc, #308]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	019a      	lsls	r2, r3, #6
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	041b      	lsls	r3, r3, #16
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	071b      	lsls	r3, r3, #28
 8004d56:	4944      	ldr	r1, [pc, #272]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d5e:	4b42      	ldr	r3, [pc, #264]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	493d      	ldr	r1, [pc, #244]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d8c:	d11d      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d8e:	4b36      	ldr	r3, [pc, #216]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d94:	0e1b      	lsrs	r3, r3, #24
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d9c:	4b32      	ldr	r3, [pc, #200]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	0f1b      	lsrs	r3, r3, #28
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	019a      	lsls	r2, r3, #6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	071b      	lsls	r3, r3, #28
 8004dc2:	4929      	ldr	r1, [pc, #164]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d028      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004de4:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	019a      	lsls	r2, r3, #6
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	4917      	ldr	r1, [pc, #92]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e12:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4911      	ldr	r1, [pc, #68]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e28:	4b0f      	ldr	r3, [pc, #60]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e34:	f7fe fa9c 	bl	8003370 <HAL_GetTick>
 8004e38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e3c:	f7fe fa98 	bl	8003370 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	@ 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e007      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e5a:	d1ef      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800

08004e6c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e01c      	b.n	8004eb8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	795b      	ldrb	r3, [r3, #5]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fd ff2e 	bl	8002cf0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0204 	orr.w	r2, r2, #4
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	791b      	ldrb	r3, [r3, #4]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_RNG_GenerateRandomNumber+0x1a>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e044      	b.n	8004f64 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	795b      	ldrb	r3, [r3, #5]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d133      	bne.n	8004f52 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef0:	f7fe fa3e 	bl	8003370 <HAL_GetTick>
 8004ef4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ef6:	e018      	b.n	8004f2a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ef8:	f7fe fa3a 	bl	8003370 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d911      	bls.n	8004f2a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d00a      	beq.n	8004f2a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e01c      	b.n	8004f64 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d1df      	bne.n	8004ef8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	715a      	strb	r2, [r3, #5]
 8004f50:	e004      	b.n	8004f5c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	711a      	strb	r2, [r3, #4]

  return status;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2210      	movs	r2, #16
 8004f8e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e009      	b.n	8004faa <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10b      	bne.n	8004fc8 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f837 	bl	800502a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8004fc4:	605a      	str	r2, [r3, #4]

    return;
 8004fc6:	e022      	b.n	800500e <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01d      	beq.n	800500e <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0208 	bic.w	r2, r2, #8
 8004fe0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	795b      	ldrb	r3, [r3, #5]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00b      	beq.n	800500e <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f803 	bl	8005014 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e049      	b.n	80050e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fd fe7f 	bl	8002d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 faa7 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e054      	b.n	80051ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a26      	ldr	r2, [pc, #152]	@ (80051bc <HAL_TIM_Base_Start_IT+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512e:	d01d      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a22      	ldr	r2, [pc, #136]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a21      	ldr	r2, [pc, #132]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_TIM_Base_Start_IT+0xe0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d115      	bne.n	8005198 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	4b19      	ldr	r3, [pc, #100]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xec>)
 8005174:	4013      	ands	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b06      	cmp	r3, #6
 800517c:	d015      	beq.n	80051aa <HAL_TIM_Base_Start_IT+0xbe>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005184:	d011      	beq.n	80051aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005196:	e008      	b.n	80051aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e000      	b.n	80051ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40001800 	.word	0x40001800
 80051d8:	00010007 	.word	0x00010007

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9b4 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9a6 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f9b7 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f98e 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f980 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f991 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f968 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f95a 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f96b 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f942 	bl	8005594 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f934 	bl	8005580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f945 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fd fc3a 	bl	8002bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d104      	bne.n	800535c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00c      	beq.n	8005376 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fb0b 	bl	800598c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00c      	beq.n	800539a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fb03 	bl	80059a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00c      	beq.n	80053be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8ff 	bl	80055bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00c      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0220 	mvn.w	r2, #32
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 facb 	bl	8005978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIM_ConfigClockSource+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e0b4      	b.n	8005572 <HAL_TIM_ConfigClockSource+0x186>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	4b56      	ldr	r3, [pc, #344]	@ (800557c <HAL_TIM_ConfigClockSource+0x190>)
 8005424:	4013      	ands	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800542e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005440:	d03e      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005446:	f200 8087 	bhi.w	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544e:	f000 8086 	beq.w	800555e <HAL_TIM_ConfigClockSource+0x172>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005456:	d87f      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b70      	cmp	r3, #112	@ 0x70
 800545a:	d01a      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0xa6>
 800545c:	2b70      	cmp	r3, #112	@ 0x70
 800545e:	d87b      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b60      	cmp	r3, #96	@ 0x60
 8005462:	d050      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x11a>
 8005464:	2b60      	cmp	r3, #96	@ 0x60
 8005466:	d877      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b50      	cmp	r3, #80	@ 0x50
 800546a:	d03c      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0xfa>
 800546c:	2b50      	cmp	r3, #80	@ 0x50
 800546e:	d873      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	d058      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x13a>
 8005474:	2b40      	cmp	r3, #64	@ 0x40
 8005476:	d86f      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b30      	cmp	r3, #48	@ 0x30
 800547a:	d064      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b30      	cmp	r3, #48	@ 0x30
 800547e:	d86b      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d060      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d867      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05c      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 800548c:	2b10      	cmp	r3, #16
 800548e:	d05a      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 8005490:	e062      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a2:	f000 f9bb 	bl	800581c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	609a      	str	r2, [r3, #8]
      break;
 80054be:	e04f      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d0:	f000 f9a4 	bl	800581c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054e2:	609a      	str	r2, [r3, #8]
      break;
 80054e4:	e03c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 f918 	bl	8005728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2150      	movs	r1, #80	@ 0x50
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f971 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8005504:	e02c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005512:	461a      	mov	r2, r3
 8005514:	f000 f937 	bl	8005786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2160      	movs	r1, #96	@ 0x60
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f961 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8005524:	e01c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	461a      	mov	r2, r3
 8005534:	f000 f8f8 	bl	8005728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2140      	movs	r1, #64	@ 0x40
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f951 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8005544:	e00c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f000 f948 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8005556:	e003      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      break;
 800555c:	e000      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800555e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	fffeff88 	.word	0xfffeff88

08005580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a46      	ldr	r2, [pc, #280]	@ (80056fc <TIM_Base_SetConfig+0x12c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ee:	d00f      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a43      	ldr	r2, [pc, #268]	@ (8005700 <TIM_Base_SetConfig+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a42      	ldr	r2, [pc, #264]	@ (8005704 <TIM_Base_SetConfig+0x134>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a41      	ldr	r2, [pc, #260]	@ (8005708 <TIM_Base_SetConfig+0x138>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a40      	ldr	r2, [pc, #256]	@ (800570c <TIM_Base_SetConfig+0x13c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d108      	bne.n	8005622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a35      	ldr	r2, [pc, #212]	@ (80056fc <TIM_Base_SetConfig+0x12c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d02b      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005630:	d027      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a32      	ldr	r2, [pc, #200]	@ (8005700 <TIM_Base_SetConfig+0x130>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d023      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a31      	ldr	r2, [pc, #196]	@ (8005704 <TIM_Base_SetConfig+0x134>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01f      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a30      	ldr	r2, [pc, #192]	@ (8005708 <TIM_Base_SetConfig+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01b      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2f      	ldr	r2, [pc, #188]	@ (800570c <TIM_Base_SetConfig+0x13c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d017      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2e      	ldr	r2, [pc, #184]	@ (8005710 <TIM_Base_SetConfig+0x140>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2d      	ldr	r2, [pc, #180]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2c      	ldr	r2, [pc, #176]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00b      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2b      	ldr	r2, [pc, #172]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2a      	ldr	r2, [pc, #168]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a29      	ldr	r2, [pc, #164]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d108      	bne.n	8005694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a10      	ldr	r2, [pc, #64]	@ (80056fc <TIM_Base_SetConfig+0x12c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0xf8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a12      	ldr	r2, [pc, #72]	@ (800570c <TIM_Base_SetConfig+0x13c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d103      	bne.n	80056d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	611a      	str	r2, [r3, #16]
  }
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800
 800571c:	40001800 	.word	0x40001800
 8005720:	40001c00 	.word	0x40001c00
 8005724:	40002000 	.word	0x40002000

08005728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 030a 	bic.w	r3, r3, #10
 8005764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005786:	b480      	push	{r7}
 8005788:	b087      	sub	sp, #28
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f023 0210 	bic.w	r2, r3, #16
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	031b      	lsls	r3, r3, #12
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	f043 0307 	orr.w	r3, r3, #7
 8005808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	431a      	orrs	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4313      	orrs	r3, r2
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e06d      	b.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a30      	ldr	r2, [pc, #192]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a20      	ldr	r2, [pc, #128]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e6:	d01d      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1a      	ldr	r2, [pc, #104]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10c      	bne.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800592a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4313      	orrs	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40010000 	.word	0x40010000
 8005960:	40010400 	.word	0x40010400
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40014000 	.word	0x40014000
 8005974:	40001800 	.word	0x40001800

08005978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e040      	b.n	8005a48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fd f9ea 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2224      	movs	r2, #36	@ 0x24
 80059e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb16 	bl	800602c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8af 	bl	8005b64 <UART_SetConfig>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e01b      	b.n	8005a48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fb95 	bl	8006170 <UART_CheckIdleState>
 8005a46:	4603      	mov	r3, r0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	@ 0x28
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d177      	bne.n	8005b58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Transmit+0x24>
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e070      	b.n	8005b5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2221      	movs	r2, #33	@ 0x21
 8005a84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a86:	f7fd fc73 	bl	8003370 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_UART_Transmit+0x68>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ac0:	e02f      	b.n	8005b22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fba6 	bl	800621e <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e03b      	b.n	8005b5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	3302      	adds	r3, #2
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e007      	b.n	8005b10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1c9      	bne.n	8005ac2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2140      	movs	r1, #64	@ 0x40
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fb70 	bl	800621e <UART_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d004      	beq.n	8005b4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e005      	b.n	8005b5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4ba6      	ldr	r3, [pc, #664]	@ (8005e28 <UART_SetConfig+0x2c4>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	6979      	ldr	r1, [r7, #20]
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a94      	ldr	r2, [pc, #592]	@ (8005e2c <UART_SetConfig+0x2c8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d120      	bne.n	8005c22 <UART_SetConfig+0xbe>
 8005be0:	4b93      	ldr	r3, [pc, #588]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d816      	bhi.n	8005c1c <UART_SetConfig+0xb8>
 8005bee:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <UART_SetConfig+0x90>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c0b 	.word	0x08005c0b
 8005c00:	08005c17 	.word	0x08005c17
 8005c04:	2301      	movs	r3, #1
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e150      	b.n	8005eac <UART_SetConfig+0x348>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e14d      	b.n	8005eac <UART_SetConfig+0x348>
 8005c10:	2304      	movs	r3, #4
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e14a      	b.n	8005eac <UART_SetConfig+0x348>
 8005c16:	2308      	movs	r3, #8
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e147      	b.n	8005eac <UART_SetConfig+0x348>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e144      	b.n	8005eac <UART_SetConfig+0x348>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a83      	ldr	r2, [pc, #524]	@ (8005e34 <UART_SetConfig+0x2d0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d132      	bne.n	8005c92 <UART_SetConfig+0x12e>
 8005c2c:	4b80      	ldr	r3, [pc, #512]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b0c      	cmp	r3, #12
 8005c38:	d828      	bhi.n	8005c8c <UART_SetConfig+0x128>
 8005c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <UART_SetConfig+0xdc>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c75 	.word	0x08005c75
 8005c44:	08005c8d 	.word	0x08005c8d
 8005c48:	08005c8d 	.word	0x08005c8d
 8005c4c:	08005c8d 	.word	0x08005c8d
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005c8d 	.word	0x08005c8d
 8005c58:	08005c8d 	.word	0x08005c8d
 8005c5c:	08005c8d 	.word	0x08005c8d
 8005c60:	08005c7b 	.word	0x08005c7b
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c8d 	.word	0x08005c8d
 8005c70:	08005c87 	.word	0x08005c87
 8005c74:	2300      	movs	r3, #0
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e118      	b.n	8005eac <UART_SetConfig+0x348>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e115      	b.n	8005eac <UART_SetConfig+0x348>
 8005c80:	2304      	movs	r3, #4
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e112      	b.n	8005eac <UART_SetConfig+0x348>
 8005c86:	2308      	movs	r3, #8
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e10f      	b.n	8005eac <UART_SetConfig+0x348>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e10c      	b.n	8005eac <UART_SetConfig+0x348>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a68      	ldr	r2, [pc, #416]	@ (8005e38 <UART_SetConfig+0x2d4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d120      	bne.n	8005cde <UART_SetConfig+0x17a>
 8005c9c:	4b64      	ldr	r3, [pc, #400]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ca6:	2b30      	cmp	r3, #48	@ 0x30
 8005ca8:	d013      	beq.n	8005cd2 <UART_SetConfig+0x16e>
 8005caa:	2b30      	cmp	r3, #48	@ 0x30
 8005cac:	d814      	bhi.n	8005cd8 <UART_SetConfig+0x174>
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d009      	beq.n	8005cc6 <UART_SetConfig+0x162>
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d810      	bhi.n	8005cd8 <UART_SetConfig+0x174>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <UART_SetConfig+0x15c>
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d006      	beq.n	8005ccc <UART_SetConfig+0x168>
 8005cbe:	e00b      	b.n	8005cd8 <UART_SetConfig+0x174>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e0f2      	b.n	8005eac <UART_SetConfig+0x348>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e0ef      	b.n	8005eac <UART_SetConfig+0x348>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e0ec      	b.n	8005eac <UART_SetConfig+0x348>
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e0e9      	b.n	8005eac <UART_SetConfig+0x348>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e0e6      	b.n	8005eac <UART_SetConfig+0x348>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a56      	ldr	r2, [pc, #344]	@ (8005e3c <UART_SetConfig+0x2d8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d120      	bne.n	8005d2a <UART_SetConfig+0x1c6>
 8005ce8:	4b51      	ldr	r3, [pc, #324]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf4:	d013      	beq.n	8005d1e <UART_SetConfig+0x1ba>
 8005cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf8:	d814      	bhi.n	8005d24 <UART_SetConfig+0x1c0>
 8005cfa:	2b80      	cmp	r3, #128	@ 0x80
 8005cfc:	d009      	beq.n	8005d12 <UART_SetConfig+0x1ae>
 8005cfe:	2b80      	cmp	r3, #128	@ 0x80
 8005d00:	d810      	bhi.n	8005d24 <UART_SetConfig+0x1c0>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <UART_SetConfig+0x1a8>
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	d006      	beq.n	8005d18 <UART_SetConfig+0x1b4>
 8005d0a:	e00b      	b.n	8005d24 <UART_SetConfig+0x1c0>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e0cc      	b.n	8005eac <UART_SetConfig+0x348>
 8005d12:	2302      	movs	r3, #2
 8005d14:	77fb      	strb	r3, [r7, #31]
 8005d16:	e0c9      	b.n	8005eac <UART_SetConfig+0x348>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	77fb      	strb	r3, [r7, #31]
 8005d1c:	e0c6      	b.n	8005eac <UART_SetConfig+0x348>
 8005d1e:	2308      	movs	r3, #8
 8005d20:	77fb      	strb	r3, [r7, #31]
 8005d22:	e0c3      	b.n	8005eac <UART_SetConfig+0x348>
 8005d24:	2310      	movs	r3, #16
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e0c0      	b.n	8005eac <UART_SetConfig+0x348>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a44      	ldr	r2, [pc, #272]	@ (8005e40 <UART_SetConfig+0x2dc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d125      	bne.n	8005d80 <UART_SetConfig+0x21c>
 8005d34:	4b3e      	ldr	r3, [pc, #248]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d42:	d017      	beq.n	8005d74 <UART_SetConfig+0x210>
 8005d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d48:	d817      	bhi.n	8005d7a <UART_SetConfig+0x216>
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d4e:	d00b      	beq.n	8005d68 <UART_SetConfig+0x204>
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d54:	d811      	bhi.n	8005d7a <UART_SetConfig+0x216>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <UART_SetConfig+0x1fe>
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d5e:	d006      	beq.n	8005d6e <UART_SetConfig+0x20a>
 8005d60:	e00b      	b.n	8005d7a <UART_SetConfig+0x216>
 8005d62:	2300      	movs	r3, #0
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e0a1      	b.n	8005eac <UART_SetConfig+0x348>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e09e      	b.n	8005eac <UART_SetConfig+0x348>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	e09b      	b.n	8005eac <UART_SetConfig+0x348>
 8005d74:	2308      	movs	r3, #8
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e098      	b.n	8005eac <UART_SetConfig+0x348>
 8005d7a:	2310      	movs	r3, #16
 8005d7c:	77fb      	strb	r3, [r7, #31]
 8005d7e:	e095      	b.n	8005eac <UART_SetConfig+0x348>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	@ (8005e44 <UART_SetConfig+0x2e0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d125      	bne.n	8005dd6 <UART_SetConfig+0x272>
 8005d8a:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d98:	d017      	beq.n	8005dca <UART_SetConfig+0x266>
 8005d9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d9e:	d817      	bhi.n	8005dd0 <UART_SetConfig+0x26c>
 8005da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005da4:	d00b      	beq.n	8005dbe <UART_SetConfig+0x25a>
 8005da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005daa:	d811      	bhi.n	8005dd0 <UART_SetConfig+0x26c>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <UART_SetConfig+0x254>
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db4:	d006      	beq.n	8005dc4 <UART_SetConfig+0x260>
 8005db6:	e00b      	b.n	8005dd0 <UART_SetConfig+0x26c>
 8005db8:	2301      	movs	r3, #1
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e076      	b.n	8005eac <UART_SetConfig+0x348>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e073      	b.n	8005eac <UART_SetConfig+0x348>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e070      	b.n	8005eac <UART_SetConfig+0x348>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e06d      	b.n	8005eac <UART_SetConfig+0x348>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e06a      	b.n	8005eac <UART_SetConfig+0x348>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <UART_SetConfig+0x2e4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d138      	bne.n	8005e52 <UART_SetConfig+0x2ee>
 8005de0:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <UART_SetConfig+0x2cc>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dee:	d017      	beq.n	8005e20 <UART_SetConfig+0x2bc>
 8005df0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005df4:	d82a      	bhi.n	8005e4c <UART_SetConfig+0x2e8>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	d00b      	beq.n	8005e14 <UART_SetConfig+0x2b0>
 8005dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e00:	d824      	bhi.n	8005e4c <UART_SetConfig+0x2e8>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <UART_SetConfig+0x2aa>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	d006      	beq.n	8005e1a <UART_SetConfig+0x2b6>
 8005e0c:	e01e      	b.n	8005e4c <UART_SetConfig+0x2e8>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e04b      	b.n	8005eac <UART_SetConfig+0x348>
 8005e14:	2302      	movs	r3, #2
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e048      	b.n	8005eac <UART_SetConfig+0x348>
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e045      	b.n	8005eac <UART_SetConfig+0x348>
 8005e20:	2308      	movs	r3, #8
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e042      	b.n	8005eac <UART_SetConfig+0x348>
 8005e26:	bf00      	nop
 8005e28:	efff69f3 	.word	0xefff69f3
 8005e2c:	40011000 	.word	0x40011000
 8005e30:	40023800 	.word	0x40023800
 8005e34:	40004400 	.word	0x40004400
 8005e38:	40004800 	.word	0x40004800
 8005e3c:	40004c00 	.word	0x40004c00
 8005e40:	40005000 	.word	0x40005000
 8005e44:	40011400 	.word	0x40011400
 8005e48:	40007800 	.word	0x40007800
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e02c      	b.n	8005eac <UART_SetConfig+0x348>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a72      	ldr	r2, [pc, #456]	@ (8006020 <UART_SetConfig+0x4bc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d125      	bne.n	8005ea8 <UART_SetConfig+0x344>
 8005e5c:	4b71      	ldr	r3, [pc, #452]	@ (8006024 <UART_SetConfig+0x4c0>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005e66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e6a:	d017      	beq.n	8005e9c <UART_SetConfig+0x338>
 8005e6c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e70:	d817      	bhi.n	8005ea2 <UART_SetConfig+0x33e>
 8005e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e76:	d00b      	beq.n	8005e90 <UART_SetConfig+0x32c>
 8005e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e7c:	d811      	bhi.n	8005ea2 <UART_SetConfig+0x33e>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <UART_SetConfig+0x326>
 8005e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e86:	d006      	beq.n	8005e96 <UART_SetConfig+0x332>
 8005e88:	e00b      	b.n	8005ea2 <UART_SetConfig+0x33e>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e00d      	b.n	8005eac <UART_SetConfig+0x348>
 8005e90:	2302      	movs	r3, #2
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e00a      	b.n	8005eac <UART_SetConfig+0x348>
 8005e96:	2304      	movs	r3, #4
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e007      	b.n	8005eac <UART_SetConfig+0x348>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e004      	b.n	8005eac <UART_SetConfig+0x348>
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e001      	b.n	8005eac <UART_SetConfig+0x348>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eb4:	d15b      	bne.n	8005f6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005eb6:	7ffb      	ldrb	r3, [r7, #31]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d828      	bhi.n	8005f0e <UART_SetConfig+0x3aa>
 8005ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <UART_SetConfig+0x360>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	08005f0f 	.word	0x08005f0f
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005f0f 	.word	0x08005f0f
 8005edc:	08005f0f 	.word	0x08005f0f
 8005ee0:	08005f0f 	.word	0x08005f0f
 8005ee4:	08005f07 	.word	0x08005f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee8:	f7fe fb76 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8005eec:	61b8      	str	r0, [r7, #24]
        break;
 8005eee:	e013      	b.n	8005f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7fe fb86 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8005ef4:	61b8      	str	r0, [r7, #24]
        break;
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8006028 <UART_SetConfig+0x4c4>)
 8005efa:	61bb      	str	r3, [r7, #24]
        break;
 8005efc:	e00c      	b.n	8005f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fe fa59 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005f02:	61b8      	str	r0, [r7, #24]
        break;
 8005f04:	e008      	b.n	8005f18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f0a:	61bb      	str	r3, [r7, #24]
        break;
 8005f0c:	e004      	b.n	8005f18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	77bb      	strb	r3, [r7, #30]
        break;
 8005f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d074      	beq.n	8006008 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	005a      	lsls	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	441a      	add	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d916      	bls.n	8005f68 <UART_SetConfig+0x404>
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f40:	d212      	bcs.n	8005f68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f023 030f 	bic.w	r3, r3, #15
 8005f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	89fa      	ldrh	r2, [r7, #14]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	e04f      	b.n	8006008 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77bb      	strb	r3, [r7, #30]
 8005f6c:	e04c      	b.n	8006008 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f6e:	7ffb      	ldrb	r3, [r7, #31]
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d828      	bhi.n	8005fc6 <UART_SetConfig+0x462>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0x418>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	08005fc7 	.word	0x08005fc7
 8005f8c:	08005fb7 	.word	0x08005fb7
 8005f90:	08005fc7 	.word	0x08005fc7
 8005f94:	08005fc7 	.word	0x08005fc7
 8005f98:	08005fc7 	.word	0x08005fc7
 8005f9c:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fe fb1a 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	61b8      	str	r0, [r7, #24]
        break;
 8005fa6:	e013      	b.n	8005fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7fe fb2a 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8005fac:	61b8      	str	r0, [r7, #24]
        break;
 8005fae:	e00f      	b.n	8005fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006028 <UART_SetConfig+0x4c4>)
 8005fb2:	61bb      	str	r3, [r7, #24]
        break;
 8005fb4:	e00c      	b.n	8005fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb6:	f7fe f9fd 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005fba:	61b8      	str	r0, [r7, #24]
        break;
 8005fbc:	e008      	b.n	8005fd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc2:	61bb      	str	r3, [r7, #24]
        break;
 8005fc4:	e004      	b.n	8005fd0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8005fce:	bf00      	nop
    }

    if (pclk != 0U)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d018      	beq.n	8006008 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085a      	lsrs	r2, r3, #1
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	441a      	add	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b0f      	cmp	r3, #15
 8005fee:	d909      	bls.n	8006004 <UART_SetConfig+0x4a0>
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff6:	d205      	bcs.n	8006004 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e001      	b.n	8006008 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006014:	7fbb      	ldrb	r3, [r7, #30]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40007c00 	.word	0x40007c00
 8006024:	40023800 	.word	0x40023800
 8006028:	00f42400 	.word	0x00f42400

0800602c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01a      	beq.n	8006142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800612a:	d10a      	bne.n	8006142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08c      	sub	sp, #48	@ 0x30
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006180:	f7fd f8f6 	bl	8003370 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b08      	cmp	r3, #8
 8006192:	d12e      	bne.n	80061f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006194:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f83b 	bl	800621e <UART_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d021      	beq.n	80061f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	69b9      	ldr	r1, [r7, #24]
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	617b      	str	r3, [r7, #20]
   return(result);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e6      	bne.n	80061ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e011      	b.n	8006216 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3728      	adds	r7, #40	@ 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622e:	e04f      	b.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d04b      	beq.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006238:	f7fd f89a 	bl	8003370 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	429a      	cmp	r2, r3
 8006246:	d302      	bcc.n	800624e <UART_WaitOnFlagUntilTimeout+0x30>
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e04e      	b.n	80062f0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d037      	beq.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b80      	cmp	r3, #128	@ 0x80
 8006264:	d034      	beq.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b40      	cmp	r3, #64	@ 0x40
 800626a:	d031      	beq.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b08      	cmp	r3, #8
 8006278:	d110      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2208      	movs	r2, #8
 8006280:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f838 	bl	80062f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2208      	movs	r2, #8
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e029      	b.n	80062f0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062aa:	d111      	bne.n	80062d0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f81e 	bl	80062f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e00f      	b.n	80062f0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69da      	ldr	r2, [r3, #28]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	429a      	cmp	r2, r3
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d0a0      	beq.n	8006230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b095      	sub	sp, #84	@ 0x54
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006320:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e6      	bne.n	8006300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	61fb      	str	r3, [r7, #28]
   return(result);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e5      	bne.n	8006332 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636a:	2b01      	cmp	r3, #1
 800636c:	d118      	bne.n	80063a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	60bb      	str	r3, [r7, #8]
   return(result);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f023 0310 	bic.w	r3, r3, #16
 8006382:	647b      	str	r3, [r7, #68]	@ 0x44
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6979      	ldr	r1, [r7, #20]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	613b      	str	r3, [r7, #16]
   return(result);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063b4:	bf00      	nop
 80063b6:	3754      	adds	r7, #84	@ 0x54
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 001c 	add.w	r0, r7, #28
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d121      	bne.n	800641e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	4b21      	ldr	r3, [pc, #132]	@ (8006470 <USB_CoreInit+0xb0>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa92 	bl	800693c <USB_CoreReset>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]
 800641c:	e010      	b.n	8006440 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fa86 	bl	800693c <USB_CoreReset>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006440:	7fbb      	ldrb	r3, [r7, #30]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d10b      	bne.n	800645e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f043 0206 	orr.w	r2, r3, #6
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800646a:	b004      	add	sp, #16
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	ffbdffbf 	.word	0xffbdffbf

08006474 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f023 0201 	bic.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d115      	bne.n	80064e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064c4:	200a      	movs	r0, #10
 80064c6:	f7fc ff5f 	bl	8003388 <HAL_Delay>
      ms += 10U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	330a      	adds	r3, #10
 80064ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa25 	bl	8006920 <USB_GetMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d01e      	beq.n	800651a <USB_SetCurrentMode+0x84>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2bc7      	cmp	r3, #199	@ 0xc7
 80064e0:	d9f0      	bls.n	80064c4 <USB_SetCurrentMode+0x2e>
 80064e2:	e01a      	b.n	800651a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d115      	bne.n	8006516 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064f6:	200a      	movs	r0, #10
 80064f8:	f7fc ff46 	bl	8003388 <HAL_Delay>
      ms += 10U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	330a      	adds	r3, #10
 8006500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa0c 	bl	8006920 <USB_GetMode>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <USB_SetCurrentMode+0x84>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2bc7      	cmp	r3, #199	@ 0xc7
 8006512:	d9f0      	bls.n	80064f6 <USB_SetCurrentMode+0x60>
 8006514:	e001      	b.n	800651a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e005      	b.n	8006526 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2bc8      	cmp	r3, #200	@ 0xc8
 800651e:	d101      	bne.n	8006524 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006530:	b084      	sub	sp, #16
 8006532:	b580      	push	{r7, lr}
 8006534:	b086      	sub	sp, #24
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800653e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	e009      	b.n	8006564 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3340      	adds	r3, #64	@ 0x40
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	2200      	movs	r2, #0
 800655c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3301      	adds	r3, #1
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b0e      	cmp	r3, #14
 8006568:	d9f2      	bls.n	8006550 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800656a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11c      	bne.n	80065ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e005      	b.n	80065b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10d      	bne.n	80065e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065d4:	2100      	movs	r1, #0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f968 	bl	80068ac <USB_SetDevSpeed>
 80065dc:	e008      	b.n	80065f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065de:	2101      	movs	r1, #1
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f963 	bl	80068ac <USB_SetDevSpeed>
 80065e6:	e003      	b.n	80065f0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065e8:	2103      	movs	r1, #3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f95e 	bl	80068ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065f0:	2110      	movs	r1, #16
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f8fa 	bl	80067ec <USB_FlushTxFifo>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f924 	bl	8006850 <USB_FlushRxFifo>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006624:	461a      	mov	r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006630:	461a      	mov	r2, r3
 8006632:	2300      	movs	r3, #0
 8006634:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	e043      	b.n	80066c4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800664e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006652:	d118      	bne.n	8006686 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006666:	461a      	mov	r2, r3
 8006668:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e013      	b.n	8006698 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800667c:	461a      	mov	r2, r3
 800667e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	e008      	b.n	8006698 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a4:	461a      	mov	r2, r3
 80066a6:	2300      	movs	r3, #0
 80066a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b6:	461a      	mov	r2, r3
 80066b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066c8:	461a      	mov	r2, r3
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d3b5      	bcc.n	800663c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e043      	b.n	800675e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ec:	d118      	bne.n	8006720 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e013      	b.n	8006732 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006716:	461a      	mov	r2, r3
 8006718:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e008      	b.n	8006732 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006750:	461a      	mov	r2, r3
 8006752:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	3301      	adds	r3, #1
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006762:	461a      	mov	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4293      	cmp	r3, r2
 8006768:	d3b5      	bcc.n	80066d6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800677c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800678a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800678c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f043 0210 	orr.w	r2, r3, #16
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699a      	ldr	r2, [r3, #24]
 80067a4:	4b0f      	ldr	r3, [pc, #60]	@ (80067e4 <USB_DevInit+0x2b4>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f043 0208 	orr.w	r2, r3, #8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d105      	bne.n	80067d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <USB_DevInit+0x2b8>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067e0:	b004      	add	sp, #16
 80067e2:	4770      	bx	lr
 80067e4:	803c3800 	.word	0x803c3800
 80067e8:	40000004 	.word	0x40000004

080067ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006806:	d901      	bls.n	800680c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e01b      	b.n	8006844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	daf2      	bge.n	80067fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	019b      	lsls	r3, r3, #6
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006830:	d901      	bls.n	8006836 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e006      	b.n	8006844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b20      	cmp	r3, #32
 8006840:	d0f0      	beq.n	8006824 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006868:	d901      	bls.n	800686e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e018      	b.n	80068a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	daf2      	bge.n	800685c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2210      	movs	r2, #16
 800687e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800688c:	d901      	bls.n	8006892 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e006      	b.n	80068a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0310 	and.w	r3, r3, #16
 800689a:	2b10      	cmp	r3, #16
 800689c:	d0f0      	beq.n	8006880 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068f8:	f023 0303 	bic.w	r3, r3, #3
 80068fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f003 0301 	and.w	r3, r3, #1
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006954:	d901      	bls.n	800695a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e01b      	b.n	8006992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	daf2      	bge.n	8006948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3301      	adds	r3, #1
 8006976:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800697e:	d901      	bls.n	8006984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e006      	b.n	8006992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d0f0      	beq.n	8006972 <USB_CoreReset+0x36>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a07      	ldr	r2, [pc, #28]	@ (80069cc <vApplicationGetIdleTaskMemory+0x2c>)
 80069b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4a06      	ldr	r2, [pc, #24]	@ (80069d0 <vApplicationGetIdleTaskMemory+0x30>)
 80069b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2280      	movs	r2, #128	@ 0x80
 80069bc:	601a      	str	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	200009bc 	.word	0x200009bc
 80069d0:	20000a64 	.word	0x20000a64

080069d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a07      	ldr	r2, [pc, #28]	@ (8006a00 <vApplicationGetTimerTaskMemory+0x2c>)
 80069e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4a06      	ldr	r2, [pc, #24]	@ (8006a04 <vApplicationGetTimerTaskMemory+0x30>)
 80069ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	20000c64 	.word	0x20000c64
 8006a04:	20000d0c 	.word	0x20000d0c

08006a08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f103 0208 	add.w	r2, r3, #8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f103 0208 	add.w	r2, r3, #8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f103 0208 	add.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d103      	bne.n	8006aca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e00c      	b.n	8006ae4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3308      	adds	r3, #8
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e002      	b.n	8006ad8 <vListInsert+0x2e>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d2f6      	bcs.n	8006ad2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	601a      	str	r2, [r3, #0]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6852      	ldr	r2, [r2, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d103      	bne.n	8006b50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	1e5a      	subs	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10d      	bne.n	8006ba0 <xQueueGenericReset+0x30>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b88:	b672      	cpsid	i
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	b662      	cpsie	i
 8006b98:	60bb      	str	r3, [r7, #8]
}
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
 8006b9e:	e7fd      	b.n	8006b9c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006ba0:	f002 ff92 	bl	8009ac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	68f9      	ldr	r1, [r7, #12]
 8006bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	441a      	add	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	22ff      	movs	r2, #255	@ 0xff
 8006be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	22ff      	movs	r2, #255	@ 0xff
 8006bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d114      	bne.n	8006c20 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01a      	beq.n	8006c34 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3310      	adds	r3, #16
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fc9a 	bl	800853c <xTaskRemoveFromEventList>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d012      	beq.n	8006c34 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <xQueueGenericReset+0xd4>)
 8006c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	e009      	b.n	8006c34 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3310      	adds	r3, #16
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff feef 	bl	8006a08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3324      	adds	r3, #36	@ 0x24
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff feea 	bl	8006a08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c34:	f002 ff7e 	bl	8009b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c38:	2301      	movs	r3, #1
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	e000ed04 	.word	0xe000ed04

08006c48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	@ 0x38
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10d      	bne.n	8006c78 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10d      	bne.n	8006c9a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <xQueueGenericCreateStatic+0x5e>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <xQueueGenericCreateStatic+0x62>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueGenericCreateStatic+0x64>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	623b      	str	r3, [r7, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <xQueueGenericCreateStatic+0x90>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <xQueueGenericCreateStatic+0x94>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <xQueueGenericCreateStatic+0x96>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10d      	bne.n	8006cfe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	b672      	cpsid	i
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	b662      	cpsie	i
 8006cf6:	61fb      	str	r3, [r7, #28]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cfe:	2350      	movs	r3, #80	@ 0x50
 8006d00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b50      	cmp	r3, #80	@ 0x50
 8006d06:	d00d      	beq.n	8006d24 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	b672      	cpsid	i
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	b662      	cpsie	i
 8006d1c:	61bb      	str	r3, [r7, #24]
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00d      	beq.n	8006d4c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f848 	bl	8006ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3730      	adds	r7, #48	@ 0x30
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b08a      	sub	sp, #40	@ 0x28
 8006d5a:	af02      	add	r7, sp, #8
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	4613      	mov	r3, r2
 8006d62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10d      	bne.n	8006d86 <xQueueGenericCreate+0x30>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	b672      	cpsid	i
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	b662      	cpsie	i
 8006d7e:	613b      	str	r3, [r7, #16]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	e004      	b.n	8006d9c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3350      	adds	r3, #80	@ 0x50
 8006da0:	4618      	mov	r0, r3
 8006da2:	f002 ffc1 	bl	8009d28 <pvPortMalloc>
 8006da6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d011      	beq.n	8006dd2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	3350      	adds	r3, #80	@ 0x50
 8006db6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dc0:	79fa      	ldrb	r2, [r7, #7]
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f805 	bl	8006ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e002      	b.n	8006dfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	69b8      	ldr	r0, [r7, #24]
 8006e0e:	f7ff feaf 	bl	8006b70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e42:	2300      	movs	r3, #0
 8006e44:	2200      	movs	r2, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f81d 	bl	8006e88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6939      	ldr	r1, [r7, #16]
 8006e6e:	6978      	ldr	r0, [r7, #20]
 8006e70:	f7ff ff71 	bl	8006d56 <xQueueGenericCreate>
 8006e74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff ffd3 	bl	8006e22 <prvInitialiseMutex>

		return xNewQueue;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
	}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	@ 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10d      	bne.n	8006ec0 <xQueueGenericSend+0x38>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	b672      	cpsid	i
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	b662      	cpsie	i
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	e7fd      	b.n	8006ebc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <xQueueGenericSend+0x46>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <xQueueGenericSend+0x4a>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <xQueueGenericSend+0x4c>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10d      	bne.n	8006ef4 <xQueueGenericSend+0x6c>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d103      	bne.n	8006f02 <xQueueGenericSend+0x7a>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <xQueueGenericSend+0x7e>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <xQueueGenericSend+0x80>
 8006f06:	2300      	movs	r3, #0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10d      	bne.n	8006f28 <xQueueGenericSend+0xa0>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	b672      	cpsid	i
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	b662      	cpsie	i
 8006f20:	623b      	str	r3, [r7, #32]
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f28:	f001 fcd6 	bl	80088d8 <xTaskGetSchedulerState>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <xQueueGenericSend+0xb0>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <xQueueGenericSend+0xb4>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <xQueueGenericSend+0xb6>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10d      	bne.n	8006f5e <xQueueGenericSend+0xd6>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	b672      	cpsid	i
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	b662      	cpsie	i
 8006f56:	61fb      	str	r3, [r7, #28]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f5e:	f002 fdb3 	bl	8009ac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <xQueueGenericSend+0xec>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d129      	bne.n	8006fc8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	68b9      	ldr	r1, [r7, #8]
 8006f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f7a:	f000 fb8d 	bl	8007698 <prvCopyDataToQueue>
 8006f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d010      	beq.n	8006faa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	3324      	adds	r3, #36	@ 0x24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fad5 	bl	800853c <xTaskRemoveFromEventList>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d013      	beq.n	8006fc0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f98:	4b3f      	ldr	r3, [pc, #252]	@ (8007098 <xQueueGenericSend+0x210>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	e00a      	b.n	8006fc0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fb0:	4b39      	ldr	r3, [pc, #228]	@ (8007098 <xQueueGenericSend+0x210>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fc0:	f002 fdb8 	bl	8009b34 <vPortExitCritical>
				return pdPASS;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e063      	b.n	8007090 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fce:	f002 fdb1 	bl	8009b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e05c      	b.n	8007090 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fdc:	f107 0314 	add.w	r3, r7, #20
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 fb11 	bl	8008608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fea:	f002 fda3 	bl	8009b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fee:	f001 f85b 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ff2:	f002 fd69 	bl	8009ac8 <vPortEnterCritical>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007002:	d103      	bne.n	800700c <xQueueGenericSend+0x184>
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007012:	b25b      	sxtb	r3, r3
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d103      	bne.n	8007022 <xQueueGenericSend+0x19a>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007022:	f002 fd87 	bl	8009b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007026:	1d3a      	adds	r2, r7, #4
 8007028:	f107 0314 	add.w	r3, r7, #20
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f001 fb00 	bl	8008634 <xTaskCheckForTimeOut>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d124      	bne.n	8007084 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800703a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800703c:	f000 fc24 	bl	8007888 <prvIsQueueFull>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	3310      	adds	r3, #16
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f001 fa1e 	bl	8008490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007056:	f000 fbaf 	bl	80077b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800705a:	f001 f833 	bl	80080c4 <xTaskResumeAll>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	f47f af7c 	bne.w	8006f5e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <xQueueGenericSend+0x210>)
 8007068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	e772      	b.n	8006f5e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800707a:	f000 fb9d 	bl	80077b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800707e:	f001 f821 	bl	80080c4 <xTaskResumeAll>
 8007082:	e76c      	b.n	8006f5e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007086:	f000 fb97 	bl	80077b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800708a:	f001 f81b 	bl	80080c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800708e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007090:	4618      	mov	r0, r3
 8007092:	3738      	adds	r7, #56	@ 0x38
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08e      	sub	sp, #56	@ 0x38
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10d      	bne.n	80070d0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	b672      	cpsid	i
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	b662      	cpsie	i
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	e7fd      	b.n	80070cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <xQueueGenericSendFromISR+0x42>
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <xQueueGenericSendFromISR+0x46>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <xQueueGenericSendFromISR+0x48>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10d      	bne.n	8007104 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	b672      	cpsid	i
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	b662      	cpsie	i
 80070fc:	623b      	str	r3, [r7, #32]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b02      	cmp	r3, #2
 8007108:	d103      	bne.n	8007112 <xQueueGenericSendFromISR+0x76>
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <xQueueGenericSendFromISR+0x7a>
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <xQueueGenericSendFromISR+0x7c>
 8007116:	2300      	movs	r3, #0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10d      	bne.n	8007138 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	b672      	cpsid	i
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	b662      	cpsie	i
 8007130:	61fb      	str	r3, [r7, #28]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007138:	f002 fdb0 	bl	8009c9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800713c:	f3ef 8211 	mrs	r2, BASEPRI
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	61ba      	str	r2, [r7, #24]
 8007156:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007158:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800715a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	429a      	cmp	r2, r3
 8007166:	d302      	bcc.n	800716e <xQueueGenericSendFromISR+0xd2>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d12c      	bne.n	80071c8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800717e:	f000 fa8b 	bl	8007698 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007182:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d112      	bne.n	80071b2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d016      	beq.n	80071c2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	3324      	adds	r3, #36	@ 0x24
 8007198:	4618      	mov	r0, r3
 800719a:	f001 f9cf 	bl	800853c <xTaskRemoveFromEventList>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00e      	beq.n	80071c2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e007      	b.n	80071c2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071b6:	3301      	adds	r3, #1
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	b25a      	sxtb	r2, r3
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071c2:	2301      	movs	r3, #1
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80071c6:	e001      	b.n	80071cc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80071cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3738      	adds	r7, #56	@ 0x38
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08c      	sub	sp, #48	@ 0x30
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10d      	bne.n	800721a <xQueueReceive+0x36>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	b672      	cpsid	i
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	b662      	cpsie	i
 8007212:	623b      	str	r3, [r7, #32]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <xQueueReceive+0x44>
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <xQueueReceive+0x48>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <xQueueReceive+0x4a>
 800722c:	2300      	movs	r3, #0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10d      	bne.n	800724e <xQueueReceive+0x6a>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	b672      	cpsid	i
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	b662      	cpsie	i
 8007246:	61fb      	str	r3, [r7, #28]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800724e:	f001 fb43 	bl	80088d8 <xTaskGetSchedulerState>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <xQueueReceive+0x7a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <xQueueReceive+0x7e>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <xQueueReceive+0x80>
 8007262:	2300      	movs	r3, #0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10d      	bne.n	8007284 <xQueueReceive+0xa0>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	b672      	cpsid	i
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	b662      	cpsie	i
 800727c:	61bb      	str	r3, [r7, #24]
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	e7fd      	b.n	8007280 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007284:	f002 fc20 	bl	8009ac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01f      	beq.n	80072d4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007298:	f000 fa68 	bl	800776c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00f      	beq.n	80072cc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	3310      	adds	r3, #16
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 f943 	bl	800853c <xTaskRemoveFromEventList>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072bc:	4b3c      	ldr	r3, [pc, #240]	@ (80073b0 <xQueueReceive+0x1cc>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072cc:	f002 fc32 	bl	8009b34 <vPortExitCritical>
				return pdPASS;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e069      	b.n	80073a8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072da:	f002 fc2b 	bl	8009b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072de:	2300      	movs	r3, #0
 80072e0:	e062      	b.n	80073a8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	4618      	mov	r0, r3
 80072ee:	f001 f98b 	bl	8008608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f2:	2301      	movs	r3, #1
 80072f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072f6:	f002 fc1d 	bl	8009b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072fa:	f000 fed5 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072fe:	f002 fbe3 	bl	8009ac8 <vPortEnterCritical>
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007308:	b25b      	sxtb	r3, r3
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d103      	bne.n	8007318 <xQueueReceive+0x134>
 8007310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800731e:	b25b      	sxtb	r3, r3
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d103      	bne.n	800732e <xQueueReceive+0x14a>
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800732e:	f002 fc01 	bl	8009b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007332:	1d3a      	adds	r2, r7, #4
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f001 f97a 	bl	8008634 <xTaskCheckForTimeOut>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d123      	bne.n	800738e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007348:	f000 fa88 	bl	800785c <prvIsQueueEmpty>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d017      	beq.n	8007382 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	3324      	adds	r3, #36	@ 0x24
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	4611      	mov	r1, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f001 f898 	bl	8008490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007362:	f000 fa29 	bl	80077b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007366:	f000 fead 	bl	80080c4 <xTaskResumeAll>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d189      	bne.n	8007284 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007370:	4b0f      	ldr	r3, [pc, #60]	@ (80073b0 <xQueueReceive+0x1cc>)
 8007372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	e780      	b.n	8007284 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007384:	f000 fa18 	bl	80077b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007388:	f000 fe9c 	bl	80080c4 <xTaskResumeAll>
 800738c:	e77a      	b.n	8007284 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800738e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007390:	f000 fa12 	bl	80077b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007394:	f000 fe96 	bl	80080c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800739a:	f000 fa5f 	bl	800785c <prvIsQueueEmpty>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f43f af6f 	beq.w	8007284 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3730      	adds	r7, #48	@ 0x30
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08e      	sub	sp, #56	@ 0x38
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10d      	bne.n	80073ec <xQueueSemaphoreTake+0x38>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	b672      	cpsid	i
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	b662      	cpsie	i
 80073e4:	623b      	str	r3, [r7, #32]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00d      	beq.n	8007410 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	b672      	cpsid	i
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	b662      	cpsie	i
 8007408:	61fb      	str	r3, [r7, #28]
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007410:	f001 fa62 	bl	80088d8 <xTaskGetSchedulerState>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xQueueSemaphoreTake+0x6c>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueSemaphoreTake+0x70>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueSemaphoreTake+0x72>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10d      	bne.n	8007446 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742e:	b672      	cpsid	i
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	b662      	cpsie	i
 800743e:	61bb      	str	r3, [r7, #24]
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	e7fd      	b.n	8007442 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007446:	f002 fb3f 	bl	8009ac8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d024      	beq.n	80074a0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	1e5a      	subs	r2, r3, #1
 800745a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800745e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007466:	f001 fbb9 	bl	8008bdc <pvTaskIncrementMutexHeldCount>
 800746a:	4602      	mov	r2, r0
 800746c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00f      	beq.n	8007498 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	3310      	adds	r3, #16
 800747c:	4618      	mov	r0, r3
 800747e:	f001 f85d 	bl	800853c <xTaskRemoveFromEventList>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007488:	4b55      	ldr	r3, [pc, #340]	@ (80075e0 <xQueueSemaphoreTake+0x22c>)
 800748a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007498:	f002 fb4c 	bl	8009b34 <vPortExitCritical>
				return pdPASS;
 800749c:	2301      	movs	r3, #1
 800749e:	e09a      	b.n	80075d6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d114      	bne.n	80074d0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00d      	beq.n	80074c8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b0:	b672      	cpsid	i
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	b662      	cpsie	i
 80074c0:	617b      	str	r3, [r7, #20]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074c8:	f002 fb34 	bl	8009b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e082      	b.n	80075d6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074d6:	f107 030c 	add.w	r3, r7, #12
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f894 	bl	8008608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074e4:	f002 fb26 	bl	8009b34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074e8:	f000 fdde 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ec:	f002 faec 	bl	8009ac8 <vPortEnterCritical>
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074f6:	b25b      	sxtb	r3, r3
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d103      	bne.n	8007506 <xQueueSemaphoreTake+0x152>
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800750c:	b25b      	sxtb	r3, r3
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007512:	d103      	bne.n	800751c <xQueueSemaphoreTake+0x168>
 8007514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800751c:	f002 fb0a 	bl	8009b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007520:	463a      	mov	r2, r7
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f001 f883 	bl	8008634 <xTaskCheckForTimeOut>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d132      	bne.n	800759a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007534:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007536:	f000 f991 	bl	800785c <prvIsQueueEmpty>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d026      	beq.n	800758e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007548:	f002 fabe 	bl	8009ac8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	4618      	mov	r0, r3
 8007552:	f001 f9df 	bl	8008914 <xTaskPriorityInherit>
 8007556:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007558:	f002 faec 	bl	8009b34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	3324      	adds	r3, #36	@ 0x24
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f000 ff93 	bl	8008490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800756a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800756c:	f000 f924 	bl	80077b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007570:	f000 fda8 	bl	80080c4 <xTaskResumeAll>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	f47f af65 	bne.w	8007446 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800757c:	4b18      	ldr	r3, [pc, #96]	@ (80075e0 <xQueueSemaphoreTake+0x22c>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	e75b      	b.n	8007446 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800758e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007590:	f000 f912 	bl	80077b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007594:	f000 fd96 	bl	80080c4 <xTaskResumeAll>
 8007598:	e755      	b.n	8007446 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800759a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800759c:	f000 f90c 	bl	80077b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075a0:	f000 fd90 	bl	80080c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075a6:	f000 f959 	bl	800785c <prvIsQueueEmpty>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f43f af4a 	beq.w	8007446 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00d      	beq.n	80075d4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80075b8:	f002 fa86 	bl	8009ac8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075be:	f000 f853 	bl	8007668 <prvGetDisinheritPriorityAfterTimeout>
 80075c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 fa7e 	bl	8008acc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075d0:	f002 fab0 	bl	8009b34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3738      	adds	r7, #56	@ 0x38
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10d      	bne.n	800760e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	b672      	cpsid	i
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	b662      	cpsie	i
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800760e:	f002 fa5b 	bl	8009ac8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007616:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007618:	f002 fa8c 	bl	8009b34 <vPortExitCritical>

	return uxReturn;
 800761c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007626:	b480      	push	{r7}
 8007628:	b087      	sub	sp, #28
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	60fb      	str	r3, [r7, #12]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800765a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d006      	beq.n	8007686 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e001      	b.n	800768a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800768a:	68fb      	ldr	r3, [r7, #12]
	}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10d      	bne.n	80076d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d14d      	bne.n	800775a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 f98e 	bl	80089e4 <xTaskPriorityDisinherit>
 80076c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	e043      	b.n	800775a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d119      	bne.n	800770c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6858      	ldr	r0, [r3, #4]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e0:	461a      	mov	r2, r3
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	f003 fd4b 	bl	800b17e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	441a      	add	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d32b      	bcc.n	800775a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]
 800770a:	e026      	b.n	800775a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68d8      	ldr	r0, [r3, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	461a      	mov	r2, r3
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	f003 fd31 	bl	800b17e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	425b      	negs	r3, r3
 8007726:	441a      	add	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d207      	bcs.n	8007748 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007740:	425b      	negs	r3, r3
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d105      	bne.n	800775a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	3b01      	subs	r3, #1
 8007758:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007762:	697b      	ldr	r3, [r7, #20]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d018      	beq.n	80077b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	441a      	add	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	429a      	cmp	r2, r3
 8007796:	d303      	bcc.n	80077a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68d9      	ldr	r1, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a8:	461a      	mov	r2, r3
 80077aa:	6838      	ldr	r0, [r7, #0]
 80077ac:	f003 fce7 	bl	800b17e <memcpy>
	}
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077c0:	f002 f982 	bl	8009ac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077cc:	e011      	b.n	80077f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d012      	beq.n	80077fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3324      	adds	r3, #36	@ 0x24
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 feae 	bl	800853c <xTaskRemoveFromEventList>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077e6:	f000 ff8d 	bl	8008704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dce9      	bgt.n	80077ce <prvUnlockQueue+0x16>
 80077fa:	e000      	b.n	80077fe <prvUnlockQueue+0x46>
					break;
 80077fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	22ff      	movs	r2, #255	@ 0xff
 8007802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007806:	f002 f995 	bl	8009b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800780a:	f002 f95d 	bl	8009ac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007814:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007816:	e011      	b.n	800783c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d012      	beq.n	8007846 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3310      	adds	r3, #16
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fe89 	bl	800853c <xTaskRemoveFromEventList>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007830:	f000 ff68 	bl	8008704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	3b01      	subs	r3, #1
 8007838:	b2db      	uxtb	r3, r3
 800783a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	dce9      	bgt.n	8007818 <prvUnlockQueue+0x60>
 8007844:	e000      	b.n	8007848 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007846:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	22ff      	movs	r2, #255	@ 0xff
 800784c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007850:	f002 f970 	bl	8009b34 <vPortExitCritical>
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007864:	f002 f930 	bl	8009ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e001      	b.n	800787a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800787a:	f002 f95b 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007890:	f002 f91a 	bl	8009ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800789c:	429a      	cmp	r2, r3
 800789e:	d102      	bne.n	80078a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e001      	b.n	80078aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078aa:	f002 f943 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 80078ae:	68fb      	ldr	r3, [r7, #12]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e014      	b.n	80078f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078c8:	4a0f      	ldr	r2, [pc, #60]	@ (8007908 <vQueueAddToRegistry+0x50>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078d4:	490c      	ldr	r1, [pc, #48]	@ (8007908 <vQueueAddToRegistry+0x50>)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078de:	4a0a      	ldr	r2, [pc, #40]	@ (8007908 <vQueueAddToRegistry+0x50>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	4413      	add	r3, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078ea:	e006      	b.n	80078fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b07      	cmp	r3, #7
 80078f6:	d9e7      	bls.n	80078c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2000110c 	.word	0x2000110c

0800790c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800791c:	f002 f8d4 	bl	8009ac8 <vPortEnterCritical>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007926:	b25b      	sxtb	r3, r3
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d103      	bne.n	8007936 <vQueueWaitForMessageRestricted+0x2a>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800793c:	b25b      	sxtb	r3, r3
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d103      	bne.n	800794c <vQueueWaitForMessageRestricted+0x40>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800794c:	f002 f8f2 	bl	8009b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	3324      	adds	r3, #36	@ 0x24
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fdbd 	bl	80084e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007966:	6978      	ldr	r0, [r7, #20]
 8007968:	f7ff ff26 	bl	80077b8 <prvUnlockQueue>
	}
 800796c:	bf00      	nop
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08e      	sub	sp, #56	@ 0x38
 8007978:	af04      	add	r7, sp, #16
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10d      	bne.n	80079a4 <xTaskCreateStatic+0x30>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
 800799c:	623b      	str	r3, [r7, #32]
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10d      	bne.n	80079c6 <xTaskCreateStatic+0x52>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	b672      	cpsid	i
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	b662      	cpsie	i
 80079be:	61fb      	str	r3, [r7, #28]
}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079c6:	23a8      	movs	r3, #168	@ 0xa8
 80079c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80079ce:	d00d      	beq.n	80079ec <xTaskCreateStatic+0x78>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	61bb      	str	r3, [r7, #24]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01e      	beq.n	8007a32 <xTaskCreateStatic+0xbe>
 80079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01b      	beq.n	8007a32 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	9302      	str	r3, [sp, #8]
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f851 	bl	8007acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a2c:	f000 f8f8 	bl	8007c20 <prvAddNewTaskToReadyList>
 8007a30:	e001      	b.n	8007a36 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a36:	697b      	ldr	r3, [r7, #20]
	}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3728      	adds	r7, #40	@ 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08c      	sub	sp, #48	@ 0x30
 8007a44:	af04      	add	r7, sp, #16
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f002 f967 	bl	8009d28 <pvPortMalloc>
 8007a5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a62:	20a8      	movs	r0, #168	@ 0xa8
 8007a64:	f002 f960 	bl	8009d28 <pvPortMalloc>
 8007a68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a76:	e005      	b.n	8007a84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a78:	6978      	ldr	r0, [r7, #20]
 8007a7a:	f002 fa23 	bl	8009ec4 <vPortFree>
 8007a7e:	e001      	b.n	8007a84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d017      	beq.n	8007aba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	2300      	movs	r3, #0
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	9302      	str	r3, [sp, #8]
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f80f 	bl	8007acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aae:	69f8      	ldr	r0, [r7, #28]
 8007ab0:	f000 f8b6 	bl	8007c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e002      	b.n	8007ac0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007aba:	f04f 33ff 	mov.w	r3, #4294967295
 8007abe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	21a5      	movs	r1, #165	@ 0xa5
 8007ae6:	f003 fa61 	bl	800afac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007af4:	440b      	add	r3, r1
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f023 0307 	bic.w	r3, r3, #7
 8007b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <prvInitialiseNewTask+0x5e>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	b672      	cpsid	i
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	b662      	cpsie	i
 8007b22:	617b      	str	r3, [r7, #20]
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01f      	beq.n	8007b70 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	e012      	b.n	8007b5c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	7819      	ldrb	r1, [r3, #0]
 8007b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	3334      	adds	r3, #52	@ 0x34
 8007b46:	460a      	mov	r2, r1
 8007b48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	4413      	add	r3, r2
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d006      	beq.n	8007b64 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b0f      	cmp	r3, #15
 8007b60:	d9e9      	bls.n	8007b36 <prvInitialiseNewTask+0x6a>
 8007b62:	e000      	b.n	8007b66 <prvInitialiseNewTask+0x9a>
			{
				break;
 8007b64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b6e:	e003      	b.n	8007b78 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	2b37      	cmp	r3, #55	@ 0x37
 8007b7c:	d901      	bls.n	8007b82 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b7e:	2337      	movs	r3, #55	@ 0x37
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	2200      	movs	r2, #0
 8007b92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b96:	3304      	adds	r3, #4
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe ff55 	bl	8006a48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe ff50 	bl	8006a48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	3354      	adds	r3, #84	@ 0x54
 8007bd2:	224c      	movs	r2, #76	@ 0x4c
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f003 f9e8 	bl	800afac <memset>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	4a0d      	ldr	r2, [pc, #52]	@ (8007c14 <prvInitialiseNewTask+0x148>)
 8007be0:	659a      	str	r2, [r3, #88]	@ 0x58
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	4a0c      	ldr	r2, [pc, #48]	@ (8007c18 <prvInitialiseNewTask+0x14c>)
 8007be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	4a0c      	ldr	r2, [pc, #48]	@ (8007c1c <prvInitialiseNewTask+0x150>)
 8007bec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	68f9      	ldr	r1, [r7, #12]
 8007bf2:	69b8      	ldr	r0, [r7, #24]
 8007bf4:	f001 fe38 	bl	8009868 <pxPortInitialiseStack>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c0a:	bf00      	nop
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20019e38 	.word	0x20019e38
 8007c18:	20019ea0 	.word	0x20019ea0
 8007c1c:	20019f08 	.word	0x20019f08

08007c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c28:	f001 ff4e 	bl	8009ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce4 <prvAddNewTaskToReadyList+0xc4>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3301      	adds	r3, #1
 8007c32:	4a2c      	ldr	r2, [pc, #176]	@ (8007ce4 <prvAddNewTaskToReadyList+0xc4>)
 8007c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c36:	4b2c      	ldr	r3, [pc, #176]	@ (8007ce8 <prvAddNewTaskToReadyList+0xc8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce8 <prvAddNewTaskToReadyList+0xc8>)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c44:	4b27      	ldr	r3, [pc, #156]	@ (8007ce4 <prvAddNewTaskToReadyList+0xc4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d110      	bne.n	8007c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c4c:	f000 fd7e 	bl	800874c <prvInitialiseTaskLists>
 8007c50:	e00d      	b.n	8007c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c52:	4b26      	ldr	r3, [pc, #152]	@ (8007cec <prvAddNewTaskToReadyList+0xcc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c5a:	4b23      	ldr	r3, [pc, #140]	@ (8007ce8 <prvAddNewTaskToReadyList+0xc8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d802      	bhi.n	8007c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c68:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce8 <prvAddNewTaskToReadyList+0xc8>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <prvAddNewTaskToReadyList+0xd0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf0 <prvAddNewTaskToReadyList+0xd0>)
 8007c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c78:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf0 <prvAddNewTaskToReadyList+0xd0>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c84:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf4 <prvAddNewTaskToReadyList+0xd4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d903      	bls.n	8007c94 <prvAddNewTaskToReadyList+0x74>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	4a18      	ldr	r2, [pc, #96]	@ (8007cf4 <prvAddNewTaskToReadyList+0xd4>)
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4a15      	ldr	r2, [pc, #84]	@ (8007cf8 <prvAddNewTaskToReadyList+0xd8>)
 8007ca2:	441a      	add	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7fe fed9 	bl	8006a62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cb0:	f001 ff40 	bl	8009b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <prvAddNewTaskToReadyList+0xcc>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00e      	beq.n	8007cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce8 <prvAddNewTaskToReadyList+0xc8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d207      	bcs.n	8007cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cca:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <prvAddNewTaskToReadyList+0xdc>)
 8007ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20001620 	.word	0x20001620
 8007ce8:	2000114c 	.word	0x2000114c
 8007cec:	2000162c 	.word	0x2000162c
 8007cf0:	2000163c 	.word	0x2000163c
 8007cf4:	20001628 	.word	0x20001628
 8007cf8:	20001150 	.word	0x20001150
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01a      	beq.n	8007d48 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d12:	4b15      	ldr	r3, [pc, #84]	@ (8007d68 <vTaskDelay+0x68>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00d      	beq.n	8007d36 <vTaskDelay+0x36>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	b672      	cpsid	i
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	b662      	cpsie	i
 8007d2e:	60bb      	str	r3, [r7, #8]
}
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	e7fd      	b.n	8007d32 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007d36:	f000 f9b7 	bl	80080a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f977 	bl	8009030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d42:	f000 f9bf 	bl	80080c4 <xTaskResumeAll>
 8007d46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d107      	bne.n	8007d5e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007d4e:	4b07      	ldr	r3, [pc, #28]	@ (8007d6c <vTaskDelay+0x6c>)
 8007d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20001648 	.word	0x20001648
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d78:	f001 fea6 	bl	8009ac8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <vTaskSuspend+0x18>
 8007d82:	4b31      	ldr	r3, [pc, #196]	@ (8007e48 <vTaskSuspend+0xd8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	e000      	b.n	8007d8a <vTaskSuspend+0x1a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fec3 	bl	8006b1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3318      	adds	r3, #24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe feba 	bl	8006b1c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4619      	mov	r1, r3
 8007dae:	4827      	ldr	r0, [pc, #156]	@ (8007e4c <vTaskSuspend+0xdc>)
 8007db0:	f7fe fe57 	bl	8006a62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d103      	bne.n	8007dc8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007dc8:	f001 feb4 	bl	8009b34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007dcc:	4b20      	ldr	r3, [pc, #128]	@ (8007e50 <vTaskSuspend+0xe0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007dd4:	f001 fe78 	bl	8009ac8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007dd8:	f000 fd5e 	bl	8008898 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007ddc:	f001 feaa 	bl	8009b34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007de0:	4b19      	ldr	r3, [pc, #100]	@ (8007e48 <vTaskSuspend+0xd8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d12a      	bne.n	8007e40 <vTaskSuspend+0xd0>
		{
			if( xSchedulerRunning != pdFALSE )
 8007dea:	4b19      	ldr	r3, [pc, #100]	@ (8007e50 <vTaskSuspend+0xe0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01a      	beq.n	8007e28 <vTaskSuspend+0xb8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007df2:	4b18      	ldr	r3, [pc, #96]	@ (8007e54 <vTaskSuspend+0xe4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <vTaskSuspend+0xa6>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	b672      	cpsid	i
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	b662      	cpsie	i
 8007e0e:	60bb      	str	r3, [r7, #8]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8007e16:	4b10      	ldr	r3, [pc, #64]	@ (8007e58 <vTaskSuspend+0xe8>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e26:	e00b      	b.n	8007e40 <vTaskSuspend+0xd0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007e28:	4b08      	ldr	r3, [pc, #32]	@ (8007e4c <vTaskSuspend+0xdc>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <vTaskSuspend+0xec>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d103      	bne.n	8007e3c <vTaskSuspend+0xcc>
					pxCurrentTCB = NULL;
 8007e34:	4b04      	ldr	r3, [pc, #16]	@ (8007e48 <vTaskSuspend+0xd8>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
	}
 8007e3a:	e001      	b.n	8007e40 <vTaskSuspend+0xd0>
					vTaskSwitchContext();
 8007e3c:	f000 fac0 	bl	80083c0 <vTaskSwitchContext>
	}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	2000114c 	.word	0x2000114c
 8007e4c:	2000160c 	.word	0x2000160c
 8007e50:	2000162c 	.word	0x2000162c
 8007e54:	20001648 	.word	0x20001648
 8007e58:	e000ed04 	.word	0xe000ed04
 8007e5c:	20001620 	.word	0x20001620

08007e60 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10d      	bne.n	8007e92 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	b672      	cpsid	i
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	b662      	cpsie	i
 8007e8a:	60fb      	str	r3, [r7, #12]
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	e7fd      	b.n	8007e8e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec0 <prvTaskIsTaskSuspended+0x60>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d10a      	bne.n	8007eb2 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	4a08      	ldr	r2, [pc, #32]	@ (8007ec4 <prvTaskIsTaskSuspended+0x64>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d005      	beq.n	8007eb2 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eb2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	2000160c 	.word	0x2000160c
 8007ec4:	200015e0 	.word	0x200015e0

08007ec8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <vTaskResume+0x2e>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	b672      	cpsid	i
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	b662      	cpsie	i
 8007eee:	60bb      	str	r3, [r7, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007ef6:	4b21      	ldr	r3, [pc, #132]	@ (8007f7c <vTaskResume+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d038      	beq.n	8007f72 <vTaskResume+0xaa>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d035      	beq.n	8007f72 <vTaskResume+0xaa>
		{
			taskENTER_CRITICAL();
 8007f06:	f001 fddf 	bl	8009ac8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff ffa8 	bl	8007e60 <prvTaskIsTaskSuspended>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02b      	beq.n	8007f6e <vTaskResume+0xa6>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fdfe 	bl	8006b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f24:	4b16      	ldr	r3, [pc, #88]	@ (8007f80 <vTaskResume+0xb8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d903      	bls.n	8007f34 <vTaskResume+0x6c>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	4a13      	ldr	r2, [pc, #76]	@ (8007f80 <vTaskResume+0xb8>)
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4a10      	ldr	r2, [pc, #64]	@ (8007f84 <vTaskResume+0xbc>)
 8007f42:	441a      	add	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f7fe fd89 	bl	8006a62 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f54:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <vTaskResume+0xb4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d307      	bcc.n	8007f6e <vTaskResume+0xa6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f88 <vTaskResume+0xc0>)
 8007f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007f6e:	f001 fde1 	bl	8009b34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	2000114c 	.word	0x2000114c
 8007f80:	20001628 	.word	0x20001628
 8007f84:	20001150 	.word	0x20001150
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08a      	sub	sp, #40	@ 0x28
 8007f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f9a:	463a      	mov	r2, r7
 8007f9c:	1d39      	adds	r1, r7, #4
 8007f9e:	f107 0308 	add.w	r3, r7, #8
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fcfc 	bl	80069a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	9202      	str	r2, [sp, #8]
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	460a      	mov	r2, r1
 8007fba:	4926      	ldr	r1, [pc, #152]	@ (8008054 <vTaskStartScheduler+0xc8>)
 8007fbc:	4826      	ldr	r0, [pc, #152]	@ (8008058 <vTaskStartScheduler+0xcc>)
 8007fbe:	f7ff fcd9 	bl	8007974 <xTaskCreateStatic>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4a25      	ldr	r2, [pc, #148]	@ (800805c <vTaskStartScheduler+0xd0>)
 8007fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fc8:	4b24      	ldr	r3, [pc, #144]	@ (800805c <vTaskStartScheduler+0xd0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e001      	b.n	8007fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d102      	bne.n	8007fe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fe0:	f001 f87a 	bl	80090d8 <xTimerCreateTimerTask>
 8007fe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d11d      	bne.n	8008028 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	b672      	cpsid	i
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	b662      	cpsie	i
 8008000:	613b      	str	r3, [r7, #16]
}
 8008002:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008004:	4b16      	ldr	r3, [pc, #88]	@ (8008060 <vTaskStartScheduler+0xd4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3354      	adds	r3, #84	@ 0x54
 800800a:	4a16      	ldr	r2, [pc, #88]	@ (8008064 <vTaskStartScheduler+0xd8>)
 800800c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800800e:	4b16      	ldr	r3, [pc, #88]	@ (8008068 <vTaskStartScheduler+0xdc>)
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <vTaskStartScheduler+0xe0>)
 8008018:	2201      	movs	r2, #1
 800801a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800801c:	4b14      	ldr	r3, [pc, #80]	@ (8008070 <vTaskStartScheduler+0xe4>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008022:	f001 fcb5 	bl	8009990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008026:	e011      	b.n	800804c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d10d      	bne.n	800804c <vTaskStartScheduler+0xc0>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	b672      	cpsid	i
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	b662      	cpsie	i
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <vTaskStartScheduler+0xbc>
}
 800804c:	bf00      	nop
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	0800d7d8 	.word	0x0800d7d8
 8008058:	0800871d 	.word	0x0800871d
 800805c:	20001644 	.word	0x20001644
 8008060:	2000114c 	.word	0x2000114c
 8008064:	20000020 	.word	0x20000020
 8008068:	20001640 	.word	0x20001640
 800806c:	2000162c 	.word	0x2000162c
 8008070:	20001624 	.word	0x20001624

08008074 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	b672      	cpsid	i
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	b662      	cpsie	i
 800808e:	607b      	str	r3, [r7, #4]
}
 8008090:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8008092:	4b04      	ldr	r3, [pc, #16]	@ (80080a4 <vTaskEndScheduler+0x30>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8008098:	f001 fcf8 	bl	8009a8c <vPortEndScheduler>
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	2000162c 	.word	0x2000162c

080080a8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080ac:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <vTaskSuspendAll+0x18>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a03      	ldr	r2, [pc, #12]	@ (80080c0 <vTaskSuspendAll+0x18>)
 80080b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80080b6:	bf00      	nop
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20001648 	.word	0x20001648

080080c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080d2:	4b43      	ldr	r3, [pc, #268]	@ (80081e0 <xTaskResumeAll+0x11c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10d      	bne.n	80080f6 <xTaskResumeAll+0x32>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	b672      	cpsid	i
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	b662      	cpsie	i
 80080ee:	603b      	str	r3, [r7, #0]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080f6:	f001 fce7 	bl	8009ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080fa:	4b39      	ldr	r3, [pc, #228]	@ (80081e0 <xTaskResumeAll+0x11c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3b01      	subs	r3, #1
 8008100:	4a37      	ldr	r2, [pc, #220]	@ (80081e0 <xTaskResumeAll+0x11c>)
 8008102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008104:	4b36      	ldr	r3, [pc, #216]	@ (80081e0 <xTaskResumeAll+0x11c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d162      	bne.n	80081d2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800810c:	4b35      	ldr	r3, [pc, #212]	@ (80081e4 <xTaskResumeAll+0x120>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d05e      	beq.n	80081d2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008114:	e02f      	b.n	8008176 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008116:	4b34      	ldr	r3, [pc, #208]	@ (80081e8 <xTaskResumeAll+0x124>)
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3318      	adds	r3, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fcfa 	bl	8006b1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3304      	adds	r3, #4
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe fcf5 	bl	8006b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	4b2d      	ldr	r3, [pc, #180]	@ (80081ec <xTaskResumeAll+0x128>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d903      	bls.n	8008146 <xTaskResumeAll+0x82>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	4a2a      	ldr	r2, [pc, #168]	@ (80081ec <xTaskResumeAll+0x128>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4a27      	ldr	r2, [pc, #156]	@ (80081f0 <xTaskResumeAll+0x12c>)
 8008154:	441a      	add	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3304      	adds	r3, #4
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7fe fc80 	bl	8006a62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008166:	4b23      	ldr	r3, [pc, #140]	@ (80081f4 <xTaskResumeAll+0x130>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816c:	429a      	cmp	r2, r3
 800816e:	d302      	bcc.n	8008176 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008170:	4b21      	ldr	r3, [pc, #132]	@ (80081f8 <xTaskResumeAll+0x134>)
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008176:	4b1c      	ldr	r3, [pc, #112]	@ (80081e8 <xTaskResumeAll+0x124>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1cb      	bne.n	8008116 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008184:	f000 fb88 	bl	8008898 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008188:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <xTaskResumeAll+0x138>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d010      	beq.n	80081b6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008194:	f000 f858 	bl	8008248 <xTaskIncrementTick>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800819e:	4b16      	ldr	r3, [pc, #88]	@ (80081f8 <xTaskResumeAll+0x134>)
 80081a0:	2201      	movs	r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f1      	bne.n	8008194 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <xTaskResumeAll+0x138>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081b6:	4b10      	ldr	r3, [pc, #64]	@ (80081f8 <xTaskResumeAll+0x134>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081be:	2301      	movs	r3, #1
 80081c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008200 <xTaskResumeAll+0x13c>)
 80081c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081d2:	f001 fcaf 	bl	8009b34 <vPortExitCritical>

	return xAlreadyYielded;
 80081d6:	68bb      	ldr	r3, [r7, #8]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20001648 	.word	0x20001648
 80081e4:	20001620 	.word	0x20001620
 80081e8:	200015e0 	.word	0x200015e0
 80081ec:	20001628 	.word	0x20001628
 80081f0:	20001150 	.word	0x20001150
 80081f4:	2000114c 	.word	0x2000114c
 80081f8:	20001634 	.word	0x20001634
 80081fc:	20001630 	.word	0x20001630
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800820a:	4b05      	ldr	r3, [pc, #20]	@ (8008220 <xTaskGetTickCount+0x1c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008210:	687b      	ldr	r3, [r7, #4]
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20001624 	.word	0x20001624

08008224 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800822a:	f001 fd37 	bl	8009c9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008232:	4b04      	ldr	r3, [pc, #16]	@ (8008244 <xTaskGetTickCountFromISR+0x20>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008238:	683b      	ldr	r3, [r7, #0]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20001624 	.word	0x20001624

08008248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800824e:	2300      	movs	r3, #0
 8008250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008252:	4b50      	ldr	r3, [pc, #320]	@ (8008394 <xTaskIncrementTick+0x14c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f040 808c 	bne.w	8008374 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800825c:	4b4e      	ldr	r3, [pc, #312]	@ (8008398 <xTaskIncrementTick+0x150>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3301      	adds	r3, #1
 8008262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008264:	4a4c      	ldr	r2, [pc, #304]	@ (8008398 <xTaskIncrementTick+0x150>)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d123      	bne.n	80082b8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008270:	4b4a      	ldr	r3, [pc, #296]	@ (800839c <xTaskIncrementTick+0x154>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <xTaskIncrementTick+0x4e>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827e:	b672      	cpsid	i
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	b662      	cpsie	i
 800828e:	603b      	str	r3, [r7, #0]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <xTaskIncrementTick+0x4a>
 8008296:	4b41      	ldr	r3, [pc, #260]	@ (800839c <xTaskIncrementTick+0x154>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	4b40      	ldr	r3, [pc, #256]	@ (80083a0 <xTaskIncrementTick+0x158>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a3e      	ldr	r2, [pc, #248]	@ (800839c <xTaskIncrementTick+0x154>)
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	4a3e      	ldr	r2, [pc, #248]	@ (80083a0 <xTaskIncrementTick+0x158>)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4b3e      	ldr	r3, [pc, #248]	@ (80083a4 <xTaskIncrementTick+0x15c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3301      	adds	r3, #1
 80082b0:	4a3c      	ldr	r2, [pc, #240]	@ (80083a4 <xTaskIncrementTick+0x15c>)
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	f000 faf0 	bl	8008898 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082b8:	4b3b      	ldr	r3, [pc, #236]	@ (80083a8 <xTaskIncrementTick+0x160>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d349      	bcc.n	8008356 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082c2:	4b36      	ldr	r3, [pc, #216]	@ (800839c <xTaskIncrementTick+0x154>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d104      	bne.n	80082d6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082cc:	4b36      	ldr	r3, [pc, #216]	@ (80083a8 <xTaskIncrementTick+0x160>)
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	601a      	str	r2, [r3, #0]
					break;
 80082d4:	e03f      	b.n	8008356 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d6:	4b31      	ldr	r3, [pc, #196]	@ (800839c <xTaskIncrementTick+0x154>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d203      	bcs.n	80082f6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082ee:	4a2e      	ldr	r2, [pc, #184]	@ (80083a8 <xTaskIncrementTick+0x160>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082f4:	e02f      	b.n	8008356 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fc0e 	bl	8006b1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3318      	adds	r3, #24
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fc05 	bl	8006b1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008316:	4b25      	ldr	r3, [pc, #148]	@ (80083ac <xTaskIncrementTick+0x164>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d903      	bls.n	8008326 <xTaskIncrementTick+0xde>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	4a22      	ldr	r2, [pc, #136]	@ (80083ac <xTaskIncrementTick+0x164>)
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4a1f      	ldr	r2, [pc, #124]	@ (80083b0 <xTaskIncrementTick+0x168>)
 8008334:	441a      	add	r2, r3
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3304      	adds	r3, #4
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f7fe fb90 	bl	8006a62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008346:	4b1b      	ldr	r3, [pc, #108]	@ (80083b4 <xTaskIncrementTick+0x16c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834c:	429a      	cmp	r2, r3
 800834e:	d3b8      	bcc.n	80082c2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008354:	e7b5      	b.n	80082c2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008356:	4b17      	ldr	r3, [pc, #92]	@ (80083b4 <xTaskIncrementTick+0x16c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835c:	4914      	ldr	r1, [pc, #80]	@ (80083b0 <xTaskIncrementTick+0x168>)
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d907      	bls.n	800837e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800836e:	2301      	movs	r3, #1
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	e004      	b.n	800837e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008374:	4b10      	ldr	r3, [pc, #64]	@ (80083b8 <xTaskIncrementTick+0x170>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a0f      	ldr	r2, [pc, #60]	@ (80083b8 <xTaskIncrementTick+0x170>)
 800837c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800837e:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <xTaskIncrementTick+0x174>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008386:	2301      	movs	r3, #1
 8008388:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800838a:	697b      	ldr	r3, [r7, #20]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20001648 	.word	0x20001648
 8008398:	20001624 	.word	0x20001624
 800839c:	200015d8 	.word	0x200015d8
 80083a0:	200015dc 	.word	0x200015dc
 80083a4:	20001638 	.word	0x20001638
 80083a8:	20001640 	.word	0x20001640
 80083ac:	20001628 	.word	0x20001628
 80083b0:	20001150 	.word	0x20001150
 80083b4:	2000114c 	.word	0x2000114c
 80083b8:	20001630 	.word	0x20001630
 80083bc:	20001634 	.word	0x20001634

080083c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008478 <vTaskSwitchContext+0xb8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083ce:	4b2b      	ldr	r3, [pc, #172]	@ (800847c <vTaskSwitchContext+0xbc>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083d4:	e049      	b.n	800846a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80083d6:	4b29      	ldr	r3, [pc, #164]	@ (800847c <vTaskSwitchContext+0xbc>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083dc:	4b28      	ldr	r3, [pc, #160]	@ (8008480 <vTaskSwitchContext+0xc0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e013      	b.n	800840c <vTaskSwitchContext+0x4c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10d      	bne.n	8008406 <vTaskSwitchContext+0x46>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ee:	b672      	cpsid	i
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	b662      	cpsie	i
 80083fe:	607b      	str	r3, [r7, #4]
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	e7fd      	b.n	8008402 <vTaskSwitchContext+0x42>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3b01      	subs	r3, #1
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	491d      	ldr	r1, [pc, #116]	@ (8008484 <vTaskSwitchContext+0xc4>)
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	440b      	add	r3, r1
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0e1      	beq.n	80083e4 <vTaskSwitchContext+0x24>
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <vTaskSwitchContext+0xc4>)
 800842c:	4413      	add	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3308      	adds	r3, #8
 8008442:	429a      	cmp	r2, r3
 8008444:	d104      	bne.n	8008450 <vTaskSwitchContext+0x90>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	4a0c      	ldr	r2, [pc, #48]	@ (8008488 <vTaskSwitchContext+0xc8>)
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	4a09      	ldr	r2, [pc, #36]	@ (8008480 <vTaskSwitchContext+0xc0>)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008460:	4b09      	ldr	r3, [pc, #36]	@ (8008488 <vTaskSwitchContext+0xc8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3354      	adds	r3, #84	@ 0x54
 8008466:	4a09      	ldr	r2, [pc, #36]	@ (800848c <vTaskSwitchContext+0xcc>)
 8008468:	6013      	str	r3, [r2, #0]
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20001648 	.word	0x20001648
 800847c:	20001634 	.word	0x20001634
 8008480:	20001628 	.word	0x20001628
 8008484:	20001150 	.word	0x20001150
 8008488:	2000114c 	.word	0x2000114c
 800848c:	20000020 	.word	0x20000020

08008490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10d      	bne.n	80084bc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	b672      	cpsid	i
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	b662      	cpsie	i
 80084b4:	60fb      	str	r3, [r7, #12]
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084bc:	4b07      	ldr	r3, [pc, #28]	@ (80084dc <vTaskPlaceOnEventList+0x4c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3318      	adds	r3, #24
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fe faf0 	bl	8006aaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084ca:	2101      	movs	r1, #1
 80084cc:	6838      	ldr	r0, [r7, #0]
 80084ce:	f000 fdaf 	bl	8009030 <prvAddCurrentTaskToDelayedList>
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000114c 	.word	0x2000114c

080084e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10d      	bne.n	800850e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	b672      	cpsid	i
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	b662      	cpsie	i
 8008506:	617b      	str	r3, [r7, #20]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800850e:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <vTaskPlaceOnEventListRestricted+0x58>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3318      	adds	r3, #24
 8008514:	4619      	mov	r1, r3
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7fe faa3 	bl	8006a62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008522:	f04f 33ff 	mov.w	r3, #4294967295
 8008526:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	68b8      	ldr	r0, [r7, #8]
 800852c:	f000 fd80 	bl	8009030 <prvAddCurrentTaskToDelayedList>
	}
 8008530:	bf00      	nop
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	2000114c 	.word	0x2000114c

0800853c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10d      	bne.n	800856e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	b672      	cpsid	i
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	b662      	cpsie	i
 8008566:	60fb      	str	r3, [r7, #12]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	3318      	adds	r3, #24
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe fad2 	bl	8006b1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008578:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <xTaskRemoveFromEventList+0xb4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11d      	bne.n	80085bc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fac9 	bl	8006b1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858e:	4b19      	ldr	r3, [pc, #100]	@ (80085f4 <xTaskRemoveFromEventList+0xb8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d903      	bls.n	800859e <xTaskRemoveFromEventList+0x62>
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859a:	4a16      	ldr	r2, [pc, #88]	@ (80085f4 <xTaskRemoveFromEventList+0xb8>)
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4a13      	ldr	r2, [pc, #76]	@ (80085f8 <xTaskRemoveFromEventList+0xbc>)
 80085ac:	441a      	add	r2, r3
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f7fe fa54 	bl	8006a62 <vListInsertEnd>
 80085ba:	e005      	b.n	80085c8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	3318      	adds	r3, #24
 80085c0:	4619      	mov	r1, r3
 80085c2:	480e      	ldr	r0, [pc, #56]	@ (80085fc <xTaskRemoveFromEventList+0xc0>)
 80085c4:	f7fe fa4d 	bl	8006a62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008600 <xTaskRemoveFromEventList+0xc4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d905      	bls.n	80085e2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085da:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <xTaskRemoveFromEventList+0xc8>)
 80085dc:	2201      	movs	r2, #1
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e001      	b.n	80085e6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085e6:	697b      	ldr	r3, [r7, #20]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20001648 	.word	0x20001648
 80085f4:	20001628 	.word	0x20001628
 80085f8:	20001150 	.word	0x20001150
 80085fc:	200015e0 	.word	0x200015e0
 8008600:	2000114c 	.word	0x2000114c
 8008604:	20001634 	.word	0x20001634

08008608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008610:	4b06      	ldr	r3, [pc, #24]	@ (800862c <vTaskInternalSetTimeOutState+0x24>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <vTaskInternalSetTimeOutState+0x28>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20001638 	.word	0x20001638
 8008630:	20001624 	.word	0x20001624

08008634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10d      	bne.n	8008660 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	b672      	cpsid	i
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	b662      	cpsie	i
 8008658:	613b      	str	r3, [r7, #16]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10d      	bne.n	8008682 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	b672      	cpsid	i
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	b662      	cpsie	i
 800867a:	60fb      	str	r3, [r7, #12]
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	e7fd      	b.n	800867e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008682:	f001 fa21 	bl	8009ac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008686:	4b1d      	ldr	r3, [pc, #116]	@ (80086fc <xTaskCheckForTimeOut+0xc8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d102      	bne.n	80086a6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	e023      	b.n	80086ee <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b15      	ldr	r3, [pc, #84]	@ (8008700 <xTaskCheckForTimeOut+0xcc>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d007      	beq.n	80086c2 <xTaskCheckForTimeOut+0x8e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d302      	bcc.n	80086c2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e015      	b.n	80086ee <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d20b      	bcs.n	80086e4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff95 	bl	8008608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	e004      	b.n	80086ee <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086ea:	2301      	movs	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086ee:	f001 fa21 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 80086f2:	69fb      	ldr	r3, [r7, #28]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20001624 	.word	0x20001624
 8008700:	20001638 	.word	0x20001638

08008704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008708:	4b03      	ldr	r3, [pc, #12]	@ (8008718 <vTaskMissedYield+0x14>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20001634 	.word	0x20001634

0800871c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008724:	f000 f852 	bl	80087cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <prvIdleTask+0x28>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d9f9      	bls.n	8008724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <prvIdleTask+0x2c>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008740:	e7f0      	b.n	8008724 <prvIdleTask+0x8>
 8008742:	bf00      	nop
 8008744:	20001150 	.word	0x20001150
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008752:	2300      	movs	r3, #0
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	e00c      	b.n	8008772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4a12      	ldr	r2, [pc, #72]	@ (80087ac <prvInitialiseTaskLists+0x60>)
 8008764:	4413      	add	r3, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe f94e 	bl	8006a08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3301      	adds	r3, #1
 8008770:	607b      	str	r3, [r7, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b37      	cmp	r3, #55	@ 0x37
 8008776:	d9ef      	bls.n	8008758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008778:	480d      	ldr	r0, [pc, #52]	@ (80087b0 <prvInitialiseTaskLists+0x64>)
 800877a:	f7fe f945 	bl	8006a08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800877e:	480d      	ldr	r0, [pc, #52]	@ (80087b4 <prvInitialiseTaskLists+0x68>)
 8008780:	f7fe f942 	bl	8006a08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008784:	480c      	ldr	r0, [pc, #48]	@ (80087b8 <prvInitialiseTaskLists+0x6c>)
 8008786:	f7fe f93f 	bl	8006a08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800878a:	480c      	ldr	r0, [pc, #48]	@ (80087bc <prvInitialiseTaskLists+0x70>)
 800878c:	f7fe f93c 	bl	8006a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008790:	480b      	ldr	r0, [pc, #44]	@ (80087c0 <prvInitialiseTaskLists+0x74>)
 8008792:	f7fe f939 	bl	8006a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008796:	4b0b      	ldr	r3, [pc, #44]	@ (80087c4 <prvInitialiseTaskLists+0x78>)
 8008798:	4a05      	ldr	r2, [pc, #20]	@ (80087b0 <prvInitialiseTaskLists+0x64>)
 800879a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <prvInitialiseTaskLists+0x7c>)
 800879e:	4a05      	ldr	r2, [pc, #20]	@ (80087b4 <prvInitialiseTaskLists+0x68>)
 80087a0:	601a      	str	r2, [r3, #0]
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20001150 	.word	0x20001150
 80087b0:	200015b0 	.word	0x200015b0
 80087b4:	200015c4 	.word	0x200015c4
 80087b8:	200015e0 	.word	0x200015e0
 80087bc:	200015f4 	.word	0x200015f4
 80087c0:	2000160c 	.word	0x2000160c
 80087c4:	200015d8 	.word	0x200015d8
 80087c8:	200015dc 	.word	0x200015dc

080087cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087d2:	e019      	b.n	8008808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087d4:	f001 f978 	bl	8009ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d8:	4b10      	ldr	r3, [pc, #64]	@ (800881c <prvCheckTasksWaitingTermination+0x50>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe f999 	bl	8006b1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008820 <prvCheckTasksWaitingTermination+0x54>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008820 <prvCheckTasksWaitingTermination+0x54>)
 80087f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <prvCheckTasksWaitingTermination+0x58>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008824 <prvCheckTasksWaitingTermination+0x58>)
 80087fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087fe:	f001 f999 	bl	8009b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f810 	bl	8008828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008808:	4b06      	ldr	r3, [pc, #24]	@ (8008824 <prvCheckTasksWaitingTermination+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e1      	bne.n	80087d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	200015f4 	.word	0x200015f4
 8008820:	20001620 	.word	0x20001620
 8008824:	20001608 	.word	0x20001608

08008828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3354      	adds	r3, #84	@ 0x54
 8008834:	4618      	mov	r0, r3
 8008836:	f002 fbe9 	bl	800b00c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008848:	4618      	mov	r0, r3
 800884a:	f001 fb3b 	bl	8009ec4 <vPortFree>
				vPortFree( pxTCB );
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fb38 	bl	8009ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008854:	e01b      	b.n	800888e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800885c:	2b01      	cmp	r3, #1
 800885e:	d103      	bne.n	8008868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fb2f 	bl	8009ec4 <vPortFree>
	}
 8008866:	e012      	b.n	800888e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800886e:	2b02      	cmp	r3, #2
 8008870:	d00d      	beq.n	800888e <prvDeleteTCB+0x66>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	b672      	cpsid	i
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	b662      	cpsie	i
 8008886:	60fb      	str	r3, [r7, #12]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <prvDeleteTCB+0x62>
	}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800889e:	4b0c      	ldr	r3, [pc, #48]	@ (80088d0 <prvResetNextTaskUnblockTime+0x38>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d104      	bne.n	80088b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088a8:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <prvResetNextTaskUnblockTime+0x3c>)
 80088aa:	f04f 32ff 	mov.w	r2, #4294967295
 80088ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088b0:	e008      	b.n	80088c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b2:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <prvResetNextTaskUnblockTime+0x38>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4a04      	ldr	r2, [pc, #16]	@ (80088d4 <prvResetNextTaskUnblockTime+0x3c>)
 80088c2:	6013      	str	r3, [r2, #0]
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	200015d8 	.word	0x200015d8
 80088d4:	20001640 	.word	0x20001640

080088d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088de:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <xTaskGetSchedulerState+0x34>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088e6:	2301      	movs	r3, #1
 80088e8:	607b      	str	r3, [r7, #4]
 80088ea:	e008      	b.n	80088fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ec:	4b08      	ldr	r3, [pc, #32]	@ (8008910 <xTaskGetSchedulerState+0x38>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088f4:	2302      	movs	r3, #2
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	e001      	b.n	80088fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088fa:	2300      	movs	r3, #0
 80088fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088fe:	687b      	ldr	r3, [r7, #4]
	}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	2000162c 	.word	0x2000162c
 8008910:	20001648 	.word	0x20001648

08008914 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d051      	beq.n	80089ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892e:	4b2a      	ldr	r3, [pc, #168]	@ (80089d8 <xTaskPriorityInherit+0xc4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008934:	429a      	cmp	r2, r3
 8008936:	d241      	bcs.n	80089bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	db06      	blt.n	800894e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008940:	4b25      	ldr	r3, [pc, #148]	@ (80089d8 <xTaskPriorityInherit+0xc4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	6959      	ldr	r1, [r3, #20]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4a1f      	ldr	r2, [pc, #124]	@ (80089dc <xTaskPriorityInherit+0xc8>)
 8008960:	4413      	add	r3, r2
 8008962:	4299      	cmp	r1, r3
 8008964:	d122      	bne.n	80089ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe f8d6 	bl	8006b1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008970:	4b19      	ldr	r3, [pc, #100]	@ (80089d8 <xTaskPriorityInherit+0xc4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897e:	4b18      	ldr	r3, [pc, #96]	@ (80089e0 <xTaskPriorityInherit+0xcc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d903      	bls.n	800898e <xTaskPriorityInherit+0x7a>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	4a15      	ldr	r2, [pc, #84]	@ (80089e0 <xTaskPriorityInherit+0xcc>)
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a10      	ldr	r2, [pc, #64]	@ (80089dc <xTaskPriorityInherit+0xc8>)
 800899c:	441a      	add	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7fe f85c 	bl	8006a62 <vListInsertEnd>
 80089aa:	e004      	b.n	80089b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <xTaskPriorityInherit+0xc4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80089b6:	2301      	movs	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e008      	b.n	80089ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089c0:	4b05      	ldr	r3, [pc, #20]	@ (80089d8 <xTaskPriorityInherit+0xc4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d201      	bcs.n	80089ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089ce:	68fb      	ldr	r3, [r7, #12]
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	2000114c 	.word	0x2000114c
 80089dc:	20001150 	.word	0x20001150
 80089e0:	20001628 	.word	0x20001628

080089e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d05c      	beq.n	8008ab4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089fa:	4b31      	ldr	r3, [pc, #196]	@ (8008ac0 <xTaskPriorityDisinherit+0xdc>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d00d      	beq.n	8008a20 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	b672      	cpsid	i
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	b662      	cpsie	i
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10d      	bne.n	8008a44 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	60bb      	str	r3, [r7, #8]
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a48:	1e5a      	subs	r2, r3, #1
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d02c      	beq.n	8008ab4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d128      	bne.n	8008ab4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3304      	adds	r3, #4
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f858 	bl	8006b1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a84:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <xTaskPriorityDisinherit+0xe0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d903      	bls.n	8008a94 <xTaskPriorityDisinherit+0xb0>
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a90:	4a0c      	ldr	r2, [pc, #48]	@ (8008ac4 <xTaskPriorityDisinherit+0xe0>)
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4a09      	ldr	r2, [pc, #36]	@ (8008ac8 <xTaskPriorityDisinherit+0xe4>)
 8008aa2:	441a      	add	r2, r3
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f7fd ffd9 	bl	8006a62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ab4:	697b      	ldr	r3, [r7, #20]
	}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	2000114c 	.word	0x2000114c
 8008ac4:	20001628 	.word	0x20001628
 8008ac8:	20001150 	.word	0x20001150

08008acc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ada:	2301      	movs	r3, #1
 8008adc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d070      	beq.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af0:	b672      	cpsid	i
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	b662      	cpsie	i
 8008b00:	60fb      	str	r3, [r7, #12]
}
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	e7fd      	b.n	8008b04 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d902      	bls.n	8008b18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	61fb      	str	r3, [r7, #28]
 8008b16:	e002      	b.n	8008b1e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d04e      	beq.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d149      	bne.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b32:	4b27      	ldr	r3, [pc, #156]	@ (8008bd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d10d      	bne.n	8008b58 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	b672      	cpsid	i
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	b662      	cpsie	i
 8008b50:	60bb      	str	r3, [r7, #8]
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db04      	blt.n	8008b76 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	6959      	ldr	r1, [r3, #20]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4a13      	ldr	r2, [pc, #76]	@ (8008bd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008b86:	4413      	add	r3, r2
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d11c      	bne.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fd ffc3 	bl	8006b1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d903      	bls.n	8008baa <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4a07      	ldr	r2, [pc, #28]	@ (8008bd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008bb8:	441a      	add	r2, r3
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7fd ff4e 	bl	8006a62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bc6:	bf00      	nop
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	2000114c 	.word	0x2000114c
 8008bd4:	20001150 	.word	0x20001150
 8008bd8:	20001628 	.word	0x20001628

08008bdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008be8:	4b05      	ldr	r3, [pc, #20]	@ (8008c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bee:	3201      	adds	r2, #1
 8008bf0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	@ (8008c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
	}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	2000114c 	.word	0x2000114c

08008c04 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008c12:	f000 ff59 	bl	8009ac8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008c16:	4b29      	ldr	r3, [pc, #164]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d01c      	beq.n	8008c5e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008c24:	4b25      	ldr	r3, [pc, #148]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	43d2      	mvns	r2, r2
 8008c30:	400a      	ands	r2, r1
 8008c32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008c36:	4b21      	ldr	r3, [pc, #132]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00b      	beq.n	8008c5e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c46:	2101      	movs	r1, #1
 8008c48:	6838      	ldr	r0, [r7, #0]
 8008c4a:	f000 f9f1 	bl	8009030 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <xTaskNotifyWait+0xbc>)
 8008c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008c5e:	f000 ff69 	bl	8009b34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008c62:	f000 ff31 	bl	8009ac8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d005      	beq.n	8008c78 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008c6c:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008c78:	4b10      	ldr	r3, [pc, #64]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d002      	beq.n	8008c8c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e00a      	b.n	8008ca2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	43d2      	mvns	r2, r2
 8008c98:	400a      	ands	r2, r1
 8008c9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ca2:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <xTaskNotifyWait+0xb8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8008cac:	f000 ff42 	bl	8009b34 <vPortExitCritical>

		return xReturn;
 8008cb0:	697b      	ldr	r3, [r7, #20]
	}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	2000114c 	.word	0x2000114c
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	@ 0x28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10d      	bne.n	8008cfa <xTaskGenericNotify+0x36>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	b672      	cpsid	i
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	b662      	cpsie	i
 8008cf2:	61bb      	str	r3, [r7, #24]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008cfe:	f000 fee3 	bl	8009ac8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008d18:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d82e      	bhi.n	8008d86 <xTaskGenericNotify+0xc2>
 8008d28:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <xTaskGenericNotify+0x6c>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008daf 	.word	0x08008daf
 8008d34:	08008d45 	.word	0x08008d45
 8008d38:	08008d57 	.word	0x08008d57
 8008d3c:	08008d67 	.word	0x08008d67
 8008d40:	08008d71 	.word	0x08008d71
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008d54:	e02e      	b.n	8008db4 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008d64:	e026      	b.n	8008db4 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008d6e:	e021      	b.n	8008db4 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008d70:	7ffb      	ldrb	r3, [r7, #31]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d004      	beq.n	8008d80 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008d7e:	e019      	b.n	8008db4 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8008d80:	2300      	movs	r3, #0
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008d84:	e016      	b.n	8008db4 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d90:	d00f      	beq.n	8008db2 <xTaskGenericNotify+0xee>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	b672      	cpsid	i
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	b662      	cpsie	i
 8008da6:	617b      	str	r3, [r7, #20]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <xTaskGenericNotify+0xe6>
					break;
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <xTaskGenericNotify+0xf0>

					break;
 8008db2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008db4:	7ffb      	ldrb	r3, [r7, #31]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d13d      	bne.n	8008e36 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fd feac 	bl	8006b1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e44 <xTaskGenericNotify+0x180>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d903      	bls.n	8008dd8 <xTaskGenericNotify+0x114>
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e44 <xTaskGenericNotify+0x180>)
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4a18      	ldr	r2, [pc, #96]	@ (8008e48 <xTaskGenericNotify+0x184>)
 8008de6:	441a      	add	r2, r3
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fd fe37 	bl	8006a62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00d      	beq.n	8008e18 <xTaskGenericNotify+0x154>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	b672      	cpsid	i
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	b662      	cpsie	i
 8008e10:	613b      	str	r3, [r7, #16]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <xTaskGenericNotify+0x188>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d907      	bls.n	8008e36 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008e26:	4b0a      	ldr	r3, [pc, #40]	@ (8008e50 <xTaskGenericNotify+0x18c>)
 8008e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008e36:	f000 fe7d 	bl	8009b34 <vPortExitCritical>

		return xReturn;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3728      	adds	r7, #40	@ 0x28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20001628 	.word	0x20001628
 8008e48:	20001150 	.word	0x20001150
 8008e4c:	2000114c 	.word	0x2000114c
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08e      	sub	sp, #56	@ 0x38
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4613      	mov	r3, r2
 8008e62:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008e64:	2301      	movs	r3, #1
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	b672      	cpsid	i
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	b662      	cpsie	i
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e8a:	f000 ff07 	bl	8009c9c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008e92:	f3ef 8211 	mrs	r2, BASEPRI
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	b672      	cpsid	i
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	b662      	cpsie	i
 8008eaa:	623a      	str	r2, [r7, #32]
 8008eac:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008eae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d82e      	bhi.n	8008f38 <xTaskGenericNotifyFromISR+0xe4>
 8008eda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <xTaskGenericNotifyFromISR+0x8c>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008f61 	.word	0x08008f61
 8008ee4:	08008ef5 	.word	0x08008ef5
 8008ee8:	08008f07 	.word	0x08008f07
 8008eec:	08008f17 	.word	0x08008f17
 8008ef0:	08008f21 	.word	0x08008f21
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	431a      	orrs	r2, r3
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008f04:	e02f      	b.n	8008f66 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008f14:	e027      	b.n	8008f66 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008f1e:	e022      	b.n	8008f66 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008f20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d004      	beq.n	8008f32 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008f30:	e019      	b.n	8008f66 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008f36:	e016      	b.n	8008f66 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f42:	d00f      	beq.n	8008f64 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f48:	b672      	cpsid	i
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	b662      	cpsie	i
 8008f58:	61bb      	str	r3, [r7, #24]
}
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <xTaskGenericNotifyFromISR+0x108>
					break;
 8008f60:	bf00      	nop
 8008f62:	e000      	b.n	8008f66 <xTaskGenericNotifyFromISR+0x112>
					break;
 8008f64:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008f66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d149      	bne.n	8009002 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00d      	beq.n	8008f92 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	617b      	str	r3, [r7, #20]
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	e7fd      	b.n	8008f8e <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f92:	4b21      	ldr	r3, [pc, #132]	@ (8009018 <xTaskGenericNotifyFromISR+0x1c4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d11d      	bne.n	8008fd6 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fd fdbc 	bl	8006b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800901c <xTaskGenericNotifyFromISR+0x1c8>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d903      	bls.n	8008fb8 <xTaskGenericNotifyFromISR+0x164>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a19      	ldr	r2, [pc, #100]	@ (800901c <xTaskGenericNotifyFromISR+0x1c8>)
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4a16      	ldr	r2, [pc, #88]	@ (8009020 <xTaskGenericNotifyFromISR+0x1cc>)
 8008fc6:	441a      	add	r2, r3
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	f7fd fd47 	bl	8006a62 <vListInsertEnd>
 8008fd4:	e005      	b.n	8008fe2 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	3318      	adds	r3, #24
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4811      	ldr	r0, [pc, #68]	@ (8009024 <xTaskGenericNotifyFromISR+0x1d0>)
 8008fde:	f7fd fd40 	bl	8006a62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe6:	4b10      	ldr	r3, [pc, #64]	@ (8009028 <xTaskGenericNotifyFromISR+0x1d4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d908      	bls.n	8009002 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <xTaskGenericNotifyFromISR+0x1d8>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009004:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f383 8811 	msr	BASEPRI, r3
}
 800900c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800900e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009010:	4618      	mov	r0, r3
 8009012:	3738      	adds	r7, #56	@ 0x38
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20001648 	.word	0x20001648
 800901c:	20001628 	.word	0x20001628
 8009020:	20001150 	.word	0x20001150
 8009024:	200015e0 	.word	0x200015e0
 8009028:	2000114c 	.word	0x2000114c
 800902c:	20001634 	.word	0x20001634

08009030 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800903a:	4b21      	ldr	r3, [pc, #132]	@ (80090c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009040:	4b20      	ldr	r3, [pc, #128]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3304      	adds	r3, #4
 8009046:	4618      	mov	r0, r3
 8009048:	f7fd fd68 	bl	8006b1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d10a      	bne.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b1a      	ldr	r3, [pc, #104]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3304      	adds	r3, #4
 8009060:	4619      	mov	r1, r3
 8009062:	4819      	ldr	r0, [pc, #100]	@ (80090c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009064:	f7fd fcfd 	bl	8006a62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009068:	e026      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	429a      	cmp	r2, r3
 8009080:	d209      	bcs.n	8009096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009082:	4b12      	ldr	r3, [pc, #72]	@ (80090cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b0f      	ldr	r3, [pc, #60]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7fd fd0b 	bl	8006aaa <vListInsert>
}
 8009094:	e010      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009096:	4b0e      	ldr	r3, [pc, #56]	@ (80090d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fd fd01 	bl	8006aaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090a8:	4b0a      	ldr	r3, [pc, #40]	@ (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d202      	bcs.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090b2:	4a08      	ldr	r2, [pc, #32]	@ (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20001624 	.word	0x20001624
 80090c4:	2000114c 	.word	0x2000114c
 80090c8:	2000160c 	.word	0x2000160c
 80090cc:	200015dc 	.word	0x200015dc
 80090d0:	200015d8 	.word	0x200015d8
 80090d4:	20001640 	.word	0x20001640

080090d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	@ 0x28
 80090dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090e2:	f000 fb81 	bl	80097e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009160 <xTimerCreateTimerTask+0x88>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d021      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090f6:	1d3a      	adds	r2, r7, #4
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4618      	mov	r0, r3
 8009102:	f7fd fc67 	bl	80069d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2302      	movs	r3, #2
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	460a      	mov	r2, r1
 8009118:	4912      	ldr	r1, [pc, #72]	@ (8009164 <xTimerCreateTimerTask+0x8c>)
 800911a:	4813      	ldr	r0, [pc, #76]	@ (8009168 <xTimerCreateTimerTask+0x90>)
 800911c:	f7fe fc2a 	bl	8007974 <xTaskCreateStatic>
 8009120:	4603      	mov	r3, r0
 8009122:	4a12      	ldr	r2, [pc, #72]	@ (800916c <xTimerCreateTimerTask+0x94>)
 8009124:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009126:	4b11      	ldr	r3, [pc, #68]	@ (800916c <xTimerCreateTimerTask+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800912e:	2301      	movs	r3, #1
 8009130:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10d      	bne.n	8009154 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	613b      	str	r3, [r7, #16]
}
 800914e:	bf00      	nop
 8009150:	bf00      	nop
 8009152:	e7fd      	b.n	8009150 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009154:	697b      	ldr	r3, [r7, #20]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	2000167c 	.word	0x2000167c
 8009164:	0800d7e0 	.word	0x0800d7e0
 8009168:	08009371 	.word	0x08009371
 800916c:	20001680 	.word	0x20001680

08009170 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af02      	add	r7, sp, #8
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800917e:	202c      	movs	r0, #44	@ 0x2c
 8009180:	f000 fdd2 	bl	8009d28 <pvPortMalloc>
 8009184:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00d      	beq.n	80091a8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f805 	bl	80091b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80091a8:	697b      	ldr	r3, [r7, #20]
	}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
 80091be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10d      	bne.n	80091e2 <prvInitialiseNewTimer+0x30>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	617b      	str	r3, [r7, #20]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01e      	beq.n	8009226 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80091e8:	f000 fafe 	bl	80097e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	6a3a      	ldr	r2, [r7, #32]
 8009202:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fd fc1d 	bl	8006a48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d008      	beq.n	8009226 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800921a:	f043 0304 	orr.w	r3, r3, #4
 800921e:	b2da      	uxtb	r2, r3
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009226:	bf00      	nop
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08a      	sub	sp, #40	@ 0x28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800923e:	2300      	movs	r3, #0
 8009240:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10d      	bne.n	8009264 <xTimerGenericCommand+0x34>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	b672      	cpsid	i
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	b662      	cpsie	i
 800925c:	623b      	str	r3, [r7, #32]
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009264:	4b19      	ldr	r3, [pc, #100]	@ (80092cc <xTimerGenericCommand+0x9c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d02a      	beq.n	80092c2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b05      	cmp	r3, #5
 800927c:	dc18      	bgt.n	80092b0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800927e:	f7ff fb2b 	bl	80088d8 <xTaskGetSchedulerState>
 8009282:	4603      	mov	r3, r0
 8009284:	2b02      	cmp	r3, #2
 8009286:	d109      	bne.n	800929c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009288:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <xTimerGenericCommand+0x9c>)
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	f107 0110 	add.w	r1, r7, #16
 8009290:	2300      	movs	r3, #0
 8009292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009294:	f7fd fdf8 	bl	8006e88 <xQueueGenericSend>
 8009298:	6278      	str	r0, [r7, #36]	@ 0x24
 800929a:	e012      	b.n	80092c2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800929c:	4b0b      	ldr	r3, [pc, #44]	@ (80092cc <xTimerGenericCommand+0x9c>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	f107 0110 	add.w	r1, r7, #16
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	f7fd fdee 	bl	8006e88 <xQueueGenericSend>
 80092ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80092ae:	e008      	b.n	80092c2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092b0:	4b06      	ldr	r3, [pc, #24]	@ (80092cc <xTimerGenericCommand+0x9c>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	f107 0110 	add.w	r1, r7, #16
 80092b8:	2300      	movs	r3, #0
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	f7fd feee 	bl	800709c <xQueueGenericSendFromISR>
 80092c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3728      	adds	r7, #40	@ 0x28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	2000167c 	.word	0x2000167c

080092d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092da:	4b24      	ldr	r3, [pc, #144]	@ (800936c <prvProcessExpiredTimer+0x9c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fd fc17 	bl	8006b1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d025      	beq.n	8009348 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	699a      	ldr	r2, [r3, #24]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	18d1      	adds	r1, r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	6978      	ldr	r0, [r7, #20]
 800930a:	f000 f8d7 	bl	80094bc <prvInsertTimerInActiveList>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d022      	beq.n	800935a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	2100      	movs	r1, #0
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f7ff ff86 	bl	8009230 <xTimerGenericCommand>
 8009324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d116      	bne.n	800935a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	b672      	cpsid	i
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	b662      	cpsie	i
 8009340:	60fb      	str	r3, [r7, #12]
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	e7fd      	b.n	8009344 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800934e:	f023 0301 	bic.w	r3, r3, #1
 8009352:	b2da      	uxtb	r2, r3
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	4798      	blx	r3
}
 8009362:	bf00      	nop
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20001674 	.word	0x20001674

08009370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009378:	f107 0308 	add.w	r3, r7, #8
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f859 	bl	8009434 <prvGetNextExpireTime>
 8009382:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f805 	bl	8009398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800938e:	f000 f8d7 	bl	8009540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009392:	bf00      	nop
 8009394:	e7f0      	b.n	8009378 <prvTimerTask+0x8>
	...

08009398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093a2:	f7fe fe81 	bl	80080a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093a6:	f107 0308 	add.w	r3, r7, #8
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f866 	bl	800947c <prvSampleTimeNow>
 80093b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d130      	bne.n	800941a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10a      	bne.n	80093d4 <prvProcessTimerOrBlockTask+0x3c>
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d806      	bhi.n	80093d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093c6:	f7fe fe7d 	bl	80080c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff ff7f 	bl	80092d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093d2:	e024      	b.n	800941e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d008      	beq.n	80093ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093da:	4b13      	ldr	r3, [pc, #76]	@ (8009428 <prvProcessTimerOrBlockTask+0x90>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <prvProcessTimerOrBlockTask+0x50>
 80093e4:	2301      	movs	r3, #1
 80093e6:	e000      	b.n	80093ea <prvProcessTimerOrBlockTask+0x52>
 80093e8:	2300      	movs	r3, #0
 80093ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093ec:	4b0f      	ldr	r3, [pc, #60]	@ (800942c <prvProcessTimerOrBlockTask+0x94>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4619      	mov	r1, r3
 80093fa:	f7fe fa87 	bl	800790c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093fe:	f7fe fe61 	bl	80080c4 <xTaskResumeAll>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009408:	4b09      	ldr	r3, [pc, #36]	@ (8009430 <prvProcessTimerOrBlockTask+0x98>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
}
 8009418:	e001      	b.n	800941e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800941a:	f7fe fe53 	bl	80080c4 <xTaskResumeAll>
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001678 	.word	0x20001678
 800942c:	2000167c 	.word	0x2000167c
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800943c:	4b0e      	ldr	r3, [pc, #56]	@ (8009478 <prvGetNextExpireTime+0x44>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <prvGetNextExpireTime+0x16>
 8009446:	2201      	movs	r2, #1
 8009448:	e000      	b.n	800944c <prvGetNextExpireTime+0x18>
 800944a:	2200      	movs	r2, #0
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d105      	bne.n	8009464 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009458:	4b07      	ldr	r3, [pc, #28]	@ (8009478 <prvGetNextExpireTime+0x44>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	e001      	b.n	8009468 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009468:	68fb      	ldr	r3, [r7, #12]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20001674 	.word	0x20001674

0800947c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009484:	f7fe febe 	bl	8008204 <xTaskGetTickCount>
 8009488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800948a:	4b0b      	ldr	r3, [pc, #44]	@ (80094b8 <prvSampleTimeNow+0x3c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	429a      	cmp	r2, r3
 8009492:	d205      	bcs.n	80094a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009494:	f000 f940 	bl	8009718 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e002      	b.n	80094a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094a6:	4a04      	ldr	r2, [pc, #16]	@ (80094b8 <prvSampleTimeNow+0x3c>)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094ac:	68fb      	ldr	r3, [r7, #12]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20001684 	.word	0x20001684

080094bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d812      	bhi.n	8009508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	1ad2      	subs	r2, r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d302      	bcc.n	80094f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094f0:	2301      	movs	r3, #1
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	e01b      	b.n	800952e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094f6:	4b10      	ldr	r3, [pc, #64]	@ (8009538 <prvInsertTimerInActiveList+0x7c>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f7fd fad2 	bl	8006aaa <vListInsert>
 8009506:	e012      	b.n	800952e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d206      	bcs.n	800951e <prvInsertTimerInActiveList+0x62>
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d302      	bcc.n	800951e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	e007      	b.n	800952e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800951e:	4b07      	ldr	r3, [pc, #28]	@ (800953c <prvInsertTimerInActiveList+0x80>)
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3304      	adds	r3, #4
 8009526:	4619      	mov	r1, r3
 8009528:	4610      	mov	r0, r2
 800952a:	f7fd fabe 	bl	8006aaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800952e:	697b      	ldr	r3, [r7, #20]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20001678 	.word	0x20001678
 800953c:	20001674 	.word	0x20001674

08009540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08e      	sub	sp, #56	@ 0x38
 8009544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009546:	e0d4      	b.n	80096f2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	da1b      	bge.n	8009586 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800954e:	1d3b      	adds	r3, r7, #4
 8009550:	3304      	adds	r3, #4
 8009552:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10d      	bne.n	8009576 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955e:	b672      	cpsid	i
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	b662      	cpsie	i
 800956e:	61fb      	str	r3, [r7, #28]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800957c:	6850      	ldr	r0, [r2, #4]
 800957e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009580:	6892      	ldr	r2, [r2, #8]
 8009582:	4611      	mov	r1, r2
 8009584:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	f2c0 80b2 	blt.w	80096f2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	3304      	adds	r3, #4
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fd fabc 	bl	8006b1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095a4:	463b      	mov	r3, r7
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff ff68 	bl	800947c <prvSampleTimeNow>
 80095ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b09      	cmp	r3, #9
 80095b2:	f200 809b 	bhi.w	80096ec <prvProcessReceivedCommands+0x1ac>
 80095b6:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <prvProcessReceivedCommands+0x7c>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095e5 	.word	0x080095e5
 80095c0:	080095e5 	.word	0x080095e5
 80095c4:	080095e5 	.word	0x080095e5
 80095c8:	0800965f 	.word	0x0800965f
 80095cc:	08009673 	.word	0x08009673
 80095d0:	080096c3 	.word	0x080096c3
 80095d4:	080095e5 	.word	0x080095e5
 80095d8:	080095e5 	.word	0x080095e5
 80095dc:	0800965f 	.word	0x0800965f
 80095e0:	08009673 	.word	0x08009673
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ea:	f043 0301 	orr.w	r3, r3, #1
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	18d1      	adds	r1, r2, r3
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009604:	f7ff ff5a 	bl	80094bc <prvInsertTimerInActiveList>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d070      	beq.n	80096f0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009614:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d065      	beq.n	80096f0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	441a      	add	r2, r3
 800962c:	2300      	movs	r3, #0
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	2300      	movs	r3, #0
 8009632:	2100      	movs	r1, #0
 8009634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009636:	f7ff fdfb 	bl	8009230 <xTimerGenericCommand>
 800963a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d156      	bne.n	80096f0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	b672      	cpsid	i
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	b662      	cpsie	i
 8009656:	61bb      	str	r3, [r7, #24]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800965e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	b2da      	uxtb	r2, r3
 800966a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009670:	e03f      	b.n	80096f2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009678:	f043 0301 	orr.w	r3, r3, #1
 800967c:	b2da      	uxtb	r2, r3
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009688:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800968a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10d      	bne.n	80096ae <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009696:	b672      	cpsid	i
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	b662      	cpsie	i
 80096a6:	617b      	str	r3, [r7, #20]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b4:	18d1      	adds	r1, r2, r3
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096bc:	f7ff fefe 	bl	80094bc <prvInsertTimerInActiveList>
					break;
 80096c0:	e017      	b.n	80096f2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80096d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096d2:	f000 fbf7 	bl	8009ec4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096d6:	e00c      	b.n	80096f2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096de:	f023 0301 	bic.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096ea:	e002      	b.n	80096f2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <prvProcessReceivedCommands+0x1b2>
					break;
 80096f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096f2:	4b08      	ldr	r3, [pc, #32]	@ (8009714 <prvProcessReceivedCommands+0x1d4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1d39      	adds	r1, r7, #4
 80096f8:	2200      	movs	r2, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fd fd72 	bl	80071e4 <xQueueReceive>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	f47f af20 	bne.w	8009548 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	3730      	adds	r7, #48	@ 0x30
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	2000167c 	.word	0x2000167c

08009718 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800971e:	e04b      	b.n	80097b8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009720:	4b2f      	ldr	r3, [pc, #188]	@ (80097e0 <prvSwitchTimerLists+0xc8>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800972a:	4b2d      	ldr	r3, [pc, #180]	@ (80097e0 <prvSwitchTimerLists+0xc8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3304      	adds	r3, #4
 8009738:	4618      	mov	r0, r3
 800973a:	f7fd f9ef 	bl	8006b1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d031      	beq.n	80097b8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	4413      	add	r3, r2
 800975c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	429a      	cmp	r2, r3
 8009764:	d90e      	bls.n	8009784 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009772:	4b1b      	ldr	r3, [pc, #108]	@ (80097e0 <prvSwitchTimerLists+0xc8>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fd f994 	bl	8006aaa <vListInsert>
 8009782:	e019      	b.n	80097b8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009784:	2300      	movs	r3, #0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	2300      	movs	r3, #0
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	2100      	movs	r1, #0
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fd4e 	bl	8009230 <xTimerGenericCommand>
 8009794:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10d      	bne.n	80097b8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a0:	b672      	cpsid	i
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	b662      	cpsie	i
 80097b0:	603b      	str	r3, [r7, #0]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097b8:	4b09      	ldr	r3, [pc, #36]	@ (80097e0 <prvSwitchTimerLists+0xc8>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1ae      	bne.n	8009720 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097c2:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <prvSwitchTimerLists+0xc8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097c8:	4b06      	ldr	r3, [pc, #24]	@ (80097e4 <prvSwitchTimerLists+0xcc>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a04      	ldr	r2, [pc, #16]	@ (80097e0 <prvSwitchTimerLists+0xc8>)
 80097ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097d0:	4a04      	ldr	r2, [pc, #16]	@ (80097e4 <prvSwitchTimerLists+0xcc>)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	6013      	str	r3, [r2, #0]
}
 80097d6:	bf00      	nop
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20001674 	.word	0x20001674
 80097e4:	20001678 	.word	0x20001678

080097e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097ee:	f000 f96b 	bl	8009ac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097f2:	4b15      	ldr	r3, [pc, #84]	@ (8009848 <prvCheckForValidListAndQueue+0x60>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d120      	bne.n	800983c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097fa:	4814      	ldr	r0, [pc, #80]	@ (800984c <prvCheckForValidListAndQueue+0x64>)
 80097fc:	f7fd f904 	bl	8006a08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009800:	4813      	ldr	r0, [pc, #76]	@ (8009850 <prvCheckForValidListAndQueue+0x68>)
 8009802:	f7fd f901 	bl	8006a08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009806:	4b13      	ldr	r3, [pc, #76]	@ (8009854 <prvCheckForValidListAndQueue+0x6c>)
 8009808:	4a10      	ldr	r2, [pc, #64]	@ (800984c <prvCheckForValidListAndQueue+0x64>)
 800980a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800980c:	4b12      	ldr	r3, [pc, #72]	@ (8009858 <prvCheckForValidListAndQueue+0x70>)
 800980e:	4a10      	ldr	r2, [pc, #64]	@ (8009850 <prvCheckForValidListAndQueue+0x68>)
 8009810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009812:	2300      	movs	r3, #0
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	4b11      	ldr	r3, [pc, #68]	@ (800985c <prvCheckForValidListAndQueue+0x74>)
 8009818:	4a11      	ldr	r2, [pc, #68]	@ (8009860 <prvCheckForValidListAndQueue+0x78>)
 800981a:	2110      	movs	r1, #16
 800981c:	200a      	movs	r0, #10
 800981e:	f7fd fa13 	bl	8006c48 <xQueueGenericCreateStatic>
 8009822:	4603      	mov	r3, r0
 8009824:	4a08      	ldr	r2, [pc, #32]	@ (8009848 <prvCheckForValidListAndQueue+0x60>)
 8009826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009828:	4b07      	ldr	r3, [pc, #28]	@ (8009848 <prvCheckForValidListAndQueue+0x60>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009830:	4b05      	ldr	r3, [pc, #20]	@ (8009848 <prvCheckForValidListAndQueue+0x60>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	490b      	ldr	r1, [pc, #44]	@ (8009864 <prvCheckForValidListAndQueue+0x7c>)
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe f83e 	bl	80078b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800983c:	f000 f97a 	bl	8009b34 <vPortExitCritical>
}
 8009840:	bf00      	nop
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	2000167c 	.word	0x2000167c
 800984c:	2000164c 	.word	0x2000164c
 8009850:	20001660 	.word	0x20001660
 8009854:	20001674 	.word	0x20001674
 8009858:	20001678 	.word	0x20001678
 800985c:	20001728 	.word	0x20001728
 8009860:	20001688 	.word	0x20001688
 8009864:	0800d7e8 	.word	0x0800d7e8

08009868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3b04      	subs	r3, #4
 8009878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3b04      	subs	r3, #4
 8009886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f023 0201 	bic.w	r2, r3, #1
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3b04      	subs	r3, #4
 8009896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009898:	4a0c      	ldr	r2, [pc, #48]	@ (80098cc <pxPortInitialiseStack+0x64>)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3b14      	subs	r3, #20
 80098a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3b04      	subs	r3, #4
 80098ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f06f 0202 	mvn.w	r2, #2
 80098b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3b20      	subs	r3, #32
 80098bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098be:	68fb      	ldr	r3, [r7, #12]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	080098d1 	.word	0x080098d1

080098d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098da:	4b15      	ldr	r3, [pc, #84]	@ (8009930 <prvTaskExitError+0x60>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e2:	d00d      	beq.n	8009900 <prvTaskExitError+0x30>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e8:	b672      	cpsid	i
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	b662      	cpsie	i
 80098f8:	60fb      	str	r3, [r7, #12]
}
 80098fa:	bf00      	nop
 80098fc:	bf00      	nop
 80098fe:	e7fd      	b.n	80098fc <prvTaskExitError+0x2c>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009904:	b672      	cpsid	i
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	b662      	cpsie	i
 8009914:	60bb      	str	r3, [r7, #8]
}
 8009916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009918:	bf00      	nop
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0fc      	beq.n	800991a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	20000010 	.word	0x20000010
	...

08009940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009940:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <pxCurrentTCBConst2>)
 8009942:	6819      	ldr	r1, [r3, #0]
 8009944:	6808      	ldr	r0, [r1, #0]
 8009946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994a:	f380 8809 	msr	PSP, r0
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f04f 0000 	mov.w	r0, #0
 8009956:	f380 8811 	msr	BASEPRI, r0
 800995a:	4770      	bx	lr
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst2>:
 8009960:	2000114c 	.word	0x2000114c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009968:	4808      	ldr	r0, [pc, #32]	@ (800998c <prvPortStartFirstTask+0x24>)
 800996a:	6800      	ldr	r0, [r0, #0]
 800996c:	6800      	ldr	r0, [r0, #0]
 800996e:	f380 8808 	msr	MSP, r0
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8814 	msr	CONTROL, r0
 800997a:	b662      	cpsie	i
 800997c:	b661      	cpsie	f
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	df00      	svc	0
 8009988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800998a:	bf00      	nop
 800998c:	e000ed08 	.word	0xe000ed08

08009990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009996:	4b37      	ldr	r3, [pc, #220]	@ (8009a74 <xPortStartScheduler+0xe4>)
 8009998:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	22ff      	movs	r2, #255	@ 0xff
 80099a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009a78 <xPortStartScheduler+0xe8>)
 80099bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099be:	4b2f      	ldr	r3, [pc, #188]	@ (8009a7c <xPortStartScheduler+0xec>)
 80099c0:	2207      	movs	r2, #7
 80099c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099c4:	e009      	b.n	80099da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099c6:	4b2d      	ldr	r3, [pc, #180]	@ (8009a7c <xPortStartScheduler+0xec>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	4a2b      	ldr	r2, [pc, #172]	@ (8009a7c <xPortStartScheduler+0xec>)
 80099ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099e2:	2b80      	cmp	r3, #128	@ 0x80
 80099e4:	d0ef      	beq.n	80099c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099e6:	4b25      	ldr	r3, [pc, #148]	@ (8009a7c <xPortStartScheduler+0xec>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1c3 0307 	rsb	r3, r3, #7
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d00d      	beq.n	8009a0e <xPortStartScheduler+0x7e>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	b672      	cpsid	i
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	b662      	cpsie	i
 8009a06:	60bb      	str	r3, [r7, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8009a7c <xPortStartScheduler+0xec>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	021b      	lsls	r3, r3, #8
 8009a14:	4a19      	ldr	r2, [pc, #100]	@ (8009a7c <xPortStartScheduler+0xec>)
 8009a16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a18:	4b18      	ldr	r3, [pc, #96]	@ (8009a7c <xPortStartScheduler+0xec>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a20:	4a16      	ldr	r2, [pc, #88]	@ (8009a7c <xPortStartScheduler+0xec>)
 8009a22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a2c:	4b14      	ldr	r3, [pc, #80]	@ (8009a80 <xPortStartScheduler+0xf0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a13      	ldr	r2, [pc, #76]	@ (8009a80 <xPortStartScheduler+0xf0>)
 8009a32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a38:	4b11      	ldr	r3, [pc, #68]	@ (8009a80 <xPortStartScheduler+0xf0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a10      	ldr	r2, [pc, #64]	@ (8009a80 <xPortStartScheduler+0xf0>)
 8009a3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a44:	f000 f8fc 	bl	8009c40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a48:	4b0e      	ldr	r3, [pc, #56]	@ (8009a84 <xPortStartScheduler+0xf4>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a4e:	f000 f91b 	bl	8009c88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a52:	4b0d      	ldr	r3, [pc, #52]	@ (8009a88 <xPortStartScheduler+0xf8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a0c      	ldr	r2, [pc, #48]	@ (8009a88 <xPortStartScheduler+0xf8>)
 8009a58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a5e:	f7ff ff83 	bl	8009968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a62:	f7fe fcad 	bl	80083c0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a66:	f7ff ff33 	bl	80098d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	e000e400 	.word	0xe000e400
 8009a78:	20001778 	.word	0x20001778
 8009a7c:	2000177c 	.word	0x2000177c
 8009a80:	e000ed20 	.word	0xe000ed20
 8009a84:	20000010 	.word	0x20000010
 8009a88:	e000ef34 	.word	0xe000ef34

08009a8c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8009a92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <vPortEndScheduler+0x38>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a9a:	d00d      	beq.n	8009ab8 <vPortEndScheduler+0x2c>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	b672      	cpsid	i
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	b662      	cpsie	i
 8009ab0:	607b      	str	r3, [r7, #4]
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	e7fd      	b.n	8009ab4 <vPortEndScheduler+0x28>
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	20000010 	.word	0x20000010

08009ac8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	b672      	cpsid	i
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	b662      	cpsie	i
 8009ae2:	607b      	str	r3, [r7, #4]
}
 8009ae4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ae6:	4b11      	ldr	r3, [pc, #68]	@ (8009b2c <vPortEnterCritical+0x64>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3301      	adds	r3, #1
 8009aec:	4a0f      	ldr	r2, [pc, #60]	@ (8009b2c <vPortEnterCritical+0x64>)
 8009aee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009af0:	4b0e      	ldr	r3, [pc, #56]	@ (8009b2c <vPortEnterCritical+0x64>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d112      	bne.n	8009b1e <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009af8:	4b0d      	ldr	r3, [pc, #52]	@ (8009b30 <vPortEnterCritical+0x68>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00d      	beq.n	8009b1e <vPortEnterCritical+0x56>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b06:	b672      	cpsid	i
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	b662      	cpsie	i
 8009b16:	603b      	str	r3, [r7, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <vPortEnterCritical+0x52>
	}
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20000010 	.word	0x20000010
 8009b30:	e000ed04 	.word	0xe000ed04

08009b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b3a:	4b13      	ldr	r3, [pc, #76]	@ (8009b88 <vPortExitCritical+0x54>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10d      	bne.n	8009b5e <vPortExitCritical+0x2a>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	b672      	cpsid	i
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	b662      	cpsie	i
 8009b56:	607b      	str	r3, [r7, #4]
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	e7fd      	b.n	8009b5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b88 <vPortExitCritical+0x54>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	4a08      	ldr	r2, [pc, #32]	@ (8009b88 <vPortExitCritical+0x54>)
 8009b66:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b68:	4b07      	ldr	r3, [pc, #28]	@ (8009b88 <vPortExitCritical+0x54>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d105      	bne.n	8009b7c <vPortExitCritical+0x48>
 8009b70:	2300      	movs	r3, #0
 8009b72:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	f383 8811 	msr	BASEPRI, r3
}
 8009b7a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20000010 	.word	0x20000010
 8009b8c:	00000000 	.word	0x00000000

08009b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b90:	f3ef 8009 	mrs	r0, PSP
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <pxCurrentTCBConst>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f01e 0f10 	tst.w	lr, #16
 8009ba0:	bf08      	it	eq
 8009ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	6010      	str	r0, [r2, #0]
 8009bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009bb4:	b672      	cpsid	i
 8009bb6:	f380 8811 	msr	BASEPRI, r0
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	b662      	cpsie	i
 8009bc4:	f7fe fbfc 	bl	80083c0 <vTaskSwitchContext>
 8009bc8:	f04f 0000 	mov.w	r0, #0
 8009bcc:	f380 8811 	msr	BASEPRI, r0
 8009bd0:	bc09      	pop	{r0, r3}
 8009bd2:	6819      	ldr	r1, [r3, #0]
 8009bd4:	6808      	ldr	r0, [r1, #0]
 8009bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	f01e 0f10 	tst.w	lr, #16
 8009bde:	bf08      	it	eq
 8009be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009be4:	f380 8809 	msr	PSP, r0
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop

08009bf0 <pxCurrentTCBConst>:
 8009bf0:	2000114c 	.word	0x2000114c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	b672      	cpsid	i
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	b662      	cpsie	i
 8009c12:	607b      	str	r3, [r7, #4]
}
 8009c14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c16:	f7fe fb17 	bl	8008248 <xTaskIncrementTick>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c20:	4b06      	ldr	r3, [pc, #24]	@ (8009c3c <SysTick_Handler+0x44>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	f383 8811 	msr	BASEPRI, r3
}
 8009c32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c44:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <vPortSetupTimerInterrupt+0x34>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c78 <vPortSetupTimerInterrupt+0x38>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <vPortSetupTimerInterrupt+0x3c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a0a      	ldr	r2, [pc, #40]	@ (8009c80 <vPortSetupTimerInterrupt+0x40>)
 8009c56:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5a:	099b      	lsrs	r3, r3, #6
 8009c5c:	4a09      	ldr	r2, [pc, #36]	@ (8009c84 <vPortSetupTimerInterrupt+0x44>)
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c62:	4b04      	ldr	r3, [pc, #16]	@ (8009c74 <vPortSetupTimerInterrupt+0x34>)
 8009c64:	2207      	movs	r2, #7
 8009c66:	601a      	str	r2, [r3, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	e000e010 	.word	0xe000e010
 8009c78:	e000e018 	.word	0xe000e018
 8009c7c:	20000004 	.word	0x20000004
 8009c80:	10624dd3 	.word	0x10624dd3
 8009c84:	e000e014 	.word	0xe000e014

08009c88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c98 <vPortEnableVFP+0x10>
 8009c8c:	6801      	ldr	r1, [r0, #0]
 8009c8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c92:	6001      	str	r1, [r0, #0]
 8009c94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c96:	bf00      	nop
 8009c98:	e000ed88 	.word	0xe000ed88

08009c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ca2:	f3ef 8305 	mrs	r3, IPSR
 8009ca6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b0f      	cmp	r3, #15
 8009cac:	d917      	bls.n	8009cde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cae:	4a1a      	ldr	r2, [pc, #104]	@ (8009d18 <vPortValidateInterruptPriority+0x7c>)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cb8:	4b18      	ldr	r3, [pc, #96]	@ (8009d1c <vPortValidateInterruptPriority+0x80>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	7afa      	ldrb	r2, [r7, #11]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d20d      	bcs.n	8009cde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	b672      	cpsid	i
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	b662      	cpsie	i
 8009cd6:	607b      	str	r3, [r7, #4]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cde:	4b10      	ldr	r3, [pc, #64]	@ (8009d20 <vPortValidateInterruptPriority+0x84>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d24 <vPortValidateInterruptPriority+0x88>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d90d      	bls.n	8009d0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf2:	b672      	cpsid	i
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	b662      	cpsie	i
 8009d02:	603b      	str	r3, [r7, #0]
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop
 8009d08:	e7fd      	b.n	8009d06 <vPortValidateInterruptPriority+0x6a>
	}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	e000e3f0 	.word	0xe000e3f0
 8009d1c:	20001778 	.word	0x20001778
 8009d20:	e000ed0c 	.word	0xe000ed0c
 8009d24:	2000177c 	.word	0x2000177c

08009d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	@ 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d34:	f7fe f9b8 	bl	80080a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d38:	4b5d      	ldr	r3, [pc, #372]	@ (8009eb0 <pvPortMalloc+0x188>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d40:	f000 f920 	bl	8009f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d44:	4b5b      	ldr	r3, [pc, #364]	@ (8009eb4 <pvPortMalloc+0x18c>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f040 8094 	bne.w	8009e7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d020      	beq.n	8009d9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009d58:	2208      	movs	r2, #8
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d017      	beq.n	8009d9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f023 0307 	bic.w	r3, r3, #7
 8009d70:	3308      	adds	r3, #8
 8009d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00d      	beq.n	8009d9a <pvPortMalloc+0x72>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	b672      	cpsid	i
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	b662      	cpsie	i
 8009d92:	617b      	str	r3, [r7, #20]
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	e7fd      	b.n	8009d96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d06c      	beq.n	8009e7a <pvPortMalloc+0x152>
 8009da0:	4b45      	ldr	r3, [pc, #276]	@ (8009eb8 <pvPortMalloc+0x190>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d867      	bhi.n	8009e7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009daa:	4b44      	ldr	r3, [pc, #272]	@ (8009ebc <pvPortMalloc+0x194>)
 8009dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dae:	4b43      	ldr	r3, [pc, #268]	@ (8009ebc <pvPortMalloc+0x194>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009db4:	e004      	b.n	8009dc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d903      	bls.n	8009dd2 <pvPortMalloc+0xaa>
 8009dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1f1      	bne.n	8009db6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dd2:	4b37      	ldr	r3, [pc, #220]	@ (8009eb0 <pvPortMalloc+0x188>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d04e      	beq.n	8009e7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2208      	movs	r2, #8
 8009de2:	4413      	add	r3, r2
 8009de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	1ad2      	subs	r2, r2, r3
 8009df6:	2308      	movs	r3, #8
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d922      	bls.n	8009e44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4413      	add	r3, r2
 8009e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	f003 0307 	and.w	r3, r3, #7
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00d      	beq.n	8009e2c <pvPortMalloc+0x104>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	b672      	cpsid	i
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	b662      	cpsie	i
 8009e24:	613b      	str	r3, [r7, #16]
}
 8009e26:	bf00      	nop
 8009e28:	bf00      	nop
 8009e2a:	e7fd      	b.n	8009e28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	1ad2      	subs	r2, r2, r3
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e3e:	69b8      	ldr	r0, [r7, #24]
 8009e40:	f000 f904 	bl	800a04c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e44:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb8 <pvPortMalloc+0x190>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb8 <pvPortMalloc+0x190>)
 8009e50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e52:	4b19      	ldr	r3, [pc, #100]	@ (8009eb8 <pvPortMalloc+0x190>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec0 <pvPortMalloc+0x198>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d203      	bcs.n	8009e66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e5e:	4b16      	ldr	r3, [pc, #88]	@ (8009eb8 <pvPortMalloc+0x190>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a17      	ldr	r2, [pc, #92]	@ (8009ec0 <pvPortMalloc+0x198>)
 8009e64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	4b12      	ldr	r3, [pc, #72]	@ (8009eb4 <pvPortMalloc+0x18c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e7a:	f7fe f923 	bl	80080c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00d      	beq.n	8009ea4 <pvPortMalloc+0x17c>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	b672      	cpsid	i
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	b662      	cpsie	i
 8009e9c:	60fb      	str	r3, [r7, #12]
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <pvPortMalloc+0x178>
	return pvReturn;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3728      	adds	r7, #40	@ 0x28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20019e28 	.word	0x20019e28
 8009eb4:	20019e34 	.word	0x20019e34
 8009eb8:	20019e2c 	.word	0x20019e2c
 8009ebc:	20019e20 	.word	0x20019e20
 8009ec0:	20019e30 	.word	0x20019e30

08009ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d04e      	beq.n	8009f74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ed6:	2308      	movs	r3, #8
 8009ed8:	425b      	negs	r3, r3
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4413      	add	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	4b24      	ldr	r3, [pc, #144]	@ (8009f7c <vPortFree+0xb8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4013      	ands	r3, r2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10d      	bne.n	8009f0e <vPortFree+0x4a>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	b672      	cpsid	i
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	b662      	cpsie	i
 8009f06:	60fb      	str	r3, [r7, #12]
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	e7fd      	b.n	8009f0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00d      	beq.n	8009f32 <vPortFree+0x6e>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1a:	b672      	cpsid	i
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	b662      	cpsie	i
 8009f2a:	60bb      	str	r3, [r7, #8]
}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	e7fd      	b.n	8009f2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b11      	ldr	r3, [pc, #68]	@ (8009f7c <vPortFree+0xb8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d019      	beq.n	8009f74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d115      	bne.n	8009f74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f7c <vPortFree+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f58:	f7fe f8a6 	bl	80080a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <vPortFree+0xbc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	4a06      	ldr	r2, [pc, #24]	@ (8009f80 <vPortFree+0xbc>)
 8009f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 f86e 	bl	800a04c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f70:	f7fe f8a8 	bl	80080c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f74:	bf00      	nop
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20019e34 	.word	0x20019e34
 8009f80:	20019e2c 	.word	0x20019e2c

08009f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f8a:	4b29      	ldr	r3, [pc, #164]	@ (800a030 <prvHeapInit+0xac>)
 8009f8c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f8e:	4b29      	ldr	r3, [pc, #164]	@ (800a034 <prvHeapInit+0xb0>)
 8009f90:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f003 0307 	and.w	r3, r3, #7
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00c      	beq.n	8009fb6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3307      	adds	r3, #7
 8009fa0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f023 0307 	bic.w	r3, r3, #7
 8009fa8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	4a20      	ldr	r2, [pc, #128]	@ (800a034 <prvHeapInit+0xb0>)
 8009fb2:	4413      	add	r3, r2
 8009fb4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fba:	4a1f      	ldr	r2, [pc, #124]	@ (800a038 <prvHeapInit+0xb4>)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fc0:	4b1d      	ldr	r3, [pc, #116]	@ (800a038 <prvHeapInit+0xb4>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4413      	add	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fce:	2208      	movs	r2, #8
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	1a9b      	subs	r3, r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f023 0307 	bic.w	r3, r3, #7
 8009fdc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	4a16      	ldr	r2, [pc, #88]	@ (800a03c <prvHeapInit+0xb8>)
 8009fe2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fe4:	4b15      	ldr	r3, [pc, #84]	@ (800a03c <prvHeapInit+0xb8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fec:	4b13      	ldr	r3, [pc, #76]	@ (800a03c <prvHeapInit+0xb8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	1ad2      	subs	r2, r2, r3
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a002:	4b0e      	ldr	r3, [pc, #56]	@ (800a03c <prvHeapInit+0xb8>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	4a0c      	ldr	r2, [pc, #48]	@ (800a040 <prvHeapInit+0xbc>)
 800a010:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	4a0b      	ldr	r2, [pc, #44]	@ (800a044 <prvHeapInit+0xc0>)
 800a018:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a01a:	4b0b      	ldr	r3, [pc, #44]	@ (800a048 <prvHeapInit+0xc4>)
 800a01c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bf00      	nop
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	000186a0 	.word	0x000186a0
 800a034:	20001780 	.word	0x20001780
 800a038:	20019e20 	.word	0x20019e20
 800a03c:	20019e28 	.word	0x20019e28
 800a040:	20019e30 	.word	0x20019e30
 800a044:	20019e2c 	.word	0x20019e2c
 800a048:	20019e34 	.word	0x20019e34

0800a04c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a054:	4b28      	ldr	r3, [pc, #160]	@ (800a0f8 <prvInsertBlockIntoFreeList+0xac>)
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e002      	b.n	800a060 <prvInsertBlockIntoFreeList+0x14>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d8f7      	bhi.n	800a05a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	4413      	add	r3, r2
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d108      	bne.n	800a08e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	441a      	add	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	441a      	add	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d118      	bne.n	800a0d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	4b15      	ldr	r3, [pc, #84]	@ (800a0fc <prvInsertBlockIntoFreeList+0xb0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d00d      	beq.n	800a0ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	441a      	add	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	e008      	b.n	800a0dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a0fc <prvInsertBlockIntoFreeList+0xb0>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	e003      	b.n	800a0dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d002      	beq.n	800a0ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	20019e20 	.word	0x20019e20
 800a0fc:	20019e28 	.word	0x20019e28

0800a100 <__cvt>:
 800a100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a104:	ec57 6b10 	vmov	r6, r7, d0
 800a108:	2f00      	cmp	r7, #0
 800a10a:	460c      	mov	r4, r1
 800a10c:	4619      	mov	r1, r3
 800a10e:	463b      	mov	r3, r7
 800a110:	bfbb      	ittet	lt
 800a112:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a116:	461f      	movlt	r7, r3
 800a118:	2300      	movge	r3, #0
 800a11a:	232d      	movlt	r3, #45	@ 0x2d
 800a11c:	700b      	strb	r3, [r1, #0]
 800a11e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a120:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a124:	4691      	mov	r9, r2
 800a126:	f023 0820 	bic.w	r8, r3, #32
 800a12a:	bfbc      	itt	lt
 800a12c:	4632      	movlt	r2, r6
 800a12e:	4616      	movlt	r6, r2
 800a130:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a134:	d005      	beq.n	800a142 <__cvt+0x42>
 800a136:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a13a:	d100      	bne.n	800a13e <__cvt+0x3e>
 800a13c:	3401      	adds	r4, #1
 800a13e:	2102      	movs	r1, #2
 800a140:	e000      	b.n	800a144 <__cvt+0x44>
 800a142:	2103      	movs	r1, #3
 800a144:	ab03      	add	r3, sp, #12
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	ab02      	add	r3, sp, #8
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	ec47 6b10 	vmov	d0, r6, r7
 800a150:	4653      	mov	r3, sl
 800a152:	4622      	mov	r2, r4
 800a154:	f001 f8ac 	bl	800b2b0 <_dtoa_r>
 800a158:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a15c:	4605      	mov	r5, r0
 800a15e:	d119      	bne.n	800a194 <__cvt+0x94>
 800a160:	f019 0f01 	tst.w	r9, #1
 800a164:	d00e      	beq.n	800a184 <__cvt+0x84>
 800a166:	eb00 0904 	add.w	r9, r0, r4
 800a16a:	2200      	movs	r2, #0
 800a16c:	2300      	movs	r3, #0
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	f7f6 fcc9 	bl	8000b08 <__aeabi_dcmpeq>
 800a176:	b108      	cbz	r0, 800a17c <__cvt+0x7c>
 800a178:	f8cd 900c 	str.w	r9, [sp, #12]
 800a17c:	2230      	movs	r2, #48	@ 0x30
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	454b      	cmp	r3, r9
 800a182:	d31e      	bcc.n	800a1c2 <__cvt+0xc2>
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a188:	1b5b      	subs	r3, r3, r5
 800a18a:	4628      	mov	r0, r5
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	b004      	add	sp, #16
 800a190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a198:	eb00 0904 	add.w	r9, r0, r4
 800a19c:	d1e5      	bne.n	800a16a <__cvt+0x6a>
 800a19e:	7803      	ldrb	r3, [r0, #0]
 800a1a0:	2b30      	cmp	r3, #48	@ 0x30
 800a1a2:	d10a      	bne.n	800a1ba <__cvt+0xba>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f6 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 800a1b0:	b918      	cbnz	r0, 800a1ba <__cvt+0xba>
 800a1b2:	f1c4 0401 	rsb	r4, r4, #1
 800a1b6:	f8ca 4000 	str.w	r4, [sl]
 800a1ba:	f8da 3000 	ldr.w	r3, [sl]
 800a1be:	4499      	add	r9, r3
 800a1c0:	e7d3      	b.n	800a16a <__cvt+0x6a>
 800a1c2:	1c59      	adds	r1, r3, #1
 800a1c4:	9103      	str	r1, [sp, #12]
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e7d9      	b.n	800a17e <__cvt+0x7e>

0800a1ca <__exponent>:
 800a1ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	bfba      	itte	lt
 800a1d0:	4249      	neglt	r1, r1
 800a1d2:	232d      	movlt	r3, #45	@ 0x2d
 800a1d4:	232b      	movge	r3, #43	@ 0x2b
 800a1d6:	2909      	cmp	r1, #9
 800a1d8:	7002      	strb	r2, [r0, #0]
 800a1da:	7043      	strb	r3, [r0, #1]
 800a1dc:	dd29      	ble.n	800a232 <__exponent+0x68>
 800a1de:	f10d 0307 	add.w	r3, sp, #7
 800a1e2:	461d      	mov	r5, r3
 800a1e4:	270a      	movs	r7, #10
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a1ec:	fb07 1416 	mls	r4, r7, r6, r1
 800a1f0:	3430      	adds	r4, #48	@ 0x30
 800a1f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	2c63      	cmp	r4, #99	@ 0x63
 800a1fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1fe:	4631      	mov	r1, r6
 800a200:	dcf1      	bgt.n	800a1e6 <__exponent+0x1c>
 800a202:	3130      	adds	r1, #48	@ 0x30
 800a204:	1e94      	subs	r4, r2, #2
 800a206:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a20a:	1c41      	adds	r1, r0, #1
 800a20c:	4623      	mov	r3, r4
 800a20e:	42ab      	cmp	r3, r5
 800a210:	d30a      	bcc.n	800a228 <__exponent+0x5e>
 800a212:	f10d 0309 	add.w	r3, sp, #9
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	42ac      	cmp	r4, r5
 800a21a:	bf88      	it	hi
 800a21c:	2300      	movhi	r3, #0
 800a21e:	3302      	adds	r3, #2
 800a220:	4403      	add	r3, r0
 800a222:	1a18      	subs	r0, r3, r0
 800a224:	b003      	add	sp, #12
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a228:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a22c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a230:	e7ed      	b.n	800a20e <__exponent+0x44>
 800a232:	2330      	movs	r3, #48	@ 0x30
 800a234:	3130      	adds	r1, #48	@ 0x30
 800a236:	7083      	strb	r3, [r0, #2]
 800a238:	70c1      	strb	r1, [r0, #3]
 800a23a:	1d03      	adds	r3, r0, #4
 800a23c:	e7f1      	b.n	800a222 <__exponent+0x58>
	...

0800a240 <_printf_float>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	b08d      	sub	sp, #52	@ 0x34
 800a246:	460c      	mov	r4, r1
 800a248:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a24c:	4616      	mov	r6, r2
 800a24e:	461f      	mov	r7, r3
 800a250:	4605      	mov	r5, r0
 800a252:	f000 fec7 	bl	800afe4 <_localeconv_r>
 800a256:	6803      	ldr	r3, [r0, #0]
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7f6 f828 	bl	80002b0 <strlen>
 800a260:	2300      	movs	r3, #0
 800a262:	930a      	str	r3, [sp, #40]	@ 0x28
 800a264:	f8d8 3000 	ldr.w	r3, [r8]
 800a268:	9005      	str	r0, [sp, #20]
 800a26a:	3307      	adds	r3, #7
 800a26c:	f023 0307 	bic.w	r3, r3, #7
 800a270:	f103 0208 	add.w	r2, r3, #8
 800a274:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a278:	f8d4 b000 	ldr.w	fp, [r4]
 800a27c:	f8c8 2000 	str.w	r2, [r8]
 800a280:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a284:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a28e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a296:	4b9c      	ldr	r3, [pc, #624]	@ (800a508 <_printf_float+0x2c8>)
 800a298:	f04f 32ff 	mov.w	r2, #4294967295
 800a29c:	f7f6 fc66 	bl	8000b6c <__aeabi_dcmpun>
 800a2a0:	bb70      	cbnz	r0, 800a300 <_printf_float+0xc0>
 800a2a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2a6:	4b98      	ldr	r3, [pc, #608]	@ (800a508 <_printf_float+0x2c8>)
 800a2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ac:	f7f6 fc40 	bl	8000b30 <__aeabi_dcmple>
 800a2b0:	bb30      	cbnz	r0, 800a300 <_printf_float+0xc0>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f6 fc2f 	bl	8000b1c <__aeabi_dcmplt>
 800a2be:	b110      	cbz	r0, 800a2c6 <_printf_float+0x86>
 800a2c0:	232d      	movs	r3, #45	@ 0x2d
 800a2c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2c6:	4a91      	ldr	r2, [pc, #580]	@ (800a50c <_printf_float+0x2cc>)
 800a2c8:	4b91      	ldr	r3, [pc, #580]	@ (800a510 <_printf_float+0x2d0>)
 800a2ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a2ce:	bf94      	ite	ls
 800a2d0:	4690      	movls	r8, r2
 800a2d2:	4698      	movhi	r8, r3
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	f02b 0304 	bic.w	r3, fp, #4
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	f04f 0900 	mov.w	r9, #0
 800a2e2:	9700      	str	r7, [sp, #0]
 800a2e4:	4633      	mov	r3, r6
 800a2e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 f9d2 	bl	800a694 <_printf_common>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	f040 808d 	bne.w	800a410 <_printf_float+0x1d0>
 800a2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fa:	b00d      	add	sp, #52	@ 0x34
 800a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a300:	4642      	mov	r2, r8
 800a302:	464b      	mov	r3, r9
 800a304:	4640      	mov	r0, r8
 800a306:	4649      	mov	r1, r9
 800a308:	f7f6 fc30 	bl	8000b6c <__aeabi_dcmpun>
 800a30c:	b140      	cbz	r0, 800a320 <_printf_float+0xe0>
 800a30e:	464b      	mov	r3, r9
 800a310:	2b00      	cmp	r3, #0
 800a312:	bfbc      	itt	lt
 800a314:	232d      	movlt	r3, #45	@ 0x2d
 800a316:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a31a:	4a7e      	ldr	r2, [pc, #504]	@ (800a514 <_printf_float+0x2d4>)
 800a31c:	4b7e      	ldr	r3, [pc, #504]	@ (800a518 <_printf_float+0x2d8>)
 800a31e:	e7d4      	b.n	800a2ca <_printf_float+0x8a>
 800a320:	6863      	ldr	r3, [r4, #4]
 800a322:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a326:	9206      	str	r2, [sp, #24]
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	d13b      	bne.n	800a3a4 <_printf_float+0x164>
 800a32c:	2306      	movs	r3, #6
 800a32e:	6063      	str	r3, [r4, #4]
 800a330:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a334:	2300      	movs	r3, #0
 800a336:	6022      	str	r2, [r4, #0]
 800a338:	9303      	str	r3, [sp, #12]
 800a33a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a33c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a340:	ab09      	add	r3, sp, #36	@ 0x24
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	6861      	ldr	r1, [r4, #4]
 800a346:	ec49 8b10 	vmov	d0, r8, r9
 800a34a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a34e:	4628      	mov	r0, r5
 800a350:	f7ff fed6 	bl	800a100 <__cvt>
 800a354:	9b06      	ldr	r3, [sp, #24]
 800a356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a358:	2b47      	cmp	r3, #71	@ 0x47
 800a35a:	4680      	mov	r8, r0
 800a35c:	d129      	bne.n	800a3b2 <_printf_float+0x172>
 800a35e:	1cc8      	adds	r0, r1, #3
 800a360:	db02      	blt.n	800a368 <_printf_float+0x128>
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	4299      	cmp	r1, r3
 800a366:	dd41      	ble.n	800a3ec <_printf_float+0x1ac>
 800a368:	f1aa 0a02 	sub.w	sl, sl, #2
 800a36c:	fa5f fa8a 	uxtb.w	sl, sl
 800a370:	3901      	subs	r1, #1
 800a372:	4652      	mov	r2, sl
 800a374:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a378:	9109      	str	r1, [sp, #36]	@ 0x24
 800a37a:	f7ff ff26 	bl	800a1ca <__exponent>
 800a37e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a380:	1813      	adds	r3, r2, r0
 800a382:	2a01      	cmp	r2, #1
 800a384:	4681      	mov	r9, r0
 800a386:	6123      	str	r3, [r4, #16]
 800a388:	dc02      	bgt.n	800a390 <_printf_float+0x150>
 800a38a:	6822      	ldr	r2, [r4, #0]
 800a38c:	07d2      	lsls	r2, r2, #31
 800a38e:	d501      	bpl.n	800a394 <_printf_float+0x154>
 800a390:	3301      	adds	r3, #1
 800a392:	6123      	str	r3, [r4, #16]
 800a394:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0a2      	beq.n	800a2e2 <_printf_float+0xa2>
 800a39c:	232d      	movs	r3, #45	@ 0x2d
 800a39e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3a2:	e79e      	b.n	800a2e2 <_printf_float+0xa2>
 800a3a4:	9a06      	ldr	r2, [sp, #24]
 800a3a6:	2a47      	cmp	r2, #71	@ 0x47
 800a3a8:	d1c2      	bne.n	800a330 <_printf_float+0xf0>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1c0      	bne.n	800a330 <_printf_float+0xf0>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e7bd      	b.n	800a32e <_printf_float+0xee>
 800a3b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3b6:	d9db      	bls.n	800a370 <_printf_float+0x130>
 800a3b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3bc:	d118      	bne.n	800a3f0 <_printf_float+0x1b0>
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	dd0b      	ble.n	800a3dc <_printf_float+0x19c>
 800a3c4:	6121      	str	r1, [r4, #16]
 800a3c6:	b913      	cbnz	r3, 800a3ce <_printf_float+0x18e>
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	07d0      	lsls	r0, r2, #31
 800a3cc:	d502      	bpl.n	800a3d4 <_printf_float+0x194>
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	440b      	add	r3, r1
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3d6:	f04f 0900 	mov.w	r9, #0
 800a3da:	e7db      	b.n	800a394 <_printf_float+0x154>
 800a3dc:	b913      	cbnz	r3, 800a3e4 <_printf_float+0x1a4>
 800a3de:	6822      	ldr	r2, [r4, #0]
 800a3e0:	07d2      	lsls	r2, r2, #31
 800a3e2:	d501      	bpl.n	800a3e8 <_printf_float+0x1a8>
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	e7f4      	b.n	800a3d2 <_printf_float+0x192>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e7f2      	b.n	800a3d2 <_printf_float+0x192>
 800a3ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	db05      	blt.n	800a402 <_printf_float+0x1c2>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	6121      	str	r1, [r4, #16]
 800a3fa:	07d8      	lsls	r0, r3, #31
 800a3fc:	d5ea      	bpl.n	800a3d4 <_printf_float+0x194>
 800a3fe:	1c4b      	adds	r3, r1, #1
 800a400:	e7e7      	b.n	800a3d2 <_printf_float+0x192>
 800a402:	2900      	cmp	r1, #0
 800a404:	bfd4      	ite	le
 800a406:	f1c1 0202 	rsble	r2, r1, #2
 800a40a:	2201      	movgt	r2, #1
 800a40c:	4413      	add	r3, r2
 800a40e:	e7e0      	b.n	800a3d2 <_printf_float+0x192>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	055a      	lsls	r2, r3, #21
 800a414:	d407      	bmi.n	800a426 <_printf_float+0x1e6>
 800a416:	6923      	ldr	r3, [r4, #16]
 800a418:	4642      	mov	r2, r8
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	d12b      	bne.n	800a47c <_printf_float+0x23c>
 800a424:	e767      	b.n	800a2f6 <_printf_float+0xb6>
 800a426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a42a:	f240 80dd 	bls.w	800a5e8 <_printf_float+0x3a8>
 800a42e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	f7f6 fb67 	bl	8000b08 <__aeabi_dcmpeq>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d033      	beq.n	800a4a6 <_printf_float+0x266>
 800a43e:	4a37      	ldr	r2, [pc, #220]	@ (800a51c <_printf_float+0x2dc>)
 800a440:	2301      	movs	r3, #1
 800a442:	4631      	mov	r1, r6
 800a444:	4628      	mov	r0, r5
 800a446:	47b8      	blx	r7
 800a448:	3001      	adds	r0, #1
 800a44a:	f43f af54 	beq.w	800a2f6 <_printf_float+0xb6>
 800a44e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a452:	4543      	cmp	r3, r8
 800a454:	db02      	blt.n	800a45c <_printf_float+0x21c>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	07d8      	lsls	r0, r3, #31
 800a45a:	d50f      	bpl.n	800a47c <_printf_float+0x23c>
 800a45c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af45 	beq.w	800a2f6 <_printf_float+0xb6>
 800a46c:	f04f 0900 	mov.w	r9, #0
 800a470:	f108 38ff 	add.w	r8, r8, #4294967295
 800a474:	f104 0a1a 	add.w	sl, r4, #26
 800a478:	45c8      	cmp	r8, r9
 800a47a:	dc09      	bgt.n	800a490 <_printf_float+0x250>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	079b      	lsls	r3, r3, #30
 800a480:	f100 8103 	bmi.w	800a68a <_printf_float+0x44a>
 800a484:	68e0      	ldr	r0, [r4, #12]
 800a486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a488:	4298      	cmp	r0, r3
 800a48a:	bfb8      	it	lt
 800a48c:	4618      	movlt	r0, r3
 800a48e:	e734      	b.n	800a2fa <_printf_float+0xba>
 800a490:	2301      	movs	r3, #1
 800a492:	4652      	mov	r2, sl
 800a494:	4631      	mov	r1, r6
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	f43f af2b 	beq.w	800a2f6 <_printf_float+0xb6>
 800a4a0:	f109 0901 	add.w	r9, r9, #1
 800a4a4:	e7e8      	b.n	800a478 <_printf_float+0x238>
 800a4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dc39      	bgt.n	800a520 <_printf_float+0x2e0>
 800a4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a51c <_printf_float+0x2dc>)
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f af1d 	beq.w	800a2f6 <_printf_float+0xb6>
 800a4bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4c0:	ea59 0303 	orrs.w	r3, r9, r3
 800a4c4:	d102      	bne.n	800a4cc <_printf_float+0x28c>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	07d9      	lsls	r1, r3, #31
 800a4ca:	d5d7      	bpl.n	800a47c <_printf_float+0x23c>
 800a4cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af0d 	beq.w	800a2f6 <_printf_float+0xb6>
 800a4dc:	f04f 0a00 	mov.w	sl, #0
 800a4e0:	f104 0b1a 	add.w	fp, r4, #26
 800a4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e6:	425b      	negs	r3, r3
 800a4e8:	4553      	cmp	r3, sl
 800a4ea:	dc01      	bgt.n	800a4f0 <_printf_float+0x2b0>
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	e793      	b.n	800a418 <_printf_float+0x1d8>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	465a      	mov	r2, fp
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b8      	blx	r7
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	f43f aefb 	beq.w	800a2f6 <_printf_float+0xb6>
 800a500:	f10a 0a01 	add.w	sl, sl, #1
 800a504:	e7ee      	b.n	800a4e4 <_printf_float+0x2a4>
 800a506:	bf00      	nop
 800a508:	7fefffff 	.word	0x7fefffff
 800a50c:	0800e3c0 	.word	0x0800e3c0
 800a510:	0800e3c4 	.word	0x0800e3c4
 800a514:	0800e3c8 	.word	0x0800e3c8
 800a518:	0800e3cc 	.word	0x0800e3cc
 800a51c:	0800e3d0 	.word	0x0800e3d0
 800a520:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a522:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a526:	4553      	cmp	r3, sl
 800a528:	bfa8      	it	ge
 800a52a:	4653      	movge	r3, sl
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	4699      	mov	r9, r3
 800a530:	dc36      	bgt.n	800a5a0 <_printf_float+0x360>
 800a532:	f04f 0b00 	mov.w	fp, #0
 800a536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a53a:	f104 021a 	add.w	r2, r4, #26
 800a53e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a540:	9306      	str	r3, [sp, #24]
 800a542:	eba3 0309 	sub.w	r3, r3, r9
 800a546:	455b      	cmp	r3, fp
 800a548:	dc31      	bgt.n	800a5ae <_printf_float+0x36e>
 800a54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a54c:	459a      	cmp	sl, r3
 800a54e:	dc3a      	bgt.n	800a5c6 <_printf_float+0x386>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	07da      	lsls	r2, r3, #31
 800a554:	d437      	bmi.n	800a5c6 <_printf_float+0x386>
 800a556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a558:	ebaa 0903 	sub.w	r9, sl, r3
 800a55c:	9b06      	ldr	r3, [sp, #24]
 800a55e:	ebaa 0303 	sub.w	r3, sl, r3
 800a562:	4599      	cmp	r9, r3
 800a564:	bfa8      	it	ge
 800a566:	4699      	movge	r9, r3
 800a568:	f1b9 0f00 	cmp.w	r9, #0
 800a56c:	dc33      	bgt.n	800a5d6 <_printf_float+0x396>
 800a56e:	f04f 0800 	mov.w	r8, #0
 800a572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a576:	f104 0b1a 	add.w	fp, r4, #26
 800a57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57c:	ebaa 0303 	sub.w	r3, sl, r3
 800a580:	eba3 0309 	sub.w	r3, r3, r9
 800a584:	4543      	cmp	r3, r8
 800a586:	f77f af79 	ble.w	800a47c <_printf_float+0x23c>
 800a58a:	2301      	movs	r3, #1
 800a58c:	465a      	mov	r2, fp
 800a58e:	4631      	mov	r1, r6
 800a590:	4628      	mov	r0, r5
 800a592:	47b8      	blx	r7
 800a594:	3001      	adds	r0, #1
 800a596:	f43f aeae 	beq.w	800a2f6 <_printf_float+0xb6>
 800a59a:	f108 0801 	add.w	r8, r8, #1
 800a59e:	e7ec      	b.n	800a57a <_printf_float+0x33a>
 800a5a0:	4642      	mov	r2, r8
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	47b8      	blx	r7
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d1c2      	bne.n	800a532 <_printf_float+0x2f2>
 800a5ac:	e6a3      	b.n	800a2f6 <_printf_float+0xb6>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	9206      	str	r2, [sp, #24]
 800a5b6:	47b8      	blx	r7
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	f43f ae9c 	beq.w	800a2f6 <_printf_float+0xb6>
 800a5be:	9a06      	ldr	r2, [sp, #24]
 800a5c0:	f10b 0b01 	add.w	fp, fp, #1
 800a5c4:	e7bb      	b.n	800a53e <_printf_float+0x2fe>
 800a5c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d1c0      	bne.n	800a556 <_printf_float+0x316>
 800a5d4:	e68f      	b.n	800a2f6 <_printf_float+0xb6>
 800a5d6:	9a06      	ldr	r2, [sp, #24]
 800a5d8:	464b      	mov	r3, r9
 800a5da:	4442      	add	r2, r8
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d1c3      	bne.n	800a56e <_printf_float+0x32e>
 800a5e6:	e686      	b.n	800a2f6 <_printf_float+0xb6>
 800a5e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5ec:	f1ba 0f01 	cmp.w	sl, #1
 800a5f0:	dc01      	bgt.n	800a5f6 <_printf_float+0x3b6>
 800a5f2:	07db      	lsls	r3, r3, #31
 800a5f4:	d536      	bpl.n	800a664 <_printf_float+0x424>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f ae78 	beq.w	800a2f6 <_printf_float+0xb6>
 800a606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	f43f ae70 	beq.w	800a2f6 <_printf_float+0xb6>
 800a616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a61a:	2200      	movs	r2, #0
 800a61c:	2300      	movs	r3, #0
 800a61e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a622:	f7f6 fa71 	bl	8000b08 <__aeabi_dcmpeq>
 800a626:	b9c0      	cbnz	r0, 800a65a <_printf_float+0x41a>
 800a628:	4653      	mov	r3, sl
 800a62a:	f108 0201 	add.w	r2, r8, #1
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	d10c      	bne.n	800a652 <_printf_float+0x412>
 800a638:	e65d      	b.n	800a2f6 <_printf_float+0xb6>
 800a63a:	2301      	movs	r3, #1
 800a63c:	465a      	mov	r2, fp
 800a63e:	4631      	mov	r1, r6
 800a640:	4628      	mov	r0, r5
 800a642:	47b8      	blx	r7
 800a644:	3001      	adds	r0, #1
 800a646:	f43f ae56 	beq.w	800a2f6 <_printf_float+0xb6>
 800a64a:	f108 0801 	add.w	r8, r8, #1
 800a64e:	45d0      	cmp	r8, sl
 800a650:	dbf3      	blt.n	800a63a <_printf_float+0x3fa>
 800a652:	464b      	mov	r3, r9
 800a654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a658:	e6df      	b.n	800a41a <_printf_float+0x1da>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	f104 0b1a 	add.w	fp, r4, #26
 800a662:	e7f4      	b.n	800a64e <_printf_float+0x40e>
 800a664:	2301      	movs	r3, #1
 800a666:	4642      	mov	r2, r8
 800a668:	e7e1      	b.n	800a62e <_printf_float+0x3ee>
 800a66a:	2301      	movs	r3, #1
 800a66c:	464a      	mov	r2, r9
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	f43f ae3e 	beq.w	800a2f6 <_printf_float+0xb6>
 800a67a:	f108 0801 	add.w	r8, r8, #1
 800a67e:	68e3      	ldr	r3, [r4, #12]
 800a680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a682:	1a5b      	subs	r3, r3, r1
 800a684:	4543      	cmp	r3, r8
 800a686:	dcf0      	bgt.n	800a66a <_printf_float+0x42a>
 800a688:	e6fc      	b.n	800a484 <_printf_float+0x244>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	f104 0919 	add.w	r9, r4, #25
 800a692:	e7f4      	b.n	800a67e <_printf_float+0x43e>

0800a694 <_printf_common>:
 800a694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	4616      	mov	r6, r2
 800a69a:	4698      	mov	r8, r3
 800a69c:	688a      	ldr	r2, [r1, #8]
 800a69e:	690b      	ldr	r3, [r1, #16]
 800a6a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	bfb8      	it	lt
 800a6a8:	4613      	movlt	r3, r2
 800a6aa:	6033      	str	r3, [r6, #0]
 800a6ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	b10a      	cbz	r2, 800a6ba <_printf_common+0x26>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	6033      	str	r3, [r6, #0]
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	0699      	lsls	r1, r3, #26
 800a6be:	bf42      	ittt	mi
 800a6c0:	6833      	ldrmi	r3, [r6, #0]
 800a6c2:	3302      	addmi	r3, #2
 800a6c4:	6033      	strmi	r3, [r6, #0]
 800a6c6:	6825      	ldr	r5, [r4, #0]
 800a6c8:	f015 0506 	ands.w	r5, r5, #6
 800a6cc:	d106      	bne.n	800a6dc <_printf_common+0x48>
 800a6ce:	f104 0a19 	add.w	sl, r4, #25
 800a6d2:	68e3      	ldr	r3, [r4, #12]
 800a6d4:	6832      	ldr	r2, [r6, #0]
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dc26      	bgt.n	800a72a <_printf_common+0x96>
 800a6dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6e0:	6822      	ldr	r2, [r4, #0]
 800a6e2:	3b00      	subs	r3, #0
 800a6e4:	bf18      	it	ne
 800a6e6:	2301      	movne	r3, #1
 800a6e8:	0692      	lsls	r2, r2, #26
 800a6ea:	d42b      	bmi.n	800a744 <_printf_common+0xb0>
 800a6ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	47c8      	blx	r9
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d01e      	beq.n	800a738 <_printf_common+0xa4>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6922      	ldr	r2, [r4, #16]
 800a6fe:	f003 0306 	and.w	r3, r3, #6
 800a702:	2b04      	cmp	r3, #4
 800a704:	bf02      	ittt	eq
 800a706:	68e5      	ldreq	r5, [r4, #12]
 800a708:	6833      	ldreq	r3, [r6, #0]
 800a70a:	1aed      	subeq	r5, r5, r3
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	bf0c      	ite	eq
 800a710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a714:	2500      	movne	r5, #0
 800a716:	4293      	cmp	r3, r2
 800a718:	bfc4      	itt	gt
 800a71a:	1a9b      	subgt	r3, r3, r2
 800a71c:	18ed      	addgt	r5, r5, r3
 800a71e:	2600      	movs	r6, #0
 800a720:	341a      	adds	r4, #26
 800a722:	42b5      	cmp	r5, r6
 800a724:	d11a      	bne.n	800a75c <_printf_common+0xc8>
 800a726:	2000      	movs	r0, #0
 800a728:	e008      	b.n	800a73c <_printf_common+0xa8>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4652      	mov	r2, sl
 800a72e:	4641      	mov	r1, r8
 800a730:	4638      	mov	r0, r7
 800a732:	47c8      	blx	r9
 800a734:	3001      	adds	r0, #1
 800a736:	d103      	bne.n	800a740 <_printf_common+0xac>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	3501      	adds	r5, #1
 800a742:	e7c6      	b.n	800a6d2 <_printf_common+0x3e>
 800a744:	18e1      	adds	r1, r4, r3
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	2030      	movs	r0, #48	@ 0x30
 800a74a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a74e:	4422      	add	r2, r4
 800a750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a758:	3302      	adds	r3, #2
 800a75a:	e7c7      	b.n	800a6ec <_printf_common+0x58>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4622      	mov	r2, r4
 800a760:	4641      	mov	r1, r8
 800a762:	4638      	mov	r0, r7
 800a764:	47c8      	blx	r9
 800a766:	3001      	adds	r0, #1
 800a768:	d0e6      	beq.n	800a738 <_printf_common+0xa4>
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7d9      	b.n	800a722 <_printf_common+0x8e>
	...

0800a770 <_printf_i>:
 800a770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	7e0f      	ldrb	r7, [r1, #24]
 800a776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a778:	2f78      	cmp	r7, #120	@ 0x78
 800a77a:	4691      	mov	r9, r2
 800a77c:	4680      	mov	r8, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	469a      	mov	sl, r3
 800a782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a786:	d807      	bhi.n	800a798 <_printf_i+0x28>
 800a788:	2f62      	cmp	r7, #98	@ 0x62
 800a78a:	d80a      	bhi.n	800a7a2 <_printf_i+0x32>
 800a78c:	2f00      	cmp	r7, #0
 800a78e:	f000 80d2 	beq.w	800a936 <_printf_i+0x1c6>
 800a792:	2f58      	cmp	r7, #88	@ 0x58
 800a794:	f000 80b9 	beq.w	800a90a <_printf_i+0x19a>
 800a798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a79c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7a0:	e03a      	b.n	800a818 <_printf_i+0xa8>
 800a7a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7a6:	2b15      	cmp	r3, #21
 800a7a8:	d8f6      	bhi.n	800a798 <_printf_i+0x28>
 800a7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800a7b0 <_printf_i+0x40>)
 800a7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a799 	.word	0x0800a799
 800a7bc:	0800a799 	.word	0x0800a799
 800a7c0:	0800a799 	.word	0x0800a799
 800a7c4:	0800a799 	.word	0x0800a799
 800a7c8:	0800a81d 	.word	0x0800a81d
 800a7cc:	0800a799 	.word	0x0800a799
 800a7d0:	0800a799 	.word	0x0800a799
 800a7d4:	0800a799 	.word	0x0800a799
 800a7d8:	0800a799 	.word	0x0800a799
 800a7dc:	0800a91d 	.word	0x0800a91d
 800a7e0:	0800a847 	.word	0x0800a847
 800a7e4:	0800a8d7 	.word	0x0800a8d7
 800a7e8:	0800a799 	.word	0x0800a799
 800a7ec:	0800a799 	.word	0x0800a799
 800a7f0:	0800a93f 	.word	0x0800a93f
 800a7f4:	0800a799 	.word	0x0800a799
 800a7f8:	0800a847 	.word	0x0800a847
 800a7fc:	0800a799 	.word	0x0800a799
 800a800:	0800a799 	.word	0x0800a799
 800a804:	0800a8df 	.word	0x0800a8df
 800a808:	6833      	ldr	r3, [r6, #0]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6032      	str	r2, [r6, #0]
 800a810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a818:	2301      	movs	r3, #1
 800a81a:	e09d      	b.n	800a958 <_printf_i+0x1e8>
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	6820      	ldr	r0, [r4, #0]
 800a820:	1d19      	adds	r1, r3, #4
 800a822:	6031      	str	r1, [r6, #0]
 800a824:	0606      	lsls	r6, r0, #24
 800a826:	d501      	bpl.n	800a82c <_printf_i+0xbc>
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	e003      	b.n	800a834 <_printf_i+0xc4>
 800a82c:	0645      	lsls	r5, r0, #25
 800a82e:	d5fb      	bpl.n	800a828 <_printf_i+0xb8>
 800a830:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a834:	2d00      	cmp	r5, #0
 800a836:	da03      	bge.n	800a840 <_printf_i+0xd0>
 800a838:	232d      	movs	r3, #45	@ 0x2d
 800a83a:	426d      	negs	r5, r5
 800a83c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a840:	4859      	ldr	r0, [pc, #356]	@ (800a9a8 <_printf_i+0x238>)
 800a842:	230a      	movs	r3, #10
 800a844:	e011      	b.n	800a86a <_printf_i+0xfa>
 800a846:	6821      	ldr	r1, [r4, #0]
 800a848:	6833      	ldr	r3, [r6, #0]
 800a84a:	0608      	lsls	r0, r1, #24
 800a84c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a850:	d402      	bmi.n	800a858 <_printf_i+0xe8>
 800a852:	0649      	lsls	r1, r1, #25
 800a854:	bf48      	it	mi
 800a856:	b2ad      	uxthmi	r5, r5
 800a858:	2f6f      	cmp	r7, #111	@ 0x6f
 800a85a:	4853      	ldr	r0, [pc, #332]	@ (800a9a8 <_printf_i+0x238>)
 800a85c:	6033      	str	r3, [r6, #0]
 800a85e:	bf14      	ite	ne
 800a860:	230a      	movne	r3, #10
 800a862:	2308      	moveq	r3, #8
 800a864:	2100      	movs	r1, #0
 800a866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a86a:	6866      	ldr	r6, [r4, #4]
 800a86c:	60a6      	str	r6, [r4, #8]
 800a86e:	2e00      	cmp	r6, #0
 800a870:	bfa2      	ittt	ge
 800a872:	6821      	ldrge	r1, [r4, #0]
 800a874:	f021 0104 	bicge.w	r1, r1, #4
 800a878:	6021      	strge	r1, [r4, #0]
 800a87a:	b90d      	cbnz	r5, 800a880 <_printf_i+0x110>
 800a87c:	2e00      	cmp	r6, #0
 800a87e:	d04b      	beq.n	800a918 <_printf_i+0x1a8>
 800a880:	4616      	mov	r6, r2
 800a882:	fbb5 f1f3 	udiv	r1, r5, r3
 800a886:	fb03 5711 	mls	r7, r3, r1, r5
 800a88a:	5dc7      	ldrb	r7, [r0, r7]
 800a88c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a890:	462f      	mov	r7, r5
 800a892:	42bb      	cmp	r3, r7
 800a894:	460d      	mov	r5, r1
 800a896:	d9f4      	bls.n	800a882 <_printf_i+0x112>
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d10b      	bne.n	800a8b4 <_printf_i+0x144>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	07df      	lsls	r7, r3, #31
 800a8a0:	d508      	bpl.n	800a8b4 <_printf_i+0x144>
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6861      	ldr	r1, [r4, #4]
 800a8a6:	4299      	cmp	r1, r3
 800a8a8:	bfde      	ittt	le
 800a8aa:	2330      	movle	r3, #48	@ 0x30
 800a8ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8b4:	1b92      	subs	r2, r2, r6
 800a8b6:	6122      	str	r2, [r4, #16]
 800a8b8:	f8cd a000 	str.w	sl, [sp]
 800a8bc:	464b      	mov	r3, r9
 800a8be:	aa03      	add	r2, sp, #12
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	f7ff fee6 	bl	800a694 <_printf_common>
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d14a      	bne.n	800a962 <_printf_i+0x1f2>
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	b004      	add	sp, #16
 800a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	f043 0320 	orr.w	r3, r3, #32
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	4833      	ldr	r0, [pc, #204]	@ (800a9ac <_printf_i+0x23c>)
 800a8e0:	2778      	movs	r7, #120	@ 0x78
 800a8e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	6831      	ldr	r1, [r6, #0]
 800a8ea:	061f      	lsls	r7, r3, #24
 800a8ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8f0:	d402      	bmi.n	800a8f8 <_printf_i+0x188>
 800a8f2:	065f      	lsls	r7, r3, #25
 800a8f4:	bf48      	it	mi
 800a8f6:	b2ad      	uxthmi	r5, r5
 800a8f8:	6031      	str	r1, [r6, #0]
 800a8fa:	07d9      	lsls	r1, r3, #31
 800a8fc:	bf44      	itt	mi
 800a8fe:	f043 0320 	orrmi.w	r3, r3, #32
 800a902:	6023      	strmi	r3, [r4, #0]
 800a904:	b11d      	cbz	r5, 800a90e <_printf_i+0x19e>
 800a906:	2310      	movs	r3, #16
 800a908:	e7ac      	b.n	800a864 <_printf_i+0xf4>
 800a90a:	4827      	ldr	r0, [pc, #156]	@ (800a9a8 <_printf_i+0x238>)
 800a90c:	e7e9      	b.n	800a8e2 <_printf_i+0x172>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	f023 0320 	bic.w	r3, r3, #32
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	e7f6      	b.n	800a906 <_printf_i+0x196>
 800a918:	4616      	mov	r6, r2
 800a91a:	e7bd      	b.n	800a898 <_printf_i+0x128>
 800a91c:	6833      	ldr	r3, [r6, #0]
 800a91e:	6825      	ldr	r5, [r4, #0]
 800a920:	6961      	ldr	r1, [r4, #20]
 800a922:	1d18      	adds	r0, r3, #4
 800a924:	6030      	str	r0, [r6, #0]
 800a926:	062e      	lsls	r6, r5, #24
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	d501      	bpl.n	800a930 <_printf_i+0x1c0>
 800a92c:	6019      	str	r1, [r3, #0]
 800a92e:	e002      	b.n	800a936 <_printf_i+0x1c6>
 800a930:	0668      	lsls	r0, r5, #25
 800a932:	d5fb      	bpl.n	800a92c <_printf_i+0x1bc>
 800a934:	8019      	strh	r1, [r3, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	4616      	mov	r6, r2
 800a93c:	e7bc      	b.n	800a8b8 <_printf_i+0x148>
 800a93e:	6833      	ldr	r3, [r6, #0]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	6032      	str	r2, [r6, #0]
 800a944:	681e      	ldr	r6, [r3, #0]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	2100      	movs	r1, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7f5 fc60 	bl	8000210 <memchr>
 800a950:	b108      	cbz	r0, 800a956 <_printf_i+0x1e6>
 800a952:	1b80      	subs	r0, r0, r6
 800a954:	6060      	str	r0, [r4, #4]
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	2300      	movs	r3, #0
 800a95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a960:	e7aa      	b.n	800a8b8 <_printf_i+0x148>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	4632      	mov	r2, r6
 800a966:	4649      	mov	r1, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	47d0      	blx	sl
 800a96c:	3001      	adds	r0, #1
 800a96e:	d0ad      	beq.n	800a8cc <_printf_i+0x15c>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	079b      	lsls	r3, r3, #30
 800a974:	d413      	bmi.n	800a99e <_printf_i+0x22e>
 800a976:	68e0      	ldr	r0, [r4, #12]
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	4298      	cmp	r0, r3
 800a97c:	bfb8      	it	lt
 800a97e:	4618      	movlt	r0, r3
 800a980:	e7a6      	b.n	800a8d0 <_printf_i+0x160>
 800a982:	2301      	movs	r3, #1
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d09d      	beq.n	800a8cc <_printf_i+0x15c>
 800a990:	3501      	adds	r5, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	9903      	ldr	r1, [sp, #12]
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	42ab      	cmp	r3, r5
 800a99a:	dcf2      	bgt.n	800a982 <_printf_i+0x212>
 800a99c:	e7eb      	b.n	800a976 <_printf_i+0x206>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	f104 0619 	add.w	r6, r4, #25
 800a9a4:	e7f5      	b.n	800a992 <_printf_i+0x222>
 800a9a6:	bf00      	nop
 800a9a8:	0800e3d2 	.word	0x0800e3d2
 800a9ac:	0800e3e3 	.word	0x0800e3e3

0800a9b0 <__sflush_r>:
 800a9b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	0716      	lsls	r6, r2, #28
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	460c      	mov	r4, r1
 800a9be:	d454      	bmi.n	800aa6a <__sflush_r+0xba>
 800a9c0:	684b      	ldr	r3, [r1, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dc02      	bgt.n	800a9cc <__sflush_r+0x1c>
 800a9c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dd48      	ble.n	800aa5e <__sflush_r+0xae>
 800a9cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	d045      	beq.n	800aa5e <__sflush_r+0xae>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9d8:	682f      	ldr	r7, [r5, #0]
 800a9da:	6a21      	ldr	r1, [r4, #32]
 800a9dc:	602b      	str	r3, [r5, #0]
 800a9de:	d030      	beq.n	800aa42 <__sflush_r+0x92>
 800a9e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	0759      	lsls	r1, r3, #29
 800a9e6:	d505      	bpl.n	800a9f4 <__sflush_r+0x44>
 800a9e8:	6863      	ldr	r3, [r4, #4]
 800a9ea:	1ad2      	subs	r2, r2, r3
 800a9ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9ee:	b10b      	cbz	r3, 800a9f4 <__sflush_r+0x44>
 800a9f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9f8:	6a21      	ldr	r1, [r4, #32]
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b0      	blx	r6
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	d106      	bne.n	800aa12 <__sflush_r+0x62>
 800aa04:	6829      	ldr	r1, [r5, #0]
 800aa06:	291d      	cmp	r1, #29
 800aa08:	d82b      	bhi.n	800aa62 <__sflush_r+0xb2>
 800aa0a:	4a2a      	ldr	r2, [pc, #168]	@ (800aab4 <__sflush_r+0x104>)
 800aa0c:	410a      	asrs	r2, r1
 800aa0e:	07d6      	lsls	r6, r2, #31
 800aa10:	d427      	bmi.n	800aa62 <__sflush_r+0xb2>
 800aa12:	2200      	movs	r2, #0
 800aa14:	6062      	str	r2, [r4, #4]
 800aa16:	04d9      	lsls	r1, r3, #19
 800aa18:	6922      	ldr	r2, [r4, #16]
 800aa1a:	6022      	str	r2, [r4, #0]
 800aa1c:	d504      	bpl.n	800aa28 <__sflush_r+0x78>
 800aa1e:	1c42      	adds	r2, r0, #1
 800aa20:	d101      	bne.n	800aa26 <__sflush_r+0x76>
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	b903      	cbnz	r3, 800aa28 <__sflush_r+0x78>
 800aa26:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa2a:	602f      	str	r7, [r5, #0]
 800aa2c:	b1b9      	cbz	r1, 800aa5e <__sflush_r+0xae>
 800aa2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa32:	4299      	cmp	r1, r3
 800aa34:	d002      	beq.n	800aa3c <__sflush_r+0x8c>
 800aa36:	4628      	mov	r0, r5
 800aa38:	f001 f9fe 	bl	800be38 <_free_r>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa40:	e00d      	b.n	800aa5e <__sflush_r+0xae>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b0      	blx	r6
 800aa48:	4602      	mov	r2, r0
 800aa4a:	1c50      	adds	r0, r2, #1
 800aa4c:	d1c9      	bne.n	800a9e2 <__sflush_r+0x32>
 800aa4e:	682b      	ldr	r3, [r5, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0c6      	beq.n	800a9e2 <__sflush_r+0x32>
 800aa54:	2b1d      	cmp	r3, #29
 800aa56:	d001      	beq.n	800aa5c <__sflush_r+0xac>
 800aa58:	2b16      	cmp	r3, #22
 800aa5a:	d11e      	bne.n	800aa9a <__sflush_r+0xea>
 800aa5c:	602f      	str	r7, [r5, #0]
 800aa5e:	2000      	movs	r0, #0
 800aa60:	e022      	b.n	800aaa8 <__sflush_r+0xf8>
 800aa62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa66:	b21b      	sxth	r3, r3
 800aa68:	e01b      	b.n	800aaa2 <__sflush_r+0xf2>
 800aa6a:	690f      	ldr	r7, [r1, #16]
 800aa6c:	2f00      	cmp	r7, #0
 800aa6e:	d0f6      	beq.n	800aa5e <__sflush_r+0xae>
 800aa70:	0793      	lsls	r3, r2, #30
 800aa72:	680e      	ldr	r6, [r1, #0]
 800aa74:	bf08      	it	eq
 800aa76:	694b      	ldreq	r3, [r1, #20]
 800aa78:	600f      	str	r7, [r1, #0]
 800aa7a:	bf18      	it	ne
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	eba6 0807 	sub.w	r8, r6, r7
 800aa82:	608b      	str	r3, [r1, #8]
 800aa84:	f1b8 0f00 	cmp.w	r8, #0
 800aa88:	dde9      	ble.n	800aa5e <__sflush_r+0xae>
 800aa8a:	6a21      	ldr	r1, [r4, #32]
 800aa8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa8e:	4643      	mov	r3, r8
 800aa90:	463a      	mov	r2, r7
 800aa92:	4628      	mov	r0, r5
 800aa94:	47b0      	blx	r6
 800aa96:	2800      	cmp	r0, #0
 800aa98:	dc08      	bgt.n	800aaac <__sflush_r+0xfc>
 800aa9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaac:	4407      	add	r7, r0
 800aaae:	eba8 0800 	sub.w	r8, r8, r0
 800aab2:	e7e7      	b.n	800aa84 <__sflush_r+0xd4>
 800aab4:	dfbffffe 	.word	0xdfbffffe

0800aab8 <_fflush_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	690b      	ldr	r3, [r1, #16]
 800aabc:	4605      	mov	r5, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	b913      	cbnz	r3, 800aac8 <_fflush_r+0x10>
 800aac2:	2500      	movs	r5, #0
 800aac4:	4628      	mov	r0, r5
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	b118      	cbz	r0, 800aad2 <_fflush_r+0x1a>
 800aaca:	6a03      	ldr	r3, [r0, #32]
 800aacc:	b90b      	cbnz	r3, 800aad2 <_fflush_r+0x1a>
 800aace:	f000 f8bb 	bl	800ac48 <__sinit>
 800aad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0f3      	beq.n	800aac2 <_fflush_r+0xa>
 800aada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aadc:	07d0      	lsls	r0, r2, #31
 800aade:	d404      	bmi.n	800aaea <_fflush_r+0x32>
 800aae0:	0599      	lsls	r1, r3, #22
 800aae2:	d402      	bmi.n	800aaea <_fflush_r+0x32>
 800aae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aae6:	f000 fb48 	bl	800b17a <__retarget_lock_acquire_recursive>
 800aaea:	4628      	mov	r0, r5
 800aaec:	4621      	mov	r1, r4
 800aaee:	f7ff ff5f 	bl	800a9b0 <__sflush_r>
 800aaf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aaf4:	07da      	lsls	r2, r3, #31
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	d4e4      	bmi.n	800aac4 <_fflush_r+0xc>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	059b      	lsls	r3, r3, #22
 800aafe:	d4e1      	bmi.n	800aac4 <_fflush_r+0xc>
 800ab00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab02:	f000 fb3b 	bl	800b17c <__retarget_lock_release_recursive>
 800ab06:	e7dd      	b.n	800aac4 <_fflush_r+0xc>

0800ab08 <fflush>:
 800ab08:	4601      	mov	r1, r0
 800ab0a:	b920      	cbnz	r0, 800ab16 <fflush+0xe>
 800ab0c:	4a04      	ldr	r2, [pc, #16]	@ (800ab20 <fflush+0x18>)
 800ab0e:	4905      	ldr	r1, [pc, #20]	@ (800ab24 <fflush+0x1c>)
 800ab10:	4805      	ldr	r0, [pc, #20]	@ (800ab28 <fflush+0x20>)
 800ab12:	f000 b8b1 	b.w	800ac78 <_fwalk_sglue>
 800ab16:	4b05      	ldr	r3, [pc, #20]	@ (800ab2c <fflush+0x24>)
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f7ff bfcd 	b.w	800aab8 <_fflush_r>
 800ab1e:	bf00      	nop
 800ab20:	20000014 	.word	0x20000014
 800ab24:	0800aab9 	.word	0x0800aab9
 800ab28:	20000024 	.word	0x20000024
 800ab2c:	20000020 	.word	0x20000020

0800ab30 <std>:
 800ab30:	2300      	movs	r3, #0
 800ab32:	b510      	push	{r4, lr}
 800ab34:	4604      	mov	r4, r0
 800ab36:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab3e:	6083      	str	r3, [r0, #8]
 800ab40:	8181      	strh	r1, [r0, #12]
 800ab42:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab44:	81c2      	strh	r2, [r0, #14]
 800ab46:	6183      	str	r3, [r0, #24]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	305c      	adds	r0, #92	@ 0x5c
 800ab4e:	f000 fa2d 	bl	800afac <memset>
 800ab52:	4b0d      	ldr	r3, [pc, #52]	@ (800ab88 <std+0x58>)
 800ab54:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab56:	4b0d      	ldr	r3, [pc, #52]	@ (800ab8c <std+0x5c>)
 800ab58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <std+0x60>)
 800ab5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab94 <std+0x64>)
 800ab60:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab62:	4b0d      	ldr	r3, [pc, #52]	@ (800ab98 <std+0x68>)
 800ab64:	6224      	str	r4, [r4, #32]
 800ab66:	429c      	cmp	r4, r3
 800ab68:	d006      	beq.n	800ab78 <std+0x48>
 800ab6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab6e:	4294      	cmp	r4, r2
 800ab70:	d002      	beq.n	800ab78 <std+0x48>
 800ab72:	33d0      	adds	r3, #208	@ 0xd0
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d105      	bne.n	800ab84 <std+0x54>
 800ab78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab80:	f000 bafa 	b.w	800b178 <__retarget_lock_init_recursive>
 800ab84:	bd10      	pop	{r4, pc}
 800ab86:	bf00      	nop
 800ab88:	0800adfd 	.word	0x0800adfd
 800ab8c:	0800ae1f 	.word	0x0800ae1f
 800ab90:	0800ae57 	.word	0x0800ae57
 800ab94:	0800ae7b 	.word	0x0800ae7b
 800ab98:	20019e38 	.word	0x20019e38

0800ab9c <stdio_exit_handler>:
 800ab9c:	4a02      	ldr	r2, [pc, #8]	@ (800aba8 <stdio_exit_handler+0xc>)
 800ab9e:	4903      	ldr	r1, [pc, #12]	@ (800abac <stdio_exit_handler+0x10>)
 800aba0:	4803      	ldr	r0, [pc, #12]	@ (800abb0 <stdio_exit_handler+0x14>)
 800aba2:	f000 b869 	b.w	800ac78 <_fwalk_sglue>
 800aba6:	bf00      	nop
 800aba8:	20000014 	.word	0x20000014
 800abac:	0800aab9 	.word	0x0800aab9
 800abb0:	20000024 	.word	0x20000024

0800abb4 <cleanup_stdio>:
 800abb4:	6841      	ldr	r1, [r0, #4]
 800abb6:	4b0c      	ldr	r3, [pc, #48]	@ (800abe8 <cleanup_stdio+0x34>)
 800abb8:	4299      	cmp	r1, r3
 800abba:	b510      	push	{r4, lr}
 800abbc:	4604      	mov	r4, r0
 800abbe:	d001      	beq.n	800abc4 <cleanup_stdio+0x10>
 800abc0:	f7ff ff7a 	bl	800aab8 <_fflush_r>
 800abc4:	68a1      	ldr	r1, [r4, #8]
 800abc6:	4b09      	ldr	r3, [pc, #36]	@ (800abec <cleanup_stdio+0x38>)
 800abc8:	4299      	cmp	r1, r3
 800abca:	d002      	beq.n	800abd2 <cleanup_stdio+0x1e>
 800abcc:	4620      	mov	r0, r4
 800abce:	f7ff ff73 	bl	800aab8 <_fflush_r>
 800abd2:	68e1      	ldr	r1, [r4, #12]
 800abd4:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <cleanup_stdio+0x3c>)
 800abd6:	4299      	cmp	r1, r3
 800abd8:	d004      	beq.n	800abe4 <cleanup_stdio+0x30>
 800abda:	4620      	mov	r0, r4
 800abdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abe0:	f7ff bf6a 	b.w	800aab8 <_fflush_r>
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	20019e38 	.word	0x20019e38
 800abec:	20019ea0 	.word	0x20019ea0
 800abf0:	20019f08 	.word	0x20019f08

0800abf4 <global_stdio_init.part.0>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac24 <global_stdio_init.part.0+0x30>)
 800abf8:	4c0b      	ldr	r4, [pc, #44]	@ (800ac28 <global_stdio_init.part.0+0x34>)
 800abfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ac2c <global_stdio_init.part.0+0x38>)
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	4620      	mov	r0, r4
 800ac00:	2200      	movs	r2, #0
 800ac02:	2104      	movs	r1, #4
 800ac04:	f7ff ff94 	bl	800ab30 <std>
 800ac08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	2109      	movs	r1, #9
 800ac10:	f7ff ff8e 	bl	800ab30 <std>
 800ac14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac18:	2202      	movs	r2, #2
 800ac1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1e:	2112      	movs	r1, #18
 800ac20:	f7ff bf86 	b.w	800ab30 <std>
 800ac24:	20019f70 	.word	0x20019f70
 800ac28:	20019e38 	.word	0x20019e38
 800ac2c:	0800ab9d 	.word	0x0800ab9d

0800ac30 <__sfp_lock_acquire>:
 800ac30:	4801      	ldr	r0, [pc, #4]	@ (800ac38 <__sfp_lock_acquire+0x8>)
 800ac32:	f000 baa2 	b.w	800b17a <__retarget_lock_acquire_recursive>
 800ac36:	bf00      	nop
 800ac38:	20019f79 	.word	0x20019f79

0800ac3c <__sfp_lock_release>:
 800ac3c:	4801      	ldr	r0, [pc, #4]	@ (800ac44 <__sfp_lock_release+0x8>)
 800ac3e:	f000 ba9d 	b.w	800b17c <__retarget_lock_release_recursive>
 800ac42:	bf00      	nop
 800ac44:	20019f79 	.word	0x20019f79

0800ac48 <__sinit>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	f7ff fff0 	bl	800ac30 <__sfp_lock_acquire>
 800ac50:	6a23      	ldr	r3, [r4, #32]
 800ac52:	b11b      	cbz	r3, 800ac5c <__sinit+0x14>
 800ac54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac58:	f7ff bff0 	b.w	800ac3c <__sfp_lock_release>
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <__sinit+0x28>)
 800ac5e:	6223      	str	r3, [r4, #32]
 800ac60:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <__sinit+0x2c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1f5      	bne.n	800ac54 <__sinit+0xc>
 800ac68:	f7ff ffc4 	bl	800abf4 <global_stdio_init.part.0>
 800ac6c:	e7f2      	b.n	800ac54 <__sinit+0xc>
 800ac6e:	bf00      	nop
 800ac70:	0800abb5 	.word	0x0800abb5
 800ac74:	20019f70 	.word	0x20019f70

0800ac78 <_fwalk_sglue>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	4688      	mov	r8, r1
 800ac80:	4614      	mov	r4, r2
 800ac82:	2600      	movs	r6, #0
 800ac84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac88:	f1b9 0901 	subs.w	r9, r9, #1
 800ac8c:	d505      	bpl.n	800ac9a <_fwalk_sglue+0x22>
 800ac8e:	6824      	ldr	r4, [r4, #0]
 800ac90:	2c00      	cmp	r4, #0
 800ac92:	d1f7      	bne.n	800ac84 <_fwalk_sglue+0xc>
 800ac94:	4630      	mov	r0, r6
 800ac96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d907      	bls.n	800acb0 <_fwalk_sglue+0x38>
 800aca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aca4:	3301      	adds	r3, #1
 800aca6:	d003      	beq.n	800acb0 <_fwalk_sglue+0x38>
 800aca8:	4629      	mov	r1, r5
 800acaa:	4638      	mov	r0, r7
 800acac:	47c0      	blx	r8
 800acae:	4306      	orrs	r6, r0
 800acb0:	3568      	adds	r5, #104	@ 0x68
 800acb2:	e7e9      	b.n	800ac88 <_fwalk_sglue+0x10>

0800acb4 <iprintf>:
 800acb4:	b40f      	push	{r0, r1, r2, r3}
 800acb6:	b507      	push	{r0, r1, r2, lr}
 800acb8:	4906      	ldr	r1, [pc, #24]	@ (800acd4 <iprintf+0x20>)
 800acba:	ab04      	add	r3, sp, #16
 800acbc:	6808      	ldr	r0, [r1, #0]
 800acbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc2:	6881      	ldr	r1, [r0, #8]
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	f001 febb 	bl	800ca40 <_vfiprintf_r>
 800acca:	b003      	add	sp, #12
 800accc:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd0:	b004      	add	sp, #16
 800acd2:	4770      	bx	lr
 800acd4:	20000020 	.word	0x20000020

0800acd8 <_puts_r>:
 800acd8:	6a03      	ldr	r3, [r0, #32]
 800acda:	b570      	push	{r4, r5, r6, lr}
 800acdc:	6884      	ldr	r4, [r0, #8]
 800acde:	4605      	mov	r5, r0
 800ace0:	460e      	mov	r6, r1
 800ace2:	b90b      	cbnz	r3, 800ace8 <_puts_r+0x10>
 800ace4:	f7ff ffb0 	bl	800ac48 <__sinit>
 800ace8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acea:	07db      	lsls	r3, r3, #31
 800acec:	d405      	bmi.n	800acfa <_puts_r+0x22>
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	0598      	lsls	r0, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_puts_r+0x22>
 800acf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acf6:	f000 fa40 	bl	800b17a <__retarget_lock_acquire_recursive>
 800acfa:	89a3      	ldrh	r3, [r4, #12]
 800acfc:	0719      	lsls	r1, r3, #28
 800acfe:	d502      	bpl.n	800ad06 <_puts_r+0x2e>
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d135      	bne.n	800ad72 <_puts_r+0x9a>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f000 f8f9 	bl	800af00 <__swsetup_r>
 800ad0e:	b380      	cbz	r0, 800ad72 <_puts_r+0x9a>
 800ad10:	f04f 35ff 	mov.w	r5, #4294967295
 800ad14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad16:	07da      	lsls	r2, r3, #31
 800ad18:	d405      	bmi.n	800ad26 <_puts_r+0x4e>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	059b      	lsls	r3, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <_puts_r+0x4e>
 800ad20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad22:	f000 fa2b 	bl	800b17c <__retarget_lock_release_recursive>
 800ad26:	4628      	mov	r0, r5
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da04      	bge.n	800ad38 <_puts_r+0x60>
 800ad2e:	69a2      	ldr	r2, [r4, #24]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	dc17      	bgt.n	800ad64 <_puts_r+0x8c>
 800ad34:	290a      	cmp	r1, #10
 800ad36:	d015      	beq.n	800ad64 <_puts_r+0x8c>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	6022      	str	r2, [r4, #0]
 800ad3e:	7019      	strb	r1, [r3, #0]
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad46:	3b01      	subs	r3, #1
 800ad48:	60a3      	str	r3, [r4, #8]
 800ad4a:	2900      	cmp	r1, #0
 800ad4c:	d1ed      	bne.n	800ad2a <_puts_r+0x52>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	da11      	bge.n	800ad76 <_puts_r+0x9e>
 800ad52:	4622      	mov	r2, r4
 800ad54:	210a      	movs	r1, #10
 800ad56:	4628      	mov	r0, r5
 800ad58:	f000 f893 	bl	800ae82 <__swbuf_r>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d0d7      	beq.n	800ad10 <_puts_r+0x38>
 800ad60:	250a      	movs	r5, #10
 800ad62:	e7d7      	b.n	800ad14 <_puts_r+0x3c>
 800ad64:	4622      	mov	r2, r4
 800ad66:	4628      	mov	r0, r5
 800ad68:	f000 f88b 	bl	800ae82 <__swbuf_r>
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d1e7      	bne.n	800ad40 <_puts_r+0x68>
 800ad70:	e7ce      	b.n	800ad10 <_puts_r+0x38>
 800ad72:	3e01      	subs	r6, #1
 800ad74:	e7e4      	b.n	800ad40 <_puts_r+0x68>
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	6022      	str	r2, [r4, #0]
 800ad7c:	220a      	movs	r2, #10
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	e7ee      	b.n	800ad60 <_puts_r+0x88>
	...

0800ad84 <puts>:
 800ad84:	4b02      	ldr	r3, [pc, #8]	@ (800ad90 <puts+0xc>)
 800ad86:	4601      	mov	r1, r0
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	f7ff bfa5 	b.w	800acd8 <_puts_r>
 800ad8e:	bf00      	nop
 800ad90:	20000020 	.word	0x20000020

0800ad94 <sniprintf>:
 800ad94:	b40c      	push	{r2, r3}
 800ad96:	b530      	push	{r4, r5, lr}
 800ad98:	4b17      	ldr	r3, [pc, #92]	@ (800adf8 <sniprintf+0x64>)
 800ad9a:	1e0c      	subs	r4, r1, #0
 800ad9c:	681d      	ldr	r5, [r3, #0]
 800ad9e:	b09d      	sub	sp, #116	@ 0x74
 800ada0:	da08      	bge.n	800adb4 <sniprintf+0x20>
 800ada2:	238b      	movs	r3, #139	@ 0x8b
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	b01d      	add	sp, #116	@ 0x74
 800adac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adb0:	b002      	add	sp, #8
 800adb2:	4770      	bx	lr
 800adb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800adb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adbc:	bf14      	ite	ne
 800adbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800adc2:	4623      	moveq	r3, r4
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	9307      	str	r3, [sp, #28]
 800adc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	9006      	str	r0, [sp, #24]
 800add0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800add4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800add6:	ab21      	add	r3, sp, #132	@ 0x84
 800add8:	a902      	add	r1, sp, #8
 800adda:	4628      	mov	r0, r5
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	f001 fd09 	bl	800c7f4 <_svfiprintf_r>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	bfbc      	itt	lt
 800ade6:	238b      	movlt	r3, #139	@ 0x8b
 800ade8:	602b      	strlt	r3, [r5, #0]
 800adea:	2c00      	cmp	r4, #0
 800adec:	d0dd      	beq.n	800adaa <sniprintf+0x16>
 800adee:	9b02      	ldr	r3, [sp, #8]
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
 800adf4:	e7d9      	b.n	800adaa <sniprintf+0x16>
 800adf6:	bf00      	nop
 800adf8:	20000020 	.word	0x20000020

0800adfc <__sread>:
 800adfc:	b510      	push	{r4, lr}
 800adfe:	460c      	mov	r4, r1
 800ae00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae04:	f000 f96a 	bl	800b0dc <_read_r>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	bfab      	itete	ge
 800ae0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae10:	181b      	addge	r3, r3, r0
 800ae12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae16:	bfac      	ite	ge
 800ae18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae1a:	81a3      	strhlt	r3, [r4, #12]
 800ae1c:	bd10      	pop	{r4, pc}

0800ae1e <__swrite>:
 800ae1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae22:	461f      	mov	r7, r3
 800ae24:	898b      	ldrh	r3, [r1, #12]
 800ae26:	05db      	lsls	r3, r3, #23
 800ae28:	4605      	mov	r5, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	d505      	bpl.n	800ae3c <__swrite+0x1e>
 800ae30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae34:	2302      	movs	r3, #2
 800ae36:	2200      	movs	r2, #0
 800ae38:	f000 f93e 	bl	800b0b8 <_lseek_r>
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	4632      	mov	r2, r6
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae52:	f000 b955 	b.w	800b100 <_write_r>

0800ae56 <__sseek>:
 800ae56:	b510      	push	{r4, lr}
 800ae58:	460c      	mov	r4, r1
 800ae5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae5e:	f000 f92b 	bl	800b0b8 <_lseek_r>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	bf15      	itete	ne
 800ae68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae72:	81a3      	strheq	r3, [r4, #12]
 800ae74:	bf18      	it	ne
 800ae76:	81a3      	strhne	r3, [r4, #12]
 800ae78:	bd10      	pop	{r4, pc}

0800ae7a <__sclose>:
 800ae7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7e:	f000 b8b5 	b.w	800afec <_close_r>

0800ae82 <__swbuf_r>:
 800ae82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae84:	460e      	mov	r6, r1
 800ae86:	4614      	mov	r4, r2
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b118      	cbz	r0, 800ae94 <__swbuf_r+0x12>
 800ae8c:	6a03      	ldr	r3, [r0, #32]
 800ae8e:	b90b      	cbnz	r3, 800ae94 <__swbuf_r+0x12>
 800ae90:	f7ff feda 	bl	800ac48 <__sinit>
 800ae94:	69a3      	ldr	r3, [r4, #24]
 800ae96:	60a3      	str	r3, [r4, #8]
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	071a      	lsls	r2, r3, #28
 800ae9c:	d501      	bpl.n	800aea2 <__swbuf_r+0x20>
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	b943      	cbnz	r3, 800aeb4 <__swbuf_r+0x32>
 800aea2:	4621      	mov	r1, r4
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 f82b 	bl	800af00 <__swsetup_r>
 800aeaa:	b118      	cbz	r0, 800aeb4 <__swbuf_r+0x32>
 800aeac:	f04f 37ff 	mov.w	r7, #4294967295
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	6922      	ldr	r2, [r4, #16]
 800aeb8:	1a98      	subs	r0, r3, r2
 800aeba:	6963      	ldr	r3, [r4, #20]
 800aebc:	b2f6      	uxtb	r6, r6
 800aebe:	4283      	cmp	r3, r0
 800aec0:	4637      	mov	r7, r6
 800aec2:	dc05      	bgt.n	800aed0 <__swbuf_r+0x4e>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4628      	mov	r0, r5
 800aec8:	f7ff fdf6 	bl	800aab8 <_fflush_r>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d1ed      	bne.n	800aeac <__swbuf_r+0x2a>
 800aed0:	68a3      	ldr	r3, [r4, #8]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	60a3      	str	r3, [r4, #8]
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	6022      	str	r2, [r4, #0]
 800aedc:	701e      	strb	r6, [r3, #0]
 800aede:	6962      	ldr	r2, [r4, #20]
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d004      	beq.n	800aef0 <__swbuf_r+0x6e>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	07db      	lsls	r3, r3, #31
 800aeea:	d5e1      	bpl.n	800aeb0 <__swbuf_r+0x2e>
 800aeec:	2e0a      	cmp	r6, #10
 800aeee:	d1df      	bne.n	800aeb0 <__swbuf_r+0x2e>
 800aef0:	4621      	mov	r1, r4
 800aef2:	4628      	mov	r0, r5
 800aef4:	f7ff fde0 	bl	800aab8 <_fflush_r>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d0d9      	beq.n	800aeb0 <__swbuf_r+0x2e>
 800aefc:	e7d6      	b.n	800aeac <__swbuf_r+0x2a>
	...

0800af00 <__swsetup_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4b29      	ldr	r3, [pc, #164]	@ (800afa8 <__swsetup_r+0xa8>)
 800af04:	4605      	mov	r5, r0
 800af06:	6818      	ldr	r0, [r3, #0]
 800af08:	460c      	mov	r4, r1
 800af0a:	b118      	cbz	r0, 800af14 <__swsetup_r+0x14>
 800af0c:	6a03      	ldr	r3, [r0, #32]
 800af0e:	b90b      	cbnz	r3, 800af14 <__swsetup_r+0x14>
 800af10:	f7ff fe9a 	bl	800ac48 <__sinit>
 800af14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af18:	0719      	lsls	r1, r3, #28
 800af1a:	d422      	bmi.n	800af62 <__swsetup_r+0x62>
 800af1c:	06da      	lsls	r2, r3, #27
 800af1e:	d407      	bmi.n	800af30 <__swsetup_r+0x30>
 800af20:	2209      	movs	r2, #9
 800af22:	602a      	str	r2, [r5, #0]
 800af24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	f04f 30ff 	mov.w	r0, #4294967295
 800af2e:	e033      	b.n	800af98 <__swsetup_r+0x98>
 800af30:	0758      	lsls	r0, r3, #29
 800af32:	d512      	bpl.n	800af5a <__swsetup_r+0x5a>
 800af34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af36:	b141      	cbz	r1, 800af4a <__swsetup_r+0x4a>
 800af38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d002      	beq.n	800af46 <__swsetup_r+0x46>
 800af40:	4628      	mov	r0, r5
 800af42:	f000 ff79 	bl	800be38 <_free_r>
 800af46:	2300      	movs	r3, #0
 800af48:	6363      	str	r3, [r4, #52]	@ 0x34
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	2300      	movs	r3, #0
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	6923      	ldr	r3, [r4, #16]
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	f043 0308 	orr.w	r3, r3, #8
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	b94b      	cbnz	r3, 800af7a <__swsetup_r+0x7a>
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af70:	d003      	beq.n	800af7a <__swsetup_r+0x7a>
 800af72:	4621      	mov	r1, r4
 800af74:	4628      	mov	r0, r5
 800af76:	f001 fea1 	bl	800ccbc <__smakebuf_r>
 800af7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7e:	f013 0201 	ands.w	r2, r3, #1
 800af82:	d00a      	beq.n	800af9a <__swsetup_r+0x9a>
 800af84:	2200      	movs	r2, #0
 800af86:	60a2      	str	r2, [r4, #8]
 800af88:	6962      	ldr	r2, [r4, #20]
 800af8a:	4252      	negs	r2, r2
 800af8c:	61a2      	str	r2, [r4, #24]
 800af8e:	6922      	ldr	r2, [r4, #16]
 800af90:	b942      	cbnz	r2, 800afa4 <__swsetup_r+0xa4>
 800af92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af96:	d1c5      	bne.n	800af24 <__swsetup_r+0x24>
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	0799      	lsls	r1, r3, #30
 800af9c:	bf58      	it	pl
 800af9e:	6962      	ldrpl	r2, [r4, #20]
 800afa0:	60a2      	str	r2, [r4, #8]
 800afa2:	e7f4      	b.n	800af8e <__swsetup_r+0x8e>
 800afa4:	2000      	movs	r0, #0
 800afa6:	e7f7      	b.n	800af98 <__swsetup_r+0x98>
 800afa8:	20000020 	.word	0x20000020

0800afac <memset>:
 800afac:	4402      	add	r2, r0
 800afae:	4603      	mov	r3, r0
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d100      	bne.n	800afb6 <memset+0xa>
 800afb4:	4770      	bx	lr
 800afb6:	f803 1b01 	strb.w	r1, [r3], #1
 800afba:	e7f9      	b.n	800afb0 <memset+0x4>

0800afbc <strncpy>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	3901      	subs	r1, #1
 800afc0:	4603      	mov	r3, r0
 800afc2:	b132      	cbz	r2, 800afd2 <strncpy+0x16>
 800afc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800afc8:	f803 4b01 	strb.w	r4, [r3], #1
 800afcc:	3a01      	subs	r2, #1
 800afce:	2c00      	cmp	r4, #0
 800afd0:	d1f7      	bne.n	800afc2 <strncpy+0x6>
 800afd2:	441a      	add	r2, r3
 800afd4:	2100      	movs	r1, #0
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d100      	bne.n	800afdc <strncpy+0x20>
 800afda:	bd10      	pop	{r4, pc}
 800afdc:	f803 1b01 	strb.w	r1, [r3], #1
 800afe0:	e7f9      	b.n	800afd6 <strncpy+0x1a>
	...

0800afe4 <_localeconv_r>:
 800afe4:	4800      	ldr	r0, [pc, #0]	@ (800afe8 <_localeconv_r+0x4>)
 800afe6:	4770      	bx	lr
 800afe8:	20000160 	.word	0x20000160

0800afec <_close_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	@ (800b008 <_close_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f8 f8f4 	bl	80031e4 <_close>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_close_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_close_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20019f74 	.word	0x20019f74

0800b00c <_reclaim_reent>:
 800b00c:	4b29      	ldr	r3, [pc, #164]	@ (800b0b4 <_reclaim_reent+0xa8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4283      	cmp	r3, r0
 800b012:	b570      	push	{r4, r5, r6, lr}
 800b014:	4604      	mov	r4, r0
 800b016:	d04b      	beq.n	800b0b0 <_reclaim_reent+0xa4>
 800b018:	69c3      	ldr	r3, [r0, #28]
 800b01a:	b1ab      	cbz	r3, 800b048 <_reclaim_reent+0x3c>
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	b16b      	cbz	r3, 800b03c <_reclaim_reent+0x30>
 800b020:	2500      	movs	r5, #0
 800b022:	69e3      	ldr	r3, [r4, #28]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	5959      	ldr	r1, [r3, r5]
 800b028:	2900      	cmp	r1, #0
 800b02a:	d13b      	bne.n	800b0a4 <_reclaim_reent+0x98>
 800b02c:	3504      	adds	r5, #4
 800b02e:	2d80      	cmp	r5, #128	@ 0x80
 800b030:	d1f7      	bne.n	800b022 <_reclaim_reent+0x16>
 800b032:	69e3      	ldr	r3, [r4, #28]
 800b034:	4620      	mov	r0, r4
 800b036:	68d9      	ldr	r1, [r3, #12]
 800b038:	f000 fefe 	bl	800be38 <_free_r>
 800b03c:	69e3      	ldr	r3, [r4, #28]
 800b03e:	6819      	ldr	r1, [r3, #0]
 800b040:	b111      	cbz	r1, 800b048 <_reclaim_reent+0x3c>
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fef8 	bl	800be38 <_free_r>
 800b048:	6961      	ldr	r1, [r4, #20]
 800b04a:	b111      	cbz	r1, 800b052 <_reclaim_reent+0x46>
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fef3 	bl	800be38 <_free_r>
 800b052:	69e1      	ldr	r1, [r4, #28]
 800b054:	b111      	cbz	r1, 800b05c <_reclaim_reent+0x50>
 800b056:	4620      	mov	r0, r4
 800b058:	f000 feee 	bl	800be38 <_free_r>
 800b05c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b05e:	b111      	cbz	r1, 800b066 <_reclaim_reent+0x5a>
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fee9 	bl	800be38 <_free_r>
 800b066:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b068:	b111      	cbz	r1, 800b070 <_reclaim_reent+0x64>
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fee4 	bl	800be38 <_free_r>
 800b070:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b072:	b111      	cbz	r1, 800b07a <_reclaim_reent+0x6e>
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fedf 	bl	800be38 <_free_r>
 800b07a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b07c:	b111      	cbz	r1, 800b084 <_reclaim_reent+0x78>
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 feda 	bl	800be38 <_free_r>
 800b084:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b086:	b111      	cbz	r1, 800b08e <_reclaim_reent+0x82>
 800b088:	4620      	mov	r0, r4
 800b08a:	f000 fed5 	bl	800be38 <_free_r>
 800b08e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b090:	b111      	cbz	r1, 800b098 <_reclaim_reent+0x8c>
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fed0 	bl	800be38 <_free_r>
 800b098:	6a23      	ldr	r3, [r4, #32]
 800b09a:	b14b      	cbz	r3, 800b0b0 <_reclaim_reent+0xa4>
 800b09c:	4620      	mov	r0, r4
 800b09e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0a2:	4718      	bx	r3
 800b0a4:	680e      	ldr	r6, [r1, #0]
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fec6 	bl	800be38 <_free_r>
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	e7bb      	b.n	800b028 <_reclaim_reent+0x1c>
 800b0b0:	bd70      	pop	{r4, r5, r6, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000020 	.word	0x20000020

0800b0b8 <_lseek_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4d07      	ldr	r5, [pc, #28]	@ (800b0d8 <_lseek_r+0x20>)
 800b0bc:	4604      	mov	r4, r0
 800b0be:	4608      	mov	r0, r1
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	602a      	str	r2, [r5, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f7f8 f8b3 	bl	8003232 <_lseek>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_lseek_r+0x1e>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_lseek_r+0x1e>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	20019f74 	.word	0x20019f74

0800b0dc <_read_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	@ (800b0fc <_read_r+0x20>)
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	602a      	str	r2, [r5, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f7f8 f841 	bl	8003172 <_read>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_read_r+0x1e>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_read_r+0x1e>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	20019f74 	.word	0x20019f74

0800b100 <_write_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4d07      	ldr	r5, [pc, #28]	@ (800b120 <_write_r+0x20>)
 800b104:	4604      	mov	r4, r0
 800b106:	4608      	mov	r0, r1
 800b108:	4611      	mov	r1, r2
 800b10a:	2200      	movs	r2, #0
 800b10c:	602a      	str	r2, [r5, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	f7f8 f84c 	bl	80031ac <_write>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_write_r+0x1e>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_write_r+0x1e>
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	20019f74 	.word	0x20019f74

0800b124 <__errno>:
 800b124:	4b01      	ldr	r3, [pc, #4]	@ (800b12c <__errno+0x8>)
 800b126:	6818      	ldr	r0, [r3, #0]
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	20000020 	.word	0x20000020

0800b130 <__libc_init_array>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	4d0d      	ldr	r5, [pc, #52]	@ (800b168 <__libc_init_array+0x38>)
 800b134:	4c0d      	ldr	r4, [pc, #52]	@ (800b16c <__libc_init_array+0x3c>)
 800b136:	1b64      	subs	r4, r4, r5
 800b138:	10a4      	asrs	r4, r4, #2
 800b13a:	2600      	movs	r6, #0
 800b13c:	42a6      	cmp	r6, r4
 800b13e:	d109      	bne.n	800b154 <__libc_init_array+0x24>
 800b140:	4d0b      	ldr	r5, [pc, #44]	@ (800b170 <__libc_init_array+0x40>)
 800b142:	4c0c      	ldr	r4, [pc, #48]	@ (800b174 <__libc_init_array+0x44>)
 800b144:	f001 ff28 	bl	800cf98 <_init>
 800b148:	1b64      	subs	r4, r4, r5
 800b14a:	10a4      	asrs	r4, r4, #2
 800b14c:	2600      	movs	r6, #0
 800b14e:	42a6      	cmp	r6, r4
 800b150:	d105      	bne.n	800b15e <__libc_init_array+0x2e>
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	f855 3b04 	ldr.w	r3, [r5], #4
 800b158:	4798      	blx	r3
 800b15a:	3601      	adds	r6, #1
 800b15c:	e7ee      	b.n	800b13c <__libc_init_array+0xc>
 800b15e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b162:	4798      	blx	r3
 800b164:	3601      	adds	r6, #1
 800b166:	e7f2      	b.n	800b14e <__libc_init_array+0x1e>
 800b168:	0800e738 	.word	0x0800e738
 800b16c:	0800e738 	.word	0x0800e738
 800b170:	0800e738 	.word	0x0800e738
 800b174:	0800e73c 	.word	0x0800e73c

0800b178 <__retarget_lock_init_recursive>:
 800b178:	4770      	bx	lr

0800b17a <__retarget_lock_acquire_recursive>:
 800b17a:	4770      	bx	lr

0800b17c <__retarget_lock_release_recursive>:
 800b17c:	4770      	bx	lr

0800b17e <memcpy>:
 800b17e:	440a      	add	r2, r1
 800b180:	4291      	cmp	r1, r2
 800b182:	f100 33ff 	add.w	r3, r0, #4294967295
 800b186:	d100      	bne.n	800b18a <memcpy+0xc>
 800b188:	4770      	bx	lr
 800b18a:	b510      	push	{r4, lr}
 800b18c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b190:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b194:	4291      	cmp	r1, r2
 800b196:	d1f9      	bne.n	800b18c <memcpy+0xe>
 800b198:	bd10      	pop	{r4, pc}

0800b19a <quorem>:
 800b19a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19e:	6903      	ldr	r3, [r0, #16]
 800b1a0:	690c      	ldr	r4, [r1, #16]
 800b1a2:	42a3      	cmp	r3, r4
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	db7e      	blt.n	800b2a6 <quorem+0x10c>
 800b1a8:	3c01      	subs	r4, #1
 800b1aa:	f101 0814 	add.w	r8, r1, #20
 800b1ae:	00a3      	lsls	r3, r4, #2
 800b1b0:	f100 0514 	add.w	r5, r0, #20
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1d0:	d32e      	bcc.n	800b230 <quorem+0x96>
 800b1d2:	f04f 0a00 	mov.w	sl, #0
 800b1d6:	46c4      	mov	ip, r8
 800b1d8:	46ae      	mov	lr, r5
 800b1da:	46d3      	mov	fp, sl
 800b1dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1e0:	b298      	uxth	r0, r3
 800b1e2:	fb06 a000 	mla	r0, r6, r0, sl
 800b1e6:	0c02      	lsrs	r2, r0, #16
 800b1e8:	0c1b      	lsrs	r3, r3, #16
 800b1ea:	fb06 2303 	mla	r3, r6, r3, r2
 800b1ee:	f8de 2000 	ldr.w	r2, [lr]
 800b1f2:	b280      	uxth	r0, r0
 800b1f4:	b292      	uxth	r2, r2
 800b1f6:	1a12      	subs	r2, r2, r0
 800b1f8:	445a      	add	r2, fp
 800b1fa:	f8de 0000 	ldr.w	r0, [lr]
 800b1fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b202:	b29b      	uxth	r3, r3
 800b204:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b208:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b20c:	b292      	uxth	r2, r2
 800b20e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b212:	45e1      	cmp	r9, ip
 800b214:	f84e 2b04 	str.w	r2, [lr], #4
 800b218:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b21c:	d2de      	bcs.n	800b1dc <quorem+0x42>
 800b21e:	9b00      	ldr	r3, [sp, #0]
 800b220:	58eb      	ldr	r3, [r5, r3]
 800b222:	b92b      	cbnz	r3, 800b230 <quorem+0x96>
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	3b04      	subs	r3, #4
 800b228:	429d      	cmp	r5, r3
 800b22a:	461a      	mov	r2, r3
 800b22c:	d32f      	bcc.n	800b28e <quorem+0xf4>
 800b22e:	613c      	str	r4, [r7, #16]
 800b230:	4638      	mov	r0, r7
 800b232:	f001 f97b 	bl	800c52c <__mcmp>
 800b236:	2800      	cmp	r0, #0
 800b238:	db25      	blt.n	800b286 <quorem+0xec>
 800b23a:	4629      	mov	r1, r5
 800b23c:	2000      	movs	r0, #0
 800b23e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b242:	f8d1 c000 	ldr.w	ip, [r1]
 800b246:	fa1f fe82 	uxth.w	lr, r2
 800b24a:	fa1f f38c 	uxth.w	r3, ip
 800b24e:	eba3 030e 	sub.w	r3, r3, lr
 800b252:	4403      	add	r3, r0
 800b254:	0c12      	lsrs	r2, r2, #16
 800b256:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b25a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b25e:	b29b      	uxth	r3, r3
 800b260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b264:	45c1      	cmp	r9, r8
 800b266:	f841 3b04 	str.w	r3, [r1], #4
 800b26a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b26e:	d2e6      	bcs.n	800b23e <quorem+0xa4>
 800b270:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b274:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b278:	b922      	cbnz	r2, 800b284 <quorem+0xea>
 800b27a:	3b04      	subs	r3, #4
 800b27c:	429d      	cmp	r5, r3
 800b27e:	461a      	mov	r2, r3
 800b280:	d30b      	bcc.n	800b29a <quorem+0x100>
 800b282:	613c      	str	r4, [r7, #16]
 800b284:	3601      	adds	r6, #1
 800b286:	4630      	mov	r0, r6
 800b288:	b003      	add	sp, #12
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	6812      	ldr	r2, [r2, #0]
 800b290:	3b04      	subs	r3, #4
 800b292:	2a00      	cmp	r2, #0
 800b294:	d1cb      	bne.n	800b22e <quorem+0x94>
 800b296:	3c01      	subs	r4, #1
 800b298:	e7c6      	b.n	800b228 <quorem+0x8e>
 800b29a:	6812      	ldr	r2, [r2, #0]
 800b29c:	3b04      	subs	r3, #4
 800b29e:	2a00      	cmp	r2, #0
 800b2a0:	d1ef      	bne.n	800b282 <quorem+0xe8>
 800b2a2:	3c01      	subs	r4, #1
 800b2a4:	e7ea      	b.n	800b27c <quorem+0xe2>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	e7ee      	b.n	800b288 <quorem+0xee>
 800b2aa:	0000      	movs	r0, r0
 800b2ac:	0000      	movs	r0, r0
	...

0800b2b0 <_dtoa_r>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	69c7      	ldr	r7, [r0, #28]
 800b2b6:	b099      	sub	sp, #100	@ 0x64
 800b2b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b2bc:	ec55 4b10 	vmov	r4, r5, d0
 800b2c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b2c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2c4:	4683      	mov	fp, r0
 800b2c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2ca:	b97f      	cbnz	r7, 800b2ec <_dtoa_r+0x3c>
 800b2cc:	2010      	movs	r0, #16
 800b2ce:	f000 fdfd 	bl	800becc <malloc>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b2d8:	b920      	cbnz	r0, 800b2e4 <_dtoa_r+0x34>
 800b2da:	4ba7      	ldr	r3, [pc, #668]	@ (800b578 <_dtoa_r+0x2c8>)
 800b2dc:	21ef      	movs	r1, #239	@ 0xef
 800b2de:	48a7      	ldr	r0, [pc, #668]	@ (800b57c <_dtoa_r+0x2cc>)
 800b2e0:	f001 fd74 	bl	800cdcc <__assert_func>
 800b2e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2e8:	6007      	str	r7, [r0, #0]
 800b2ea:	60c7      	str	r7, [r0, #12]
 800b2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2f0:	6819      	ldr	r1, [r3, #0]
 800b2f2:	b159      	cbz	r1, 800b30c <_dtoa_r+0x5c>
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	604a      	str	r2, [r1, #4]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	4093      	lsls	r3, r2
 800b2fc:	608b      	str	r3, [r1, #8]
 800b2fe:	4658      	mov	r0, fp
 800b300:	f000 feda 	bl	800c0b8 <_Bfree>
 800b304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	1e2b      	subs	r3, r5, #0
 800b30e:	bfb9      	ittee	lt
 800b310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b314:	9303      	strlt	r3, [sp, #12]
 800b316:	2300      	movge	r3, #0
 800b318:	6033      	strge	r3, [r6, #0]
 800b31a:	9f03      	ldr	r7, [sp, #12]
 800b31c:	4b98      	ldr	r3, [pc, #608]	@ (800b580 <_dtoa_r+0x2d0>)
 800b31e:	bfbc      	itt	lt
 800b320:	2201      	movlt	r2, #1
 800b322:	6032      	strlt	r2, [r6, #0]
 800b324:	43bb      	bics	r3, r7
 800b326:	d112      	bne.n	800b34e <_dtoa_r+0x9e>
 800b328:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b32a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b334:	4323      	orrs	r3, r4
 800b336:	f000 854d 	beq.w	800bdd4 <_dtoa_r+0xb24>
 800b33a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b33c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b594 <_dtoa_r+0x2e4>
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 854f 	beq.w	800bde4 <_dtoa_r+0xb34>
 800b346:	f10a 0303 	add.w	r3, sl, #3
 800b34a:	f000 bd49 	b.w	800bde0 <_dtoa_r+0xb30>
 800b34e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b352:	2200      	movs	r2, #0
 800b354:	ec51 0b17 	vmov	r0, r1, d7
 800b358:	2300      	movs	r3, #0
 800b35a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b35e:	f7f5 fbd3 	bl	8000b08 <__aeabi_dcmpeq>
 800b362:	4680      	mov	r8, r0
 800b364:	b158      	cbz	r0, 800b37e <_dtoa_r+0xce>
 800b366:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b368:	2301      	movs	r3, #1
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b36e:	b113      	cbz	r3, 800b376 <_dtoa_r+0xc6>
 800b370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b372:	4b84      	ldr	r3, [pc, #528]	@ (800b584 <_dtoa_r+0x2d4>)
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b598 <_dtoa_r+0x2e8>
 800b37a:	f000 bd33 	b.w	800bde4 <_dtoa_r+0xb34>
 800b37e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b382:	aa16      	add	r2, sp, #88	@ 0x58
 800b384:	a917      	add	r1, sp, #92	@ 0x5c
 800b386:	4658      	mov	r0, fp
 800b388:	f001 f980 	bl	800c68c <__d2b>
 800b38c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b390:	4681      	mov	r9, r0
 800b392:	2e00      	cmp	r6, #0
 800b394:	d077      	beq.n	800b486 <_dtoa_r+0x1d6>
 800b396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b398:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4b74      	ldr	r3, [pc, #464]	@ (800b588 <_dtoa_r+0x2d8>)
 800b3b6:	f7f4 ff87 	bl	80002c8 <__aeabi_dsub>
 800b3ba:	a369      	add	r3, pc, #420	@ (adr r3, 800b560 <_dtoa_r+0x2b0>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f5 f93a 	bl	8000638 <__aeabi_dmul>
 800b3c4:	a368      	add	r3, pc, #416	@ (adr r3, 800b568 <_dtoa_r+0x2b8>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f4 ff7f 	bl	80002cc <__adddf3>
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	f7f5 f8c6 	bl	8000564 <__aeabi_i2d>
 800b3d8:	a365      	add	r3, pc, #404	@ (adr r3, 800b570 <_dtoa_r+0x2c0>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f5 f92b 	bl	8000638 <__aeabi_dmul>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7f4 ff6f 	bl	80002cc <__adddf3>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	f7f5 fbd1 	bl	8000b98 <__aeabi_d2iz>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 800b404:	b140      	cbz	r0, 800b418 <_dtoa_r+0x168>
 800b406:	4638      	mov	r0, r7
 800b408:	f7f5 f8ac 	bl	8000564 <__aeabi_i2d>
 800b40c:	4622      	mov	r2, r4
 800b40e:	462b      	mov	r3, r5
 800b410:	f7f5 fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 800b414:	b900      	cbnz	r0, 800b418 <_dtoa_r+0x168>
 800b416:	3f01      	subs	r7, #1
 800b418:	2f16      	cmp	r7, #22
 800b41a:	d851      	bhi.n	800b4c0 <_dtoa_r+0x210>
 800b41c:	4b5b      	ldr	r3, [pc, #364]	@ (800b58c <_dtoa_r+0x2dc>)
 800b41e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b42a:	f7f5 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d048      	beq.n	800b4c4 <_dtoa_r+0x214>
 800b432:	3f01      	subs	r7, #1
 800b434:	2300      	movs	r3, #0
 800b436:	9312      	str	r3, [sp, #72]	@ 0x48
 800b438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b43a:	1b9b      	subs	r3, r3, r6
 800b43c:	1e5a      	subs	r2, r3, #1
 800b43e:	bf44      	itt	mi
 800b440:	f1c3 0801 	rsbmi	r8, r3, #1
 800b444:	2300      	movmi	r3, #0
 800b446:	9208      	str	r2, [sp, #32]
 800b448:	bf54      	ite	pl
 800b44a:	f04f 0800 	movpl.w	r8, #0
 800b44e:	9308      	strmi	r3, [sp, #32]
 800b450:	2f00      	cmp	r7, #0
 800b452:	db39      	blt.n	800b4c8 <_dtoa_r+0x218>
 800b454:	9b08      	ldr	r3, [sp, #32]
 800b456:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b458:	443b      	add	r3, r7
 800b45a:	9308      	str	r3, [sp, #32]
 800b45c:	2300      	movs	r3, #0
 800b45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b462:	2b09      	cmp	r3, #9
 800b464:	d864      	bhi.n	800b530 <_dtoa_r+0x280>
 800b466:	2b05      	cmp	r3, #5
 800b468:	bfc4      	itt	gt
 800b46a:	3b04      	subgt	r3, #4
 800b46c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b470:	f1a3 0302 	sub.w	r3, r3, #2
 800b474:	bfcc      	ite	gt
 800b476:	2400      	movgt	r4, #0
 800b478:	2401      	movle	r4, #1
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d863      	bhi.n	800b546 <_dtoa_r+0x296>
 800b47e:	e8df f003 	tbb	[pc, r3]
 800b482:	372a      	.short	0x372a
 800b484:	5535      	.short	0x5535
 800b486:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b48a:	441e      	add	r6, r3
 800b48c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b490:	2b20      	cmp	r3, #32
 800b492:	bfc1      	itttt	gt
 800b494:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b498:	409f      	lslgt	r7, r3
 800b49a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b49e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4a2:	bfd6      	itet	le
 800b4a4:	f1c3 0320 	rsble	r3, r3, #32
 800b4a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4ac:	fa04 f003 	lslle.w	r0, r4, r3
 800b4b0:	f7f5 f848 	bl	8000544 <__aeabi_ui2d>
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4ba:	3e01      	subs	r6, #1
 800b4bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b4be:	e777      	b.n	800b3b0 <_dtoa_r+0x100>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e7b8      	b.n	800b436 <_dtoa_r+0x186>
 800b4c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b4c6:	e7b7      	b.n	800b438 <_dtoa_r+0x188>
 800b4c8:	427b      	negs	r3, r7
 800b4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	eba8 0807 	sub.w	r8, r8, r7
 800b4d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4d4:	e7c4      	b.n	800b460 <_dtoa_r+0x1b0>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc35      	bgt.n	800b54c <_dtoa_r+0x29c>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4ea:	e00b      	b.n	800b504 <_dtoa_r+0x254>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e7f3      	b.n	800b4d8 <_dtoa_r+0x228>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4f6:	18fb      	adds	r3, r7, r3
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	bfb8      	it	lt
 800b502:	2301      	movlt	r3, #1
 800b504:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b508:	2100      	movs	r1, #0
 800b50a:	2204      	movs	r2, #4
 800b50c:	f102 0514 	add.w	r5, r2, #20
 800b510:	429d      	cmp	r5, r3
 800b512:	d91f      	bls.n	800b554 <_dtoa_r+0x2a4>
 800b514:	6041      	str	r1, [r0, #4]
 800b516:	4658      	mov	r0, fp
 800b518:	f000 fd8e 	bl	800c038 <_Balloc>
 800b51c:	4682      	mov	sl, r0
 800b51e:	2800      	cmp	r0, #0
 800b520:	d13c      	bne.n	800b59c <_dtoa_r+0x2ec>
 800b522:	4b1b      	ldr	r3, [pc, #108]	@ (800b590 <_dtoa_r+0x2e0>)
 800b524:	4602      	mov	r2, r0
 800b526:	f240 11af 	movw	r1, #431	@ 0x1af
 800b52a:	e6d8      	b.n	800b2de <_dtoa_r+0x2e>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e7e0      	b.n	800b4f2 <_dtoa_r+0x242>
 800b530:	2401      	movs	r4, #1
 800b532:	2300      	movs	r3, #0
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	9307      	str	r3, [sp, #28]
 800b540:	2200      	movs	r2, #0
 800b542:	2312      	movs	r3, #18
 800b544:	e7d0      	b.n	800b4e8 <_dtoa_r+0x238>
 800b546:	2301      	movs	r3, #1
 800b548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b54a:	e7f5      	b.n	800b538 <_dtoa_r+0x288>
 800b54c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	e7d7      	b.n	800b504 <_dtoa_r+0x254>
 800b554:	3101      	adds	r1, #1
 800b556:	0052      	lsls	r2, r2, #1
 800b558:	e7d8      	b.n	800b50c <_dtoa_r+0x25c>
 800b55a:	bf00      	nop
 800b55c:	f3af 8000 	nop.w
 800b560:	636f4361 	.word	0x636f4361
 800b564:	3fd287a7 	.word	0x3fd287a7
 800b568:	8b60c8b3 	.word	0x8b60c8b3
 800b56c:	3fc68a28 	.word	0x3fc68a28
 800b570:	509f79fb 	.word	0x509f79fb
 800b574:	3fd34413 	.word	0x3fd34413
 800b578:	0800e401 	.word	0x0800e401
 800b57c:	0800e418 	.word	0x0800e418
 800b580:	7ff00000 	.word	0x7ff00000
 800b584:	0800e3d1 	.word	0x0800e3d1
 800b588:	3ff80000 	.word	0x3ff80000
 800b58c:	0800e510 	.word	0x0800e510
 800b590:	0800e470 	.word	0x0800e470
 800b594:	0800e3fd 	.word	0x0800e3fd
 800b598:	0800e3d0 	.word	0x0800e3d0
 800b59c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5a0:	6018      	str	r0, [r3, #0]
 800b5a2:	9b07      	ldr	r3, [sp, #28]
 800b5a4:	2b0e      	cmp	r3, #14
 800b5a6:	f200 80a4 	bhi.w	800b6f2 <_dtoa_r+0x442>
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	f000 80a1 	beq.w	800b6f2 <_dtoa_r+0x442>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	dd33      	ble.n	800b61c <_dtoa_r+0x36c>
 800b5b4:	4bad      	ldr	r3, [pc, #692]	@ (800b86c <_dtoa_r+0x5bc>)
 800b5b6:	f007 020f 	and.w	r2, r7, #15
 800b5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5be:	ed93 7b00 	vldr	d7, [r3]
 800b5c2:	05f8      	lsls	r0, r7, #23
 800b5c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b5c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b5cc:	d516      	bpl.n	800b5fc <_dtoa_r+0x34c>
 800b5ce:	4ba8      	ldr	r3, [pc, #672]	@ (800b870 <_dtoa_r+0x5c0>)
 800b5d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5d8:	f7f5 f958 	bl	800088c <__aeabi_ddiv>
 800b5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5e0:	f004 040f 	and.w	r4, r4, #15
 800b5e4:	2603      	movs	r6, #3
 800b5e6:	4da2      	ldr	r5, [pc, #648]	@ (800b870 <_dtoa_r+0x5c0>)
 800b5e8:	b954      	cbnz	r4, 800b600 <_dtoa_r+0x350>
 800b5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5f2:	f7f5 f94b 	bl	800088c <__aeabi_ddiv>
 800b5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5fa:	e028      	b.n	800b64e <_dtoa_r+0x39e>
 800b5fc:	2602      	movs	r6, #2
 800b5fe:	e7f2      	b.n	800b5e6 <_dtoa_r+0x336>
 800b600:	07e1      	lsls	r1, r4, #31
 800b602:	d508      	bpl.n	800b616 <_dtoa_r+0x366>
 800b604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b60c:	f7f5 f814 	bl	8000638 <__aeabi_dmul>
 800b610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b614:	3601      	adds	r6, #1
 800b616:	1064      	asrs	r4, r4, #1
 800b618:	3508      	adds	r5, #8
 800b61a:	e7e5      	b.n	800b5e8 <_dtoa_r+0x338>
 800b61c:	f000 80d2 	beq.w	800b7c4 <_dtoa_r+0x514>
 800b620:	427c      	negs	r4, r7
 800b622:	4b92      	ldr	r3, [pc, #584]	@ (800b86c <_dtoa_r+0x5bc>)
 800b624:	4d92      	ldr	r5, [pc, #584]	@ (800b870 <_dtoa_r+0x5c0>)
 800b626:	f004 020f 	and.w	r2, r4, #15
 800b62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63e:	1124      	asrs	r4, r4, #4
 800b640:	2300      	movs	r3, #0
 800b642:	2602      	movs	r6, #2
 800b644:	2c00      	cmp	r4, #0
 800b646:	f040 80b2 	bne.w	800b7ae <_dtoa_r+0x4fe>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1d3      	bne.n	800b5f6 <_dtoa_r+0x346>
 800b64e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b650:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 80b7 	beq.w	800b7c8 <_dtoa_r+0x518>
 800b65a:	4b86      	ldr	r3, [pc, #536]	@ (800b874 <_dtoa_r+0x5c4>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f5 fa5b 	bl	8000b1c <__aeabi_dcmplt>
 800b666:	2800      	cmp	r0, #0
 800b668:	f000 80ae 	beq.w	800b7c8 <_dtoa_r+0x518>
 800b66c:	9b07      	ldr	r3, [sp, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 80aa 	beq.w	800b7c8 <_dtoa_r+0x518>
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd37      	ble.n	800b6ea <_dtoa_r+0x43a>
 800b67a:	1e7b      	subs	r3, r7, #1
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	4620      	mov	r0, r4
 800b680:	4b7d      	ldr	r3, [pc, #500]	@ (800b878 <_dtoa_r+0x5c8>)
 800b682:	2200      	movs	r2, #0
 800b684:	4629      	mov	r1, r5
 800b686:	f7f4 ffd7 	bl	8000638 <__aeabi_dmul>
 800b68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b68e:	9c00      	ldr	r4, [sp, #0]
 800b690:	3601      	adds	r6, #1
 800b692:	4630      	mov	r0, r6
 800b694:	f7f4 ff66 	bl	8000564 <__aeabi_i2d>
 800b698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b69c:	f7f4 ffcc 	bl	8000638 <__aeabi_dmul>
 800b6a0:	4b76      	ldr	r3, [pc, #472]	@ (800b87c <_dtoa_r+0x5cc>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f7f4 fe12 	bl	80002cc <__adddf3>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6ae:	2c00      	cmp	r4, #0
 800b6b0:	f040 808d 	bne.w	800b7ce <_dtoa_r+0x51e>
 800b6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b8:	4b71      	ldr	r3, [pc, #452]	@ (800b880 <_dtoa_r+0x5d0>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 fe04 	bl	80002c8 <__aeabi_dsub>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4633      	mov	r3, r6
 800b6cc:	f7f5 fa44 	bl	8000b58 <__aeabi_dcmpgt>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	f040 828b 	bne.w	800bbec <_dtoa_r+0x93c>
 800b6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b6e0:	f7f5 fa1c 	bl	8000b1c <__aeabi_dcmplt>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	f040 8128 	bne.w	800b93a <_dtoa_r+0x68a>
 800b6ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b6ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b6f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f2c0 815a 	blt.w	800b9ae <_dtoa_r+0x6fe>
 800b6fa:	2f0e      	cmp	r7, #14
 800b6fc:	f300 8157 	bgt.w	800b9ae <_dtoa_r+0x6fe>
 800b700:	4b5a      	ldr	r3, [pc, #360]	@ (800b86c <_dtoa_r+0x5bc>)
 800b702:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b706:	ed93 7b00 	vldr	d7, [r3]
 800b70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	ed8d 7b00 	vstr	d7, [sp]
 800b712:	da03      	bge.n	800b71c <_dtoa_r+0x46c>
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f340 8101 	ble.w	800b91e <_dtoa_r+0x66e>
 800b71c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b720:	4656      	mov	r6, sl
 800b722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b726:	4620      	mov	r0, r4
 800b728:	4629      	mov	r1, r5
 800b72a:	f7f5 f8af 	bl	800088c <__aeabi_ddiv>
 800b72e:	f7f5 fa33 	bl	8000b98 <__aeabi_d2iz>
 800b732:	4680      	mov	r8, r0
 800b734:	f7f4 ff16 	bl	8000564 <__aeabi_i2d>
 800b738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b73c:	f7f4 ff7c 	bl	8000638 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b74c:	f7f4 fdbc 	bl	80002c8 <__aeabi_dsub>
 800b750:	f806 4b01 	strb.w	r4, [r6], #1
 800b754:	9d07      	ldr	r5, [sp, #28]
 800b756:	eba6 040a 	sub.w	r4, r6, sl
 800b75a:	42a5      	cmp	r5, r4
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	f040 8117 	bne.w	800b992 <_dtoa_r+0x6e2>
 800b764:	f7f4 fdb2 	bl	80002cc <__adddf3>
 800b768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b76c:	4604      	mov	r4, r0
 800b76e:	460d      	mov	r5, r1
 800b770:	f7f5 f9f2 	bl	8000b58 <__aeabi_dcmpgt>
 800b774:	2800      	cmp	r0, #0
 800b776:	f040 80f9 	bne.w	800b96c <_dtoa_r+0x6bc>
 800b77a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b77e:	4620      	mov	r0, r4
 800b780:	4629      	mov	r1, r5
 800b782:	f7f5 f9c1 	bl	8000b08 <__aeabi_dcmpeq>
 800b786:	b118      	cbz	r0, 800b790 <_dtoa_r+0x4e0>
 800b788:	f018 0f01 	tst.w	r8, #1
 800b78c:	f040 80ee 	bne.w	800b96c <_dtoa_r+0x6bc>
 800b790:	4649      	mov	r1, r9
 800b792:	4658      	mov	r0, fp
 800b794:	f000 fc90 	bl	800c0b8 <_Bfree>
 800b798:	2300      	movs	r3, #0
 800b79a:	7033      	strb	r3, [r6, #0]
 800b79c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b79e:	3701      	adds	r7, #1
 800b7a0:	601f      	str	r7, [r3, #0]
 800b7a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 831d 	beq.w	800bde4 <_dtoa_r+0xb34>
 800b7aa:	601e      	str	r6, [r3, #0]
 800b7ac:	e31a      	b.n	800bde4 <_dtoa_r+0xb34>
 800b7ae:	07e2      	lsls	r2, r4, #31
 800b7b0:	d505      	bpl.n	800b7be <_dtoa_r+0x50e>
 800b7b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7b6:	f7f4 ff3f 	bl	8000638 <__aeabi_dmul>
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	2301      	movs	r3, #1
 800b7be:	1064      	asrs	r4, r4, #1
 800b7c0:	3508      	adds	r5, #8
 800b7c2:	e73f      	b.n	800b644 <_dtoa_r+0x394>
 800b7c4:	2602      	movs	r6, #2
 800b7c6:	e742      	b.n	800b64e <_dtoa_r+0x39e>
 800b7c8:	9c07      	ldr	r4, [sp, #28]
 800b7ca:	9704      	str	r7, [sp, #16]
 800b7cc:	e761      	b.n	800b692 <_dtoa_r+0x3e2>
 800b7ce:	4b27      	ldr	r3, [pc, #156]	@ (800b86c <_dtoa_r+0x5bc>)
 800b7d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7da:	4454      	add	r4, sl
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d053      	beq.n	800b888 <_dtoa_r+0x5d8>
 800b7e0:	4928      	ldr	r1, [pc, #160]	@ (800b884 <_dtoa_r+0x5d4>)
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f7f5 f852 	bl	800088c <__aeabi_ddiv>
 800b7e8:	4633      	mov	r3, r6
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	f7f4 fd6c 	bl	80002c8 <__aeabi_dsub>
 800b7f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7f4:	4656      	mov	r6, sl
 800b7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fa:	f7f5 f9cd 	bl	8000b98 <__aeabi_d2iz>
 800b7fe:	4605      	mov	r5, r0
 800b800:	f7f4 feb0 	bl	8000564 <__aeabi_i2d>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80c:	f7f4 fd5c 	bl	80002c8 <__aeabi_dsub>
 800b810:	3530      	adds	r5, #48	@ 0x30
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b81a:	f806 5b01 	strb.w	r5, [r6], #1
 800b81e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b822:	f7f5 f97b 	bl	8000b1c <__aeabi_dcmplt>
 800b826:	2800      	cmp	r0, #0
 800b828:	d171      	bne.n	800b90e <_dtoa_r+0x65e>
 800b82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b82e:	4911      	ldr	r1, [pc, #68]	@ (800b874 <_dtoa_r+0x5c4>)
 800b830:	2000      	movs	r0, #0
 800b832:	f7f4 fd49 	bl	80002c8 <__aeabi_dsub>
 800b836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b83a:	f7f5 f96f 	bl	8000b1c <__aeabi_dcmplt>
 800b83e:	2800      	cmp	r0, #0
 800b840:	f040 8095 	bne.w	800b96e <_dtoa_r+0x6be>
 800b844:	42a6      	cmp	r6, r4
 800b846:	f43f af50 	beq.w	800b6ea <_dtoa_r+0x43a>
 800b84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b84e:	4b0a      	ldr	r3, [pc, #40]	@ (800b878 <_dtoa_r+0x5c8>)
 800b850:	2200      	movs	r2, #0
 800b852:	f7f4 fef1 	bl	8000638 <__aeabi_dmul>
 800b856:	4b08      	ldr	r3, [pc, #32]	@ (800b878 <_dtoa_r+0x5c8>)
 800b858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b85c:	2200      	movs	r2, #0
 800b85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b862:	f7f4 fee9 	bl	8000638 <__aeabi_dmul>
 800b866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b86a:	e7c4      	b.n	800b7f6 <_dtoa_r+0x546>
 800b86c:	0800e510 	.word	0x0800e510
 800b870:	0800e4e8 	.word	0x0800e4e8
 800b874:	3ff00000 	.word	0x3ff00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	401c0000 	.word	0x401c0000
 800b880:	40140000 	.word	0x40140000
 800b884:	3fe00000 	.word	0x3fe00000
 800b888:	4631      	mov	r1, r6
 800b88a:	4628      	mov	r0, r5
 800b88c:	f7f4 fed4 	bl	8000638 <__aeabi_dmul>
 800b890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b894:	9415      	str	r4, [sp, #84]	@ 0x54
 800b896:	4656      	mov	r6, sl
 800b898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b89c:	f7f5 f97c 	bl	8000b98 <__aeabi_d2iz>
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	f7f4 fe5f 	bl	8000564 <__aeabi_i2d>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ae:	f7f4 fd0b 	bl	80002c8 <__aeabi_dsub>
 800b8b2:	3530      	adds	r5, #48	@ 0x30
 800b8b4:	f806 5b01 	strb.w	r5, [r6], #1
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	42a6      	cmp	r6, r4
 800b8be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8c2:	f04f 0200 	mov.w	r2, #0
 800b8c6:	d124      	bne.n	800b912 <_dtoa_r+0x662>
 800b8c8:	4bac      	ldr	r3, [pc, #688]	@ (800bb7c <_dtoa_r+0x8cc>)
 800b8ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b8ce:	f7f4 fcfd 	bl	80002cc <__adddf3>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8da:	f7f5 f93d 	bl	8000b58 <__aeabi_dcmpgt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d145      	bne.n	800b96e <_dtoa_r+0x6be>
 800b8e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8e6:	49a5      	ldr	r1, [pc, #660]	@ (800bb7c <_dtoa_r+0x8cc>)
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f7f4 fced 	bl	80002c8 <__aeabi_dsub>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f6:	f7f5 f911 	bl	8000b1c <__aeabi_dcmplt>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	f43f aef5 	beq.w	800b6ea <_dtoa_r+0x43a>
 800b900:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b902:	1e73      	subs	r3, r6, #1
 800b904:	9315      	str	r3, [sp, #84]	@ 0x54
 800b906:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b90a:	2b30      	cmp	r3, #48	@ 0x30
 800b90c:	d0f8      	beq.n	800b900 <_dtoa_r+0x650>
 800b90e:	9f04      	ldr	r7, [sp, #16]
 800b910:	e73e      	b.n	800b790 <_dtoa_r+0x4e0>
 800b912:	4b9b      	ldr	r3, [pc, #620]	@ (800bb80 <_dtoa_r+0x8d0>)
 800b914:	f7f4 fe90 	bl	8000638 <__aeabi_dmul>
 800b918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b91c:	e7bc      	b.n	800b898 <_dtoa_r+0x5e8>
 800b91e:	d10c      	bne.n	800b93a <_dtoa_r+0x68a>
 800b920:	4b98      	ldr	r3, [pc, #608]	@ (800bb84 <_dtoa_r+0x8d4>)
 800b922:	2200      	movs	r2, #0
 800b924:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b928:	f7f4 fe86 	bl	8000638 <__aeabi_dmul>
 800b92c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b930:	f7f5 f908 	bl	8000b44 <__aeabi_dcmpge>
 800b934:	2800      	cmp	r0, #0
 800b936:	f000 8157 	beq.w	800bbe8 <_dtoa_r+0x938>
 800b93a:	2400      	movs	r4, #0
 800b93c:	4625      	mov	r5, r4
 800b93e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b940:	43db      	mvns	r3, r3
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	4656      	mov	r6, sl
 800b946:	2700      	movs	r7, #0
 800b948:	4621      	mov	r1, r4
 800b94a:	4658      	mov	r0, fp
 800b94c:	f000 fbb4 	bl	800c0b8 <_Bfree>
 800b950:	2d00      	cmp	r5, #0
 800b952:	d0dc      	beq.n	800b90e <_dtoa_r+0x65e>
 800b954:	b12f      	cbz	r7, 800b962 <_dtoa_r+0x6b2>
 800b956:	42af      	cmp	r7, r5
 800b958:	d003      	beq.n	800b962 <_dtoa_r+0x6b2>
 800b95a:	4639      	mov	r1, r7
 800b95c:	4658      	mov	r0, fp
 800b95e:	f000 fbab 	bl	800c0b8 <_Bfree>
 800b962:	4629      	mov	r1, r5
 800b964:	4658      	mov	r0, fp
 800b966:	f000 fba7 	bl	800c0b8 <_Bfree>
 800b96a:	e7d0      	b.n	800b90e <_dtoa_r+0x65e>
 800b96c:	9704      	str	r7, [sp, #16]
 800b96e:	4633      	mov	r3, r6
 800b970:	461e      	mov	r6, r3
 800b972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b976:	2a39      	cmp	r2, #57	@ 0x39
 800b978:	d107      	bne.n	800b98a <_dtoa_r+0x6da>
 800b97a:	459a      	cmp	sl, r3
 800b97c:	d1f8      	bne.n	800b970 <_dtoa_r+0x6c0>
 800b97e:	9a04      	ldr	r2, [sp, #16]
 800b980:	3201      	adds	r2, #1
 800b982:	9204      	str	r2, [sp, #16]
 800b984:	2230      	movs	r2, #48	@ 0x30
 800b986:	f88a 2000 	strb.w	r2, [sl]
 800b98a:	781a      	ldrb	r2, [r3, #0]
 800b98c:	3201      	adds	r2, #1
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	e7bd      	b.n	800b90e <_dtoa_r+0x65e>
 800b992:	4b7b      	ldr	r3, [pc, #492]	@ (800bb80 <_dtoa_r+0x8d0>)
 800b994:	2200      	movs	r2, #0
 800b996:	f7f4 fe4f 	bl	8000638 <__aeabi_dmul>
 800b99a:	2200      	movs	r2, #0
 800b99c:	2300      	movs	r3, #0
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	f7f5 f8b1 	bl	8000b08 <__aeabi_dcmpeq>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f aebb 	beq.w	800b722 <_dtoa_r+0x472>
 800b9ac:	e6f0      	b.n	800b790 <_dtoa_r+0x4e0>
 800b9ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	f000 80db 	beq.w	800bb6c <_dtoa_r+0x8bc>
 800b9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b8:	2a01      	cmp	r2, #1
 800b9ba:	f300 80bf 	bgt.w	800bb3c <_dtoa_r+0x88c>
 800b9be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	f000 80b7 	beq.w	800bb34 <_dtoa_r+0x884>
 800b9c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b9ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9cc:	4646      	mov	r6, r8
 800b9ce:	9a08      	ldr	r2, [sp, #32]
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	441a      	add	r2, r3
 800b9d4:	4658      	mov	r0, fp
 800b9d6:	4498      	add	r8, r3
 800b9d8:	9208      	str	r2, [sp, #32]
 800b9da:	f000 fc21 	bl	800c220 <__i2b>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b15e      	cbz	r6, 800b9fa <_dtoa_r+0x74a>
 800b9e2:	9b08      	ldr	r3, [sp, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	dd08      	ble.n	800b9fa <_dtoa_r+0x74a>
 800b9e8:	42b3      	cmp	r3, r6
 800b9ea:	9a08      	ldr	r2, [sp, #32]
 800b9ec:	bfa8      	it	ge
 800b9ee:	4633      	movge	r3, r6
 800b9f0:	eba8 0803 	sub.w	r8, r8, r3
 800b9f4:	1af6      	subs	r6, r6, r3
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	9308      	str	r3, [sp, #32]
 800b9fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9fc:	b1f3      	cbz	r3, 800ba3c <_dtoa_r+0x78c>
 800b9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80b7 	beq.w	800bb74 <_dtoa_r+0x8c4>
 800ba06:	b18c      	cbz	r4, 800ba2c <_dtoa_r+0x77c>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	4658      	mov	r0, fp
 800ba0e:	f000 fcc7 	bl	800c3a0 <__pow5mult>
 800ba12:	464a      	mov	r2, r9
 800ba14:	4601      	mov	r1, r0
 800ba16:	4605      	mov	r5, r0
 800ba18:	4658      	mov	r0, fp
 800ba1a:	f000 fc17 	bl	800c24c <__multiply>
 800ba1e:	4649      	mov	r1, r9
 800ba20:	9004      	str	r0, [sp, #16]
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fb48 	bl	800c0b8 <_Bfree>
 800ba28:	9b04      	ldr	r3, [sp, #16]
 800ba2a:	4699      	mov	r9, r3
 800ba2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba2e:	1b1a      	subs	r2, r3, r4
 800ba30:	d004      	beq.n	800ba3c <_dtoa_r+0x78c>
 800ba32:	4649      	mov	r1, r9
 800ba34:	4658      	mov	r0, fp
 800ba36:	f000 fcb3 	bl	800c3a0 <__pow5mult>
 800ba3a:	4681      	mov	r9, r0
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 fbee 	bl	800c220 <__i2b>
 800ba44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba46:	4604      	mov	r4, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 81cf 	beq.w	800bdec <_dtoa_r+0xb3c>
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4601      	mov	r1, r0
 800ba52:	4658      	mov	r0, fp
 800ba54:	f000 fca4 	bl	800c3a0 <__pow5mult>
 800ba58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	f300 8095 	bgt.w	800bb8c <_dtoa_r+0x8dc>
 800ba62:	9b02      	ldr	r3, [sp, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f040 8087 	bne.w	800bb78 <_dtoa_r+0x8c8>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f040 8089 	bne.w	800bb88 <_dtoa_r+0x8d8>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba7c:	0d1b      	lsrs	r3, r3, #20
 800ba7e:	051b      	lsls	r3, r3, #20
 800ba80:	b12b      	cbz	r3, 800ba8e <_dtoa_r+0x7de>
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	3301      	adds	r3, #1
 800ba86:	9308      	str	r3, [sp, #32]
 800ba88:	f108 0801 	add.w	r8, r8, #1
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 81b0 	beq.w	800bdf8 <_dtoa_r+0xb48>
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba9e:	6918      	ldr	r0, [r3, #16]
 800baa0:	f000 fb72 	bl	800c188 <__hi0bits>
 800baa4:	f1c0 0020 	rsb	r0, r0, #32
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	4418      	add	r0, r3
 800baac:	f010 001f 	ands.w	r0, r0, #31
 800bab0:	d077      	beq.n	800bba2 <_dtoa_r+0x8f2>
 800bab2:	f1c0 0320 	rsb	r3, r0, #32
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	dd6b      	ble.n	800bb92 <_dtoa_r+0x8e2>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	f1c0 001c 	rsb	r0, r0, #28
 800bac0:	4403      	add	r3, r0
 800bac2:	4480      	add	r8, r0
 800bac4:	4406      	add	r6, r0
 800bac6:	9308      	str	r3, [sp, #32]
 800bac8:	f1b8 0f00 	cmp.w	r8, #0
 800bacc:	dd05      	ble.n	800bada <_dtoa_r+0x82a>
 800bace:	4649      	mov	r1, r9
 800bad0:	4642      	mov	r2, r8
 800bad2:	4658      	mov	r0, fp
 800bad4:	f000 fcbe 	bl	800c454 <__lshift>
 800bad8:	4681      	mov	r9, r0
 800bada:	9b08      	ldr	r3, [sp, #32]
 800badc:	2b00      	cmp	r3, #0
 800bade:	dd05      	ble.n	800baec <_dtoa_r+0x83c>
 800bae0:	4621      	mov	r1, r4
 800bae2:	461a      	mov	r2, r3
 800bae4:	4658      	mov	r0, fp
 800bae6:	f000 fcb5 	bl	800c454 <__lshift>
 800baea:	4604      	mov	r4, r0
 800baec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d059      	beq.n	800bba6 <_dtoa_r+0x8f6>
 800baf2:	4621      	mov	r1, r4
 800baf4:	4648      	mov	r0, r9
 800baf6:	f000 fd19 	bl	800c52c <__mcmp>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	da53      	bge.n	800bba6 <_dtoa_r+0x8f6>
 800bafe:	1e7b      	subs	r3, r7, #1
 800bb00:	9304      	str	r3, [sp, #16]
 800bb02:	4649      	mov	r1, r9
 800bb04:	2300      	movs	r3, #0
 800bb06:	220a      	movs	r2, #10
 800bb08:	4658      	mov	r0, fp
 800bb0a:	f000 faf7 	bl	800c0fc <__multadd>
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb10:	4681      	mov	r9, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 8172 	beq.w	800bdfc <_dtoa_r+0xb4c>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	220a      	movs	r2, #10
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 faec 	bl	800c0fc <__multadd>
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	4605      	mov	r5, r0
 800bb2a:	dc67      	bgt.n	800bbfc <_dtoa_r+0x94c>
 800bb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dc41      	bgt.n	800bbb6 <_dtoa_r+0x906>
 800bb32:	e063      	b.n	800bbfc <_dtoa_r+0x94c>
 800bb34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb3a:	e746      	b.n	800b9ca <_dtoa_r+0x71a>
 800bb3c:	9b07      	ldr	r3, [sp, #28]
 800bb3e:	1e5c      	subs	r4, r3, #1
 800bb40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb42:	42a3      	cmp	r3, r4
 800bb44:	bfbf      	itttt	lt
 800bb46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bb48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bb4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bb4c:	1ae3      	sublt	r3, r4, r3
 800bb4e:	bfb4      	ite	lt
 800bb50:	18d2      	addlt	r2, r2, r3
 800bb52:	1b1c      	subge	r4, r3, r4
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	bfbc      	itt	lt
 800bb58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bb5a:	2400      	movlt	r4, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bfb5      	itete	lt
 800bb60:	eba8 0603 	sublt.w	r6, r8, r3
 800bb64:	9b07      	ldrge	r3, [sp, #28]
 800bb66:	2300      	movlt	r3, #0
 800bb68:	4646      	movge	r6, r8
 800bb6a:	e730      	b.n	800b9ce <_dtoa_r+0x71e>
 800bb6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb70:	4646      	mov	r6, r8
 800bb72:	e735      	b.n	800b9e0 <_dtoa_r+0x730>
 800bb74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb76:	e75c      	b.n	800ba32 <_dtoa_r+0x782>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e788      	b.n	800ba8e <_dtoa_r+0x7de>
 800bb7c:	3fe00000 	.word	0x3fe00000
 800bb80:	40240000 	.word	0x40240000
 800bb84:	40140000 	.word	0x40140000
 800bb88:	9b02      	ldr	r3, [sp, #8]
 800bb8a:	e780      	b.n	800ba8e <_dtoa_r+0x7de>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb90:	e782      	b.n	800ba98 <_dtoa_r+0x7e8>
 800bb92:	d099      	beq.n	800bac8 <_dtoa_r+0x818>
 800bb94:	9a08      	ldr	r2, [sp, #32]
 800bb96:	331c      	adds	r3, #28
 800bb98:	441a      	add	r2, r3
 800bb9a:	4498      	add	r8, r3
 800bb9c:	441e      	add	r6, r3
 800bb9e:	9208      	str	r2, [sp, #32]
 800bba0:	e792      	b.n	800bac8 <_dtoa_r+0x818>
 800bba2:	4603      	mov	r3, r0
 800bba4:	e7f6      	b.n	800bb94 <_dtoa_r+0x8e4>
 800bba6:	9b07      	ldr	r3, [sp, #28]
 800bba8:	9704      	str	r7, [sp, #16]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dc20      	bgt.n	800bbf0 <_dtoa_r+0x940>
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	dd1e      	ble.n	800bbf4 <_dtoa_r+0x944>
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f47f aec0 	bne.w	800b93e <_dtoa_r+0x68e>
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	2205      	movs	r2, #5
 800bbc2:	4658      	mov	r0, fp
 800bbc4:	f000 fa9a 	bl	800c0fc <__multadd>
 800bbc8:	4601      	mov	r1, r0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4648      	mov	r0, r9
 800bbce:	f000 fcad 	bl	800c52c <__mcmp>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	f77f aeb3 	ble.w	800b93e <_dtoa_r+0x68e>
 800bbd8:	4656      	mov	r6, sl
 800bbda:	2331      	movs	r3, #49	@ 0x31
 800bbdc:	f806 3b01 	strb.w	r3, [r6], #1
 800bbe0:	9b04      	ldr	r3, [sp, #16]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	e6ae      	b.n	800b946 <_dtoa_r+0x696>
 800bbe8:	9c07      	ldr	r4, [sp, #28]
 800bbea:	9704      	str	r7, [sp, #16]
 800bbec:	4625      	mov	r5, r4
 800bbee:	e7f3      	b.n	800bbd8 <_dtoa_r+0x928>
 800bbf0:	9b07      	ldr	r3, [sp, #28]
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f000 8104 	beq.w	800be04 <_dtoa_r+0xb54>
 800bbfc:	2e00      	cmp	r6, #0
 800bbfe:	dd05      	ble.n	800bc0c <_dtoa_r+0x95c>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4632      	mov	r2, r6
 800bc04:	4658      	mov	r0, fp
 800bc06:	f000 fc25 	bl	800c454 <__lshift>
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d05a      	beq.n	800bcc8 <_dtoa_r+0xa18>
 800bc12:	6869      	ldr	r1, [r5, #4]
 800bc14:	4658      	mov	r0, fp
 800bc16:	f000 fa0f 	bl	800c038 <_Balloc>
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	b928      	cbnz	r0, 800bc2a <_dtoa_r+0x97a>
 800bc1e:	4b84      	ldr	r3, [pc, #528]	@ (800be30 <_dtoa_r+0xb80>)
 800bc20:	4602      	mov	r2, r0
 800bc22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc26:	f7ff bb5a 	b.w	800b2de <_dtoa_r+0x2e>
 800bc2a:	692a      	ldr	r2, [r5, #16]
 800bc2c:	3202      	adds	r2, #2
 800bc2e:	0092      	lsls	r2, r2, #2
 800bc30:	f105 010c 	add.w	r1, r5, #12
 800bc34:	300c      	adds	r0, #12
 800bc36:	f7ff faa2 	bl	800b17e <memcpy>
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4658      	mov	r0, fp
 800bc40:	f000 fc08 	bl	800c454 <__lshift>
 800bc44:	f10a 0301 	add.w	r3, sl, #1
 800bc48:	9307      	str	r3, [sp, #28]
 800bc4a:	9b00      	ldr	r3, [sp, #0]
 800bc4c:	4453      	add	r3, sl
 800bc4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc50:	9b02      	ldr	r3, [sp, #8]
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	462f      	mov	r7, r5
 800bc58:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	9b07      	ldr	r3, [sp, #28]
 800bc5e:	4621      	mov	r1, r4
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4648      	mov	r0, r9
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	f7ff fa98 	bl	800b19a <quorem>
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	9002      	str	r0, [sp, #8]
 800bc6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc72:	4648      	mov	r0, r9
 800bc74:	f000 fc5a 	bl	800c52c <__mcmp>
 800bc78:	462a      	mov	r2, r5
 800bc7a:	9008      	str	r0, [sp, #32]
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4658      	mov	r0, fp
 800bc80:	f000 fc70 	bl	800c564 <__mdiff>
 800bc84:	68c2      	ldr	r2, [r0, #12]
 800bc86:	4606      	mov	r6, r0
 800bc88:	bb02      	cbnz	r2, 800bccc <_dtoa_r+0xa1c>
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	4648      	mov	r0, r9
 800bc8e:	f000 fc4d 	bl	800c52c <__mcmp>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4631      	mov	r1, r6
 800bc96:	4658      	mov	r0, fp
 800bc98:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc9a:	f000 fa0d 	bl	800c0b8 <_Bfree>
 800bc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bca2:	9e07      	ldr	r6, [sp, #28]
 800bca4:	ea43 0102 	orr.w	r1, r3, r2
 800bca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcaa:	4319      	orrs	r1, r3
 800bcac:	d110      	bne.n	800bcd0 <_dtoa_r+0xa20>
 800bcae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcb2:	d029      	beq.n	800bd08 <_dtoa_r+0xa58>
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dd02      	ble.n	800bcc0 <_dtoa_r+0xa10>
 800bcba:	9b02      	ldr	r3, [sp, #8]
 800bcbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bcc0:	9b00      	ldr	r3, [sp, #0]
 800bcc2:	f883 8000 	strb.w	r8, [r3]
 800bcc6:	e63f      	b.n	800b948 <_dtoa_r+0x698>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	e7bb      	b.n	800bc44 <_dtoa_r+0x994>
 800bccc:	2201      	movs	r2, #1
 800bcce:	e7e1      	b.n	800bc94 <_dtoa_r+0x9e4>
 800bcd0:	9b08      	ldr	r3, [sp, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	db04      	blt.n	800bce0 <_dtoa_r+0xa30>
 800bcd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	d120      	bne.n	800bd22 <_dtoa_r+0xa72>
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	dded      	ble.n	800bcc0 <_dtoa_r+0xa10>
 800bce4:	4649      	mov	r1, r9
 800bce6:	2201      	movs	r2, #1
 800bce8:	4658      	mov	r0, fp
 800bcea:	f000 fbb3 	bl	800c454 <__lshift>
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4681      	mov	r9, r0
 800bcf2:	f000 fc1b 	bl	800c52c <__mcmp>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	dc03      	bgt.n	800bd02 <_dtoa_r+0xa52>
 800bcfa:	d1e1      	bne.n	800bcc0 <_dtoa_r+0xa10>
 800bcfc:	f018 0f01 	tst.w	r8, #1
 800bd00:	d0de      	beq.n	800bcc0 <_dtoa_r+0xa10>
 800bd02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd06:	d1d8      	bne.n	800bcba <_dtoa_r+0xa0a>
 800bd08:	9a00      	ldr	r2, [sp, #0]
 800bd0a:	2339      	movs	r3, #57	@ 0x39
 800bd0c:	7013      	strb	r3, [r2, #0]
 800bd0e:	4633      	mov	r3, r6
 800bd10:	461e      	mov	r6, r3
 800bd12:	3b01      	subs	r3, #1
 800bd14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd18:	2a39      	cmp	r2, #57	@ 0x39
 800bd1a:	d052      	beq.n	800bdc2 <_dtoa_r+0xb12>
 800bd1c:	3201      	adds	r2, #1
 800bd1e:	701a      	strb	r2, [r3, #0]
 800bd20:	e612      	b.n	800b948 <_dtoa_r+0x698>
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	dd07      	ble.n	800bd36 <_dtoa_r+0xa86>
 800bd26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd2a:	d0ed      	beq.n	800bd08 <_dtoa_r+0xa58>
 800bd2c:	9a00      	ldr	r2, [sp, #0]
 800bd2e:	f108 0301 	add.w	r3, r8, #1
 800bd32:	7013      	strb	r3, [r2, #0]
 800bd34:	e608      	b.n	800b948 <_dtoa_r+0x698>
 800bd36:	9b07      	ldr	r3, [sp, #28]
 800bd38:	9a07      	ldr	r2, [sp, #28]
 800bd3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bd3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d028      	beq.n	800bd96 <_dtoa_r+0xae6>
 800bd44:	4649      	mov	r1, r9
 800bd46:	2300      	movs	r3, #0
 800bd48:	220a      	movs	r2, #10
 800bd4a:	4658      	mov	r0, fp
 800bd4c:	f000 f9d6 	bl	800c0fc <__multadd>
 800bd50:	42af      	cmp	r7, r5
 800bd52:	4681      	mov	r9, r0
 800bd54:	f04f 0300 	mov.w	r3, #0
 800bd58:	f04f 020a 	mov.w	r2, #10
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	4658      	mov	r0, fp
 800bd60:	d107      	bne.n	800bd72 <_dtoa_r+0xac2>
 800bd62:	f000 f9cb 	bl	800c0fc <__multadd>
 800bd66:	4607      	mov	r7, r0
 800bd68:	4605      	mov	r5, r0
 800bd6a:	9b07      	ldr	r3, [sp, #28]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	9307      	str	r3, [sp, #28]
 800bd70:	e774      	b.n	800bc5c <_dtoa_r+0x9ac>
 800bd72:	f000 f9c3 	bl	800c0fc <__multadd>
 800bd76:	4629      	mov	r1, r5
 800bd78:	4607      	mov	r7, r0
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	220a      	movs	r2, #10
 800bd7e:	4658      	mov	r0, fp
 800bd80:	f000 f9bc 	bl	800c0fc <__multadd>
 800bd84:	4605      	mov	r5, r0
 800bd86:	e7f0      	b.n	800bd6a <_dtoa_r+0xaba>
 800bd88:	9b00      	ldr	r3, [sp, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bfcc      	ite	gt
 800bd8e:	461e      	movgt	r6, r3
 800bd90:	2601      	movle	r6, #1
 800bd92:	4456      	add	r6, sl
 800bd94:	2700      	movs	r7, #0
 800bd96:	4649      	mov	r1, r9
 800bd98:	2201      	movs	r2, #1
 800bd9a:	4658      	mov	r0, fp
 800bd9c:	f000 fb5a 	bl	800c454 <__lshift>
 800bda0:	4621      	mov	r1, r4
 800bda2:	4681      	mov	r9, r0
 800bda4:	f000 fbc2 	bl	800c52c <__mcmp>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	dcb0      	bgt.n	800bd0e <_dtoa_r+0xa5e>
 800bdac:	d102      	bne.n	800bdb4 <_dtoa_r+0xb04>
 800bdae:	f018 0f01 	tst.w	r8, #1
 800bdb2:	d1ac      	bne.n	800bd0e <_dtoa_r+0xa5e>
 800bdb4:	4633      	mov	r3, r6
 800bdb6:	461e      	mov	r6, r3
 800bdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdbc:	2a30      	cmp	r2, #48	@ 0x30
 800bdbe:	d0fa      	beq.n	800bdb6 <_dtoa_r+0xb06>
 800bdc0:	e5c2      	b.n	800b948 <_dtoa_r+0x698>
 800bdc2:	459a      	cmp	sl, r3
 800bdc4:	d1a4      	bne.n	800bd10 <_dtoa_r+0xa60>
 800bdc6:	9b04      	ldr	r3, [sp, #16]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	2331      	movs	r3, #49	@ 0x31
 800bdce:	f88a 3000 	strb.w	r3, [sl]
 800bdd2:	e5b9      	b.n	800b948 <_dtoa_r+0x698>
 800bdd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800be34 <_dtoa_r+0xb84>
 800bdda:	b11b      	cbz	r3, 800bde4 <_dtoa_r+0xb34>
 800bddc:	f10a 0308 	add.w	r3, sl, #8
 800bde0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	4650      	mov	r0, sl
 800bde6:	b019      	add	sp, #100	@ 0x64
 800bde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	f77f ae37 	ble.w	800ba62 <_dtoa_r+0x7b2>
 800bdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	e655      	b.n	800baa8 <_dtoa_r+0x7f8>
 800bdfc:	9b00      	ldr	r3, [sp, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f77f aed6 	ble.w	800bbb0 <_dtoa_r+0x900>
 800be04:	4656      	mov	r6, sl
 800be06:	4621      	mov	r1, r4
 800be08:	4648      	mov	r0, r9
 800be0a:	f7ff f9c6 	bl	800b19a <quorem>
 800be0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be12:	f806 8b01 	strb.w	r8, [r6], #1
 800be16:	9b00      	ldr	r3, [sp, #0]
 800be18:	eba6 020a 	sub.w	r2, r6, sl
 800be1c:	4293      	cmp	r3, r2
 800be1e:	ddb3      	ble.n	800bd88 <_dtoa_r+0xad8>
 800be20:	4649      	mov	r1, r9
 800be22:	2300      	movs	r3, #0
 800be24:	220a      	movs	r2, #10
 800be26:	4658      	mov	r0, fp
 800be28:	f000 f968 	bl	800c0fc <__multadd>
 800be2c:	4681      	mov	r9, r0
 800be2e:	e7ea      	b.n	800be06 <_dtoa_r+0xb56>
 800be30:	0800e470 	.word	0x0800e470
 800be34:	0800e3f4 	.word	0x0800e3f4

0800be38 <_free_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4605      	mov	r5, r0
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d041      	beq.n	800bec4 <_free_r+0x8c>
 800be40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be44:	1f0c      	subs	r4, r1, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	bfb8      	it	lt
 800be4a:	18e4      	addlt	r4, r4, r3
 800be4c:	f000 f8e8 	bl	800c020 <__malloc_lock>
 800be50:	4a1d      	ldr	r2, [pc, #116]	@ (800bec8 <_free_r+0x90>)
 800be52:	6813      	ldr	r3, [r2, #0]
 800be54:	b933      	cbnz	r3, 800be64 <_free_r+0x2c>
 800be56:	6063      	str	r3, [r4, #4]
 800be58:	6014      	str	r4, [r2, #0]
 800be5a:	4628      	mov	r0, r5
 800be5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be60:	f000 b8e4 	b.w	800c02c <__malloc_unlock>
 800be64:	42a3      	cmp	r3, r4
 800be66:	d908      	bls.n	800be7a <_free_r+0x42>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	1821      	adds	r1, r4, r0
 800be6c:	428b      	cmp	r3, r1
 800be6e:	bf01      	itttt	eq
 800be70:	6819      	ldreq	r1, [r3, #0]
 800be72:	685b      	ldreq	r3, [r3, #4]
 800be74:	1809      	addeq	r1, r1, r0
 800be76:	6021      	streq	r1, [r4, #0]
 800be78:	e7ed      	b.n	800be56 <_free_r+0x1e>
 800be7a:	461a      	mov	r2, r3
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	b10b      	cbz	r3, 800be84 <_free_r+0x4c>
 800be80:	42a3      	cmp	r3, r4
 800be82:	d9fa      	bls.n	800be7a <_free_r+0x42>
 800be84:	6811      	ldr	r1, [r2, #0]
 800be86:	1850      	adds	r0, r2, r1
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d10b      	bne.n	800bea4 <_free_r+0x6c>
 800be8c:	6820      	ldr	r0, [r4, #0]
 800be8e:	4401      	add	r1, r0
 800be90:	1850      	adds	r0, r2, r1
 800be92:	4283      	cmp	r3, r0
 800be94:	6011      	str	r1, [r2, #0]
 800be96:	d1e0      	bne.n	800be5a <_free_r+0x22>
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	6053      	str	r3, [r2, #4]
 800be9e:	4408      	add	r0, r1
 800bea0:	6010      	str	r0, [r2, #0]
 800bea2:	e7da      	b.n	800be5a <_free_r+0x22>
 800bea4:	d902      	bls.n	800beac <_free_r+0x74>
 800bea6:	230c      	movs	r3, #12
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	e7d6      	b.n	800be5a <_free_r+0x22>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	1821      	adds	r1, r4, r0
 800beb0:	428b      	cmp	r3, r1
 800beb2:	bf04      	itt	eq
 800beb4:	6819      	ldreq	r1, [r3, #0]
 800beb6:	685b      	ldreq	r3, [r3, #4]
 800beb8:	6063      	str	r3, [r4, #4]
 800beba:	bf04      	itt	eq
 800bebc:	1809      	addeq	r1, r1, r0
 800bebe:	6021      	streq	r1, [r4, #0]
 800bec0:	6054      	str	r4, [r2, #4]
 800bec2:	e7ca      	b.n	800be5a <_free_r+0x22>
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	20019f80 	.word	0x20019f80

0800becc <malloc>:
 800becc:	4b02      	ldr	r3, [pc, #8]	@ (800bed8 <malloc+0xc>)
 800bece:	4601      	mov	r1, r0
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	f000 b825 	b.w	800bf20 <_malloc_r>
 800bed6:	bf00      	nop
 800bed8:	20000020 	.word	0x20000020

0800bedc <sbrk_aligned>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4e0f      	ldr	r6, [pc, #60]	@ (800bf1c <sbrk_aligned+0x40>)
 800bee0:	460c      	mov	r4, r1
 800bee2:	6831      	ldr	r1, [r6, #0]
 800bee4:	4605      	mov	r5, r0
 800bee6:	b911      	cbnz	r1, 800beee <sbrk_aligned+0x12>
 800bee8:	f000 ff60 	bl	800cdac <_sbrk_r>
 800beec:	6030      	str	r0, [r6, #0]
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	f000 ff5b 	bl	800cdac <_sbrk_r>
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	d103      	bne.n	800bf02 <sbrk_aligned+0x26>
 800befa:	f04f 34ff 	mov.w	r4, #4294967295
 800befe:	4620      	mov	r0, r4
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	1cc4      	adds	r4, r0, #3
 800bf04:	f024 0403 	bic.w	r4, r4, #3
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d0f8      	beq.n	800befe <sbrk_aligned+0x22>
 800bf0c:	1a21      	subs	r1, r4, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 ff4c 	bl	800cdac <_sbrk_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d1f2      	bne.n	800befe <sbrk_aligned+0x22>
 800bf18:	e7ef      	b.n	800befa <sbrk_aligned+0x1e>
 800bf1a:	bf00      	nop
 800bf1c:	20019f7c 	.word	0x20019f7c

0800bf20 <_malloc_r>:
 800bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf24:	1ccd      	adds	r5, r1, #3
 800bf26:	f025 0503 	bic.w	r5, r5, #3
 800bf2a:	3508      	adds	r5, #8
 800bf2c:	2d0c      	cmp	r5, #12
 800bf2e:	bf38      	it	cc
 800bf30:	250c      	movcc	r5, #12
 800bf32:	2d00      	cmp	r5, #0
 800bf34:	4606      	mov	r6, r0
 800bf36:	db01      	blt.n	800bf3c <_malloc_r+0x1c>
 800bf38:	42a9      	cmp	r1, r5
 800bf3a:	d904      	bls.n	800bf46 <_malloc_r+0x26>
 800bf3c:	230c      	movs	r3, #12
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	2000      	movs	r0, #0
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c01c <_malloc_r+0xfc>
 800bf4a:	f000 f869 	bl	800c020 <__malloc_lock>
 800bf4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf52:	461c      	mov	r4, r3
 800bf54:	bb44      	cbnz	r4, 800bfa8 <_malloc_r+0x88>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff ffbf 	bl	800bedc <sbrk_aligned>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	4604      	mov	r4, r0
 800bf62:	d158      	bne.n	800c016 <_malloc_r+0xf6>
 800bf64:	f8d8 4000 	ldr.w	r4, [r8]
 800bf68:	4627      	mov	r7, r4
 800bf6a:	2f00      	cmp	r7, #0
 800bf6c:	d143      	bne.n	800bff6 <_malloc_r+0xd6>
 800bf6e:	2c00      	cmp	r4, #0
 800bf70:	d04b      	beq.n	800c00a <_malloc_r+0xea>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	4639      	mov	r1, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	eb04 0903 	add.w	r9, r4, r3
 800bf7c:	f000 ff16 	bl	800cdac <_sbrk_r>
 800bf80:	4581      	cmp	r9, r0
 800bf82:	d142      	bne.n	800c00a <_malloc_r+0xea>
 800bf84:	6821      	ldr	r1, [r4, #0]
 800bf86:	1a6d      	subs	r5, r5, r1
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ffa6 	bl	800bedc <sbrk_aligned>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d03a      	beq.n	800c00a <_malloc_r+0xea>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	442b      	add	r3, r5
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	bb62      	cbnz	r2, 800bffc <_malloc_r+0xdc>
 800bfa2:	f8c8 7000 	str.w	r7, [r8]
 800bfa6:	e00f      	b.n	800bfc8 <_malloc_r+0xa8>
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	1b52      	subs	r2, r2, r5
 800bfac:	d420      	bmi.n	800bff0 <_malloc_r+0xd0>
 800bfae:	2a0b      	cmp	r2, #11
 800bfb0:	d917      	bls.n	800bfe2 <_malloc_r+0xc2>
 800bfb2:	1961      	adds	r1, r4, r5
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	6025      	str	r5, [r4, #0]
 800bfb8:	bf18      	it	ne
 800bfba:	6059      	strne	r1, [r3, #4]
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	bf08      	it	eq
 800bfc0:	f8c8 1000 	streq.w	r1, [r8]
 800bfc4:	5162      	str	r2, [r4, r5]
 800bfc6:	604b      	str	r3, [r1, #4]
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 f82f 	bl	800c02c <__malloc_unlock>
 800bfce:	f104 000b 	add.w	r0, r4, #11
 800bfd2:	1d23      	adds	r3, r4, #4
 800bfd4:	f020 0007 	bic.w	r0, r0, #7
 800bfd8:	1ac2      	subs	r2, r0, r3
 800bfda:	bf1c      	itt	ne
 800bfdc:	1a1b      	subne	r3, r3, r0
 800bfde:	50a3      	strne	r3, [r4, r2]
 800bfe0:	e7af      	b.n	800bf42 <_malloc_r+0x22>
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	42a3      	cmp	r3, r4
 800bfe6:	bf0c      	ite	eq
 800bfe8:	f8c8 2000 	streq.w	r2, [r8]
 800bfec:	605a      	strne	r2, [r3, #4]
 800bfee:	e7eb      	b.n	800bfc8 <_malloc_r+0xa8>
 800bff0:	4623      	mov	r3, r4
 800bff2:	6864      	ldr	r4, [r4, #4]
 800bff4:	e7ae      	b.n	800bf54 <_malloc_r+0x34>
 800bff6:	463c      	mov	r4, r7
 800bff8:	687f      	ldr	r7, [r7, #4]
 800bffa:	e7b6      	b.n	800bf6a <_malloc_r+0x4a>
 800bffc:	461a      	mov	r2, r3
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	42a3      	cmp	r3, r4
 800c002:	d1fb      	bne.n	800bffc <_malloc_r+0xdc>
 800c004:	2300      	movs	r3, #0
 800c006:	6053      	str	r3, [r2, #4]
 800c008:	e7de      	b.n	800bfc8 <_malloc_r+0xa8>
 800c00a:	230c      	movs	r3, #12
 800c00c:	6033      	str	r3, [r6, #0]
 800c00e:	4630      	mov	r0, r6
 800c010:	f000 f80c 	bl	800c02c <__malloc_unlock>
 800c014:	e794      	b.n	800bf40 <_malloc_r+0x20>
 800c016:	6005      	str	r5, [r0, #0]
 800c018:	e7d6      	b.n	800bfc8 <_malloc_r+0xa8>
 800c01a:	bf00      	nop
 800c01c:	20019f80 	.word	0x20019f80

0800c020 <__malloc_lock>:
 800c020:	4801      	ldr	r0, [pc, #4]	@ (800c028 <__malloc_lock+0x8>)
 800c022:	f7ff b8aa 	b.w	800b17a <__retarget_lock_acquire_recursive>
 800c026:	bf00      	nop
 800c028:	20019f78 	.word	0x20019f78

0800c02c <__malloc_unlock>:
 800c02c:	4801      	ldr	r0, [pc, #4]	@ (800c034 <__malloc_unlock+0x8>)
 800c02e:	f7ff b8a5 	b.w	800b17c <__retarget_lock_release_recursive>
 800c032:	bf00      	nop
 800c034:	20019f78 	.word	0x20019f78

0800c038 <_Balloc>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	69c6      	ldr	r6, [r0, #28]
 800c03c:	4604      	mov	r4, r0
 800c03e:	460d      	mov	r5, r1
 800c040:	b976      	cbnz	r6, 800c060 <_Balloc+0x28>
 800c042:	2010      	movs	r0, #16
 800c044:	f7ff ff42 	bl	800becc <malloc>
 800c048:	4602      	mov	r2, r0
 800c04a:	61e0      	str	r0, [r4, #28]
 800c04c:	b920      	cbnz	r0, 800c058 <_Balloc+0x20>
 800c04e:	4b18      	ldr	r3, [pc, #96]	@ (800c0b0 <_Balloc+0x78>)
 800c050:	4818      	ldr	r0, [pc, #96]	@ (800c0b4 <_Balloc+0x7c>)
 800c052:	216b      	movs	r1, #107	@ 0x6b
 800c054:	f000 feba 	bl	800cdcc <__assert_func>
 800c058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c05c:	6006      	str	r6, [r0, #0]
 800c05e:	60c6      	str	r6, [r0, #12]
 800c060:	69e6      	ldr	r6, [r4, #28]
 800c062:	68f3      	ldr	r3, [r6, #12]
 800c064:	b183      	cbz	r3, 800c088 <_Balloc+0x50>
 800c066:	69e3      	ldr	r3, [r4, #28]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c06e:	b9b8      	cbnz	r0, 800c0a0 <_Balloc+0x68>
 800c070:	2101      	movs	r1, #1
 800c072:	fa01 f605 	lsl.w	r6, r1, r5
 800c076:	1d72      	adds	r2, r6, #5
 800c078:	0092      	lsls	r2, r2, #2
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fec4 	bl	800ce08 <_calloc_r>
 800c080:	b160      	cbz	r0, 800c09c <_Balloc+0x64>
 800c082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c086:	e00e      	b.n	800c0a6 <_Balloc+0x6e>
 800c088:	2221      	movs	r2, #33	@ 0x21
 800c08a:	2104      	movs	r1, #4
 800c08c:	4620      	mov	r0, r4
 800c08e:	f000 febb 	bl	800ce08 <_calloc_r>
 800c092:	69e3      	ldr	r3, [r4, #28]
 800c094:	60f0      	str	r0, [r6, #12]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e4      	bne.n	800c066 <_Balloc+0x2e>
 800c09c:	2000      	movs	r0, #0
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	6802      	ldr	r2, [r0, #0]
 800c0a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0ac:	e7f7      	b.n	800c09e <_Balloc+0x66>
 800c0ae:	bf00      	nop
 800c0b0:	0800e401 	.word	0x0800e401
 800c0b4:	0800e481 	.word	0x0800e481

0800c0b8 <_Bfree>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	69c6      	ldr	r6, [r0, #28]
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b976      	cbnz	r6, 800c0e0 <_Bfree+0x28>
 800c0c2:	2010      	movs	r0, #16
 800c0c4:	f7ff ff02 	bl	800becc <malloc>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	61e8      	str	r0, [r5, #28]
 800c0cc:	b920      	cbnz	r0, 800c0d8 <_Bfree+0x20>
 800c0ce:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <_Bfree+0x3c>)
 800c0d0:	4809      	ldr	r0, [pc, #36]	@ (800c0f8 <_Bfree+0x40>)
 800c0d2:	218f      	movs	r1, #143	@ 0x8f
 800c0d4:	f000 fe7a 	bl	800cdcc <__assert_func>
 800c0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0dc:	6006      	str	r6, [r0, #0]
 800c0de:	60c6      	str	r6, [r0, #12]
 800c0e0:	b13c      	cbz	r4, 800c0f2 <_Bfree+0x3a>
 800c0e2:	69eb      	ldr	r3, [r5, #28]
 800c0e4:	6862      	ldr	r2, [r4, #4]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0ec:	6021      	str	r1, [r4, #0]
 800c0ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	0800e401 	.word	0x0800e401
 800c0f8:	0800e481 	.word	0x0800e481

0800c0fc <__multadd>:
 800c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c100:	690d      	ldr	r5, [r1, #16]
 800c102:	4607      	mov	r7, r0
 800c104:	460c      	mov	r4, r1
 800c106:	461e      	mov	r6, r3
 800c108:	f101 0c14 	add.w	ip, r1, #20
 800c10c:	2000      	movs	r0, #0
 800c10e:	f8dc 3000 	ldr.w	r3, [ip]
 800c112:	b299      	uxth	r1, r3
 800c114:	fb02 6101 	mla	r1, r2, r1, r6
 800c118:	0c1e      	lsrs	r6, r3, #16
 800c11a:	0c0b      	lsrs	r3, r1, #16
 800c11c:	fb02 3306 	mla	r3, r2, r6, r3
 800c120:	b289      	uxth	r1, r1
 800c122:	3001      	adds	r0, #1
 800c124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c128:	4285      	cmp	r5, r0
 800c12a:	f84c 1b04 	str.w	r1, [ip], #4
 800c12e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c132:	dcec      	bgt.n	800c10e <__multadd+0x12>
 800c134:	b30e      	cbz	r6, 800c17a <__multadd+0x7e>
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	42ab      	cmp	r3, r5
 800c13a:	dc19      	bgt.n	800c170 <__multadd+0x74>
 800c13c:	6861      	ldr	r1, [r4, #4]
 800c13e:	4638      	mov	r0, r7
 800c140:	3101      	adds	r1, #1
 800c142:	f7ff ff79 	bl	800c038 <_Balloc>
 800c146:	4680      	mov	r8, r0
 800c148:	b928      	cbnz	r0, 800c156 <__multadd+0x5a>
 800c14a:	4602      	mov	r2, r0
 800c14c:	4b0c      	ldr	r3, [pc, #48]	@ (800c180 <__multadd+0x84>)
 800c14e:	480d      	ldr	r0, [pc, #52]	@ (800c184 <__multadd+0x88>)
 800c150:	21ba      	movs	r1, #186	@ 0xba
 800c152:	f000 fe3b 	bl	800cdcc <__assert_func>
 800c156:	6922      	ldr	r2, [r4, #16]
 800c158:	3202      	adds	r2, #2
 800c15a:	f104 010c 	add.w	r1, r4, #12
 800c15e:	0092      	lsls	r2, r2, #2
 800c160:	300c      	adds	r0, #12
 800c162:	f7ff f80c 	bl	800b17e <memcpy>
 800c166:	4621      	mov	r1, r4
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff ffa5 	bl	800c0b8 <_Bfree>
 800c16e:	4644      	mov	r4, r8
 800c170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c174:	3501      	adds	r5, #1
 800c176:	615e      	str	r6, [r3, #20]
 800c178:	6125      	str	r5, [r4, #16]
 800c17a:	4620      	mov	r0, r4
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	0800e470 	.word	0x0800e470
 800c184:	0800e481 	.word	0x0800e481

0800c188 <__hi0bits>:
 800c188:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c18c:	4603      	mov	r3, r0
 800c18e:	bf36      	itet	cc
 800c190:	0403      	lslcc	r3, r0, #16
 800c192:	2000      	movcs	r0, #0
 800c194:	2010      	movcc	r0, #16
 800c196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c19a:	bf3c      	itt	cc
 800c19c:	021b      	lslcc	r3, r3, #8
 800c19e:	3008      	addcc	r0, #8
 800c1a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1a4:	bf3c      	itt	cc
 800c1a6:	011b      	lslcc	r3, r3, #4
 800c1a8:	3004      	addcc	r0, #4
 800c1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ae:	bf3c      	itt	cc
 800c1b0:	009b      	lslcc	r3, r3, #2
 800c1b2:	3002      	addcc	r0, #2
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	db05      	blt.n	800c1c4 <__hi0bits+0x3c>
 800c1b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1bc:	f100 0001 	add.w	r0, r0, #1
 800c1c0:	bf08      	it	eq
 800c1c2:	2020      	moveq	r0, #32
 800c1c4:	4770      	bx	lr

0800c1c6 <__lo0bits>:
 800c1c6:	6803      	ldr	r3, [r0, #0]
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	f013 0007 	ands.w	r0, r3, #7
 800c1ce:	d00b      	beq.n	800c1e8 <__lo0bits+0x22>
 800c1d0:	07d9      	lsls	r1, r3, #31
 800c1d2:	d421      	bmi.n	800c218 <__lo0bits+0x52>
 800c1d4:	0798      	lsls	r0, r3, #30
 800c1d6:	bf49      	itett	mi
 800c1d8:	085b      	lsrmi	r3, r3, #1
 800c1da:	089b      	lsrpl	r3, r3, #2
 800c1dc:	2001      	movmi	r0, #1
 800c1de:	6013      	strmi	r3, [r2, #0]
 800c1e0:	bf5c      	itt	pl
 800c1e2:	6013      	strpl	r3, [r2, #0]
 800c1e4:	2002      	movpl	r0, #2
 800c1e6:	4770      	bx	lr
 800c1e8:	b299      	uxth	r1, r3
 800c1ea:	b909      	cbnz	r1, 800c1f0 <__lo0bits+0x2a>
 800c1ec:	0c1b      	lsrs	r3, r3, #16
 800c1ee:	2010      	movs	r0, #16
 800c1f0:	b2d9      	uxtb	r1, r3
 800c1f2:	b909      	cbnz	r1, 800c1f8 <__lo0bits+0x32>
 800c1f4:	3008      	adds	r0, #8
 800c1f6:	0a1b      	lsrs	r3, r3, #8
 800c1f8:	0719      	lsls	r1, r3, #28
 800c1fa:	bf04      	itt	eq
 800c1fc:	091b      	lsreq	r3, r3, #4
 800c1fe:	3004      	addeq	r0, #4
 800c200:	0799      	lsls	r1, r3, #30
 800c202:	bf04      	itt	eq
 800c204:	089b      	lsreq	r3, r3, #2
 800c206:	3002      	addeq	r0, #2
 800c208:	07d9      	lsls	r1, r3, #31
 800c20a:	d403      	bmi.n	800c214 <__lo0bits+0x4e>
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	f100 0001 	add.w	r0, r0, #1
 800c212:	d003      	beq.n	800c21c <__lo0bits+0x56>
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	4770      	bx	lr
 800c218:	2000      	movs	r0, #0
 800c21a:	4770      	bx	lr
 800c21c:	2020      	movs	r0, #32
 800c21e:	4770      	bx	lr

0800c220 <__i2b>:
 800c220:	b510      	push	{r4, lr}
 800c222:	460c      	mov	r4, r1
 800c224:	2101      	movs	r1, #1
 800c226:	f7ff ff07 	bl	800c038 <_Balloc>
 800c22a:	4602      	mov	r2, r0
 800c22c:	b928      	cbnz	r0, 800c23a <__i2b+0x1a>
 800c22e:	4b05      	ldr	r3, [pc, #20]	@ (800c244 <__i2b+0x24>)
 800c230:	4805      	ldr	r0, [pc, #20]	@ (800c248 <__i2b+0x28>)
 800c232:	f240 1145 	movw	r1, #325	@ 0x145
 800c236:	f000 fdc9 	bl	800cdcc <__assert_func>
 800c23a:	2301      	movs	r3, #1
 800c23c:	6144      	str	r4, [r0, #20]
 800c23e:	6103      	str	r3, [r0, #16]
 800c240:	bd10      	pop	{r4, pc}
 800c242:	bf00      	nop
 800c244:	0800e470 	.word	0x0800e470
 800c248:	0800e481 	.word	0x0800e481

0800c24c <__multiply>:
 800c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	4614      	mov	r4, r2
 800c252:	690a      	ldr	r2, [r1, #16]
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	bfa8      	it	ge
 800c25a:	4623      	movge	r3, r4
 800c25c:	460f      	mov	r7, r1
 800c25e:	bfa4      	itt	ge
 800c260:	460c      	movge	r4, r1
 800c262:	461f      	movge	r7, r3
 800c264:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c268:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c26c:	68a3      	ldr	r3, [r4, #8]
 800c26e:	6861      	ldr	r1, [r4, #4]
 800c270:	eb0a 0609 	add.w	r6, sl, r9
 800c274:	42b3      	cmp	r3, r6
 800c276:	b085      	sub	sp, #20
 800c278:	bfb8      	it	lt
 800c27a:	3101      	addlt	r1, #1
 800c27c:	f7ff fedc 	bl	800c038 <_Balloc>
 800c280:	b930      	cbnz	r0, 800c290 <__multiply+0x44>
 800c282:	4602      	mov	r2, r0
 800c284:	4b44      	ldr	r3, [pc, #272]	@ (800c398 <__multiply+0x14c>)
 800c286:	4845      	ldr	r0, [pc, #276]	@ (800c39c <__multiply+0x150>)
 800c288:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c28c:	f000 fd9e 	bl	800cdcc <__assert_func>
 800c290:	f100 0514 	add.w	r5, r0, #20
 800c294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c298:	462b      	mov	r3, r5
 800c29a:	2200      	movs	r2, #0
 800c29c:	4543      	cmp	r3, r8
 800c29e:	d321      	bcc.n	800c2e4 <__multiply+0x98>
 800c2a0:	f107 0114 	add.w	r1, r7, #20
 800c2a4:	f104 0214 	add.w	r2, r4, #20
 800c2a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c2ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c2b0:	9302      	str	r3, [sp, #8]
 800c2b2:	1b13      	subs	r3, r2, r4
 800c2b4:	3b15      	subs	r3, #21
 800c2b6:	f023 0303 	bic.w	r3, r3, #3
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	f104 0715 	add.w	r7, r4, #21
 800c2c0:	42ba      	cmp	r2, r7
 800c2c2:	bf38      	it	cc
 800c2c4:	2304      	movcc	r3, #4
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	9b02      	ldr	r3, [sp, #8]
 800c2ca:	9103      	str	r1, [sp, #12]
 800c2cc:	428b      	cmp	r3, r1
 800c2ce:	d80c      	bhi.n	800c2ea <__multiply+0x9e>
 800c2d0:	2e00      	cmp	r6, #0
 800c2d2:	dd03      	ble.n	800c2dc <__multiply+0x90>
 800c2d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d05b      	beq.n	800c394 <__multiply+0x148>
 800c2dc:	6106      	str	r6, [r0, #16]
 800c2de:	b005      	add	sp, #20
 800c2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	f843 2b04 	str.w	r2, [r3], #4
 800c2e8:	e7d8      	b.n	800c29c <__multiply+0x50>
 800c2ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2ee:	f1ba 0f00 	cmp.w	sl, #0
 800c2f2:	d024      	beq.n	800c33e <__multiply+0xf2>
 800c2f4:	f104 0e14 	add.w	lr, r4, #20
 800c2f8:	46a9      	mov	r9, r5
 800c2fa:	f04f 0c00 	mov.w	ip, #0
 800c2fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c302:	f8d9 3000 	ldr.w	r3, [r9]
 800c306:	fa1f fb87 	uxth.w	fp, r7
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c310:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c314:	f8d9 7000 	ldr.w	r7, [r9]
 800c318:	4463      	add	r3, ip
 800c31a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c31e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c322:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c326:	b29b      	uxth	r3, r3
 800c328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c32c:	4572      	cmp	r2, lr
 800c32e:	f849 3b04 	str.w	r3, [r9], #4
 800c332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c336:	d8e2      	bhi.n	800c2fe <__multiply+0xb2>
 800c338:	9b01      	ldr	r3, [sp, #4]
 800c33a:	f845 c003 	str.w	ip, [r5, r3]
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c344:	3104      	adds	r1, #4
 800c346:	f1b9 0f00 	cmp.w	r9, #0
 800c34a:	d021      	beq.n	800c390 <__multiply+0x144>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	f104 0c14 	add.w	ip, r4, #20
 800c352:	46ae      	mov	lr, r5
 800c354:	f04f 0a00 	mov.w	sl, #0
 800c358:	f8bc b000 	ldrh.w	fp, [ip]
 800c35c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c360:	fb09 770b 	mla	r7, r9, fp, r7
 800c364:	4457      	add	r7, sl
 800c366:	b29b      	uxth	r3, r3
 800c368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c36c:	f84e 3b04 	str.w	r3, [lr], #4
 800c370:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c378:	f8be 3000 	ldrh.w	r3, [lr]
 800c37c:	fb09 330a 	mla	r3, r9, sl, r3
 800c380:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c384:	4562      	cmp	r2, ip
 800c386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c38a:	d8e5      	bhi.n	800c358 <__multiply+0x10c>
 800c38c:	9f01      	ldr	r7, [sp, #4]
 800c38e:	51eb      	str	r3, [r5, r7]
 800c390:	3504      	adds	r5, #4
 800c392:	e799      	b.n	800c2c8 <__multiply+0x7c>
 800c394:	3e01      	subs	r6, #1
 800c396:	e79b      	b.n	800c2d0 <__multiply+0x84>
 800c398:	0800e470 	.word	0x0800e470
 800c39c:	0800e481 	.word	0x0800e481

0800c3a0 <__pow5mult>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	4615      	mov	r5, r2
 800c3a6:	f012 0203 	ands.w	r2, r2, #3
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	d007      	beq.n	800c3c0 <__pow5mult+0x20>
 800c3b0:	4c25      	ldr	r4, [pc, #148]	@ (800c448 <__pow5mult+0xa8>)
 800c3b2:	3a01      	subs	r2, #1
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ba:	f7ff fe9f 	bl	800c0fc <__multadd>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	10ad      	asrs	r5, r5, #2
 800c3c2:	d03d      	beq.n	800c440 <__pow5mult+0xa0>
 800c3c4:	69fc      	ldr	r4, [r7, #28]
 800c3c6:	b97c      	cbnz	r4, 800c3e8 <__pow5mult+0x48>
 800c3c8:	2010      	movs	r0, #16
 800c3ca:	f7ff fd7f 	bl	800becc <malloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	61f8      	str	r0, [r7, #28]
 800c3d2:	b928      	cbnz	r0, 800c3e0 <__pow5mult+0x40>
 800c3d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c44c <__pow5mult+0xac>)
 800c3d6:	481e      	ldr	r0, [pc, #120]	@ (800c450 <__pow5mult+0xb0>)
 800c3d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3dc:	f000 fcf6 	bl	800cdcc <__assert_func>
 800c3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3e4:	6004      	str	r4, [r0, #0]
 800c3e6:	60c4      	str	r4, [r0, #12]
 800c3e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3f0:	b94c      	cbnz	r4, 800c406 <__pow5mult+0x66>
 800c3f2:	f240 2171 	movw	r1, #625	@ 0x271
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f7ff ff12 	bl	800c220 <__i2b>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c402:	4604      	mov	r4, r0
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	f04f 0900 	mov.w	r9, #0
 800c40a:	07eb      	lsls	r3, r5, #31
 800c40c:	d50a      	bpl.n	800c424 <__pow5mult+0x84>
 800c40e:	4631      	mov	r1, r6
 800c410:	4622      	mov	r2, r4
 800c412:	4638      	mov	r0, r7
 800c414:	f7ff ff1a 	bl	800c24c <__multiply>
 800c418:	4631      	mov	r1, r6
 800c41a:	4680      	mov	r8, r0
 800c41c:	4638      	mov	r0, r7
 800c41e:	f7ff fe4b 	bl	800c0b8 <_Bfree>
 800c422:	4646      	mov	r6, r8
 800c424:	106d      	asrs	r5, r5, #1
 800c426:	d00b      	beq.n	800c440 <__pow5mult+0xa0>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	b938      	cbnz	r0, 800c43c <__pow5mult+0x9c>
 800c42c:	4622      	mov	r2, r4
 800c42e:	4621      	mov	r1, r4
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ff0b 	bl	800c24c <__multiply>
 800c436:	6020      	str	r0, [r4, #0]
 800c438:	f8c0 9000 	str.w	r9, [r0]
 800c43c:	4604      	mov	r4, r0
 800c43e:	e7e4      	b.n	800c40a <__pow5mult+0x6a>
 800c440:	4630      	mov	r0, r6
 800c442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c446:	bf00      	nop
 800c448:	0800e4dc 	.word	0x0800e4dc
 800c44c:	0800e401 	.word	0x0800e401
 800c450:	0800e481 	.word	0x0800e481

0800c454 <__lshift>:
 800c454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c458:	460c      	mov	r4, r1
 800c45a:	6849      	ldr	r1, [r1, #4]
 800c45c:	6923      	ldr	r3, [r4, #16]
 800c45e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	4607      	mov	r7, r0
 800c466:	4691      	mov	r9, r2
 800c468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c46c:	f108 0601 	add.w	r6, r8, #1
 800c470:	42b3      	cmp	r3, r6
 800c472:	db0b      	blt.n	800c48c <__lshift+0x38>
 800c474:	4638      	mov	r0, r7
 800c476:	f7ff fddf 	bl	800c038 <_Balloc>
 800c47a:	4605      	mov	r5, r0
 800c47c:	b948      	cbnz	r0, 800c492 <__lshift+0x3e>
 800c47e:	4602      	mov	r2, r0
 800c480:	4b28      	ldr	r3, [pc, #160]	@ (800c524 <__lshift+0xd0>)
 800c482:	4829      	ldr	r0, [pc, #164]	@ (800c528 <__lshift+0xd4>)
 800c484:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c488:	f000 fca0 	bl	800cdcc <__assert_func>
 800c48c:	3101      	adds	r1, #1
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	e7ee      	b.n	800c470 <__lshift+0x1c>
 800c492:	2300      	movs	r3, #0
 800c494:	f100 0114 	add.w	r1, r0, #20
 800c498:	f100 0210 	add.w	r2, r0, #16
 800c49c:	4618      	mov	r0, r3
 800c49e:	4553      	cmp	r3, sl
 800c4a0:	db33      	blt.n	800c50a <__lshift+0xb6>
 800c4a2:	6920      	ldr	r0, [r4, #16]
 800c4a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4a8:	f104 0314 	add.w	r3, r4, #20
 800c4ac:	f019 091f 	ands.w	r9, r9, #31
 800c4b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4b8:	d02b      	beq.n	800c512 <__lshift+0xbe>
 800c4ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c4be:	468a      	mov	sl, r1
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c4c8:	4310      	orrs	r0, r2
 800c4ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d2:	459c      	cmp	ip, r3
 800c4d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4d8:	d8f3      	bhi.n	800c4c2 <__lshift+0x6e>
 800c4da:	ebac 0304 	sub.w	r3, ip, r4
 800c4de:	3b15      	subs	r3, #21
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	f104 0015 	add.w	r0, r4, #21
 800c4ea:	4584      	cmp	ip, r0
 800c4ec:	bf38      	it	cc
 800c4ee:	2304      	movcc	r3, #4
 800c4f0:	50ca      	str	r2, [r1, r3]
 800c4f2:	b10a      	cbz	r2, 800c4f8 <__lshift+0xa4>
 800c4f4:	f108 0602 	add.w	r6, r8, #2
 800c4f8:	3e01      	subs	r6, #1
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	612e      	str	r6, [r5, #16]
 800c4fe:	4621      	mov	r1, r4
 800c500:	f7ff fdda 	bl	800c0b8 <_Bfree>
 800c504:	4628      	mov	r0, r5
 800c506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c50e:	3301      	adds	r3, #1
 800c510:	e7c5      	b.n	800c49e <__lshift+0x4a>
 800c512:	3904      	subs	r1, #4
 800c514:	f853 2b04 	ldr.w	r2, [r3], #4
 800c518:	f841 2f04 	str.w	r2, [r1, #4]!
 800c51c:	459c      	cmp	ip, r3
 800c51e:	d8f9      	bhi.n	800c514 <__lshift+0xc0>
 800c520:	e7ea      	b.n	800c4f8 <__lshift+0xa4>
 800c522:	bf00      	nop
 800c524:	0800e470 	.word	0x0800e470
 800c528:	0800e481 	.word	0x0800e481

0800c52c <__mcmp>:
 800c52c:	690a      	ldr	r2, [r1, #16]
 800c52e:	4603      	mov	r3, r0
 800c530:	6900      	ldr	r0, [r0, #16]
 800c532:	1a80      	subs	r0, r0, r2
 800c534:	b530      	push	{r4, r5, lr}
 800c536:	d10e      	bne.n	800c556 <__mcmp+0x2a>
 800c538:	3314      	adds	r3, #20
 800c53a:	3114      	adds	r1, #20
 800c53c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c540:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c544:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c548:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c54c:	4295      	cmp	r5, r2
 800c54e:	d003      	beq.n	800c558 <__mcmp+0x2c>
 800c550:	d205      	bcs.n	800c55e <__mcmp+0x32>
 800c552:	f04f 30ff 	mov.w	r0, #4294967295
 800c556:	bd30      	pop	{r4, r5, pc}
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d3f3      	bcc.n	800c544 <__mcmp+0x18>
 800c55c:	e7fb      	b.n	800c556 <__mcmp+0x2a>
 800c55e:	2001      	movs	r0, #1
 800c560:	e7f9      	b.n	800c556 <__mcmp+0x2a>
	...

0800c564 <__mdiff>:
 800c564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	4689      	mov	r9, r1
 800c56a:	4606      	mov	r6, r0
 800c56c:	4611      	mov	r1, r2
 800c56e:	4648      	mov	r0, r9
 800c570:	4614      	mov	r4, r2
 800c572:	f7ff ffdb 	bl	800c52c <__mcmp>
 800c576:	1e05      	subs	r5, r0, #0
 800c578:	d112      	bne.n	800c5a0 <__mdiff+0x3c>
 800c57a:	4629      	mov	r1, r5
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff fd5b 	bl	800c038 <_Balloc>
 800c582:	4602      	mov	r2, r0
 800c584:	b928      	cbnz	r0, 800c592 <__mdiff+0x2e>
 800c586:	4b3f      	ldr	r3, [pc, #252]	@ (800c684 <__mdiff+0x120>)
 800c588:	f240 2137 	movw	r1, #567	@ 0x237
 800c58c:	483e      	ldr	r0, [pc, #248]	@ (800c688 <__mdiff+0x124>)
 800c58e:	f000 fc1d 	bl	800cdcc <__assert_func>
 800c592:	2301      	movs	r3, #1
 800c594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c598:	4610      	mov	r0, r2
 800c59a:	b003      	add	sp, #12
 800c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	bfbc      	itt	lt
 800c5a2:	464b      	movlt	r3, r9
 800c5a4:	46a1      	movlt	r9, r4
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5ac:	bfba      	itte	lt
 800c5ae:	461c      	movlt	r4, r3
 800c5b0:	2501      	movlt	r5, #1
 800c5b2:	2500      	movge	r5, #0
 800c5b4:	f7ff fd40 	bl	800c038 <_Balloc>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	b918      	cbnz	r0, 800c5c4 <__mdiff+0x60>
 800c5bc:	4b31      	ldr	r3, [pc, #196]	@ (800c684 <__mdiff+0x120>)
 800c5be:	f240 2145 	movw	r1, #581	@ 0x245
 800c5c2:	e7e3      	b.n	800c58c <__mdiff+0x28>
 800c5c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5c8:	6926      	ldr	r6, [r4, #16]
 800c5ca:	60c5      	str	r5, [r0, #12]
 800c5cc:	f109 0310 	add.w	r3, r9, #16
 800c5d0:	f109 0514 	add.w	r5, r9, #20
 800c5d4:	f104 0e14 	add.w	lr, r4, #20
 800c5d8:	f100 0b14 	add.w	fp, r0, #20
 800c5dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	46d9      	mov	r9, fp
 800c5e8:	f04f 0c00 	mov.w	ip, #0
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	fa1f f38a 	uxth.w	r3, sl
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	b283      	uxth	r3, r0
 800c600:	1acb      	subs	r3, r1, r3
 800c602:	0c00      	lsrs	r0, r0, #16
 800c604:	4463      	add	r3, ip
 800c606:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c60a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c60e:	b29b      	uxth	r3, r3
 800c610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c614:	4576      	cmp	r6, lr
 800c616:	f849 3b04 	str.w	r3, [r9], #4
 800c61a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c61e:	d8e5      	bhi.n	800c5ec <__mdiff+0x88>
 800c620:	1b33      	subs	r3, r6, r4
 800c622:	3b15      	subs	r3, #21
 800c624:	f023 0303 	bic.w	r3, r3, #3
 800c628:	3415      	adds	r4, #21
 800c62a:	3304      	adds	r3, #4
 800c62c:	42a6      	cmp	r6, r4
 800c62e:	bf38      	it	cc
 800c630:	2304      	movcc	r3, #4
 800c632:	441d      	add	r5, r3
 800c634:	445b      	add	r3, fp
 800c636:	461e      	mov	r6, r3
 800c638:	462c      	mov	r4, r5
 800c63a:	4544      	cmp	r4, r8
 800c63c:	d30e      	bcc.n	800c65c <__mdiff+0xf8>
 800c63e:	f108 0103 	add.w	r1, r8, #3
 800c642:	1b49      	subs	r1, r1, r5
 800c644:	f021 0103 	bic.w	r1, r1, #3
 800c648:	3d03      	subs	r5, #3
 800c64a:	45a8      	cmp	r8, r5
 800c64c:	bf38      	it	cc
 800c64e:	2100      	movcc	r1, #0
 800c650:	440b      	add	r3, r1
 800c652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c656:	b191      	cbz	r1, 800c67e <__mdiff+0x11a>
 800c658:	6117      	str	r7, [r2, #16]
 800c65a:	e79d      	b.n	800c598 <__mdiff+0x34>
 800c65c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c660:	46e6      	mov	lr, ip
 800c662:	0c08      	lsrs	r0, r1, #16
 800c664:	fa1c fc81 	uxtah	ip, ip, r1
 800c668:	4471      	add	r1, lr
 800c66a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c66e:	b289      	uxth	r1, r1
 800c670:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c674:	f846 1b04 	str.w	r1, [r6], #4
 800c678:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c67c:	e7dd      	b.n	800c63a <__mdiff+0xd6>
 800c67e:	3f01      	subs	r7, #1
 800c680:	e7e7      	b.n	800c652 <__mdiff+0xee>
 800c682:	bf00      	nop
 800c684:	0800e470 	.word	0x0800e470
 800c688:	0800e481 	.word	0x0800e481

0800c68c <__d2b>:
 800c68c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c690:	460f      	mov	r7, r1
 800c692:	2101      	movs	r1, #1
 800c694:	ec59 8b10 	vmov	r8, r9, d0
 800c698:	4616      	mov	r6, r2
 800c69a:	f7ff fccd 	bl	800c038 <_Balloc>
 800c69e:	4604      	mov	r4, r0
 800c6a0:	b930      	cbnz	r0, 800c6b0 <__d2b+0x24>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4b23      	ldr	r3, [pc, #140]	@ (800c734 <__d2b+0xa8>)
 800c6a6:	4824      	ldr	r0, [pc, #144]	@ (800c738 <__d2b+0xac>)
 800c6a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6ac:	f000 fb8e 	bl	800cdcc <__assert_func>
 800c6b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6b8:	b10d      	cbz	r5, 800c6be <__d2b+0x32>
 800c6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	f1b8 0300 	subs.w	r3, r8, #0
 800c6c4:	d023      	beq.n	800c70e <__d2b+0x82>
 800c6c6:	4668      	mov	r0, sp
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	f7ff fd7c 	bl	800c1c6 <__lo0bits>
 800c6ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6d2:	b1d0      	cbz	r0, 800c70a <__d2b+0x7e>
 800c6d4:	f1c0 0320 	rsb	r3, r0, #32
 800c6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6dc:	430b      	orrs	r3, r1
 800c6de:	40c2      	lsrs	r2, r0
 800c6e0:	6163      	str	r3, [r4, #20]
 800c6e2:	9201      	str	r2, [sp, #4]
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	61a3      	str	r3, [r4, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2201      	moveq	r2, #1
 800c6ee:	2202      	movne	r2, #2
 800c6f0:	6122      	str	r2, [r4, #16]
 800c6f2:	b1a5      	cbz	r5, 800c71e <__d2b+0x92>
 800c6f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6f8:	4405      	add	r5, r0
 800c6fa:	603d      	str	r5, [r7, #0]
 800c6fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c700:	6030      	str	r0, [r6, #0]
 800c702:	4620      	mov	r0, r4
 800c704:	b003      	add	sp, #12
 800c706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c70a:	6161      	str	r1, [r4, #20]
 800c70c:	e7ea      	b.n	800c6e4 <__d2b+0x58>
 800c70e:	a801      	add	r0, sp, #4
 800c710:	f7ff fd59 	bl	800c1c6 <__lo0bits>
 800c714:	9b01      	ldr	r3, [sp, #4]
 800c716:	6163      	str	r3, [r4, #20]
 800c718:	3020      	adds	r0, #32
 800c71a:	2201      	movs	r2, #1
 800c71c:	e7e8      	b.n	800c6f0 <__d2b+0x64>
 800c71e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c722:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c726:	6038      	str	r0, [r7, #0]
 800c728:	6918      	ldr	r0, [r3, #16]
 800c72a:	f7ff fd2d 	bl	800c188 <__hi0bits>
 800c72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c732:	e7e5      	b.n	800c700 <__d2b+0x74>
 800c734:	0800e470 	.word	0x0800e470
 800c738:	0800e481 	.word	0x0800e481

0800c73c <__ssputs_r>:
 800c73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c740:	688e      	ldr	r6, [r1, #8]
 800c742:	461f      	mov	r7, r3
 800c744:	42be      	cmp	r6, r7
 800c746:	680b      	ldr	r3, [r1, #0]
 800c748:	4682      	mov	sl, r0
 800c74a:	460c      	mov	r4, r1
 800c74c:	4690      	mov	r8, r2
 800c74e:	d82d      	bhi.n	800c7ac <__ssputs_r+0x70>
 800c750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c758:	d026      	beq.n	800c7a8 <__ssputs_r+0x6c>
 800c75a:	6965      	ldr	r5, [r4, #20]
 800c75c:	6909      	ldr	r1, [r1, #16]
 800c75e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c762:	eba3 0901 	sub.w	r9, r3, r1
 800c766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c76a:	1c7b      	adds	r3, r7, #1
 800c76c:	444b      	add	r3, r9
 800c76e:	106d      	asrs	r5, r5, #1
 800c770:	429d      	cmp	r5, r3
 800c772:	bf38      	it	cc
 800c774:	461d      	movcc	r5, r3
 800c776:	0553      	lsls	r3, r2, #21
 800c778:	d527      	bpl.n	800c7ca <__ssputs_r+0x8e>
 800c77a:	4629      	mov	r1, r5
 800c77c:	f7ff fbd0 	bl	800bf20 <_malloc_r>
 800c780:	4606      	mov	r6, r0
 800c782:	b360      	cbz	r0, 800c7de <__ssputs_r+0xa2>
 800c784:	6921      	ldr	r1, [r4, #16]
 800c786:	464a      	mov	r2, r9
 800c788:	f7fe fcf9 	bl	800b17e <memcpy>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	6126      	str	r6, [r4, #16]
 800c79a:	6165      	str	r5, [r4, #20]
 800c79c:	444e      	add	r6, r9
 800c79e:	eba5 0509 	sub.w	r5, r5, r9
 800c7a2:	6026      	str	r6, [r4, #0]
 800c7a4:	60a5      	str	r5, [r4, #8]
 800c7a6:	463e      	mov	r6, r7
 800c7a8:	42be      	cmp	r6, r7
 800c7aa:	d900      	bls.n	800c7ae <__ssputs_r+0x72>
 800c7ac:	463e      	mov	r6, r7
 800c7ae:	6820      	ldr	r0, [r4, #0]
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4641      	mov	r1, r8
 800c7b4:	f000 fabe 	bl	800cd34 <memmove>
 800c7b8:	68a3      	ldr	r3, [r4, #8]
 800c7ba:	1b9b      	subs	r3, r3, r6
 800c7bc:	60a3      	str	r3, [r4, #8]
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	4433      	add	r3, r6
 800c7c2:	6023      	str	r3, [r4, #0]
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	f000 fb42 	bl	800ce54 <_realloc_r>
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d1e0      	bne.n	800c798 <__ssputs_r+0x5c>
 800c7d6:	6921      	ldr	r1, [r4, #16]
 800c7d8:	4650      	mov	r0, sl
 800c7da:	f7ff fb2d 	bl	800be38 <_free_r>
 800c7de:	230c      	movs	r3, #12
 800c7e0:	f8ca 3000 	str.w	r3, [sl]
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7ea:	81a3      	strh	r3, [r4, #12]
 800c7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f0:	e7e9      	b.n	800c7c6 <__ssputs_r+0x8a>
	...

0800c7f4 <_svfiprintf_r>:
 800c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f8:	4698      	mov	r8, r3
 800c7fa:	898b      	ldrh	r3, [r1, #12]
 800c7fc:	061b      	lsls	r3, r3, #24
 800c7fe:	b09d      	sub	sp, #116	@ 0x74
 800c800:	4607      	mov	r7, r0
 800c802:	460d      	mov	r5, r1
 800c804:	4614      	mov	r4, r2
 800c806:	d510      	bpl.n	800c82a <_svfiprintf_r+0x36>
 800c808:	690b      	ldr	r3, [r1, #16]
 800c80a:	b973      	cbnz	r3, 800c82a <_svfiprintf_r+0x36>
 800c80c:	2140      	movs	r1, #64	@ 0x40
 800c80e:	f7ff fb87 	bl	800bf20 <_malloc_r>
 800c812:	6028      	str	r0, [r5, #0]
 800c814:	6128      	str	r0, [r5, #16]
 800c816:	b930      	cbnz	r0, 800c826 <_svfiprintf_r+0x32>
 800c818:	230c      	movs	r3, #12
 800c81a:	603b      	str	r3, [r7, #0]
 800c81c:	f04f 30ff 	mov.w	r0, #4294967295
 800c820:	b01d      	add	sp, #116	@ 0x74
 800c822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c826:	2340      	movs	r3, #64	@ 0x40
 800c828:	616b      	str	r3, [r5, #20]
 800c82a:	2300      	movs	r3, #0
 800c82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c82e:	2320      	movs	r3, #32
 800c830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c834:	f8cd 800c 	str.w	r8, [sp, #12]
 800c838:	2330      	movs	r3, #48	@ 0x30
 800c83a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9d8 <_svfiprintf_r+0x1e4>
 800c83e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c842:	f04f 0901 	mov.w	r9, #1
 800c846:	4623      	mov	r3, r4
 800c848:	469a      	mov	sl, r3
 800c84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c84e:	b10a      	cbz	r2, 800c854 <_svfiprintf_r+0x60>
 800c850:	2a25      	cmp	r2, #37	@ 0x25
 800c852:	d1f9      	bne.n	800c848 <_svfiprintf_r+0x54>
 800c854:	ebba 0b04 	subs.w	fp, sl, r4
 800c858:	d00b      	beq.n	800c872 <_svfiprintf_r+0x7e>
 800c85a:	465b      	mov	r3, fp
 800c85c:	4622      	mov	r2, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	4638      	mov	r0, r7
 800c862:	f7ff ff6b 	bl	800c73c <__ssputs_r>
 800c866:	3001      	adds	r0, #1
 800c868:	f000 80a7 	beq.w	800c9ba <_svfiprintf_r+0x1c6>
 800c86c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c86e:	445a      	add	r2, fp
 800c870:	9209      	str	r2, [sp, #36]	@ 0x24
 800c872:	f89a 3000 	ldrb.w	r3, [sl]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 809f 	beq.w	800c9ba <_svfiprintf_r+0x1c6>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f04f 32ff 	mov.w	r2, #4294967295
 800c882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c886:	f10a 0a01 	add.w	sl, sl, #1
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	9307      	str	r3, [sp, #28]
 800c88e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c892:	931a      	str	r3, [sp, #104]	@ 0x68
 800c894:	4654      	mov	r4, sl
 800c896:	2205      	movs	r2, #5
 800c898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89c:	484e      	ldr	r0, [pc, #312]	@ (800c9d8 <_svfiprintf_r+0x1e4>)
 800c89e:	f7f3 fcb7 	bl	8000210 <memchr>
 800c8a2:	9a04      	ldr	r2, [sp, #16]
 800c8a4:	b9d8      	cbnz	r0, 800c8de <_svfiprintf_r+0xea>
 800c8a6:	06d0      	lsls	r0, r2, #27
 800c8a8:	bf44      	itt	mi
 800c8aa:	2320      	movmi	r3, #32
 800c8ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8b0:	0711      	lsls	r1, r2, #28
 800c8b2:	bf44      	itt	mi
 800c8b4:	232b      	movmi	r3, #43	@ 0x2b
 800c8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c8be:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8c0:	d015      	beq.n	800c8ee <_svfiprintf_r+0xfa>
 800c8c2:	9a07      	ldr	r2, [sp, #28]
 800c8c4:	4654      	mov	r4, sl
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	f04f 0c0a 	mov.w	ip, #10
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d2:	3b30      	subs	r3, #48	@ 0x30
 800c8d4:	2b09      	cmp	r3, #9
 800c8d6:	d94b      	bls.n	800c970 <_svfiprintf_r+0x17c>
 800c8d8:	b1b0      	cbz	r0, 800c908 <_svfiprintf_r+0x114>
 800c8da:	9207      	str	r2, [sp, #28]
 800c8dc:	e014      	b.n	800c908 <_svfiprintf_r+0x114>
 800c8de:	eba0 0308 	sub.w	r3, r0, r8
 800c8e2:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	46a2      	mov	sl, r4
 800c8ec:	e7d2      	b.n	800c894 <_svfiprintf_r+0xa0>
 800c8ee:	9b03      	ldr	r3, [sp, #12]
 800c8f0:	1d19      	adds	r1, r3, #4
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	9103      	str	r1, [sp, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfbb      	ittet	lt
 800c8fa:	425b      	neglt	r3, r3
 800c8fc:	f042 0202 	orrlt.w	r2, r2, #2
 800c900:	9307      	strge	r3, [sp, #28]
 800c902:	9307      	strlt	r3, [sp, #28]
 800c904:	bfb8      	it	lt
 800c906:	9204      	strlt	r2, [sp, #16]
 800c908:	7823      	ldrb	r3, [r4, #0]
 800c90a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c90c:	d10a      	bne.n	800c924 <_svfiprintf_r+0x130>
 800c90e:	7863      	ldrb	r3, [r4, #1]
 800c910:	2b2a      	cmp	r3, #42	@ 0x2a
 800c912:	d132      	bne.n	800c97a <_svfiprintf_r+0x186>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	9203      	str	r2, [sp, #12]
 800c91c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c920:	3402      	adds	r4, #2
 800c922:	9305      	str	r3, [sp, #20]
 800c924:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c9e8 <_svfiprintf_r+0x1f4>
 800c928:	7821      	ldrb	r1, [r4, #0]
 800c92a:	2203      	movs	r2, #3
 800c92c:	4650      	mov	r0, sl
 800c92e:	f7f3 fc6f 	bl	8000210 <memchr>
 800c932:	b138      	cbz	r0, 800c944 <_svfiprintf_r+0x150>
 800c934:	9b04      	ldr	r3, [sp, #16]
 800c936:	eba0 000a 	sub.w	r0, r0, sl
 800c93a:	2240      	movs	r2, #64	@ 0x40
 800c93c:	4082      	lsls	r2, r0
 800c93e:	4313      	orrs	r3, r2
 800c940:	3401      	adds	r4, #1
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c948:	4824      	ldr	r0, [pc, #144]	@ (800c9dc <_svfiprintf_r+0x1e8>)
 800c94a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c94e:	2206      	movs	r2, #6
 800c950:	f7f3 fc5e 	bl	8000210 <memchr>
 800c954:	2800      	cmp	r0, #0
 800c956:	d036      	beq.n	800c9c6 <_svfiprintf_r+0x1d2>
 800c958:	4b21      	ldr	r3, [pc, #132]	@ (800c9e0 <_svfiprintf_r+0x1ec>)
 800c95a:	bb1b      	cbnz	r3, 800c9a4 <_svfiprintf_r+0x1b0>
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	3307      	adds	r3, #7
 800c960:	f023 0307 	bic.w	r3, r3, #7
 800c964:	3308      	adds	r3, #8
 800c966:	9303      	str	r3, [sp, #12]
 800c968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c96a:	4433      	add	r3, r6
 800c96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c96e:	e76a      	b.n	800c846 <_svfiprintf_r+0x52>
 800c970:	fb0c 3202 	mla	r2, ip, r2, r3
 800c974:	460c      	mov	r4, r1
 800c976:	2001      	movs	r0, #1
 800c978:	e7a8      	b.n	800c8cc <_svfiprintf_r+0xd8>
 800c97a:	2300      	movs	r3, #0
 800c97c:	3401      	adds	r4, #1
 800c97e:	9305      	str	r3, [sp, #20]
 800c980:	4619      	mov	r1, r3
 800c982:	f04f 0c0a 	mov.w	ip, #10
 800c986:	4620      	mov	r0, r4
 800c988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c98c:	3a30      	subs	r2, #48	@ 0x30
 800c98e:	2a09      	cmp	r2, #9
 800c990:	d903      	bls.n	800c99a <_svfiprintf_r+0x1a6>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0c6      	beq.n	800c924 <_svfiprintf_r+0x130>
 800c996:	9105      	str	r1, [sp, #20]
 800c998:	e7c4      	b.n	800c924 <_svfiprintf_r+0x130>
 800c99a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c99e:	4604      	mov	r4, r0
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e7f0      	b.n	800c986 <_svfiprintf_r+0x192>
 800c9a4:	ab03      	add	r3, sp, #12
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e4 <_svfiprintf_r+0x1f0>)
 800c9ac:	a904      	add	r1, sp, #16
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	f7fd fc46 	bl	800a240 <_printf_float>
 800c9b4:	1c42      	adds	r2, r0, #1
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	d1d6      	bne.n	800c968 <_svfiprintf_r+0x174>
 800c9ba:	89ab      	ldrh	r3, [r5, #12]
 800c9bc:	065b      	lsls	r3, r3, #25
 800c9be:	f53f af2d 	bmi.w	800c81c <_svfiprintf_r+0x28>
 800c9c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9c4:	e72c      	b.n	800c820 <_svfiprintf_r+0x2c>
 800c9c6:	ab03      	add	r3, sp, #12
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	462a      	mov	r2, r5
 800c9cc:	4b05      	ldr	r3, [pc, #20]	@ (800c9e4 <_svfiprintf_r+0x1f0>)
 800c9ce:	a904      	add	r1, sp, #16
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7fd fecd 	bl	800a770 <_printf_i>
 800c9d6:	e7ed      	b.n	800c9b4 <_svfiprintf_r+0x1c0>
 800c9d8:	0800e5d8 	.word	0x0800e5d8
 800c9dc:	0800e5e2 	.word	0x0800e5e2
 800c9e0:	0800a241 	.word	0x0800a241
 800c9e4:	0800c73d 	.word	0x0800c73d
 800c9e8:	0800e5de 	.word	0x0800e5de

0800c9ec <__sfputc_r>:
 800c9ec:	6893      	ldr	r3, [r2, #8]
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	b410      	push	{r4}
 800c9f4:	6093      	str	r3, [r2, #8]
 800c9f6:	da08      	bge.n	800ca0a <__sfputc_r+0x1e>
 800c9f8:	6994      	ldr	r4, [r2, #24]
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	db01      	blt.n	800ca02 <__sfputc_r+0x16>
 800c9fe:	290a      	cmp	r1, #10
 800ca00:	d103      	bne.n	800ca0a <__sfputc_r+0x1e>
 800ca02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca06:	f7fe ba3c 	b.w	800ae82 <__swbuf_r>
 800ca0a:	6813      	ldr	r3, [r2, #0]
 800ca0c:	1c58      	adds	r0, r3, #1
 800ca0e:	6010      	str	r0, [r2, #0]
 800ca10:	7019      	strb	r1, [r3, #0]
 800ca12:	4608      	mov	r0, r1
 800ca14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <__sfputs_r>:
 800ca1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	460f      	mov	r7, r1
 800ca20:	4614      	mov	r4, r2
 800ca22:	18d5      	adds	r5, r2, r3
 800ca24:	42ac      	cmp	r4, r5
 800ca26:	d101      	bne.n	800ca2c <__sfputs_r+0x12>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e007      	b.n	800ca3c <__sfputs_r+0x22>
 800ca2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca30:	463a      	mov	r2, r7
 800ca32:	4630      	mov	r0, r6
 800ca34:	f7ff ffda 	bl	800c9ec <__sfputc_r>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	d1f3      	bne.n	800ca24 <__sfputs_r+0xa>
 800ca3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca40 <_vfiprintf_r>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	460d      	mov	r5, r1
 800ca46:	b09d      	sub	sp, #116	@ 0x74
 800ca48:	4614      	mov	r4, r2
 800ca4a:	4698      	mov	r8, r3
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	b118      	cbz	r0, 800ca58 <_vfiprintf_r+0x18>
 800ca50:	6a03      	ldr	r3, [r0, #32]
 800ca52:	b90b      	cbnz	r3, 800ca58 <_vfiprintf_r+0x18>
 800ca54:	f7fe f8f8 	bl	800ac48 <__sinit>
 800ca58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca5a:	07d9      	lsls	r1, r3, #31
 800ca5c:	d405      	bmi.n	800ca6a <_vfiprintf_r+0x2a>
 800ca5e:	89ab      	ldrh	r3, [r5, #12]
 800ca60:	059a      	lsls	r2, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <_vfiprintf_r+0x2a>
 800ca64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca66:	f7fe fb88 	bl	800b17a <__retarget_lock_acquire_recursive>
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	071b      	lsls	r3, r3, #28
 800ca6e:	d501      	bpl.n	800ca74 <_vfiprintf_r+0x34>
 800ca70:	692b      	ldr	r3, [r5, #16]
 800ca72:	b99b      	cbnz	r3, 800ca9c <_vfiprintf_r+0x5c>
 800ca74:	4629      	mov	r1, r5
 800ca76:	4630      	mov	r0, r6
 800ca78:	f7fe fa42 	bl	800af00 <__swsetup_r>
 800ca7c:	b170      	cbz	r0, 800ca9c <_vfiprintf_r+0x5c>
 800ca7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca80:	07dc      	lsls	r4, r3, #31
 800ca82:	d504      	bpl.n	800ca8e <_vfiprintf_r+0x4e>
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	b01d      	add	sp, #116	@ 0x74
 800ca8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8e:	89ab      	ldrh	r3, [r5, #12]
 800ca90:	0598      	lsls	r0, r3, #22
 800ca92:	d4f7      	bmi.n	800ca84 <_vfiprintf_r+0x44>
 800ca94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca96:	f7fe fb71 	bl	800b17c <__retarget_lock_release_recursive>
 800ca9a:	e7f3      	b.n	800ca84 <_vfiprintf_r+0x44>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800caa0:	2320      	movs	r3, #32
 800caa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800caa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800caaa:	2330      	movs	r3, #48	@ 0x30
 800caac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc5c <_vfiprintf_r+0x21c>
 800cab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cab4:	f04f 0901 	mov.w	r9, #1
 800cab8:	4623      	mov	r3, r4
 800caba:	469a      	mov	sl, r3
 800cabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cac0:	b10a      	cbz	r2, 800cac6 <_vfiprintf_r+0x86>
 800cac2:	2a25      	cmp	r2, #37	@ 0x25
 800cac4:	d1f9      	bne.n	800caba <_vfiprintf_r+0x7a>
 800cac6:	ebba 0b04 	subs.w	fp, sl, r4
 800caca:	d00b      	beq.n	800cae4 <_vfiprintf_r+0xa4>
 800cacc:	465b      	mov	r3, fp
 800cace:	4622      	mov	r2, r4
 800cad0:	4629      	mov	r1, r5
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7ff ffa1 	bl	800ca1a <__sfputs_r>
 800cad8:	3001      	adds	r0, #1
 800cada:	f000 80a7 	beq.w	800cc2c <_vfiprintf_r+0x1ec>
 800cade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae0:	445a      	add	r2, fp
 800cae2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cae4:	f89a 3000 	ldrb.w	r3, [sl]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 809f 	beq.w	800cc2c <_vfiprintf_r+0x1ec>
 800caee:	2300      	movs	r3, #0
 800caf0:	f04f 32ff 	mov.w	r2, #4294967295
 800caf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caf8:	f10a 0a01 	add.w	sl, sl, #1
 800cafc:	9304      	str	r3, [sp, #16]
 800cafe:	9307      	str	r3, [sp, #28]
 800cb00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb04:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb06:	4654      	mov	r4, sl
 800cb08:	2205      	movs	r2, #5
 800cb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb0e:	4853      	ldr	r0, [pc, #332]	@ (800cc5c <_vfiprintf_r+0x21c>)
 800cb10:	f7f3 fb7e 	bl	8000210 <memchr>
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	b9d8      	cbnz	r0, 800cb50 <_vfiprintf_r+0x110>
 800cb18:	06d1      	lsls	r1, r2, #27
 800cb1a:	bf44      	itt	mi
 800cb1c:	2320      	movmi	r3, #32
 800cb1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb22:	0713      	lsls	r3, r2, #28
 800cb24:	bf44      	itt	mi
 800cb26:	232b      	movmi	r3, #43	@ 0x2b
 800cb28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb30:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb32:	d015      	beq.n	800cb60 <_vfiprintf_r+0x120>
 800cb34:	9a07      	ldr	r2, [sp, #28]
 800cb36:	4654      	mov	r4, sl
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f04f 0c0a 	mov.w	ip, #10
 800cb3e:	4621      	mov	r1, r4
 800cb40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb44:	3b30      	subs	r3, #48	@ 0x30
 800cb46:	2b09      	cmp	r3, #9
 800cb48:	d94b      	bls.n	800cbe2 <_vfiprintf_r+0x1a2>
 800cb4a:	b1b0      	cbz	r0, 800cb7a <_vfiprintf_r+0x13a>
 800cb4c:	9207      	str	r2, [sp, #28]
 800cb4e:	e014      	b.n	800cb7a <_vfiprintf_r+0x13a>
 800cb50:	eba0 0308 	sub.w	r3, r0, r8
 800cb54:	fa09 f303 	lsl.w	r3, r9, r3
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	9304      	str	r3, [sp, #16]
 800cb5c:	46a2      	mov	sl, r4
 800cb5e:	e7d2      	b.n	800cb06 <_vfiprintf_r+0xc6>
 800cb60:	9b03      	ldr	r3, [sp, #12]
 800cb62:	1d19      	adds	r1, r3, #4
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	9103      	str	r1, [sp, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	bfbb      	ittet	lt
 800cb6c:	425b      	neglt	r3, r3
 800cb6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb72:	9307      	strge	r3, [sp, #28]
 800cb74:	9307      	strlt	r3, [sp, #28]
 800cb76:	bfb8      	it	lt
 800cb78:	9204      	strlt	r2, [sp, #16]
 800cb7a:	7823      	ldrb	r3, [r4, #0]
 800cb7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb7e:	d10a      	bne.n	800cb96 <_vfiprintf_r+0x156>
 800cb80:	7863      	ldrb	r3, [r4, #1]
 800cb82:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb84:	d132      	bne.n	800cbec <_vfiprintf_r+0x1ac>
 800cb86:	9b03      	ldr	r3, [sp, #12]
 800cb88:	1d1a      	adds	r2, r3, #4
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	9203      	str	r2, [sp, #12]
 800cb8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb92:	3402      	adds	r4, #2
 800cb94:	9305      	str	r3, [sp, #20]
 800cb96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc6c <_vfiprintf_r+0x22c>
 800cb9a:	7821      	ldrb	r1, [r4, #0]
 800cb9c:	2203      	movs	r2, #3
 800cb9e:	4650      	mov	r0, sl
 800cba0:	f7f3 fb36 	bl	8000210 <memchr>
 800cba4:	b138      	cbz	r0, 800cbb6 <_vfiprintf_r+0x176>
 800cba6:	9b04      	ldr	r3, [sp, #16]
 800cba8:	eba0 000a 	sub.w	r0, r0, sl
 800cbac:	2240      	movs	r2, #64	@ 0x40
 800cbae:	4082      	lsls	r2, r0
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	3401      	adds	r4, #1
 800cbb4:	9304      	str	r3, [sp, #16]
 800cbb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbba:	4829      	ldr	r0, [pc, #164]	@ (800cc60 <_vfiprintf_r+0x220>)
 800cbbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbc0:	2206      	movs	r2, #6
 800cbc2:	f7f3 fb25 	bl	8000210 <memchr>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d03f      	beq.n	800cc4a <_vfiprintf_r+0x20a>
 800cbca:	4b26      	ldr	r3, [pc, #152]	@ (800cc64 <_vfiprintf_r+0x224>)
 800cbcc:	bb1b      	cbnz	r3, 800cc16 <_vfiprintf_r+0x1d6>
 800cbce:	9b03      	ldr	r3, [sp, #12]
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	f023 0307 	bic.w	r3, r3, #7
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbdc:	443b      	add	r3, r7
 800cbde:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbe0:	e76a      	b.n	800cab8 <_vfiprintf_r+0x78>
 800cbe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	2001      	movs	r0, #1
 800cbea:	e7a8      	b.n	800cb3e <_vfiprintf_r+0xfe>
 800cbec:	2300      	movs	r3, #0
 800cbee:	3401      	adds	r4, #1
 800cbf0:	9305      	str	r3, [sp, #20]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f04f 0c0a 	mov.w	ip, #10
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbfe:	3a30      	subs	r2, #48	@ 0x30
 800cc00:	2a09      	cmp	r2, #9
 800cc02:	d903      	bls.n	800cc0c <_vfiprintf_r+0x1cc>
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0c6      	beq.n	800cb96 <_vfiprintf_r+0x156>
 800cc08:	9105      	str	r1, [sp, #20]
 800cc0a:	e7c4      	b.n	800cb96 <_vfiprintf_r+0x156>
 800cc0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc10:	4604      	mov	r4, r0
 800cc12:	2301      	movs	r3, #1
 800cc14:	e7f0      	b.n	800cbf8 <_vfiprintf_r+0x1b8>
 800cc16:	ab03      	add	r3, sp, #12
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	4b12      	ldr	r3, [pc, #72]	@ (800cc68 <_vfiprintf_r+0x228>)
 800cc1e:	a904      	add	r1, sp, #16
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7fd fb0d 	bl	800a240 <_printf_float>
 800cc26:	4607      	mov	r7, r0
 800cc28:	1c78      	adds	r0, r7, #1
 800cc2a:	d1d6      	bne.n	800cbda <_vfiprintf_r+0x19a>
 800cc2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc2e:	07d9      	lsls	r1, r3, #31
 800cc30:	d405      	bmi.n	800cc3e <_vfiprintf_r+0x1fe>
 800cc32:	89ab      	ldrh	r3, [r5, #12]
 800cc34:	059a      	lsls	r2, r3, #22
 800cc36:	d402      	bmi.n	800cc3e <_vfiprintf_r+0x1fe>
 800cc38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc3a:	f7fe fa9f 	bl	800b17c <__retarget_lock_release_recursive>
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	065b      	lsls	r3, r3, #25
 800cc42:	f53f af1f 	bmi.w	800ca84 <_vfiprintf_r+0x44>
 800cc46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc48:	e71e      	b.n	800ca88 <_vfiprintf_r+0x48>
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4b05      	ldr	r3, [pc, #20]	@ (800cc68 <_vfiprintf_r+0x228>)
 800cc52:	a904      	add	r1, sp, #16
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7fd fd8b 	bl	800a770 <_printf_i>
 800cc5a:	e7e4      	b.n	800cc26 <_vfiprintf_r+0x1e6>
 800cc5c:	0800e5d8 	.word	0x0800e5d8
 800cc60:	0800e5e2 	.word	0x0800e5e2
 800cc64:	0800a241 	.word	0x0800a241
 800cc68:	0800ca1b 	.word	0x0800ca1b
 800cc6c:	0800e5de 	.word	0x0800e5de

0800cc70 <__swhatbuf_r>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	460c      	mov	r4, r1
 800cc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	b096      	sub	sp, #88	@ 0x58
 800cc7c:	4615      	mov	r5, r2
 800cc7e:	461e      	mov	r6, r3
 800cc80:	da0d      	bge.n	800cc9e <__swhatbuf_r+0x2e>
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc88:	f04f 0100 	mov.w	r1, #0
 800cc8c:	bf14      	ite	ne
 800cc8e:	2340      	movne	r3, #64	@ 0x40
 800cc90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc94:	2000      	movs	r0, #0
 800cc96:	6031      	str	r1, [r6, #0]
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	b016      	add	sp, #88	@ 0x58
 800cc9c:	bd70      	pop	{r4, r5, r6, pc}
 800cc9e:	466a      	mov	r2, sp
 800cca0:	f000 f862 	bl	800cd68 <_fstat_r>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	dbec      	blt.n	800cc82 <__swhatbuf_r+0x12>
 800cca8:	9901      	ldr	r1, [sp, #4]
 800ccaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ccae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ccb2:	4259      	negs	r1, r3
 800ccb4:	4159      	adcs	r1, r3
 800ccb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccba:	e7eb      	b.n	800cc94 <__swhatbuf_r+0x24>

0800ccbc <__smakebuf_r>:
 800ccbc:	898b      	ldrh	r3, [r1, #12]
 800ccbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc0:	079d      	lsls	r5, r3, #30
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	d507      	bpl.n	800ccd8 <__smakebuf_r+0x1c>
 800ccc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	6123      	str	r3, [r4, #16]
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	6163      	str	r3, [r4, #20]
 800ccd4:	b003      	add	sp, #12
 800ccd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd8:	ab01      	add	r3, sp, #4
 800ccda:	466a      	mov	r2, sp
 800ccdc:	f7ff ffc8 	bl	800cc70 <__swhatbuf_r>
 800cce0:	9f00      	ldr	r7, [sp, #0]
 800cce2:	4605      	mov	r5, r0
 800cce4:	4639      	mov	r1, r7
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7ff f91a 	bl	800bf20 <_malloc_r>
 800ccec:	b948      	cbnz	r0, 800cd02 <__smakebuf_r+0x46>
 800ccee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf2:	059a      	lsls	r2, r3, #22
 800ccf4:	d4ee      	bmi.n	800ccd4 <__smakebuf_r+0x18>
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	f043 0302 	orr.w	r3, r3, #2
 800ccfe:	81a3      	strh	r3, [r4, #12]
 800cd00:	e7e2      	b.n	800ccc8 <__smakebuf_r+0xc>
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	6020      	str	r0, [r4, #0]
 800cd06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	9b01      	ldr	r3, [sp, #4]
 800cd0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd12:	b15b      	cbz	r3, 800cd2c <__smakebuf_r+0x70>
 800cd14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f000 f837 	bl	800cd8c <_isatty_r>
 800cd1e:	b128      	cbz	r0, 800cd2c <__smakebuf_r+0x70>
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f023 0303 	bic.w	r3, r3, #3
 800cd26:	f043 0301 	orr.w	r3, r3, #1
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	431d      	orrs	r5, r3
 800cd30:	81a5      	strh	r5, [r4, #12]
 800cd32:	e7cf      	b.n	800ccd4 <__smakebuf_r+0x18>

0800cd34 <memmove>:
 800cd34:	4288      	cmp	r0, r1
 800cd36:	b510      	push	{r4, lr}
 800cd38:	eb01 0402 	add.w	r4, r1, r2
 800cd3c:	d902      	bls.n	800cd44 <memmove+0x10>
 800cd3e:	4284      	cmp	r4, r0
 800cd40:	4623      	mov	r3, r4
 800cd42:	d807      	bhi.n	800cd54 <memmove+0x20>
 800cd44:	1e43      	subs	r3, r0, #1
 800cd46:	42a1      	cmp	r1, r4
 800cd48:	d008      	beq.n	800cd5c <memmove+0x28>
 800cd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd52:	e7f8      	b.n	800cd46 <memmove+0x12>
 800cd54:	4402      	add	r2, r0
 800cd56:	4601      	mov	r1, r0
 800cd58:	428a      	cmp	r2, r1
 800cd5a:	d100      	bne.n	800cd5e <memmove+0x2a>
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd66:	e7f7      	b.n	800cd58 <memmove+0x24>

0800cd68 <_fstat_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	@ (800cd88 <_fstat_r+0x20>)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	f7f6 fa41 	bl	80031fc <_fstat>
 800cd7a:	1c43      	adds	r3, r0, #1
 800cd7c:	d102      	bne.n	800cd84 <_fstat_r+0x1c>
 800cd7e:	682b      	ldr	r3, [r5, #0]
 800cd80:	b103      	cbz	r3, 800cd84 <_fstat_r+0x1c>
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	bf00      	nop
 800cd88:	20019f74 	.word	0x20019f74

0800cd8c <_isatty_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d06      	ldr	r5, [pc, #24]	@ (800cda8 <_isatty_r+0x1c>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	602b      	str	r3, [r5, #0]
 800cd98:	f7f6 fa40 	bl	800321c <_isatty>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_isatty_r+0x1a>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_isatty_r+0x1a>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20019f74 	.word	0x20019f74

0800cdac <_sbrk_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d06      	ldr	r5, [pc, #24]	@ (800cdc8 <_sbrk_r+0x1c>)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	602b      	str	r3, [r5, #0]
 800cdb8:	f7f6 fa48 	bl	800324c <_sbrk>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_sbrk_r+0x1a>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_sbrk_r+0x1a>
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20019f74 	.word	0x20019f74

0800cdcc <__assert_func>:
 800cdcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdce:	4614      	mov	r4, r2
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4b09      	ldr	r3, [pc, #36]	@ (800cdf8 <__assert_func+0x2c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	68d8      	ldr	r0, [r3, #12]
 800cdda:	b954      	cbnz	r4, 800cdf2 <__assert_func+0x26>
 800cddc:	4b07      	ldr	r3, [pc, #28]	@ (800cdfc <__assert_func+0x30>)
 800cdde:	461c      	mov	r4, r3
 800cde0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cde4:	9100      	str	r1, [sp, #0]
 800cde6:	462b      	mov	r3, r5
 800cde8:	4905      	ldr	r1, [pc, #20]	@ (800ce00 <__assert_func+0x34>)
 800cdea:	f000 f86f 	bl	800cecc <fiprintf>
 800cdee:	f000 f87f 	bl	800cef0 <abort>
 800cdf2:	4b04      	ldr	r3, [pc, #16]	@ (800ce04 <__assert_func+0x38>)
 800cdf4:	e7f4      	b.n	800cde0 <__assert_func+0x14>
 800cdf6:	bf00      	nop
 800cdf8:	20000020 	.word	0x20000020
 800cdfc:	0800e62e 	.word	0x0800e62e
 800ce00:	0800e600 	.word	0x0800e600
 800ce04:	0800e5f3 	.word	0x0800e5f3

0800ce08 <_calloc_r>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	fba1 5402 	umull	r5, r4, r1, r2
 800ce0e:	b93c      	cbnz	r4, 800ce20 <_calloc_r+0x18>
 800ce10:	4629      	mov	r1, r5
 800ce12:	f7ff f885 	bl	800bf20 <_malloc_r>
 800ce16:	4606      	mov	r6, r0
 800ce18:	b928      	cbnz	r0, 800ce26 <_calloc_r+0x1e>
 800ce1a:	2600      	movs	r6, #0
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	220c      	movs	r2, #12
 800ce22:	6002      	str	r2, [r0, #0]
 800ce24:	e7f9      	b.n	800ce1a <_calloc_r+0x12>
 800ce26:	462a      	mov	r2, r5
 800ce28:	4621      	mov	r1, r4
 800ce2a:	f7fe f8bf 	bl	800afac <memset>
 800ce2e:	e7f5      	b.n	800ce1c <_calloc_r+0x14>

0800ce30 <__ascii_mbtowc>:
 800ce30:	b082      	sub	sp, #8
 800ce32:	b901      	cbnz	r1, 800ce36 <__ascii_mbtowc+0x6>
 800ce34:	a901      	add	r1, sp, #4
 800ce36:	b142      	cbz	r2, 800ce4a <__ascii_mbtowc+0x1a>
 800ce38:	b14b      	cbz	r3, 800ce4e <__ascii_mbtowc+0x1e>
 800ce3a:	7813      	ldrb	r3, [r2, #0]
 800ce3c:	600b      	str	r3, [r1, #0]
 800ce3e:	7812      	ldrb	r2, [r2, #0]
 800ce40:	1e10      	subs	r0, r2, #0
 800ce42:	bf18      	it	ne
 800ce44:	2001      	movne	r0, #1
 800ce46:	b002      	add	sp, #8
 800ce48:	4770      	bx	lr
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	e7fb      	b.n	800ce46 <__ascii_mbtowc+0x16>
 800ce4e:	f06f 0001 	mvn.w	r0, #1
 800ce52:	e7f8      	b.n	800ce46 <__ascii_mbtowc+0x16>

0800ce54 <_realloc_r>:
 800ce54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce58:	4680      	mov	r8, r0
 800ce5a:	4615      	mov	r5, r2
 800ce5c:	460c      	mov	r4, r1
 800ce5e:	b921      	cbnz	r1, 800ce6a <_realloc_r+0x16>
 800ce60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	4611      	mov	r1, r2
 800ce66:	f7ff b85b 	b.w	800bf20 <_malloc_r>
 800ce6a:	b92a      	cbnz	r2, 800ce78 <_realloc_r+0x24>
 800ce6c:	f7fe ffe4 	bl	800be38 <_free_r>
 800ce70:	2400      	movs	r4, #0
 800ce72:	4620      	mov	r0, r4
 800ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce78:	f000 f841 	bl	800cefe <_malloc_usable_size_r>
 800ce7c:	4285      	cmp	r5, r0
 800ce7e:	4606      	mov	r6, r0
 800ce80:	d802      	bhi.n	800ce88 <_realloc_r+0x34>
 800ce82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce86:	d8f4      	bhi.n	800ce72 <_realloc_r+0x1e>
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7ff f848 	bl	800bf20 <_malloc_r>
 800ce90:	4607      	mov	r7, r0
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d0ec      	beq.n	800ce70 <_realloc_r+0x1c>
 800ce96:	42b5      	cmp	r5, r6
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	bf28      	it	cs
 800ce9e:	4632      	movcs	r2, r6
 800cea0:	f7fe f96d 	bl	800b17e <memcpy>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4640      	mov	r0, r8
 800cea8:	f7fe ffc6 	bl	800be38 <_free_r>
 800ceac:	463c      	mov	r4, r7
 800ceae:	e7e0      	b.n	800ce72 <_realloc_r+0x1e>

0800ceb0 <__ascii_wctomb>:
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	4608      	mov	r0, r1
 800ceb4:	b141      	cbz	r1, 800cec8 <__ascii_wctomb+0x18>
 800ceb6:	2aff      	cmp	r2, #255	@ 0xff
 800ceb8:	d904      	bls.n	800cec4 <__ascii_wctomb+0x14>
 800ceba:	228a      	movs	r2, #138	@ 0x8a
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	f04f 30ff 	mov.w	r0, #4294967295
 800cec2:	4770      	bx	lr
 800cec4:	700a      	strb	r2, [r1, #0]
 800cec6:	2001      	movs	r0, #1
 800cec8:	4770      	bx	lr
	...

0800cecc <fiprintf>:
 800cecc:	b40e      	push	{r1, r2, r3}
 800cece:	b503      	push	{r0, r1, lr}
 800ced0:	4601      	mov	r1, r0
 800ced2:	ab03      	add	r3, sp, #12
 800ced4:	4805      	ldr	r0, [pc, #20]	@ (800ceec <fiprintf+0x20>)
 800ced6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceda:	6800      	ldr	r0, [r0, #0]
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	f7ff fdaf 	bl	800ca40 <_vfiprintf_r>
 800cee2:	b002      	add	sp, #8
 800cee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee8:	b003      	add	sp, #12
 800ceea:	4770      	bx	lr
 800ceec:	20000020 	.word	0x20000020

0800cef0 <abort>:
 800cef0:	b508      	push	{r3, lr}
 800cef2:	2006      	movs	r0, #6
 800cef4:	f000 f834 	bl	800cf60 <raise>
 800cef8:	2001      	movs	r0, #1
 800cefa:	f7f6 f92f 	bl	800315c <_exit>

0800cefe <_malloc_usable_size_r>:
 800cefe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf02:	1f18      	subs	r0, r3, #4
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfbc      	itt	lt
 800cf08:	580b      	ldrlt	r3, [r1, r0]
 800cf0a:	18c0      	addlt	r0, r0, r3
 800cf0c:	4770      	bx	lr

0800cf0e <_raise_r>:
 800cf0e:	291f      	cmp	r1, #31
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4605      	mov	r5, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	d904      	bls.n	800cf22 <_raise_r+0x14>
 800cf18:	2316      	movs	r3, #22
 800cf1a:	6003      	str	r3, [r0, #0]
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf20:	bd38      	pop	{r3, r4, r5, pc}
 800cf22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf24:	b112      	cbz	r2, 800cf2c <_raise_r+0x1e>
 800cf26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf2a:	b94b      	cbnz	r3, 800cf40 <_raise_r+0x32>
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f000 f831 	bl	800cf94 <_getpid_r>
 800cf32:	4622      	mov	r2, r4
 800cf34:	4601      	mov	r1, r0
 800cf36:	4628      	mov	r0, r5
 800cf38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf3c:	f000 b818 	b.w	800cf70 <_kill_r>
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d00a      	beq.n	800cf5a <_raise_r+0x4c>
 800cf44:	1c59      	adds	r1, r3, #1
 800cf46:	d103      	bne.n	800cf50 <_raise_r+0x42>
 800cf48:	2316      	movs	r3, #22
 800cf4a:	6003      	str	r3, [r0, #0]
 800cf4c:	2001      	movs	r0, #1
 800cf4e:	e7e7      	b.n	800cf20 <_raise_r+0x12>
 800cf50:	2100      	movs	r1, #0
 800cf52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf56:	4620      	mov	r0, r4
 800cf58:	4798      	blx	r3
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	e7e0      	b.n	800cf20 <_raise_r+0x12>
	...

0800cf60 <raise>:
 800cf60:	4b02      	ldr	r3, [pc, #8]	@ (800cf6c <raise+0xc>)
 800cf62:	4601      	mov	r1, r0
 800cf64:	6818      	ldr	r0, [r3, #0]
 800cf66:	f7ff bfd2 	b.w	800cf0e <_raise_r>
 800cf6a:	bf00      	nop
 800cf6c:	20000020 	.word	0x20000020

0800cf70 <_kill_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4d07      	ldr	r5, [pc, #28]	@ (800cf90 <_kill_r+0x20>)
 800cf74:	2300      	movs	r3, #0
 800cf76:	4604      	mov	r4, r0
 800cf78:	4608      	mov	r0, r1
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	602b      	str	r3, [r5, #0]
 800cf7e:	f7f6 f8dd 	bl	800313c <_kill>
 800cf82:	1c43      	adds	r3, r0, #1
 800cf84:	d102      	bne.n	800cf8c <_kill_r+0x1c>
 800cf86:	682b      	ldr	r3, [r5, #0]
 800cf88:	b103      	cbz	r3, 800cf8c <_kill_r+0x1c>
 800cf8a:	6023      	str	r3, [r4, #0]
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
 800cf8e:	bf00      	nop
 800cf90:	20019f74 	.word	0x20019f74

0800cf94 <_getpid_r>:
 800cf94:	f7f6 b8ca 	b.w	800312c <_getpid>

0800cf98 <_init>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	bf00      	nop
 800cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9e:	bc08      	pop	{r3}
 800cfa0:	469e      	mov	lr, r3
 800cfa2:	4770      	bx	lr

0800cfa4 <_fini>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	bf00      	nop
 800cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfaa:	bc08      	pop	{r3}
 800cfac:	469e      	mov	lr, r3
 800cfae:	4770      	bx	lr
